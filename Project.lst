Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/10/14 15:31:30
MASM Templat						     Page 1 - 1


				TITLE MASM Template

				; Zeus cs278 EX
				;Write a program that 

				INCLUDE Irvine32.inc 
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000002			Card STRUCT																																							    ;
				;	Basic class for all all cards suits containing suit and value																										;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000000  00				value byte 0																																						;
 00000001  00				Suit byte 0																																							;
				Card ENDS																																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;


 00000000 00000000			var1 DWORD 0
 00000004 00000000			var2 DWORD 0

 00000008 00 00				cards1 Card <0,0>
 0000000A 00 00				cards2 Card <0,0>
 0000000C 00 00				cards3 Card <0,0>
 0000000E 00 00				cards4 Card <0,0>
 00000010 00 00				cards5 Card <0,0>
 00000012 00 00				cards6 Card <0,0>
 00000014 00 00				cards7 Card <0,0>

 00000016 00 00				cardp1 Card <0,0>
 00000018 00 00				cardp2 Card <0,0>
 0000001A 00 00				cardp3 Card <0,0>
 0000001C 00 00				cardp4 Card <0,0>
 0000001E 00 00				cardp5 Card <0,0>
 00000020 00 00				cardp6 Card <0,0>
 00000022 00 00				cardp7 Card <0,0>

 00000024  00000007 [			StraightS byte 7 dup (0)
	    00
	   ]
 0000002B  00000007 [			StraightP byte 7 dup (0)
	    00
	   ]

 00000032 00000000			isSpadeP DWORD 0
 00000036 00000000			isHeartP DWORD 0
 0000003A 00000000			isClubP	DWORD 0
 0000003E 00000000			isDimondP DWORD 0
 00000042 00000000			isFlushP DWORD 0
 00000046 00000000			isSpadeS DWORD 0
 0000004A 00000000			isHeartS DWORD 0
 0000004E 00000000			isClubS DWORD 0
 00000052 00000000			isDimondS DWORD 0
 00000056 00000000			isFlushS DWORD 0
 0000005A 00000000			isStraightS DWORD 0
 0000005E 00000000			isStraightP DWORD 0

 00000062 00000000			RFp DWORD 0
 00000066 00000000			RFs DWORD 0
 0000006A 00				HighFourS byte 0
 0000006B 00				HighFourP byte 0
 0000006C 00				HighThreeS byte 0
 0000006D 00				HighThreeP byte 0
 0000006E 00				High2PairS byte 0
 0000006F 00				High2PairP byte 0
 00000070 00				Low2PairS byte 0
 00000071 00				Low2PairP byte 0
 00000072 00				PairS byte 0
 00000073 00				PairP byte 0
 00000074 00				HighPairS byte 0
 00000075 00				HighPairP byte 0
 00000076 00				HighSts byte 0
 00000077 00				HighStp byte 0
 00000078 00				HighCards byte 0
 00000079 00				HighCardp byte 0

 0000007A 00000000			PlayerRoyal DWORD 0
 0000007E 00000000			PlayerStraightFlush DWORD 0
 00000082 00000000			PlayerFour DWORD 0
 00000086 00000000			PlayerFull DWORD 0
 0000008A 00000000			PlayerFlush DWORD 0
 0000008E 00000000			PlayerStraight DWORD 0
 00000092 00000000			PlayerThree DWORD 0
 00000096 00000000			PlayerTwoPair DWORD 0
 0000009A 00000000			PlayerOnePair DWORD 0
 0000009E 00000000			PlayerHandValue DWORD 0
 000000A2 00000000			ChipsCall DWORD 0
 000000A6 00000000			ChipsRaise DWORD 0
 000000AA 00000000			SpockBet DWORD 0
 000000AE 00000000			PlayerBet DWORD 0
 000000B2 00000000			FoldS DWORD 0
 000000B6 00000000			FoldP DWORD 0

 000000BA 00000000			SpockRoyal DWORD 0
 000000BE 00000000			SpockStraightFlush DWORD 0
 000000C2 00000000			SpockFour DWORD 0
 000000C6 00000000			SpockFull DWORD 0
 000000CA 00000000			SpockFlush DWORD 0
 000000CE 00000000			SpockStraight DWORD 0
 000000D2 00000000			SpockThree DWORD 0
 000000D6 00000000			SpockTwoPair DWORD 0
 000000DA 00000000			SpockOnePair DWORD 0
 000000DE 00000000			SpockHandValue DWORD 0

 000000E2  00000002 [		tbl1 byte 2 dup (0)
	    00
	   ]
 000000E4  00000002 [		tbl2 byte 2 dup (0)
	    00
	   ]
 000000E6  00000002 [		tbl3 byte 2 dup (0)
	    00
	   ]
 000000E8  00000002 [		tbl4 byte 2 dup (0)
	    00
	   ]
 000000EA  00000002 [		tbl5 byte 2 dup (0)
	    00
	   ]
 000000EC  00000002 [		plr1 byte 2 dup (0)
	    00
	   ]
 000000EE  00000002 [		plr2 byte 2 dup (0)
	    00
	   ]

 000000F0 58 58 00		PromptCardUnknown byte "XX",0
 000000F3 53 70 6F 63 6B	PromptShowSpock byte		"Spock Cards: |X|  |X|",0
	   20 43 61 72 64
	   73 3A 20 7C 58
	   7C 20 20 7C 58
	   7C 00
 00000109 54 61 62 6C 65	PromptShowTable1 byte		"Table Cards: |",0
	   20 43 61 72 64
	   73 3A 20 7C 00
 00000118 7C 20 7C 00		PromptShowTable2 byte       "| |",0
 0000011C 7C 00			PromptShowTable3 byte       "|",0
 0000011E 50 6C 61 79 65	PromptShowPlayer1 byte		"Player Cards: |",0
	   72 20 43 61 72
	   64 73 3A 20 7C
	   00
 0000012E 7C 20 7C 00		PromptShowPlayer2 byte		"| |",0
 00000132 7C 00			PromptShowPlayer3 byte		"|",0
 00000134 53 70 6F 63 6B	PromptShowSpockChips byte	"Spock Chips: ",0
	   20 43 68 69 70
	   73 3A 20 00
 00000142 54 61 62 6C 65	PromptShowTableChips byte	"Table Chips: ",0
	   20 43 68 69 70
	   73 3A 20 00
 00000150 50 6C 61 79 65	PromptShowPlayerChips byte	"Player Chips: ",0
	   72 20 43 68 69
	   70 73 3A 20 00
 0000015F 58 00			PromptSuit byte "X",0



 00000161  00000034 [		Deck byte 52 dup (?)
	    00
	   ]

																					;array of Suits
 00000195  00000002 [		PlayerHand byte 2 dup (?)											;2 Cards for the player
	    00
	   ]
 00000197  00000002 [		SpockHand byte 2 dup (?)											;2 Cards for the AI
	    00
	   ]
 00000199  00000005 [		Table byte 5 dup (?)												;3 Flop cards, 1 Turn card, 1 River card
	    00
	   ]

 0000019E 00000000		DeckMark DWORD ?													;Bookmark for place in Deck
 000001A2 00000000		TableMark DWORD ?													;Bookmark for place in Table

 000001A6 00000000		ChipsPlayer DWORD 0
 000001AA 00000000		ChipsSpock  DWORD 0
 000001AE 00000000		ChipsTable DWORD 0
 000001B2 00000001		BigBlind DWORD 1													;Variable for who is responsible for Big blind, other is responsible for little blind 1/2 big blind bet
 000001B6  00000007 [		FullHandSpock BYTE 7 dup (0)
	    00
	   ]
 000001BD  00000007 [		FullHandPlayer BYTE 7 dup (0)
	    00
	   ]

 000001C4 59 6F 75 20 57	PromptYouWin byte "You Win, your earning are: ", 0
	   69 6E 2C 20 79
	   6F 75 72 20 65
	   61 72 6E 69 6E
	   67 20 61 72 65
	   3A 20 00
 000001E0 59 6F 75 20 4C	PromptYouLose byte "You Lose, you walk away with: ", 0
	   6F 73 65 2C 20
	   79 6F 75 20 77
	   61 6C 6B 20 61
	   77 61 79 20 77
	   69 74 68 3A 20
	   00
 000001FF 57 6F 75 6C 64	PromptPlayAgain byte "Would you like to play again 1 for yes or 0 for no:  ",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 20 31
	   20 66 6F 72 20
	   79 65 73 20 6F
	   72 20 30 20 66
	   6F 72 20 6E 6F
	   3A 20 20 00
 00000235 3F 00			PromptWinImage byte "?",0
 00000237 3F 00			PromptLoseImage byte "?",0
 00000239 3F 00			PromptChipsPlayer byte "?",0
 0000023B 3F 00			PromptChipsSpock byte "?",0
 0000023D 54 68 61 74 20	PromptBadInput byte "That is not a valid choice, please try again",0
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   63 68 6F 69 63
	   65 2C 20 70 6C
	   65 61 73 65 20
	   74 72 79 20 61
	   67 61 69 6E 00
 0000026A 53 70 6F 63 6B	PromptSpockTurn byte "Spocks Turn To bet",0
	   73 20 54 75 72
	   6E 20 54 6F 20
	   62 65 74 00
 0000027D 53 70 6F 63 6B	PromptSpockBet byte "Spock Bets: ",0
	   20 42 65 74 73
	   3A 20 00
 0000028A 53 70 6F 63 6B	PromptSpockRaise byte "Spock Raises: ",0
	   20 52 61 69 73
	   65 73 3A 20 00
 00000299 53 70 6F 63 6B	PromptSpockCall byte "Spock Calls",0
	   20 43 61 6C 6C
	   73 00
 000002A5 53 70 6F 63 6B	PromptSpockFold byte "Spock Folds",0
	   20 46 6F 6C 64
	   73 00
 000002B1 57 6F 75 6C 64	PromptPlayerBet byte "Would you like to bet<1>, call<2>, or fold<0>",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 62 65
	   74 3C 31 3E 2C
	   20 63 61 6C 6C
	   3C 32 3E 2C 20
	   6F 72 20 66 6F
	   6C 64 3C 30 3E
	   00
 000002DF 57 6F 75 6C 64	PromptPlayerSecond byte "Would you like to raise<1>, call<2>, or fold<0>",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 72 61
	   69 73 65 3C 31
	   3E 2C 20 63 61
	   6C 6C 3C 32 3E
	   2C 20 6F 72 20
	   66 6F 6C 64 3C
	   30 3E 00
 0000030F 49 74 20 69 73	PromptPlayerTurn byte "It is your turn",0
	   20 79 6F 75 72
	   20 74 75 72 6E
	   00
 0000031F 41 6D 6D 6F 75	PromptPlayerRaise byte "Ammount to raise: ",0
	   6E 74 20 74 6F
	   20 72 61 69 73
	   65 3A 20 00
 00000332 43 61 6C 6C 00	PromptPlayerCall byte "Call",0
 00000337 46 6F 6C 64 00	PromptPlayerFold byte "Fold",0
 0000033C 59 6F 75 20 64	PromptPlayerNotEnoughChips byte "You do not have enough chips for that",0
	   6F 20 6E 6F 74
	   20 68 61 76 65
	   20 65 6E 6F 75
	   67 68 20 63 68
	   69 70 73 20 66
	   6F 72 20 74 68
	   61 74 00
 00000362 2D 2D 2D 2D 2D	PromptLine byte "--------------------------------------------------------------------"
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D

 00000000			.code
 00000000			main PROC
 00000000  C7 05 000001A6 R		mov ChipsPlayer, 1000
	   000003E8
 0000000A  C7 05 000001AA R		mov ChipsSpock, 1000
	   000003E8
 00000014				G1:
 00000014  E8 00000180				Call Ante
 00000019  E8 0000004A				Call Shuffel
 0000001E  E8 000000C2				Call DealHand
 00000023  E8 000002A2				Call HandSpock
 00000028  E8 0000073B				Call Bid
 0000002D  E8 000000EC				Call DealFlop
 00000032  E8 00000293				Call HandSpock
 00000037  E8 0000072C				Call Bid
 0000003C  E8 0000010E				Call DealTurn
 00000041  E8 00000284				Call HandSpock
 00000046  E8 0000071D				Call Bid
 0000004B  E8 0000012D				Call DealRiver
 00000050  E8 00000275				Call HandSpock
 00000055  E8 000004BE				Call HandPlayer
 0000005A  E8 000010F8				Call CompareHand
 0000005F  E2 B3			Loop G1

				exit
 00000061  6A 00	   *	    push   +000000000h
 00000063  E8 00000000 E   *	    call   ExitProcess
 00000068			main ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000068			Shuffel PROC																																							;
				;	Recieves: nothing																																					;
				;	Returns: Full/shuffled Deck																																			;
				;Adds 52 cards to the Deck 13 from each suit and shuffles them		Values 1-13 =Spades 14-26 Hearts 27-39 Clubs 40-52													;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00000068  B9 00000007		mov ecx, 7
 0000006D  B0 3C		mov al, 60
 0000006F  BE 00000000		mov esi, 0
 00000074				EmptyHands:
 00000074  88 86 00000024 R			mov StraightS[esi], al
 0000007A  88 86 0000002B R			mov StraightP[esi], al
 00000080  04 02				add al, 2
 00000082  46					inc esi
 00000083  E2 EF			Loop EmptyHands

 00000085  B9 00000005		mov ecx, 5
 0000008A  B0 46		mov al, 70
 0000008C  BE 00000000		mov esi, 0
 00000091				EmptyTable:
 00000091  88 86 00000199 R			mov Table[esi],al
 00000097  04 02				add al, 2
 00000099  46					inc esi
 0000009A  E2 F5			Loop EmptyTable

 0000009C  B9 00000034		mov ecx, 52
 000000A1  B2 00		mov dl, 0
 000000A3  B0 01		mov al, 1
 000000A5  BE 00000000		mov esi, 0
 000000AA				L0:
 000000AA  88 86 00000161 R			mov Deck[esi], al
 000000B0  FE C0				inc al
 000000B2  83 C6 01				add esi,TYPE Deck
 000000B5  FE C2				inc dl
 000000B7  E2 F1			Loop L0

 000000B9  B9 00000068		mov ecx, 104

 000000BE				S1:
 000000BE  B8 00000035				mov eax,53
 000000C3  E8 00000000 E			call randomrange
 000000C8  8B F0				mov esi, eax
 000000CA  8A 9E 00000161 R			mov bl,Deck[esi]
 000000D0  A0 00000161 R			mov al, Deck[0]
 000000D5  86 C3				xchg al,bl
 000000D7  88 9E 00000161 R			mov Deck[esi], bl
 000000DD  A2 00000161 R			mov Deck[0], al
 000000E2  E2 DA			Loop S1

 000000E4  C3			ret
 000000E5			Shuffel ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000E5			DealHand PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to PlayerHand/SpockHand																														;
				;Procedure deals PlayerHand/SpockHand																																	;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000E5  B9 00000002		mov ecx, 2
 000000EA  BE 00000000		mov esi, 0
 000000EF  BB 00000000		mov ebx, 0

 000000F4				H1:
 000000F4  8A 83 00000161 R			mov al, Deck[ebx]
 000000FA  88 86 00000195 R			mov PlayerHand[esi], al
 00000100  83 C3 01				add ebx, TYPE Deck
 00000103  8A 83 00000161 R			mov al, Deck [ebx]
 00000109  88 86 00000197 R			mov SpockHand[esi], al
 0000010F  83 C6 01				add esi, TYPE PlayerHand
 00000112  83 C3 01				add ebx, TYPE Deck
 00000115  E2 DD			Loop H1
 00000117  89 1D 0000019E R	mov DeckMark,EBX
 0000011D  C3			ret
 0000011E			DealHand ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000011E			DealFlop PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Dek to Flop																																		;
				;Procedure deals Flop																																					;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000011E  B9 00000003		mov ecx, 3
 00000123  8B 1D 0000019E R	mov ebx, DeckMark
 00000129  BF 00000000		mov edi,0

 0000012E				T1:
 0000012E  8A 83 00000161 R			mov al, Deck[ebx]
 00000134  88 87 00000199 R			mov Table[edi], al
 0000013A  83 C3 01				add ebx, TYPE Deck
 0000013D  83 C7 01				add edi, TYPE Table
 00000140  E2 EC			Loop T1
 00000142  89 3D 000001A2 R	mov TableMark,edi
 00000148  89 1D 0000019E R	mov DeckMark,ebx
 0000014E  C3			ret
 0000014F			DealFlop ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000014F			DealTurn PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to Turn																																		;
				;Procedure skips a card for burn and deals Turn																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000014F  8B 1D 0000019E R	mov ebx, DeckMark
 00000155  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 00000158  8B 3D 000001A2 R	mov edi, TableMark
 0000015E  8A 83 00000161 R	mov al, Deck[ebx]
 00000164  88 87 00000199 R	mov Table[edi],al
 0000016A  83 C3 01		add ebx, TYPE Deck
 0000016D  89 1D 0000019E R	mov DeckMark, EBX
 00000173  83 C7 01		add edi, TYPE Table
 00000176  89 3D 000001A2 R	mov TableMark, edi

 0000017C  C3			ret
 0000017D			DealTurn ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000017D			DealRiver PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to River																																	;
				;Procedure skips a card from Deck for burn and deals River																												;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000017D  8B 1D 0000019E R	mov ebx, DeckMark
 00000183  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 00000186  8B 3D 000001A2 R	mov edi, TableMark
 0000018C  8A 83 00000161 R	mov al, Deck[ebx]
 00000192  88 87 00000199 R	mov Table[edi],al

 00000198  C3			ret
 00000199			DealRiver ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000199			Ante PROC																																								;
				;	Recieves: BigBlind, ChipsPlayer, ChipsSpock, ChipsTable,																											;
				;	Returns: ChipsPlayer(modified) ChipsSpock(modified), ChipTable(modified)																							;
				;	Big and Little blinds paid in for oppening bet																														;
				;Procedure Checks to ensure that player and spock have the chips to make bet if not game end call win/lose, change the value of chips									;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				.if(BigBlind > 0)
 00000199  83 3D 000001B2 R
	   00		   *	    cmp    BigBlind, 000h
 000001A0  76 3A	   *	    jbe    @C0001
					
					.if(ChipsPlayer < 25)
 000001A2  83 3D 000001A6 R
	   19		   *	    cmp    ChipsPlayer, 019h
 000001A9  73 05	   *	    jae    @C0003
 000001AB  E8 000000BA					call Lose
						.endif
					
						.if(ChipsSpock < 50)
 000001B0		   *@C0003:
 000001B0  83 3D 000001AA R
	   32		   *	    cmp    ChipsSpock, 032h
 000001B7  73 05	   *	    jae    @C0005
 000001B9  E8 0000007F					call Win	
						.endif
					
 000001BE		   *@C0005:
 000001BE  83 2D 000001A6 R			sub ChipsPlayer, 25
	   19
 000001C5  83 05 000001AE R			add ChipsTable, 25
	   19
 000001CC  83 2D 000001AA R			sub ChipsSpock, 50
	   32
 000001D3  83 05 000001AE R			add ChipsTable, 50
	   32

					.elseif (BigBlind<1)
 000001DA  EB 41	   *	    jmp    @C0007
 000001DC		   *@C0001:
 000001DC  83 3D 000001B2 R
	   01		   *	    cmp    BigBlind, 001h
 000001E3  73 38	   *	    jae    @C0008
					
						.if(ChipsPlayer < 50)
 000001E5  83 3D 000001A6 R
	   32		   *	    cmp    ChipsPlayer, 032h
 000001EC  73 05	   *	    jae    @C000A
 000001EE  E8 00000077					call Lose
						.endif
					
						.if(ChipsSpock < 25)
 000001F3		   *@C000A:
 000001F3  83 3D 000001AA R
	   19		   *	    cmp    ChipsSpock, 019h
 000001FA  73 05	   *	    jae    @C000C
 000001FC  E8 0000003C					call Win	
						.endif
					
 00000201		   *@C000C:
 00000201  83 2D 000001A6 R				sub ChipsPlayer, 50
	   32
 00000208  83 05 000001AE R				add ChipsTable, 50
	   32
 0000020F  83 2D 000001AA R				sub ChipsSpock, 25
	   19
 00000216  83 05 000001AE R				add ChipsTable, 25
	   19
				.endif
 0000021D		   *@C0008:
 0000021D		   *@C0007:

 0000021D  A1 000001B2 R	mov eax, BigBlind
				.if(BigBlind > 0)
 00000222  83 3D 000001B2 R
	   00		   *	    cmp    BigBlind, 000h
 00000229  76 07	   *	    jbe    @C000E
 0000022B  B8 00000000			mov eax, 0
				.else
 00000230  EB 05	   *	    jmp    @C0010
 00000232		   *@C000E:
 00000232  B8 00000001			mov eax, 1
				.endif
 00000237		   *@C0010:
 00000237  A3 000001B2 R	mov bigblind,eax

 0000023C  C3			ret
 0000023D			Ante ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000023D			Win PROC																																								;
				;	Recieves: PromptWinImage, PromptYouWin, PlayerChips																													;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000023D  BA 00000235 R		mov edx, OFFSET PromptWinImage
 00000242  E8 00000000 E		call WriteString
 00000247  E8 00000000 E		call CRLF
 0000024C  BA 000001C4 R		mov edx, OFFSET PromptYouWin
 00000251  E8 00000000 E		call WriteString
 00000256  A1 000001A6 R		mov eax, ChipsPlayer
 0000025B  E8 00000000 E		call WriteInt   
 00000260  E8 00000000 E		call CRLF
 00000265  E8 0000002D			Call PlayAgain
 0000026A			Win ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000026A			Lose PROC																																								;
				;	Recieves: PromptLoseImage, PromptYouLose, PlayerChips																												;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000026A  BA 00000237 R		mov edx, OFFSET PromptLoseImage
 0000026F  E8 00000000 E		call WriteString
 00000274  E8 00000000 E		call CRLF
 00000279  BA 000001E0 R		mov edx, OFFSET PromptYouLose
 0000027E  E8 00000000 E		call WriteString
 00000283  A1 000001A6 R		mov eax, ChipsPlayer
 00000288  E8 00000000 E		call WriteInt   
 0000028D  E8 00000000 E		call CRLF
 00000292  E8 00000000			Call PlayAgain
 00000297			Lose ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000297			PlayAgain PROC																																							;
				;	Recieves: PromptPlayAgain																																			;
				;	Returns: Nothing																																					;
				;	Asks if you want to PlayAgain, if y call main/if n invoke exitproccess/if else prompbadinput																		;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000297  BA 000001FF R		mov edx, OFFSET PromptPlayAgain
 0000029C  E8 00000000 E		call WriteString
 000002A1  E8 00000000 E		call Readint
						.if(eax==0)
 000002A6  0B C0	   *	    or	eax, eax
 000002A8  75 09	   *	    jne    @C0011
							INVOKE ExitProcess, 0
 000002AA  6A 00	   *	    push   +000000000h
 000002AC  E8 00000000 E   *	    call   ExitProcess
						.elseif(eax==1)
 000002B1  EB 16	   *	    jmp    @C0013
 000002B3		   *@C0011:
 000002B3  83 F8 01	   *	    cmp    eax, 001h
 000002B6  75 07	   *	    jne    @C0014
 000002B8  E8 FFFFFD43					call Main
						.else
 000002BD  EB 0A	   *	    jmp    @C0016
 000002BF		   *@C0014:
 000002BF  A0 0000023D R				mov al, PromptBadInput
 000002C4  E8 FFFFFFCE					call PlayAgain
						.endif
 000002C9		   *@C0016:
 000002C9		   *@C0013:
 000002C9  C3			ret
 000002CA			PlayAgain ENDP


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000002CA			HandSpock PROC																																							;
				;	Recieves: Table, SpockHand, FullHandSpock																															;
				;	Returns: FullHandSpock																																				;
				;	Adds Spock and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000002CA  B8 00000000		mov eax, 0
 000002CF  B9 00000005		mov ecx, 5
 000002D4				FSH1:	
 000002D4  8A 90 00000199 R			mov dl, table[eax]																						;FullSpockHand1
 000002DA  88 90 000001B6 R			mov FullHandSpock[eax],dl		
 000002E0  83 C0 01				add eax, TYPE FullHandSpock
 000002E3  E2 EF			Loop FSH1																						
 000002E5  BB 00000000		mov ebx, 0
 000002EA  B9 00000002		mov ecx, 2
 000002EF				FSH2:																										;FullSpockHand2
 000002EF  8A 93 00000197 R			mov dl, SpockHand[ebx]
 000002F5  88 90 000001B6 R			mov FullHandSpock[eax],dl
 000002FB  83 C0 01				add eax, TYPE FullHandSpock
 000002FE  83 C3 01				add ebx, TYPE SpockHand
 00000301  E2 EC			Loop FSH2

 00000303  A0 000001B6 R	mov al, FullHandSpock[0]
 00000308  A2 00000008 R	mov cards1.value,al
					.if(al >0 && al < 14)
 0000030D  3C 00	   *	    cmp    al, 000h
 0000030F  76 0D	   *	    jbe    @C0017
 00000311  3C 0E	   *	    cmp    al, 00Eh
 00000313  73 09	   *	    jae    @C0017
 00000315  C6 05 00000009 R			mov cards1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000031C  EB 31	   *	    jmp    @C001A
 0000031E		   *@C0017:
 0000031E  3C 0D	   *	    cmp    al, 00Dh
 00000320  76 0D	   *	    jbe    @C001B
 00000322  3C 1B	   *	    cmp    al, 01Bh
 00000324  73 09	   *	    jae    @C001B
 00000326  C6 05 00000009 R			mov cards1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000032D  EB 20	   *	    jmp    @C001E
 0000032F		   *@C001B:
 0000032F  3C 1A	   *	    cmp    al, 01Ah
 00000331  76 0D	   *	    jbe    @C001F
 00000333  3C 28	   *	    cmp    al, 028h
 00000335  73 09	   *	    jae    @C001F
 00000337  C6 05 00000009 R			mov cards1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000033E  EB 0F	   *	    jmp    @C0022
 00000340		   *@C001F:
 00000340  3C 27	   *	    cmp    al, 027h
 00000342  76 0B	   *	    jbe    @C0023
 00000344  3C 35	   *	    cmp    al, 035h
 00000346  73 07	   *	    jae    @C0023
 00000348  C6 05 00000009 R			mov cards1.suit, 4
	   04
					.endif
 0000034F		   *@C0023:
 0000034F		   *@C0022:
 0000034F		   *@C001E:
 0000034F		   *@C001A:
 0000034F  A0 000001B7 R	mov al, FullHandSpock[1]
 00000354  A2 0000000A R	mov cards2.value,al
					.if(al >0 && al < 14)
 00000359  3C 00	   *	    cmp    al, 000h
 0000035B  76 0D	   *	    jbe    @C0026
 0000035D  3C 0E	   *	    cmp    al, 00Eh
 0000035F  73 09	   *	    jae    @C0026
 00000361  C6 05 0000000B R			mov cards2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000368  EB 31	   *	    jmp    @C0029
 0000036A		   *@C0026:
 0000036A  3C 0D	   *	    cmp    al, 00Dh
 0000036C  76 0D	   *	    jbe    @C002A
 0000036E  3C 1B	   *	    cmp    al, 01Bh
 00000370  73 09	   *	    jae    @C002A
 00000372  C6 05 0000000B R			mov cards2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000379  EB 20	   *	    jmp    @C002D
 0000037B		   *@C002A:
 0000037B  3C 1A	   *	    cmp    al, 01Ah
 0000037D  76 0D	   *	    jbe    @C002E
 0000037F  3C 28	   *	    cmp    al, 028h
 00000381  73 09	   *	    jae    @C002E
 00000383  C6 05 0000000B R			mov cards2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000038A  EB 0F	   *	    jmp    @C0031
 0000038C		   *@C002E:
 0000038C  3C 27	   *	    cmp    al, 027h
 0000038E  76 0B	   *	    jbe    @C0032
 00000390  3C 35	   *	    cmp    al, 035h
 00000392  73 07	   *	    jae    @C0032
 00000394  C6 05 0000000B R			mov cards2.suit, 4
	   04
					.endif
 0000039B		   *@C0032:
 0000039B		   *@C0031:
 0000039B		   *@C002D:
 0000039B		   *@C0029:
 0000039B  A0 000001B8 R	mov al, FullHandSpock[2]
 000003A0  A2 0000000C R	mov cards3.value,al
					.if(al >0 && al < 14)
 000003A5  3C 00	   *	    cmp    al, 000h
 000003A7  76 0D	   *	    jbe    @C0035
 000003A9  3C 0E	   *	    cmp    al, 00Eh
 000003AB  73 09	   *	    jae    @C0035
 000003AD  C6 05 0000000D R			mov cards3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000003B4  EB 31	   *	    jmp    @C0038
 000003B6		   *@C0035:
 000003B6  3C 0D	   *	    cmp    al, 00Dh
 000003B8  76 0D	   *	    jbe    @C0039
 000003BA  3C 1B	   *	    cmp    al, 01Bh
 000003BC  73 09	   *	    jae    @C0039
 000003BE  C6 05 0000000D R			mov cards3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000003C5  EB 20	   *	    jmp    @C003C
 000003C7		   *@C0039:
 000003C7  3C 1A	   *	    cmp    al, 01Ah
 000003C9  76 0D	   *	    jbe    @C003D
 000003CB  3C 28	   *	    cmp    al, 028h
 000003CD  73 09	   *	    jae    @C003D
 000003CF  C6 05 0000000D R			mov cards3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000003D6  EB 0F	   *	    jmp    @C0040
 000003D8		   *@C003D:
 000003D8  3C 27	   *	    cmp    al, 027h
 000003DA  76 0B	   *	    jbe    @C0041
 000003DC  3C 35	   *	    cmp    al, 035h
 000003DE  73 07	   *	    jae    @C0041
 000003E0  C6 05 0000000D R			mov cards3.suit, 4
	   04
					.endif
 000003E7		   *@C0041:
 000003E7		   *@C0040:
 000003E7		   *@C003C:
 000003E7		   *@C0038:
 000003E7  A0 000001B9 R	mov al, FullHandSpock[3]
 000003EC  A2 0000000E R	mov cards4.value,al
					.if(al >0 && al < 14)
 000003F1  3C 00	   *	    cmp    al, 000h
 000003F3  76 0D	   *	    jbe    @C0044
 000003F5  3C 0E	   *	    cmp    al, 00Eh
 000003F7  73 09	   *	    jae    @C0044
 000003F9  C6 05 0000000F R			mov cards4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000400  EB 31	   *	    jmp    @C0047
 00000402		   *@C0044:
 00000402  3C 0D	   *	    cmp    al, 00Dh
 00000404  76 0D	   *	    jbe    @C0048
 00000406  3C 1B	   *	    cmp    al, 01Bh
 00000408  73 09	   *	    jae    @C0048
 0000040A  C6 05 0000000F R			mov cards4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000411  EB 20	   *	    jmp    @C004B
 00000413		   *@C0048:
 00000413  3C 1A	   *	    cmp    al, 01Ah
 00000415  76 0D	   *	    jbe    @C004C
 00000417  3C 28	   *	    cmp    al, 028h
 00000419  73 09	   *	    jae    @C004C
 0000041B  C6 05 0000000F R			mov cards4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000422  EB 0F	   *	    jmp    @C004F
 00000424		   *@C004C:
 00000424  3C 27	   *	    cmp    al, 027h
 00000426  76 0B	   *	    jbe    @C0050
 00000428  3C 35	   *	    cmp    al, 035h
 0000042A  73 07	   *	    jae    @C0050
 0000042C  C6 05 0000000F R			mov cards4.suit, 4
	   04
					.endif
 00000433		   *@C0050:
 00000433		   *@C004F:
 00000433		   *@C004B:
 00000433		   *@C0047:
 00000433  A0 000001BA R	mov al, FullHandSpock[4]
 00000438  A2 00000010 R	mov cards5.value,al
					.if(al >0 && al < 14)
 0000043D  3C 00	   *	    cmp    al, 000h
 0000043F  76 0D	   *	    jbe    @C0053
 00000441  3C 0E	   *	    cmp    al, 00Eh
 00000443  73 09	   *	    jae    @C0053
 00000445  C6 05 00000011 R			mov cards5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000044C  EB 31	   *	    jmp    @C0056
 0000044E		   *@C0053:
 0000044E  3C 0D	   *	    cmp    al, 00Dh
 00000450  76 0D	   *	    jbe    @C0057
 00000452  3C 1B	   *	    cmp    al, 01Bh
 00000454  73 09	   *	    jae    @C0057
 00000456  C6 05 00000011 R			mov cards5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000045D  EB 20	   *	    jmp    @C005A
 0000045F		   *@C0057:
 0000045F  3C 1A	   *	    cmp    al, 01Ah
 00000461  76 0D	   *	    jbe    @C005B
 00000463  3C 28	   *	    cmp    al, 028h
 00000465  73 09	   *	    jae    @C005B
 00000467  C6 05 00000011 R			mov cards5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000046E  EB 0F	   *	    jmp    @C005E
 00000470		   *@C005B:
 00000470  3C 27	   *	    cmp    al, 027h
 00000472  76 0B	   *	    jbe    @C005F
 00000474  3C 35	   *	    cmp    al, 035h
 00000476  73 07	   *	    jae    @C005F
 00000478  C6 05 00000011 R			mov cards5.suit, 4
	   04
					.endif
 0000047F		   *@C005F:
 0000047F		   *@C005E:
 0000047F		   *@C005A:
 0000047F		   *@C0056:
 0000047F  A0 000001BB R	mov al, FullHandSpock[5]
 00000484  A2 00000012 R	mov cards6.value,al
					.if(al >0 && al < 14)
 00000489  3C 00	   *	    cmp    al, 000h
 0000048B  76 0D	   *	    jbe    @C0062
 0000048D  3C 0E	   *	    cmp    al, 00Eh
 0000048F  73 09	   *	    jae    @C0062
 00000491  C6 05 00000013 R			mov cards6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000498  EB 31	   *	    jmp    @C0065
 0000049A		   *@C0062:
 0000049A  3C 0D	   *	    cmp    al, 00Dh
 0000049C  76 0D	   *	    jbe    @C0066
 0000049E  3C 1B	   *	    cmp    al, 01Bh
 000004A0  73 09	   *	    jae    @C0066
 000004A2  C6 05 00000013 R			mov cards6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000004A9  EB 20	   *	    jmp    @C0069
 000004AB		   *@C0066:
 000004AB  3C 1A	   *	    cmp    al, 01Ah
 000004AD  76 0D	   *	    jbe    @C006A
 000004AF  3C 28	   *	    cmp    al, 028h
 000004B1  73 09	   *	    jae    @C006A
 000004B3  C6 05 00000013 R			mov cards6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000004BA  EB 0F	   *	    jmp    @C006D
 000004BC		   *@C006A:
 000004BC  3C 27	   *	    cmp    al, 027h
 000004BE  76 0B	   *	    jbe    @C006E
 000004C0  3C 35	   *	    cmp    al, 035h
 000004C2  73 07	   *	    jae    @C006E
 000004C4  C6 05 00000013 R			mov cards6.suit, 4
	   04
					.endif
 000004CB		   *@C006E:
 000004CB		   *@C006D:
 000004CB		   *@C0069:
 000004CB		   *@C0065:
 000004CB  A0 000001BC R	mov al, FullHandSpock[6]
 000004D0  A2 00000014 R	mov cards7.value,al
					.if(al >0 && al < 14)
 000004D5  3C 00	   *	    cmp    al, 000h
 000004D7  76 0D	   *	    jbe    @C0071
 000004D9  3C 0E	   *	    cmp    al, 00Eh
 000004DB  73 09	   *	    jae    @C0071
 000004DD  C6 05 00000015 R			mov cards7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000004E4  EB 31	   *	    jmp    @C0074
 000004E6		   *@C0071:
 000004E6  3C 0D	   *	    cmp    al, 00Dh
 000004E8  76 0D	   *	    jbe    @C0075
 000004EA  3C 1B	   *	    cmp    al, 01Bh
 000004EC  73 09	   *	    jae    @C0075
 000004EE  C6 05 00000015 R			mov cards7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000004F5  EB 20	   *	    jmp    @C0078
 000004F7		   *@C0075:
 000004F7  3C 1A	   *	    cmp    al, 01Ah
 000004F9  76 0D	   *	    jbe    @C0079
 000004FB  3C 28	   *	    cmp    al, 028h
 000004FD  73 09	   *	    jae    @C0079
 000004FF  C6 05 00000015 R			mov cards7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000506  EB 0F	   *	    jmp    @C007C
 00000508		   *@C0079:
 00000508  3C 27	   *	    cmp    al, 027h
 0000050A  76 0B	   *	    jbe    @C007D
 0000050C  3C 35	   *	    cmp    al, 035h
 0000050E  73 07	   *	    jae    @C007D
 00000510  C6 05 00000015 R			mov cards7.suit, 4
	   04
					.endif
 00000517		   *@C007D:
 00000517		   *@C007C:
 00000517		   *@C0078:
 00000517		   *@C0074:
 00000517  C3			ret
 00000518			HandSpock ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000518			HandPlayer PROC																																							;
				;	Recieves: Table, PlayerHand, FullHandPlayer																															;
				;	Returns: FullHandPlayer																																				;
				;	Adds Player and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000518  B8 00000000		mov eax, 0
 0000051D  B9 00000005		mov ecx, 5
 00000522				FPH1:																									;FullPlayerHand1
 00000522  8A 90 00000199 R			mov dl, table[eax]																						
 00000528  88 90 000001BD R			mov FullHandPlayer[eax], dl
 0000052E  83 C0 01				add eax, TYPE FullHandPlayer
 00000531  E2 EF			Loop FPH1																						
 00000533  BB 00000000		mov ebx, 0
 00000538  B9 00000002		mov ecx, 2
 0000053D				FPH2:																									;FullPlayerHand2
 0000053D  8A 93 00000195 R			mov dl, PlayerHand[ebx]																						
 00000543  88 90 000001BD R			mov FullHandPlayer[eax], dl
 00000549  83 C0 01				add eax, TYPE FullHandPlayer
 0000054C  BB 00000001				mov ebx, TYPE PlayerHand
 00000551  E2 EA			Loop FPH2

 00000553  A0 000001BD R	mov al, FullHandplayer[0]
 00000558  A2 00000016 R	mov cardp1.value,al
					.if(al >0 && al < 14)
 0000055D  3C 00	   *	    cmp    al, 000h
 0000055F  76 0D	   *	    jbe    @C0080
 00000561  3C 0E	   *	    cmp    al, 00Eh
 00000563  73 09	   *	    jae    @C0080
 00000565  C6 05 00000017 R			mov cardp1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000056C  EB 31	   *	    jmp    @C0083
 0000056E		   *@C0080:
 0000056E  3C 0D	   *	    cmp    al, 00Dh
 00000570  76 0D	   *	    jbe    @C0084
 00000572  3C 1B	   *	    cmp    al, 01Bh
 00000574  73 09	   *	    jae    @C0084
 00000576  C6 05 00000017 R			mov cardp1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000057D  EB 20	   *	    jmp    @C0087
 0000057F		   *@C0084:
 0000057F  3C 1A	   *	    cmp    al, 01Ah
 00000581  76 0D	   *	    jbe    @C0088
 00000583  3C 28	   *	    cmp    al, 028h
 00000585  73 09	   *	    jae    @C0088
 00000587  C6 05 00000017 R			mov cardp1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000058E  EB 0F	   *	    jmp    @C008B
 00000590		   *@C0088:
 00000590  3C 27	   *	    cmp    al, 027h
 00000592  76 0B	   *	    jbe    @C008C
 00000594  3C 35	   *	    cmp    al, 035h
 00000596  73 07	   *	    jae    @C008C
 00000598  C6 05 00000017 R			mov cardp1.suit, 4
	   04
					.endif
 0000059F		   *@C008C:
 0000059F		   *@C008B:
 0000059F		   *@C0087:
 0000059F		   *@C0083:
 0000059F  A0 000001BE R	mov al, FullHandplayer[1]
 000005A4  A2 00000018 R	mov cardp2.value,al
					.if(al >0 && al < 14)
 000005A9  3C 00	   *	    cmp    al, 000h
 000005AB  76 0D	   *	    jbe    @C008F
 000005AD  3C 0E	   *	    cmp    al, 00Eh
 000005AF  73 09	   *	    jae    @C008F
 000005B1  C6 05 00000019 R			mov cardp2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000005B8  EB 31	   *	    jmp    @C0092
 000005BA		   *@C008F:
 000005BA  3C 0D	   *	    cmp    al, 00Dh
 000005BC  76 0D	   *	    jbe    @C0093
 000005BE  3C 1B	   *	    cmp    al, 01Bh
 000005C0  73 09	   *	    jae    @C0093
 000005C2  C6 05 00000019 R			mov cardp2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000005C9  EB 20	   *	    jmp    @C0096
 000005CB		   *@C0093:
 000005CB  3C 1A	   *	    cmp    al, 01Ah
 000005CD  76 0D	   *	    jbe    @C0097
 000005CF  3C 28	   *	    cmp    al, 028h
 000005D1  73 09	   *	    jae    @C0097
 000005D3  C6 05 00000019 R			mov cardp2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000005DA  EB 0F	   *	    jmp    @C009A
 000005DC		   *@C0097:
 000005DC  3C 27	   *	    cmp    al, 027h
 000005DE  76 0B	   *	    jbe    @C009B
 000005E0  3C 35	   *	    cmp    al, 035h
 000005E2  73 07	   *	    jae    @C009B
 000005E4  C6 05 00000019 R			mov cardp2.suit, 4
	   04
					.endif
 000005EB		   *@C009B:
 000005EB		   *@C009A:
 000005EB		   *@C0096:
 000005EB		   *@C0092:
 000005EB  A0 000001BF R	mov al, FullHandplayer[2]
 000005F0  A2 0000001A R	mov cardp3.value,al
					.if(al >0 && al < 14)
 000005F5  3C 00	   *	    cmp    al, 000h
 000005F7  76 0D	   *	    jbe    @C009E
 000005F9  3C 0E	   *	    cmp    al, 00Eh
 000005FB  73 09	   *	    jae    @C009E
 000005FD  C6 05 0000001B R			mov cardp3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000604  EB 31	   *	    jmp    @C00A1
 00000606		   *@C009E:
 00000606  3C 0D	   *	    cmp    al, 00Dh
 00000608  76 0D	   *	    jbe    @C00A2
 0000060A  3C 1B	   *	    cmp    al, 01Bh
 0000060C  73 09	   *	    jae    @C00A2
 0000060E  C6 05 0000001B R			mov cardp3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000615  EB 20	   *	    jmp    @C00A5
 00000617		   *@C00A2:
 00000617  3C 1A	   *	    cmp    al, 01Ah
 00000619  76 0D	   *	    jbe    @C00A6
 0000061B  3C 28	   *	    cmp    al, 028h
 0000061D  73 09	   *	    jae    @C00A6
 0000061F  C6 05 0000001B R			mov cardp3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000626  EB 0F	   *	    jmp    @C00A9
 00000628		   *@C00A6:
 00000628  3C 27	   *	    cmp    al, 027h
 0000062A  76 0B	   *	    jbe    @C00AA
 0000062C  3C 35	   *	    cmp    al, 035h
 0000062E  73 07	   *	    jae    @C00AA
 00000630  C6 05 0000001B R			mov cardp3.suit, 4
	   04
					.endif
 00000637		   *@C00AA:
 00000637		   *@C00A9:
 00000637		   *@C00A5:
 00000637		   *@C00A1:
 00000637  A0 000001C0 R	mov al, FullHandplayer[3]
 0000063C  A2 0000001C R	mov cardp4.value,al
					.if(al >0 && al < 14)
 00000641  3C 00	   *	    cmp    al, 000h
 00000643  76 0D	   *	    jbe    @C00AD
 00000645  3C 0E	   *	    cmp    al, 00Eh
 00000647  73 09	   *	    jae    @C00AD
 00000649  C6 05 0000001D R			mov cardp4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000650  EB 31	   *	    jmp    @C00B0
 00000652		   *@C00AD:
 00000652  3C 0D	   *	    cmp    al, 00Dh
 00000654  76 0D	   *	    jbe    @C00B1
 00000656  3C 1B	   *	    cmp    al, 01Bh
 00000658  73 09	   *	    jae    @C00B1
 0000065A  C6 05 0000001D R			mov cardp4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000661  EB 20	   *	    jmp    @C00B4
 00000663		   *@C00B1:
 00000663  3C 1A	   *	    cmp    al, 01Ah
 00000665  76 0D	   *	    jbe    @C00B5
 00000667  3C 28	   *	    cmp    al, 028h
 00000669  73 09	   *	    jae    @C00B5
 0000066B  C6 05 0000001D R			mov cardp4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000672  EB 0F	   *	    jmp    @C00B8
 00000674		   *@C00B5:
 00000674  3C 27	   *	    cmp    al, 027h
 00000676  76 0B	   *	    jbe    @C00B9
 00000678  3C 35	   *	    cmp    al, 035h
 0000067A  73 07	   *	    jae    @C00B9
 0000067C  C6 05 0000001D R			mov cardp4.suit, 4
	   04
					.endif
 00000683		   *@C00B9:
 00000683		   *@C00B8:
 00000683		   *@C00B4:
 00000683		   *@C00B0:
 00000683  A0 000001C1 R	mov al, FullHandplayer[4]
 00000688  A2 0000001E R	mov cardp5.value,al
					.if(al >0 && al < 14)
 0000068D  3C 00	   *	    cmp    al, 000h
 0000068F  76 0D	   *	    jbe    @C00BC
 00000691  3C 0E	   *	    cmp    al, 00Eh
 00000693  73 09	   *	    jae    @C00BC
 00000695  C6 05 0000001F R			mov cardp5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000069C  EB 31	   *	    jmp    @C00BF
 0000069E		   *@C00BC:
 0000069E  3C 0D	   *	    cmp    al, 00Dh
 000006A0  76 0D	   *	    jbe    @C00C0
 000006A2  3C 1B	   *	    cmp    al, 01Bh
 000006A4  73 09	   *	    jae    @C00C0
 000006A6  C6 05 0000001F R			mov cardp5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000006AD  EB 20	   *	    jmp    @C00C3
 000006AF		   *@C00C0:
 000006AF  3C 1A	   *	    cmp    al, 01Ah
 000006B1  76 0D	   *	    jbe    @C00C4
 000006B3  3C 28	   *	    cmp    al, 028h
 000006B5  73 09	   *	    jae    @C00C4
 000006B7  C6 05 0000001F R			mov cardp5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000006BE  EB 0F	   *	    jmp    @C00C7
 000006C0		   *@C00C4:
 000006C0  3C 27	   *	    cmp    al, 027h
 000006C2  76 0B	   *	    jbe    @C00C8
 000006C4  3C 35	   *	    cmp    al, 035h
 000006C6  73 07	   *	    jae    @C00C8
 000006C8  C6 05 0000001F R			mov cardp5.suit, 4
	   04
					.endif
 000006CF		   *@C00C8:
 000006CF		   *@C00C7:
 000006CF		   *@C00C3:
 000006CF		   *@C00BF:
 000006CF  A0 000001C2 R	mov al, FullHandplayer[5]
 000006D4  A2 00000020 R	mov cardp6.value,al
					.if(al >0 && al < 14)
 000006D9  3C 00	   *	    cmp    al, 000h
 000006DB  76 0D	   *	    jbe    @C00CB
 000006DD  3C 0E	   *	    cmp    al, 00Eh
 000006DF  73 09	   *	    jae    @C00CB
 000006E1  C6 05 00000021 R			mov cardp6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000006E8  EB 31	   *	    jmp    @C00CE
 000006EA		   *@C00CB:
 000006EA  3C 0D	   *	    cmp    al, 00Dh
 000006EC  76 0D	   *	    jbe    @C00CF
 000006EE  3C 1B	   *	    cmp    al, 01Bh
 000006F0  73 09	   *	    jae    @C00CF
 000006F2  C6 05 00000021 R			mov cardp6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000006F9  EB 20	   *	    jmp    @C00D2
 000006FB		   *@C00CF:
 000006FB  3C 1A	   *	    cmp    al, 01Ah
 000006FD  76 0D	   *	    jbe    @C00D3
 000006FF  3C 28	   *	    cmp    al, 028h
 00000701  73 09	   *	    jae    @C00D3
 00000703  C6 05 00000021 R			mov cardp6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000070A  EB 0F	   *	    jmp    @C00D6
 0000070C		   *@C00D3:
 0000070C  3C 27	   *	    cmp    al, 027h
 0000070E  76 0B	   *	    jbe    @C00D7
 00000710  3C 35	   *	    cmp    al, 035h
 00000712  73 07	   *	    jae    @C00D7
 00000714  C6 05 00000021 R			mov cardp6.suit, 4
	   04
					.endif
 0000071B		   *@C00D7:
 0000071B		   *@C00D6:
 0000071B		   *@C00D2:
 0000071B		   *@C00CE:
 0000071B  A0 000001C3 R	mov al, FullHandplayer[6]
 00000720  A2 00000022 R	mov cardp7.value,al
					.if(al >0 && al < 14)
 00000725  3C 00	   *	    cmp    al, 000h
 00000727  76 0D	   *	    jbe    @C00DA
 00000729  3C 0E	   *	    cmp    al, 00Eh
 0000072B  73 09	   *	    jae    @C00DA
 0000072D  C6 05 00000023 R			mov cardp7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000734  EB 31	   *	    jmp    @C00DD
 00000736		   *@C00DA:
 00000736  3C 0D	   *	    cmp    al, 00Dh
 00000738  76 0D	   *	    jbe    @C00DE
 0000073A  3C 1B	   *	    cmp    al, 01Bh
 0000073C  73 09	   *	    jae    @C00DE
 0000073E  C6 05 00000023 R			mov cardp7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000745  EB 20	   *	    jmp    @C00E1
 00000747		   *@C00DE:
 00000747  3C 1A	   *	    cmp    al, 01Ah
 00000749  76 0D	   *	    jbe    @C00E2
 0000074B  3C 28	   *	    cmp    al, 028h
 0000074D  73 09	   *	    jae    @C00E2
 0000074F  C6 05 00000023 R			mov cardp7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000756  EB 0F	   *	    jmp    @C00E5
 00000758		   *@C00E2:
 00000758  3C 27	   *	    cmp    al, 027h
 0000075A  76 0B	   *	    jbe    @C00E6
 0000075C  3C 35	   *	    cmp    al, 035h
 0000075E  73 07	   *	    jae    @C00E6
 00000760  C6 05 00000023 R			mov cardp7.suit, 4
	   04
					.endif
 00000767		   *@C00E6:
 00000767		   *@C00E5:
 00000767		   *@C00E1:
 00000767		   *@C00DD:
 00000767  C3				ret
 00000768			HandPlayer ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000768			Bid PROC

 00000768  E8 000028CB		Call Display

 0000076D  C7 05 000000A2 R	mov ChipsCall, 0
	   00000000
 00000777  E8 00000653			call HandValue
				.if(FoldS == 1)
 0000077C  83 3D 000000B2 R
	   01		   *	    cmp    FoldS, 001h
 00000783  75 06	   *	    jne    @C00E9
 00000785  C3				ret
				.elseif(FoldP == 1)
 00000786  E9 00000643	   *	    jmp    @C00EB
 0000078B		   *@C00E9:
 0000078B  83 3D 000000B6 R
	   01		   *	    cmp    FoldP, 001h
 00000792  75 06	   *	    jne    @C00EC
 00000794  C3				ret
.elseif(bigblind == 1) ;spock bid first
 00000795  E9 00000634	   *	    jmp    @C00EE
 0000079A		   *@C00EC:
 0000079A  83 3D 000001B2 R
	   01		   *	    cmp    BigBlind, 001h
 000007A1  0F 85 000002F3  *	    jne    @C00EF
 000007A7  BA 0000026A R		mov edx, OFFSET PromptSpockTurn
 000007AC  E8 00000000 E		call WriteString
 000007B1  E8 00000000 E		call CRLF
						.if(SpockHandValue > 8)
 000007B6  83 3D 000000DE R
	   08		   *	    cmp    SpockHandValue, 008h
 000007BD  76 39	   *	    jbe    @C00F1
 000007BF  8B 3D 000001AA R				mov edi, ChipsSpock
 000007C5  29 3D 000001AA R				sub ChipsSpock, edi
 000007CB  89 3D 000000AA R				mov SpockBet,edi
 000007D1  01 3D 000001AE R				add ChipsTable, edi
 000007D7  89 3D 000000A2 R				mov ChipsCall, edi
							
 000007DD  BA 0000027D R				mov edx, OFFSET PromptSpockBet
 000007E2  E8 00000000 E				call WriteString
 000007E7  8B C7					mov eax, edi
 000007E9  E8 00000000 E				call writeint
 000007EE  E8 00000000 E				call CRLF

						.elseif(SpockHandValue > 4)
 000007F3  E9 000001A5	   *	    jmp    @C00F3
 000007F8		   *@C00F1:
 000007F8  83 3D 000000DE R
	   04		   *	    cmp    SpockHandValue, 004h
 000007FF  76 7A	   *	    jbe    @C00F4
							.if(ChipsSpock < 100)
 00000801  83 3D 000001AA R
	   64		   *	    cmp    ChipsSpock, 064h
 00000808  73 39	   *	    jae    @C00F6
 0000080A  8B 3D 000001AA R					mov edi, ChipsSpock
 00000810  29 3D 000001AA R					sub ChipsSpock, edi
 00000816  89 3D 000000AA R					mov SpockBet,edi
 0000081C  01 3D 000001AE R					add ChipsTable, edi
 00000822  89 3D 000000A2 R					mov ChipsCall, edi	
								
 00000828  BA 0000027D R					mov edx, OFFSET PromptSpockBet
 0000082D  E8 00000000 E					call WriteString
 00000832  8B C7						mov eax, edi
 00000834  E8 00000000 E					call writeint
 00000839  E8 00000000 E					call CRLF		
							
							.else
 0000083E  E9 0000015A	   *	    jmp    @C00F8
 00000843		   *@C00F6:
 00000843  BF 00000064						mov edi, 100
 00000848  29 3D 000001AA R					sub ChipsSpock, edi
 0000084E  89 3D 000000AA R					mov SpockBet,edi
 00000854  01 3D 000001AE R					add ChipsTable, edi
 0000085A  89 3D 000000A2 R					mov ChipsCall, edi

 00000860  BA 0000027D R					mov edx, OFFSET PromptSpockBet
 00000865  E8 00000000 E					call WriteString
 0000086A  8B C7						mov eax, edi
 0000086C  E8 00000000 E					call writeint
 00000871  E8 00000000 E					call CRLF

							.endif
						.elseif(SpockHandValue > 1)
 00000876  E9 00000122	   *	    jmp    @C00F9
 0000087B		   *@C00F4:
 0000087B  83 3D 000000DE R
	   01		   *	    cmp    SpockHandValue, 001h
 00000882  76 7A	   *	    jbe    @C00FA
							.if(ChipsSpock < 50)
 00000884  83 3D 000001AA R
	   32		   *	    cmp    ChipsSpock, 032h
 0000088B  73 39	   *	    jae    @C00FC
 0000088D  8B 3D 000001AA R					mov edi, ChipsSpock
 00000893  29 3D 000001AA R					sub ChipsSpock, edi
 00000899  89 3D 000000AA R					mov SpockBet,edi
 0000089F  01 3D 000001AE R					add ChipsTable, edi
 000008A5  89 3D 000000A2 R					mov ChipsCall, edi

 000008AB  BA 0000027D R					mov edx, OFFSET PromptSpockBet
 000008B0  E8 00000000 E					call WriteString
 000008B5  8B C7						mov eax, edi
 000008B7  E8 00000000 E					call writeint
 000008BC  E8 00000000 E					call CRLF

							.else
 000008C1  E9 000000D7	   *	    jmp    @C00FE
 000008C6		   *@C00FC:
 000008C6  BF 00000032						mov edi, 50
 000008CB  29 3D 000001AA R					sub ChipsSpock, edi
 000008D1  89 3D 000000AA R					mov SpockBet,edi
 000008D7  01 3D 000001AE R					add ChipsTable, edi
 000008DD  89 3D 000000A2 R					mov ChipsCall, edi

 000008E3  BA 0000027D R					mov edx, OFFSET PromptSpockBet
 000008E8  E8 00000000 E					call WriteString
 000008ED  8B C7						mov eax, edi
 000008EF  E8 00000000 E					call writeint
 000008F4  E8 00000000 E					call CRLF

							.endif
						.elseif(HighCardS > 4)
 000008F9  E9 0000009F	   *	    jmp    @C00FF
 000008FE		   *@C00FA:
 000008FE  80 3D 00000078 R
	   04		   *	    cmp    HighCards, 004h
 00000905  76 74	   *	    jbe    @C0100
							.if(ChipsSpock < 25)
 00000907  83 3D 000001AA R
	   19		   *	    cmp    ChipsSpock, 019h
 0000090E  73 36	   *	    jae    @C0102
 00000910  8B 3D 000001AA R					mov edi, ChipsSpock
 00000916  29 3D 000001AA R					sub ChipsSpock, edi
 0000091C  89 3D 000000AA R					mov SpockBet,edi
 00000922  01 3D 000001AE R					add ChipsTable, edi
 00000928  89 3D 000000A2 R					mov ChipsCall, edi

 0000092E  BA 0000027D R					mov edx, OFFSET PromptSpockBet
 00000933  E8 00000000 E					call WriteString
 00000938  8B C7						mov eax, edi
 0000093A  E8 00000000 E					call writeint
 0000093F  E8 00000000 E					call CRLF

							.else
 00000944  EB 57	   *	    jmp    @C0104
 00000946		   *@C0102:
 00000946  BF 00000019						mov edi, 25
 0000094B  29 3D 000001AA R					sub ChipsSpock, edi
 00000951  89 3D 000000AA R					mov SpockBet, edi
 00000957  01 3D 000001AE R					add ChipsTable, edi
 0000095D  89 3D 000000A2 R					mov ChipsCall, edi

 00000963  BA 0000027D R					mov edx, OFFSET PromptSpockBet
 00000968  E8 00000000 E					call WriteString
 0000096D  8B C7						mov eax, edi
 0000096F  E8 00000000 E					call writeint
 00000974  E8 00000000 E					call CRLF

							.endif
						.elseif(HighCardS < 5)
 00000979  EB 22	   *	    jmp    @C0105
 0000097B		   *@C0100:
 0000097B  80 3D 00000078 R
	   05		   *	    cmp    HighCards, 005h
 00000982  73 19	   *	    jae    @C0106
 00000984  C7 05 000000B2 R				mov FoldS, 1
	   00000001

 0000098E  BA 000002A5 R				mov edx, OFFSET PromptSpockFold
 00000993  E8 00000000 E				call WriteString
 00000998  E8 00000000 E				call CRLF
						.endif

 0000099D		   *@C0106:
 0000099D		   *@C0105:
 0000099D		   *@C00FF:
 0000099D		   *@C00F9:
 0000099D		   *@C00F3:
 0000099D		   *@C00F8:
 0000099D		   *@C00FE:
 0000099D		   *@C0104:
 0000099D  BA 000002DF R			mov edx, OFFSET PromptPlayerSecond
 000009A2  E8 00000000 E			call WriteString
 000009A7  E8 00000000 E			call CRLF
 000009AC						BadInput1:
 000009AC  E8 00000000 E					Call ReadInt
									.if(eax==1)
 000009B1  83 F8 01	   *	    cmp    eax, 001h
 000009B4  75 7D	   *	    jne    @C0108
 000009B6  BA 0000031F R							mov edx, OFFSET PromptPlayerRaise
 000009BB  E8 00000000 E							Call WriteString
 000009C0  E8 00000000 E							call readint
 000009C5  E8 00000000 E							call CRLF
 000009CA  A3 000000A2 R							mov ChipsCall, eax
 000009CF  8B 35 000000A2 R							mov esi, ChipsCall
 000009D5  03 C6								add eax, esi
 000009D7  29 05 000001A6 R							sub ChipsPlayer, eax
 000009DD  01 05 000001AE R							add ChipsTable, eax
 000009E3  8B 35 000000AA R							mov esi, SpockBet
 000009E9  2B C6								sub eax, esi
											.if(ChipsSpock < eax)
 000009EB  39 05 000001AA R *	    cmp    ChipsSpock, eax
 000009F1  73 1F	   *	    jae    @C010A
 000009F3  C7 05 000000B2 R									mov FoldS, 1
	   00000001
 000009FD  BA 000002A5 R									mov edx, OFFSET PromptSpockFold
 00000A02  E8 00000000 E									call WriteString
 00000A07  E8 00000000 E									call CRLF
 00000A0C  C3											ret
											.else
 00000A0D  E9 000003BC	   *	    jmp    @C010C
 00000A12		   *@C010A:
 00000A12  29 05 000001AA R									sub ChipsSpock, eax
 00000A18  01 05 000001AE R									add ChipsTable, eax
 00000A1E  BA 00000299 R									mov edx, OFFSET PromptSpockCall
 00000A23  E8 00000000 E									Call WriteString
 00000A28  E8 00000000 E									call CRLF
 00000A2D  C3											ret
											.endif
									.elseif(eax==2)
 00000A2E  E9 0000039B	   *	    jmp    @C010D
 00000A33		   *@C0108:
 00000A33  83 F8 02	   *	    cmp    eax, 002h
 00000A36  75 26	   *	    jne    @C010E
 00000A38  BA 00000332 R							mov edx, OFFSET PromptPlayerCall
 00000A3D  E8 00000000 E							Call WriteString
 00000A42  E8 00000000 E							call CRLF
 00000A47  A1 000000A2 R							mov eax, ChipsCall
 00000A4C  29 05 000001A6 R							sub ChipsPlayer, eax
 00000A52  01 05 000001AE R							add ChipsTable, eax
 00000A58  C3									ret
									.elseif(eax==0)
 00000A59  E9 00000370	   *	    jmp    @C0110
 00000A5E		   *@C010E:
 00000A5E  0B C0	   *	    or	eax, eax
 00000A60  75 1F	   *	    jne    @C0111
 00000A62  C7 05 000000B6 R							mov FoldP, 1
	   00000001
 00000A6C  BA 00000337 R							mov edx, OFFSET PromptPlayerFold
 00000A71  E8 00000000 E							call WriteString
 00000A76  E8 00000000 E							call CRLF
 00000A7B  C3									ret
									.else
 00000A7C  E9 0000034D	   *	    jmp    @C0113
 00000A81		   *@C0111:
 00000A81  BA 0000023D R							mov edx, OFFSET PromptBadInput
 00000A86  E8 00000000 E							Call WriteString
 00000A8B  E8 00000000 E							call CRLF
 00000A90  E9 FFFFFF17								jmp BadInput1
									.endif
					
					.elseif(BigBlind==0)												;player turn
 00000A95  E9 00000334	   *	    jmp    @C0114
 00000A9A		   *@C00EF:
 00000A9A  83 3D 000001B2 R
	   00		   *	    cmp    BigBlind, 000h
 00000AA1  0F 85 00000327  *	    jne    @C0115
 00000AA7  BA 0000030F R			mov edx, OFFSET PromptPlayerTurn
 00000AAC  E8 00000000 E			call WriteString
 00000AB1  E8 00000000 E			call CRLF
 00000AB6  BA 000002B1 R			mov edx, OFFSET PromptPlayerBet
 00000ABB  E8 00000000 E			call WriteString
 00000AC0  E8 00000000 E			call CRLF
 00000AC5						BadInput:
 00000AC5  E8 00000000 E					Call ReadInt
									.if(eax==1)
 00000ACA  83 F8 01	   *	    cmp    eax, 001h
 00000ACD  0F 85 0000029F  *	    jne    @C0117
 00000AD3  BA 0000031F R							mov edx, OFFSET PromptPlayerRaise
 00000AD8  E8 00000000 E							Call WriteString
 00000ADD  E8 00000000 E							call readint
 00000AE2  E8 00000000 E							call CRLF
 00000AE7  29 05 000001A6 R							sub ChipsPlayer, eax
 00000AED  01 05 000001AE R							add ChipsTable, eax
 00000AF3  A3 000000A2 R							mov ChipsCall, eax
 00000AF8  83 C0 64								add eax, 100

											.if(ChipsSpock < edi)
 00000AFB  39 3D 000001AA R *	    cmp    ChipsSpock, edi
 00000B01  73 1F	   *	    jae    @C0119
 00000B03  C7 05 000000B2 R									mov FoldS, 1
	   00000001
 00000B0D  BA 000002A5 R									mov edx, OFFSET PromptSpockFold
 00000B12  E8 00000000 E									call WriteString
 00000B17  E8 00000000 E									call CRLF
 00000B1C  C3											ret
											.elseif(SpockHandValue < 1)
 00000B1D  E9 0000024D	   *	    jmp    @C011B
 00000B22		   *@C0119:
 00000B22  83 3D 000000DE R
	   01		   *	    cmp    SpockHandValue, 001h
 00000B29  0F 83 00000216  *	    jae    @C011C
														.if(SpockHandValue > 8)
 00000B2F  83 3D 000000DE R
	   08		   *	    cmp    SpockHandValue, 008h
 00000B36  76 3C	   *	    jbe    @C011E
 00000B38  8B 3D 000000A2 R												mov edi, ChipsCall
 00000B3E  83 C7 32													add edi, 50
 00000B41  29 3D 000001AA R												sub ChipsSpock, edi
 00000B47  89 3D 000000AA R												mov SpockBet,edi
 00000B4D  01 3D 000001AE R												add ChipsTable, edi
 00000B53  89 3D 000000A2 R												mov ChipsCall, edi
							
 00000B59  BA 0000027D R												mov edx, OFFSET PromptSpockBet
 00000B5E  E8 00000000 E												call WriteString
 00000B63  8B C7													mov eax, edi
 00000B65  E8 00000000 E												call writeint
 00000B6A  E8 00000000 E												call CRLF

														.elseif(SpockHandValue > 4)
 00000B6F  E9 000001FB	   *	    jmp    @C0120
 00000B74		   *@C011E:
 00000B74  83 3D 000000DE R
	   04		   *	    cmp    SpockHandValue, 004h
 00000B7B  0F 86 0000008B  *	    jbe    @C0121
 00000B81  8B 3D 000000A2 R												mov edi, ChipsCall
 00000B87  83 C7 32													add edi, 50
															.if(ChipsSpock < edi)
 00000B8A  39 3D 000001AA R *	    cmp    ChipsSpock, edi
 00000B90  73 42	   *	    jae    @C0123
 00000B92  8B 3D 000001AA R													mov edi, ChipsSpock
 00000B98  8B 3D 000000A2 R													mov edi, ChipsCall
 00000B9E  83 C7 32														add edi, 50
 00000BA1  29 3D 000001AA R													sub ChipsSpock, edi
 00000BA7  89 3D 000000AA R													mov SpockBet,edi
 00000BAD  01 3D 000001AE R													add ChipsTable, edi
 00000BB3  89 3D 000000A2 R													mov ChipsCall, edi
							
 00000BB9  BA 0000027D R													mov edx, OFFSET PromptSpockBet
 00000BBE  E8 00000000 E													call WriteString
 00000BC3  8B C7														mov eax, edi
 00000BC5  E8 00000000 E													call writeint
 00000BCA  E8 00000000 E													call CRLF		
							
															.else
 00000BCF  E9 0000019B	   *	    jmp    @C0125
 00000BD4		   *@C0123:
 00000BD4  BF 00000032														mov edi, 50
 00000BD9  29 3D 000001AA R													sub ChipsSpock, edi
 00000BDF  89 3D 000000AA R													mov SpockBet,edi
 00000BE5  01 3D 000001AE R													add ChipsTable, edi
 00000BEB  89 3D 000000A2 R													mov ChipsCall, edi

 00000BF1  BA 0000027D R													mov edx, OFFSET PromptSpockBet
 00000BF6  E8 00000000 E													call WriteString
 00000BFB  8B C7														mov eax, edi
 00000BFD  E8 00000000 E													call writeint
 00000C02  E8 00000000 E													call CRLF

															.endif
														.elseif(SpockHandValue > 1)
 00000C07  E9 00000163	   *	    jmp    @C0126
 00000C0C		   *@C0121:
 00000C0C  83 3D 000000DE R
	   01		   *	    cmp    SpockHandValue, 001h
 00000C13  0F 86 00000082  *	    jbe    @C0127
 00000C19  8B 3D 000000A2 R												mov edi, ChipsCall
 00000C1F  83 C7 19													add edi, 25
															.if(ChipsSpock < edi)
 00000C22  39 3D 000001AA R *	    cmp    ChipsSpock, edi
 00000C28  73 39	   *	    jae    @C0129
 00000C2A  8B 3D 000001AA R													mov edi, ChipsSpock
 00000C30  29 3D 000001AA R													sub ChipsSpock, edi
 00000C36  89 3D 000000AA R													mov SpockBet,edi
 00000C3C  01 3D 000001AE R													add ChipsTable, edi
 00000C42  89 3D 000000A2 R													mov ChipsCall, edi

 00000C48  BA 0000027D R													mov edx, OFFSET PromptSpockBet
 00000C4D  E8 00000000 E													call WriteString
 00000C52  8B C7														mov eax, edi
 00000C54  E8 00000000 E													call writeint
 00000C59  E8 00000000 E													call CRLF

															.else
 00000C5E  E9 0000010C	   *	    jmp    @C012B
 00000C63		   *@C0129:
 00000C63  BF 00000019														mov edi, 25
 00000C68  29 3D 000001AA R													sub ChipsSpock, edi
 00000C6E  89 3D 000000AA R													mov SpockBet,edi
 00000C74  01 3D 000001AE R													add ChipsTable, edi
 00000C7A  89 3D 000000A2 R													mov ChipsCall, edi

 00000C80  BA 0000027D R													mov edx, OFFSET PromptSpockBet
 00000C85  E8 00000000 E													call WriteString
 00000C8A  8B C7														mov eax, edi
 00000C8C  E8 00000000 E													call writeint
 00000C91  E8 00000000 E													call CRLF

															.endif
														.elseif(HighCardS > 4)
 00000C96  E9 000000D4	   *	    jmp    @C012C
 00000C9B		   *@C0127:
 00000C9B  80 3D 00000078 R
	   04		   *	    cmp    HighCards, 004h
 00000CA2  76 7D	   *	    jbe    @C012D
 00000CA4  8B 3D 000000A2 R											mov edi, ChipsCall
															.if(ChipsSpock < edi)
 00000CAA  39 3D 000001AA R *	    cmp    ChipsSpock, edi
 00000CB0  73 39	   *	    jae    @C012F
 00000CB2  8B 3D 000001AA R													mov edi, ChipsSpock
 00000CB8  29 3D 000001AA R													sub ChipsSpock, edi
 00000CBE  89 3D 000000AA R													mov SpockBet,edi
 00000CC4  01 3D 000001AE R													add ChipsTable, edi
 00000CCA  89 3D 000000A2 R													mov ChipsCall, edi

 00000CD0  BA 00000299 R													mov edx, OFFSET PromptSpockCall
 00000CD5  E8 00000000 E													call WriteString
 00000CDA  8B C7														mov eax, edi
 00000CDC  E8 00000000 E													call writeint
 00000CE1  E8 00000000 E													call CRLF

															.else
 00000CE6  E9 00000084	   *	    jmp    @C0131
 00000CEB		   *@C012F:
 00000CEB  8B 3D 000000A2 R													mov edi, ChipsCall
 00000CF1  29 3D 000001AA R													sub ChipsSpock, edi
 00000CF7  89 3D 000000AA R													mov SpockBet, edi
 00000CFD  01 3D 000001AE R													add ChipsTable, edi
 00000D03  89 3D 000000A2 R													mov ChipsCall, edi

 00000D09  BA 00000299 R													mov edx, OFFSET PromptSpockCall
 00000D0E  E8 00000000 E													call WriteString
 00000D13  8B C7														mov eax, edi
 00000D15  E8 00000000 E													call writeint
 00000D1A  E8 00000000 E													call CRLF
								
															.endif
														.elseif(HighCardS < 5)
 00000D1F  EB 4E	   *	    jmp    @C0132
 00000D21		   *@C012D:
 00000D21  80 3D 00000078 R
	   05		   *	    cmp    HighCards, 005h
 00000D28  73 45	   *	    jae    @C0133
 00000D2A  C7 05 000000B2 R												mov FoldS, 1
	   00000001
 00000D34  BA 000002A5 R												mov edx, OFFSET PromptSpockFold
 00000D39  E8 00000000 E												call WriteString
 00000D3E  E8 00000000 E												call CRLF
														.endif
											
											.elseif(SpockHandValue > 0)
 00000D43  EB 2A	   *	    jmp    @C0135
 00000D45		   *@C011C:
 00000D45  83 3D 000000DE R
	   00		   *	    cmp    SpockHandValue, 000h
 00000D4C  76 21	   *	    jbe    @C0136
 00000D4E  8B 3D 000000A2 R									mov edi, ChipsCall
 00000D54  29 3D 000001AA R									sub ChipsSpock, edi
 00000D5A  01 3D 000001AE R									add ChipsTable, edi
 00000D60  BA 00000299 R									mov edx, OFFSET PromptSpockCall
 00000D65  E8 00000000 E									call WriteString
 00000D6A  E8 00000000 E									call CRLF			

											.endif
 00000D6F		   *@C0136:
 00000D6F		   *@C0135:
 00000D6F		   *@C011B:
 00000D6F		   *@C0133:
 00000D6F		   *@C0132:
 00000D6F		   *@C012C:
 00000D6F		   *@C0126:
 00000D6F		   *@C0120:
 00000D6F		   *@C0125:
 00000D6F		   *@C012B:
 00000D6F		   *@C0131:
 00000D6F  C3									ret

									.elseif(eax==2)
 00000D70  EB 5C	   *	    jmp    @C0138
 00000D72		   *@C0117:
 00000D72  83 F8 02	   *	    cmp    eax, 002h
 00000D75  75 23	   *	    jne    @C0139
 00000D77  BA 00000332 R							mov edx, OFFSET PromptPlayerCall
 00000D7C  E8 00000000 E							Call WriteString
 00000D81  E8 00000000 E							call CRLF
 00000D86  A1 000000A2 R							mov eax, ChipsCall
 00000D8B  29 05 000001A6 R							sub ChipsPlayer, eax
 00000D91  01 05 000001AE R							add ChipsTable, eax
 00000D97  C3									ret
									.elseif(eax==0)
 00000D98  EB 34	   *	    jmp    @C013B
 00000D9A		   *@C0139:
 00000D9A  0B C0	   *	    or	eax, eax
 00000D9C  75 1C	   *	    jne    @C013C
 00000D9E  C7 05 000000B6 R							mov FoldP, 1
	   00000001
 00000DA8  BA 00000337 R							mov edx, OFFSET PromptPlayerFold
 00000DAD  E8 00000000 E							call WriteString
 00000DB2  E8 00000000 E							call CRLF
 00000DB7  C3									ret
									.else
 00000DB8  EB 14	   *	    jmp    @C013E
 00000DBA		   *@C013C:
 00000DBA  BA 0000023D R							mov edx, OFFSET PromptBadInput
 00000DBF  E8 00000000 E							Call WriteString
 00000DC4  E8 00000000 E							call CRLF
 00000DC9  E9 FFFFFCF7								jmp BadInput
									.endif
				.endif
 00000DCE		   *@C013E:
 00000DCE		   *@C013B:
 00000DCE		   *@C0138:
 00000DCE		   *@C0115:
 00000DCE		   *@C0114:
 00000DCE		   *@C00EE:
 00000DCE		   *@C00EB:
 00000DCE		   *@C0113:
 00000DCE		   *@C0110:
 00000DCE		   *@C010D:
 00000DCE		   *@C010C:


 00000DCE  C3				ret
 00000DCF			Bid ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000DCF			HandValue PROC

 00000DCF  C7 05 00000032 R	mov isSpadeP, 0
	   00000000
 00000DD9  C7 05 00000036 R	mov isHeartP, 0
	   00000000
 00000DE3  C7 05 0000003A R	mov isClubP, 0
	   00000000
 00000DED  C7 05 0000003E R	mov isDimondP, 0
	   00000000
 00000DF7  C7 05 00000042 R	mov isFlushP, 0
	   00000000
 00000E01  C7 05 00000046 R	mov isSpadeS, 0
	   00000000
 00000E0B  C7 05 0000004A R	mov isHeartS, 0
	   00000000
 00000E15  C7 05 0000004E R	mov isClubS, 0
	   00000000
 00000E1F  C7 05 00000052 R	mov isDimondS, 0
	   00000000
 00000E29  C7 05 00000056 R	mov isFlushS, 0
	   00000000
 00000E33  C7 05 0000005A R	mov isStraightS, 0
	   00000000
 00000E3D  C7 05 0000005E R	mov isStraightP, 0
	   00000000

 00000E47  C7 05 00000062 R	mov RFp, 0
	   00000000
 00000E51  C7 05 00000066 R	mov RFs, 0
	   00000000
 00000E5B  C6 05 0000006A R	mov HighFourS, 0
	   00
 00000E62  C6 05 0000006B R	mov HighFourP, 0
	   00
 00000E69  C6 05 0000006C R	mov HighThreeS, 0
	   00
 00000E70  C6 05 0000006D R	mov HighThreeP, 0
	   00
 00000E77  C6 05 0000006E R	mov High2PairS, 0
	   00
 00000E7E  C6 05 0000006F R	mov High2PairP, 0
	   00
 00000E85  C6 05 00000070 R	mov Low2PairS, 0
	   00
 00000E8C  C6 05 00000071 R	mov Low2PairP, 0
	   00
 00000E93  C6 05 00000072 R	mov PairS, 0
	   00
 00000E9A  C6 05 00000073 R	mov PairP, 0
	   00
 00000EA1  C6 05 00000074 R	mov HighPairS, 0
	   00
 00000EA8  C6 05 00000075 R	mov HighPairP, 0
	   00
 00000EAF  C6 05 00000076 R	mov HighSts, 0
	   00
 00000EB6  C6 05 00000077 R	mov HighStp, 0
	   00
 00000EBD  C6 05 00000078 R	mov HighCards, 0
	   00
 00000EC4  C6 05 00000079 R	mov HighCardp, 0
	   00

 00000ECB  C7 05 0000007A R	mov PlayerRoyal, 0
	   00000000
 00000ED5  C7 05 0000007E R	mov PlayerStraightFlush, 0
	   00000000
 00000EDF  C7 05 00000082 R	mov PlayerFour, 0
	   00000000
 00000EE9  C7 05 00000086 R	mov PlayerFull, 0
	   00000000
 00000EF3  C7 05 0000008A R	mov PlayerFlush, 0
	   00000000
 00000EFD  C7 05 0000008E R	mov PlayerStraight, 0
	   00000000
 00000F07  C7 05 00000092 R	mov PlayerThree, 0
	   00000000
 00000F11  C7 05 00000096 R	mov PlayerTwoPair, 0
	   00000000
 00000F1B  C7 05 0000009A R	mov PlayerOnePair, 0
	   00000000
 00000F25  C7 05 0000009E R	mov PlayerHandValue, 0
	   00000000

 00000F2F  C7 05 000000BA R	mov SpockRoyal, 0
	   00000000
 00000F39  C7 05 000000BE R	mov SpockStraightFlush, 0
	   00000000
 00000F43  C7 05 000000C2 R	mov SpockFour, 0
	   00000000
 00000F4D  C7 05 000000C6 R	mov SpockFull, 0
	   00000000
 00000F57  C7 05 000000CA R	mov SpockFlush, 0
	   00000000
 00000F61  C7 05 000000CE R	mov SpockStraight, 0
	   00000000
 00000F6B  C7 05 000000D2 R	mov SpockThree, 0
	   00000000
 00000F75  C7 05 000000D6 R	mov SpockTwoPair, 0
	   00000000
 00000F7F  C7 05 000000DA R	mov SpockOnePair, 0
	   00000000
 00000F89  C7 05 000000DE R	mov SpockHandValue, 0
	   00000000

 00000F93  E8 000002BB			call IsAFlush
 00000F98  E8 000006BD			call IsAStraight
 00000F9D  E8 00001D8F			call FourKind
 00000FA2  E8 00001EB0			call ThreeKind
 00000FA7  E8 00001F9E			call TwoPair
 00000FAC  E8 00001E6D			call FullHouse
 00000FB1  E8 0000206D			Call HighCard

					.if(SpockRoyal > 0)
 00000FB6  83 3D 000000BA R
	   00		   *	    cmp    SpockRoyal, 000h
 00000FBD  76 0F	   *	    jbe    @C013F
 00000FBF  C7 05 000000DE R			mov SpockHandValue, 9
	   00000009
						.elseif(SpockStraightFlush > 0)
 00000FC9  E9 000000B8	   *	    jmp    @C0141
 00000FCE		   *@C013F:
 00000FCE  83 3D 000000BE R
	   00		   *	    cmp    SpockStraightFlush, 000h
 00000FD5  76 0F	   *	    jbe    @C0142
 00000FD7  C7 05 000000DE R				mov SpockHandValue, 8
	   00000008
						.elseif(SpockFour > 0)
 00000FE1  E9 000000A0	   *	    jmp    @C0144
 00000FE6		   *@C0142:
 00000FE6  83 3D 000000C2 R
	   00		   *	    cmp    SpockFour, 000h
 00000FED  76 0F	   *	    jbe    @C0145
 00000FEF  C7 05 000000DE R				mov SpockHandValue, 7
	   00000007
						.elseif(SpockFull > 0)
 00000FF9  E9 00000088	   *	    jmp    @C0147
 00000FFE		   *@C0145:
 00000FFE  83 3D 000000C6 R
	   00		   *	    cmp    SpockFull, 000h
 00001005  76 0C	   *	    jbe    @C0148
 00001007  C7 05 000000DE R				mov SpockHandValue, 6
	   00000006
						.elseif(SpockFlush > 0)
 00001011  EB 73	   *	    jmp    @C014A
 00001013		   *@C0148:
 00001013  83 3D 000000CA R
	   00		   *	    cmp    SpockFlush, 000h
 0000101A  76 0C	   *	    jbe    @C014B
 0000101C  C7 05 000000DE R				mov SpockHandValue, 5
	   00000005
						.elseif(SpockStraight > 0)
 00001026  EB 5E	   *	    jmp    @C014D
 00001028		   *@C014B:
 00001028  83 3D 000000CE R
	   00		   *	    cmp    SpockStraight, 000h
 0000102F  76 0C	   *	    jbe    @C014E
 00001031  C7 05 000000DE R				mov SpockHandValue, 4
	   00000004
						.elseif(SpockThree > 0)
 0000103B  EB 49	   *	    jmp    @C0150
 0000103D		   *@C014E:
 0000103D  83 3D 000000D2 R
	   00		   *	    cmp    SpockThree, 000h
 00001044  76 0C	   *	    jbe    @C0151
 00001046  C7 05 000000DE R				mov SpockHandValue, 3
	   00000003
						.elseif(SpockTwoPair > 0)
 00001050  EB 34	   *	    jmp    @C0153
 00001052		   *@C0151:
 00001052  83 3D 000000D6 R
	   00		   *	    cmp    SpockTwoPair, 000h
 00001059  76 0C	   *	    jbe    @C0154
 0000105B  C7 05 000000DE R				mov SpockHandValue, 2
	   00000002
						.elseif(SpockOnePair > 0)
 00001065  EB 1F	   *	    jmp    @C0156
 00001067		   *@C0154:
 00001067  83 3D 000000DA R
	   00		   *	    cmp    SpockOnePair, 000h
 0000106E  76 0C	   *	    jbe    @C0157
 00001070  C7 05 000000DE R				mov SpockHandValue, 1
	   00000001
						.else
 0000107A  EB 0A	   *	    jmp    @C0159
 0000107C		   *@C0157:
 0000107C  C7 05 000000DE R				mov SpockHandValue,0
	   00000000
					.endif
 00001086		   *@C0159:
 00001086		   *@C0156:
 00001086		   *@C0153:
 00001086		   *@C0150:
 00001086		   *@C014D:
 00001086		   *@C014A:
 00001086		   *@C0147:
 00001086		   *@C0144:
 00001086		   *@C0141:

					.if(PlayerRoyal > 0)
 00001086  83 3D 0000007A R
	   00		   *	    cmp    PlayerRoyal, 000h
 0000108D  76 0F	   *	    jbe    @C015A
 0000108F  C7 05 0000009E R			mov PlayerHandValue, 9
	   00000009
						.elseif(PlayerStraightFlush > 0)
 00001099  E9 000000B8	   *	    jmp    @C015C
 0000109E		   *@C015A:
 0000109E  83 3D 0000007E R
	   00		   *	    cmp    PlayerStraightFlush, 000h
 000010A5  76 0F	   *	    jbe    @C015D
 000010A7  C7 05 0000009E R				mov PlayerHandValue, 8
	   00000008
						.elseif(PlayerFour > 0)
 000010B1  E9 000000A0	   *	    jmp    @C015F
 000010B6		   *@C015D:
 000010B6  83 3D 00000082 R
	   00		   *	    cmp    PlayerFour, 000h
 000010BD  76 0F	   *	    jbe    @C0160
 000010BF  C7 05 0000009E R				mov PlayerHandValue, 7
	   00000007
						.elseif(PlayerFull > 0)
 000010C9  E9 00000088	   *	    jmp    @C0162
 000010CE		   *@C0160:
 000010CE  83 3D 00000086 R
	   00		   *	    cmp    PlayerFull, 000h
 000010D5  76 0C	   *	    jbe    @C0163
 000010D7  C7 05 0000009E R				mov PlayerHandValue, 6
	   00000006
						.elseif(PlayerFlush > 0)
 000010E1  EB 73	   *	    jmp    @C0165
 000010E3		   *@C0163:
 000010E3  83 3D 0000008A R
	   00		   *	    cmp    PlayerFlush, 000h
 000010EA  76 0C	   *	    jbe    @C0166
 000010EC  C7 05 0000009E R				mov PlayerHandValue, 5
	   00000005
						.elseif(PlayerStraight > 0)
 000010F6  EB 5E	   *	    jmp    @C0168
 000010F8		   *@C0166:
 000010F8  83 3D 0000008E R
	   00		   *	    cmp    PlayerStraight, 000h
 000010FF  76 0C	   *	    jbe    @C0169
 00001101  C7 05 0000009E R				mov PlayerHandValue, 4
	   00000004
						.elseif(PlayerThree > 0)
 0000110B  EB 49	   *	    jmp    @C016B
 0000110D		   *@C0169:
 0000110D  83 3D 00000092 R
	   00		   *	    cmp    PlayerThree, 000h
 00001114  76 0C	   *	    jbe    @C016C
 00001116  C7 05 0000009E R				mov PlayerHandValue, 3
	   00000003
						.elseif(PlayerTwoPair > 0)
 00001120  EB 34	   *	    jmp    @C016E
 00001122		   *@C016C:
 00001122  83 3D 00000096 R
	   00		   *	    cmp    PlayerTwoPair, 000h
 00001129  76 0C	   *	    jbe    @C016F
 0000112B  C7 05 0000009E R				mov PlayerHandValue, 2
	   00000002
						.elseif(PlayerOnePair > 0)
 00001135  EB 1F	   *	    jmp    @C0171
 00001137		   *@C016F:
 00001137  83 3D 0000009A R
	   00		   *	    cmp    PlayerOnePair, 000h
 0000113E  76 0C	   *	    jbe    @C0172
 00001140  C7 05 0000009E R				mov PlayerHandValue, 1
	   00000001
						.else
 0000114A  EB 0A	   *	    jmp    @C0174
 0000114C		   *@C0172:
 0000114C  C7 05 0000009E R				mov PlayerHandValue,0
	   00000000
					.endif 
 00001156		   *@C0174:
 00001156		   *@C0171:
 00001156		   *@C016E:
 00001156		   *@C016B:
 00001156		   *@C0168:
 00001156		   *@C0165:
 00001156		   *@C0162:
 00001156		   *@C015F:
 00001156		   *@C015C:

 00001156  C3				ret
 00001157			HandValue ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001157			CompareHand Proc



 00001157  E8 FFFFFC73			Call HandValue
 0000115C  8B 35 0000009E R		mov esi, PlayerHandValue
 00001162  8B 3D 000000DE R		mov edi, SpockHandValue

					.if(FoldS==1)
 00001168  83 3D 000000B2 R
	   01		   *	    cmp    FoldS, 001h
 0000116F  75 11	   *	    jne    @C0175
 00001171  C7 05 000000DE R		mov SpockHandValue,0
	   00000000
 0000117B  C6 05 00000078 R		mov HighCards,0
	   00
				.endif
 00001182		   *@C0175:

				.if(FoldP==1)
 00001182  83 3D 000000B6 R
	   01		   *	    cmp    FoldP, 001h
 00001189  75 11	   *	    jne    @C0177
 0000118B  C7 05 0000009E R		mov PlayerHandValue,0
	   00000000
 00001195  C6 05 00000079 R		mov HighCardP,0
	   00
				.endif
 0000119C		   *@C0177:

					.if(esi>edi)
 0000119C  3B F7	   *	    cmp    esi, edi
 0000119E  76 1A	   *	    jbe    @C0179
 000011A0  A1 000001AE R			mov eax, ChipsTable
 000011A5  01 05 000001A6 R			add ChipsPlayer, eax
 000011AB  C7 05 000001AE R			mov ChipsTable, 0
	   00000000

					.elseif(edi>esi)
 000011B5  E9 00000084	   *	    jmp    @C017B
 000011BA		   *@C0179:
 000011BA  3B FE	   *	    cmp    edi, esi
 000011BC  76 17	   *	    jbe    @C017C
 000011BE  A1 000001AE R			mov eax, ChipsTable
 000011C3  01 05 000001AA R			add ChipsSpock, eax
 000011C9  C7 05 000001AE R			mov ChipsTable, 0
	   00000000
					.else
 000011D3  EB 69	   *	    jmp    @C017E
 000011D5		   *@C017C:
 000011D5  A0 00000079 R			mov al, HighCardp
 000011DA  8A 1D 00000078 R			mov bl, Highcards
							.if(al>bl)
 000011E0  3A C3	   *	    cmp    al, bl
 000011E2  76 17	   *	    jbe    @C017F
 000011E4  A1 000001AE R					mov eax, ChipsTable
 000011E9  01 05 000001A6 R					add ChipsPlayer, eax
 000011EF  C7 05 000001AE R					mov ChipsTable, 0
	   00000000
							.elseif(bl>al)
 000011F9  EB 43	   *	    jmp    @C0181
 000011FB		   *@C017F:
 000011FB  3A D8	   *	    cmp    bl, al
 000011FD  76 17	   *	    jbe    @C0182
 000011FF  A1 000001AE R					mov eax, ChipsTable
 00001204  01 05 000001AA R					add ChipsSpock, eax
 0000120A  C7 05 000001AE R					mov ChipsTable, 0
	   00000000
							.elseif(al==bl)
 00001214  EB 28	   *	    jmp    @C0184
 00001216		   *@C0182:
 00001216  3A C3	   *	    cmp    al, bl
 00001218  75 24	   *	    jne    @C0185
 0000121A  A1 000001AE R					mov eax, ChipsTable
 0000121F  BB 00000002						mov ebx, 2
 00001224  2B D2						sub edx, edx
 00001226  F7 F3						div ebx
 00001228  01 05 000001AA R					add ChipsSpock, eax
 0000122E  01 05 000001A6 R					add ChipsPlayer, eax
 00001234  C7 05 000001AE R					mov ChipsTable, 0
	   00000000
							.endif

					.endif
 0000123E		   *@C0185:
 0000123E		   *@C0184:
 0000123E		   *@C0181:
 0000123E		   *@C017E:
 0000123E		   *@C017B:
 0000123E  C7 05 000000B6 R		mov FoldP, 0
	   00000000
 00001248  C7 05 000000B2 R		mov FoldS, 0
	   00000000
 00001252  C3				ret
 00001253			CompareHand ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001253			IsAFlush Proc
				;Spock Check
					.if (cards1.suit == 1)
 00001253  80 3D 00000009 R
	   01		   *	    cmp    cards1 . Suit, 001h
 0000125A  75 06	   *	    jne    @C0187
 0000125C  FF 05 00000046 R			inc IsSpadeS
					.endif
 00001262		   *@C0187:
					.if (cards2.suit == 1)
 00001262  80 3D 0000000B R
	   01		   *	    cmp    cards2 . Suit, 001h
 00001269  75 06	   *	    jne    @C0189
 0000126B  FF 05 00000046 R			inc IsSpadeS
					.endif
 00001271		   *@C0189:
					.if (cards3.suit == 1)
 00001271  80 3D 0000000D R
	   01		   *	    cmp    cards3 . Suit, 001h
 00001278  75 06	   *	    jne    @C018B
 0000127A  FF 05 00000046 R			inc IsSpadeS
					.endif
 00001280		   *@C018B:
					.if (cards4.suit == 1)
 00001280  80 3D 0000000F R
	   01		   *	    cmp    cards4 . Suit, 001h
 00001287  75 06	   *	    jne    @C018D
 00001289  FF 05 00000046 R			inc IsSpadeS
					.endif
 0000128F		   *@C018D:
					.if (cards5.suit == 1)
 0000128F  80 3D 00000011 R
	   01		   *	    cmp    cards5 . Suit, 001h
 00001296  75 06	   *	    jne    @C018F
 00001298  FF 05 00000046 R			inc IsSpadeS
					.endif
 0000129E		   *@C018F:
					.if (cards6.suit == 1)
 0000129E  80 3D 00000013 R
	   01		   *	    cmp    cards6 . Suit, 001h
 000012A5  75 06	   *	    jne    @C0191
 000012A7  FF 05 00000046 R			inc IsSpadeS
					.endif
 000012AD		   *@C0191:
					.if (cards7.suit == 1)
 000012AD  80 3D 00000015 R
	   01		   *	    cmp    cards7 . Suit, 001h
 000012B4  75 06	   *	    jne    @C0193
 000012B6  FF 05 00000046 R			inc IsSpadeS
					.endif
 000012BC		   *@C0193:

					.if (cards1.suit == 2)
 000012BC  80 3D 00000009 R
	   02		   *	    cmp    cards1 . Suit, 002h
 000012C3  75 06	   *	    jne    @C0195
 000012C5  FF 05 0000004A R			inc IsHeartS
					.endif
 000012CB		   *@C0195:
					.if (cards2.suit == 2)
 000012CB  80 3D 0000000B R
	   02		   *	    cmp    cards2 . Suit, 002h
 000012D2  75 06	   *	    jne    @C0197
 000012D4  FF 05 0000004A R			inc IsHeartS
					.endif
 000012DA		   *@C0197:
					.if (cards3.suit == 2)
 000012DA  80 3D 0000000D R
	   02		   *	    cmp    cards3 . Suit, 002h
 000012E1  75 06	   *	    jne    @C0199
 000012E3  FF 05 0000004A R			inc IsHeartS
					.endif
 000012E9		   *@C0199:
					.if (cards4.suit == 2)
 000012E9  80 3D 0000000F R
	   02		   *	    cmp    cards4 . Suit, 002h
 000012F0  75 06	   *	    jne    @C019B
 000012F2  FF 05 0000004A R			inc IsHeartS
					.endif
 000012F8		   *@C019B:
					.if (cards5.suit == 2)
 000012F8  80 3D 00000011 R
	   02		   *	    cmp    cards5 . Suit, 002h
 000012FF  75 06	   *	    jne    @C019D
 00001301  FF 05 0000004A R			inc IsHeartS
					.endif
 00001307		   *@C019D:
					.if (cards6.suit == 2)
 00001307  80 3D 00000013 R
	   02		   *	    cmp    cards6 . Suit, 002h
 0000130E  75 06	   *	    jne    @C019F
 00001310  FF 05 0000004A R			inc IsHeartS
					.endif
 00001316		   *@C019F:
					.if (cards7.suit == 2)
 00001316  80 3D 00000015 R
	   02		   *	    cmp    cards7 . Suit, 002h
 0000131D  75 06	   *	    jne    @C01A1
 0000131F  FF 05 0000004A R			inc IsHeartS
					.endif
 00001325		   *@C01A1:

					.if (cards1.suit == 3)
 00001325  80 3D 00000009 R
	   03		   *	    cmp    cards1 . Suit, 003h
 0000132C  75 06	   *	    jne    @C01A3
 0000132E  FF 05 0000004E R			inc IsClubS
					.endif
 00001334		   *@C01A3:
					.if (cards2.suit == 3)
 00001334  80 3D 0000000B R
	   03		   *	    cmp    cards2 . Suit, 003h
 0000133B  75 06	   *	    jne    @C01A5
 0000133D  FF 05 0000004E R			inc IsClubS
					.endif
 00001343		   *@C01A5:
					.if (cards3.suit == 3)
 00001343  80 3D 0000000D R
	   03		   *	    cmp    cards3 . Suit, 003h
 0000134A  75 06	   *	    jne    @C01A7
 0000134C  FF 05 0000004E R			inc IsClubS
					.endif
 00001352		   *@C01A7:
					.if (cards4.suit == 3)
 00001352  80 3D 0000000F R
	   03		   *	    cmp    cards4 . Suit, 003h
 00001359  75 06	   *	    jne    @C01A9
 0000135B  FF 05 0000004E R			inc IsClubS
					.endif
 00001361		   *@C01A9:
					.if (cards5.suit == 3)
 00001361  80 3D 00000011 R
	   03		   *	    cmp    cards5 . Suit, 003h
 00001368  75 06	   *	    jne    @C01AB
 0000136A  FF 05 0000004E R			inc IsClubS
					.endif
 00001370		   *@C01AB:
					.if (cards6.suit == 3)
 00001370  80 3D 00000013 R
	   03		   *	    cmp    cards6 . Suit, 003h
 00001377  75 06	   *	    jne    @C01AD
 00001379  FF 05 0000004E R			inc IsClubS
					.endif
 0000137F		   *@C01AD:
					.if (cards7.suit == 3)
 0000137F  80 3D 00000015 R
	   03		   *	    cmp    cards7 . Suit, 003h
 00001386  75 06	   *	    jne    @C01AF
 00001388  FF 05 0000004E R			inc IsClubS
					.endif
 0000138E		   *@C01AF:

					.if (cards1.suit == 4)
 0000138E  80 3D 00000009 R
	   04		   *	    cmp    cards1 . Suit, 004h
 00001395  75 06	   *	    jne    @C01B1
 00001397  FF 05 00000052 R			inc IsDimondS
					.endif
 0000139D		   *@C01B1:
					.if (cards2.suit == 4)
 0000139D  80 3D 0000000B R
	   04		   *	    cmp    cards2 . Suit, 004h
 000013A4  75 06	   *	    jne    @C01B3
 000013A6  FF 05 00000052 R			inc IsDimondS
					.endif
 000013AC		   *@C01B3:
					.if (cards3.suit == 4)
 000013AC  80 3D 0000000D R
	   04		   *	    cmp    cards3 . Suit, 004h
 000013B3  75 06	   *	    jne    @C01B5
 000013B5  FF 05 00000052 R			inc IsDimondS
					.endif
 000013BB		   *@C01B5:
					.if (cards4.suit == 4)
 000013BB  80 3D 0000000F R
	   04		   *	    cmp    cards4 . Suit, 004h
 000013C2  75 06	   *	    jne    @C01B7
 000013C4  FF 05 00000052 R			inc IsDimondS
					.endif
 000013CA		   *@C01B7:
					.if (cards5.suit == 4)
 000013CA  80 3D 00000011 R
	   04		   *	    cmp    cards5 . Suit, 004h
 000013D1  75 06	   *	    jne    @C01B9
 000013D3  FF 05 00000052 R			inc IsDimondS
					.endif
 000013D9		   *@C01B9:
					.if (cards6.suit == 4)
 000013D9  80 3D 00000013 R
	   04		   *	    cmp    cards6 . Suit, 004h
 000013E0  75 06	   *	    jne    @C01BB
 000013E2  FF 05 00000052 R			inc IsDimondS
					.endif
 000013E8		   *@C01BB:
					.if (cards7.suit == 4)
 000013E8  80 3D 00000015 R
	   04		   *	    cmp    cards7 . Suit, 004h
 000013EF  75 06	   *	    jne    @C01BD
 000013F1  FF 05 00000052 R			inc IsDimondS
					.endif
 000013F7		   *@C01BD:

					.if(IsSpadeS>4)
 000013F7  83 3D 00000046 R
	   04		   *	    cmp    isSpadeS, 004h
 000013FE  76 0A	   *	    jbe    @C01BF
 00001400  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 0000140A		   *@C01BF:
					.if(IsHeartS>4)
 0000140A  83 3D 0000004A R
	   04		   *	    cmp    isHeartS, 004h
 00001411  76 0A	   *	    jbe    @C01C1
 00001413  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 0000141D		   *@C01C1:
					.if(IsClubS>4)
 0000141D  83 3D 0000004E R
	   04		   *	    cmp    isClubS, 004h
 00001424  76 0A	   *	    jbe    @C01C3
 00001426  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 00001430		   *@C01C3:
					.if(IsDimondS>4)
 00001430  83 3D 00000052 R
	   04		   *	    cmp    isDimondS, 004h
 00001437  76 0A	   *	    jbe    @C01C5
 00001439  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 00001443		   *@C01C5:
					.if(isFlushS>0)
 00001443  83 3D 00000056 R
	   00		   *	    cmp    isFlushS, 000h
 0000144A  76 0A	   *	    jbe    @C01C7
 0000144C  C7 05 000000CA R			mov SpockFlush,1
	   00000001
					.endif
 00001456		   *@C01C7:

				;Player Check
					.if (cardp1.suit == 1)
 00001456  80 3D 00000017 R
	   01		   *	    cmp    cardp1 . Suit, 001h
 0000145D  75 06	   *	    jne    @C01C9
 0000145F  FF 05 00000032 R			inc IsSpadeP
					.endif
 00001465		   *@C01C9:
					.if (cardp2.suit == 1)
 00001465  80 3D 00000019 R
	   01		   *	    cmp    cardp2 . Suit, 001h
 0000146C  75 06	   *	    jne    @C01CB
 0000146E  FF 05 00000032 R			inc IsSpadeP
					.endif
 00001474		   *@C01CB:
					.if (cardp3.suit == 1)
 00001474  80 3D 0000001B R
	   01		   *	    cmp    cardp3 . Suit, 001h
 0000147B  75 06	   *	    jne    @C01CD
 0000147D  FF 05 00000032 R			inc IsSpadeP
					.endif
 00001483		   *@C01CD:
					.if (cardp4.suit == 1)
 00001483  80 3D 0000001D R
	   01		   *	    cmp    cardp4 . Suit, 001h
 0000148A  75 06	   *	    jne    @C01CF
 0000148C  FF 05 00000032 R			inc IsSpadeP
					.endif
 00001492		   *@C01CF:
					.if (cardp5.suit == 1)
 00001492  80 3D 0000001F R
	   01		   *	    cmp    cardp5 . Suit, 001h
 00001499  75 06	   *	    jne    @C01D1
 0000149B  FF 05 00000032 R			inc IsSpadeP
					.endif
 000014A1		   *@C01D1:
					.if (cardp6.suit == 1)
 000014A1  80 3D 00000021 R
	   01		   *	    cmp    cardp6 . Suit, 001h
 000014A8  75 06	   *	    jne    @C01D3
 000014AA  FF 05 00000032 R			inc IsSpadeP
					.endif
 000014B0		   *@C01D3:
					.if (cardp7.suit == 1)
 000014B0  80 3D 00000023 R
	   01		   *	    cmp    cardp7 . Suit, 001h
 000014B7  75 06	   *	    jne    @C01D5
 000014B9  FF 05 00000032 R			inc IsSpadeP
					.endif
 000014BF		   *@C01D5:

					.if (cardp1.suit == 2)
 000014BF  80 3D 00000017 R
	   02		   *	    cmp    cardp1 . Suit, 002h
 000014C6  75 06	   *	    jne    @C01D7
 000014C8  FF 05 00000036 R			inc IsHeartP
					.endif
 000014CE		   *@C01D7:
					.if (cardp2.suit == 2)
 000014CE  80 3D 00000019 R
	   02		   *	    cmp    cardp2 . Suit, 002h
 000014D5  75 06	   *	    jne    @C01D9
 000014D7  FF 05 00000036 R			inc IsHeartP
					.endif
 000014DD		   *@C01D9:
					.if (cardp3.suit == 2)
 000014DD  80 3D 0000001B R
	   02		   *	    cmp    cardp3 . Suit, 002h
 000014E4  75 06	   *	    jne    @C01DB
 000014E6  FF 05 00000036 R			inc IsHeartP
					.endif
 000014EC		   *@C01DB:
					.if (cardp4.suit == 2)
 000014EC  80 3D 0000001D R
	   02		   *	    cmp    cardp4 . Suit, 002h
 000014F3  75 06	   *	    jne    @C01DD
 000014F5  FF 05 00000036 R			inc IsHeartP
					.endif
 000014FB		   *@C01DD:
					.if (cardp5.suit == 2)
 000014FB  80 3D 0000001F R
	   02		   *	    cmp    cardp5 . Suit, 002h
 00001502  75 06	   *	    jne    @C01DF
 00001504  FF 05 00000036 R			inc IsHeartP
					.endif
 0000150A		   *@C01DF:
					.if (cardp6.suit == 2)
 0000150A  80 3D 00000021 R
	   02		   *	    cmp    cardp6 . Suit, 002h
 00001511  75 06	   *	    jne    @C01E1
 00001513  FF 05 00000036 R			inc IsHeartP
					.endif
 00001519		   *@C01E1:
					.if (cardp7.suit == 2)
 00001519  80 3D 00000023 R
	   02		   *	    cmp    cardp7 . Suit, 002h
 00001520  75 06	   *	    jne    @C01E3
 00001522  FF 05 00000036 R			inc IsHeartP
					.endif
 00001528		   *@C01E3:

					.if (cardp1.suit == 3)
 00001528  80 3D 00000017 R
	   03		   *	    cmp    cardp1 . Suit, 003h
 0000152F  75 06	   *	    jne    @C01E5
 00001531  FF 05 0000003A R			inc IsClubP
					.endif
 00001537		   *@C01E5:
					.if (cardp2.suit == 3)
 00001537  80 3D 00000019 R
	   03		   *	    cmp    cardp2 . Suit, 003h
 0000153E  75 06	   *	    jne    @C01E7
 00001540  FF 05 0000003A R			inc IsClubP
					.endif
 00001546		   *@C01E7:
					.if (cardp3.suit == 3)
 00001546  80 3D 0000001B R
	   03		   *	    cmp    cardp3 . Suit, 003h
 0000154D  75 06	   *	    jne    @C01E9
 0000154F  FF 05 0000003A R			inc IsClubP
					.endif
 00001555		   *@C01E9:
					.if (cardp4.suit == 3)
 00001555  80 3D 0000001D R
	   03		   *	    cmp    cardp4 . Suit, 003h
 0000155C  75 06	   *	    jne    @C01EB
 0000155E  FF 05 0000003A R			inc IsClubP
					.endif
 00001564		   *@C01EB:
					.if (cardp5.suit == 3)
 00001564  80 3D 0000001F R
	   03		   *	    cmp    cardp5 . Suit, 003h
 0000156B  75 06	   *	    jne    @C01ED
 0000156D  FF 05 0000003A R			inc IsClubP
					.endif
 00001573		   *@C01ED:
					.if (cardp6.suit == 3)
 00001573  80 3D 00000021 R
	   03		   *	    cmp    cardp6 . Suit, 003h
 0000157A  75 06	   *	    jne    @C01EF
 0000157C  FF 05 0000003A R			inc IsClubP
					.endif
 00001582		   *@C01EF:
					.if (cardp7.suit == 3)
 00001582  80 3D 00000023 R
	   03		   *	    cmp    cardp7 . Suit, 003h
 00001589  75 06	   *	    jne    @C01F1
 0000158B  FF 05 0000003A R			inc IsClubP
					.endif
 00001591		   *@C01F1:

					.if (cardp1.suit == 4)
 00001591  80 3D 00000017 R
	   04		   *	    cmp    cardp1 . Suit, 004h
 00001598  75 06	   *	    jne    @C01F3
 0000159A  FF 05 0000003E R			inc IsDimondP
					.endif
 000015A0		   *@C01F3:
					.if (cardp2.suit == 4)
 000015A0  80 3D 00000019 R
	   04		   *	    cmp    cardp2 . Suit, 004h
 000015A7  75 06	   *	    jne    @C01F5
 000015A9  FF 05 0000003E R			inc IsDimondP
					.endif
 000015AF		   *@C01F5:
					.if (cardp3.suit == 4)
 000015AF  80 3D 0000001B R
	   04		   *	    cmp    cardp3 . Suit, 004h
 000015B6  75 06	   *	    jne    @C01F7
 000015B8  FF 05 0000003E R			inc IsDimondP
					.endif
 000015BE		   *@C01F7:
					.if (cardp4.suit == 4)
 000015BE  80 3D 0000001D R
	   04		   *	    cmp    cardp4 . Suit, 004h
 000015C5  75 06	   *	    jne    @C01F9
 000015C7  FF 05 0000003E R			inc IsDimondP
					.endif
 000015CD		   *@C01F9:
					.if (cardp5.suit == 4)
 000015CD  80 3D 0000001F R
	   04		   *	    cmp    cardp5 . Suit, 004h
 000015D4  75 06	   *	    jne    @C01FB
 000015D6  FF 05 0000003E R			inc IsDimondP
					.endif
 000015DC		   *@C01FB:
					.if (cardp6.suit == 4)
 000015DC  80 3D 00000021 R
	   04		   *	    cmp    cardp6 . Suit, 004h
 000015E3  75 06	   *	    jne    @C01FD
 000015E5  FF 05 0000003E R			inc IsDimondP
					.endif
 000015EB		   *@C01FD:
					.if (cardp7.suit == 4)
 000015EB  80 3D 00000023 R
	   04		   *	    cmp    cardp7 . Suit, 004h
 000015F2  75 06	   *	    jne    @C01FF
 000015F4  FF 05 0000003E R			inc IsDimondP
					.endif
 000015FA		   *@C01FF:

					.if(IsSpadeP>4)
 000015FA  83 3D 00000032 R
	   04		   *	    cmp    isSpadeP, 004h
 00001601  76 0A	   *	    jbe    @C0201
 00001603  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 0000160D		   *@C0201:
					.if(IsHeartP>4)
 0000160D  83 3D 00000036 R
	   04		   *	    cmp    isHeartP, 004h
 00001614  76 0A	   *	    jbe    @C0203
 00001616  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 00001620		   *@C0203:
					.if(IsClubP>4)
 00001620  83 3D 0000003A R
	   04		   *	    cmp    isClubP, 004h
 00001627  76 0A	   *	    jbe    @C0205
 00001629  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 00001633		   *@C0205:
					.if(IsDimondP>4)
 00001633  83 3D 0000003E R
	   04		   *	    cmp    isDimondP, 004h
 0000163A  76 0A	   *	    jbe    @C0207
 0000163C  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 00001646		   *@C0207:

					.if(isFlushP>0)
 00001646  83 3D 00000042 R
	   00		   *	    cmp    isFlushP, 000h
 0000164D  76 0A	   *	    jbe    @C0209
 0000164F  C7 05 0000008A R			mov PlayerFlush, 1
	   00000001
					.endif
 00001659		   *@C0209:

 00001659  C3			ret
 0000165A			IsAFlush ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000165A			IsAStraight Proc

				;Spock Straight

 0000165A  A0 00000008 R	mov al, cards1.value
				.if (al == 1||al==14||al==27||al==40)
 0000165F  3C 01	   *	    cmp    al, 001h
 00001661  74 0C	   *	    je	@C020C
 00001663  3C 0E	   *	    cmp    al, 00Eh
 00001665  74 08	   *	    je	@C020C
 00001667  3C 1B	   *	    cmp    al, 01Bh
 00001669  74 04	   *	    je	@C020C
 0000166B  3C 28	   *	    cmp    al, 028h
 0000166D  75 07	   *	    jne    @C020B
 0000166F		   *@C020C:
 0000166F  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001671  E9 000000FD	   *	    jmp    @C0210
 00001676		   *@C020B:
 00001676  3C 02	   *	    cmp    al, 002h
 00001678  74 0C	   *	    je	@C0212
 0000167A  3C 0F	   *	    cmp    al, 00Fh
 0000167C  74 08	   *	    je	@C0212
 0000167E  3C 1C	   *	    cmp    al, 01Ch
 00001680  74 04	   *	    je	@C0212
 00001682  3C 29	   *	    cmp    al, 029h
 00001684  75 07	   *	    jne    @C0211
 00001686		   *@C0212:
 00001686  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001688  E9 000000E6	   *	    jmp    @C0216
 0000168D		   *@C0211:
 0000168D  3C 03	   *	    cmp    al, 003h
 0000168F  74 0C	   *	    je	@C0218
 00001691  3C 10	   *	    cmp    al, 010h
 00001693  74 08	   *	    je	@C0218
 00001695  3C 1D	   *	    cmp    al, 01Dh
 00001697  74 04	   *	    je	@C0218
 00001699  3C 2A	   *	    cmp    al, 02Ah
 0000169B  75 07	   *	    jne    @C0217
 0000169D		   *@C0218:
 0000169D  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000169F  E9 000000CF	   *	    jmp    @C021C
 000016A4		   *@C0217:
 000016A4  3C 04	   *	    cmp    al, 004h
 000016A6  74 0C	   *	    je	@C021E
 000016A8  3C 11	   *	    cmp    al, 011h
 000016AA  74 08	   *	    je	@C021E
 000016AC  3C 1E	   *	    cmp    al, 01Eh
 000016AE  74 04	   *	    je	@C021E
 000016B0  3C 2B	   *	    cmp    al, 02Bh
 000016B2  75 07	   *	    jne    @C021D
 000016B4		   *@C021E:
 000016B4  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000016B6  E9 000000B8	   *	    jmp    @C0222
 000016BB		   *@C021D:
 000016BB  3C 05	   *	    cmp    al, 005h
 000016BD  74 0C	   *	    je	@C0224
 000016BF  3C 12	   *	    cmp    al, 012h
 000016C1  74 08	   *	    je	@C0224
 000016C3  3C 1F	   *	    cmp    al, 01Fh
 000016C5  74 04	   *	    je	@C0224
 000016C7  3C 2C	   *	    cmp    al, 02Ch
 000016C9  75 07	   *	    jne    @C0223
 000016CB		   *@C0224:
 000016CB  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000016CD  E9 000000A1	   *	    jmp    @C0228
 000016D2		   *@C0223:
 000016D2  3C 06	   *	    cmp    al, 006h
 000016D4  74 0C	   *	    je	@C022A
 000016D6  3C 13	   *	    cmp    al, 013h
 000016D8  74 08	   *	    je	@C022A
 000016DA  3C 20	   *	    cmp    al, 020h
 000016DC  74 04	   *	    je	@C022A
 000016DE  3C 2D	   *	    cmp    al, 02Dh
 000016E0  75 07	   *	    jne    @C0229
 000016E2		   *@C022A:
 000016E2  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000016E4  E9 0000008A	   *	    jmp    @C022E
 000016E9		   *@C0229:
 000016E9  3C 07	   *	    cmp    al, 007h
 000016EB  74 0C	   *	    je	@C0230
 000016ED  3C 14	   *	    cmp    al, 014h
 000016EF  74 08	   *	    je	@C0230
 000016F1  3C 21	   *	    cmp    al, 021h
 000016F3  74 04	   *	    je	@C0230
 000016F5  3C 2E	   *	    cmp    al, 02Eh
 000016F7  75 04	   *	    jne    @C022F
 000016F9		   *@C0230:
 000016F9  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000016FB  EB 76	   *	    jmp    @C0234
 000016FD		   *@C022F:
 000016FD  3C 08	   *	    cmp    al, 008h
 000016FF  74 0C	   *	    je	@C0236
 00001701  3C 15	   *	    cmp    al, 015h
 00001703  74 08	   *	    je	@C0236
 00001705  3C 22	   *	    cmp    al, 022h
 00001707  74 04	   *	    je	@C0236
 00001709  3C 2F	   *	    cmp    al, 02Fh
 0000170B  75 04	   *	    jne    @C0235
 0000170D		   *@C0236:
 0000170D  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000170F  EB 62	   *	    jmp    @C023A
 00001711		   *@C0235:
 00001711  3C 09	   *	    cmp    al, 009h
 00001713  74 0C	   *	    je	@C023C
 00001715  3C 16	   *	    cmp    al, 016h
 00001717  74 08	   *	    je	@C023C
 00001719  3C 23	   *	    cmp    al, 023h
 0000171B  74 04	   *	    je	@C023C
 0000171D  3C 30	   *	    cmp    al, 030h
 0000171F  75 04	   *	    jne    @C023B
 00001721		   *@C023C:
 00001721  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001723  EB 4E	   *	    jmp    @C0240
 00001725		   *@C023B:
 00001725  3C 0A	   *	    cmp    al, 00Ah
 00001727  74 0C	   *	    je	@C0242
 00001729  3C 17	   *	    cmp    al, 017h
 0000172B  74 08	   *	    je	@C0242
 0000172D  3C 24	   *	    cmp    al, 024h
 0000172F  74 04	   *	    je	@C0242
 00001731  3C 31	   *	    cmp    al, 031h
 00001733  75 04	   *	    jne    @C0241
 00001735		   *@C0242:
 00001735  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001737  EB 3A	   *	    jmp    @C0246
 00001739		   *@C0241:
 00001739  3C 0B	   *	    cmp    al, 00Bh
 0000173B  74 0C	   *	    je	@C0248
 0000173D  3C 18	   *	    cmp    al, 018h
 0000173F  74 08	   *	    je	@C0248
 00001741  3C 25	   *	    cmp    al, 025h
 00001743  74 04	   *	    je	@C0248
 00001745  3C 32	   *	    cmp    al, 032h
 00001747  75 04	   *	    jne    @C0247
 00001749		   *@C0248:
 00001749  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000174B  EB 26	   *	    jmp    @C024C
 0000174D		   *@C0247:
 0000174D  3C 0C	   *	    cmp    al, 00Ch
 0000174F  74 0C	   *	    je	@C024E
 00001751  3C 19	   *	    cmp    al, 019h
 00001753  74 08	   *	    je	@C024E
 00001755  3C 26	   *	    cmp    al, 026h
 00001757  74 04	   *	    je	@C024E
 00001759  3C 33	   *	    cmp    al, 033h
 0000175B  75 04	   *	    jne    @C024D
 0000175D		   *@C024E:
 0000175D  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000175F  EB 12	   *	    jmp    @C0252
 00001761		   *@C024D:
 00001761  3C 0D	   *	    cmp    al, 00Dh
 00001763  74 0C	   *	    je	@C0254
 00001765  3C 1A	   *	    cmp    al, 01Ah
 00001767  74 08	   *	    je	@C0254
 00001769  3C 27	   *	    cmp    al, 027h
 0000176B  74 04	   *	    je	@C0254
 0000176D  3C 34	   *	    cmp    al, 034h
 0000176F  75 02	   *	    jne    @C0253
 00001771		   *@C0254:
 00001771  B0 0D			mov al,13
				.endif
 00001773		   *@C0253:
 00001773		   *@C0252:
 00001773		   *@C024C:
 00001773		   *@C0246:
 00001773		   *@C0240:
 00001773		   *@C023A:
 00001773		   *@C0234:
 00001773		   *@C022E:
 00001773		   *@C0228:
 00001773		   *@C0222:
 00001773		   *@C021C:
 00001773		   *@C0216:
 00001773		   *@C0210:
 00001773  A2 00000024 R	mov straights[0], al

 00001778  A0 0000000A R	mov al, cards2.value
				.if (al == 1||al==14||al==27||al==40)
 0000177D  3C 01	   *	    cmp    al, 001h
 0000177F  74 0C	   *	    je	@C0259
 00001781  3C 0E	   *	    cmp    al, 00Eh
 00001783  74 08	   *	    je	@C0259
 00001785  3C 1B	   *	    cmp    al, 01Bh
 00001787  74 04	   *	    je	@C0259
 00001789  3C 28	   *	    cmp    al, 028h
 0000178B  75 07	   *	    jne    @C0258
 0000178D		   *@C0259:
 0000178D  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000178F  E9 000000FD	   *	    jmp    @C025D
 00001794		   *@C0258:
 00001794  3C 02	   *	    cmp    al, 002h
 00001796  74 0C	   *	    je	@C025F
 00001798  3C 0F	   *	    cmp    al, 00Fh
 0000179A  74 08	   *	    je	@C025F
 0000179C  3C 1C	   *	    cmp    al, 01Ch
 0000179E  74 04	   *	    je	@C025F
 000017A0  3C 29	   *	    cmp    al, 029h
 000017A2  75 07	   *	    jne    @C025E
 000017A4		   *@C025F:
 000017A4  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000017A6  E9 000000E6	   *	    jmp    @C0263
 000017AB		   *@C025E:
 000017AB  3C 03	   *	    cmp    al, 003h
 000017AD  74 0C	   *	    je	@C0265
 000017AF  3C 10	   *	    cmp    al, 010h
 000017B1  74 08	   *	    je	@C0265
 000017B3  3C 1D	   *	    cmp    al, 01Dh
 000017B5  74 04	   *	    je	@C0265
 000017B7  3C 2A	   *	    cmp    al, 02Ah
 000017B9  75 07	   *	    jne    @C0264
 000017BB		   *@C0265:
 000017BB  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000017BD  E9 000000CF	   *	    jmp    @C0269
 000017C2		   *@C0264:
 000017C2  3C 04	   *	    cmp    al, 004h
 000017C4  74 0C	   *	    je	@C026B
 000017C6  3C 11	   *	    cmp    al, 011h
 000017C8  74 08	   *	    je	@C026B
 000017CA  3C 1E	   *	    cmp    al, 01Eh
 000017CC  74 04	   *	    je	@C026B
 000017CE  3C 2B	   *	    cmp    al, 02Bh
 000017D0  75 07	   *	    jne    @C026A
 000017D2		   *@C026B:
 000017D2  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000017D4  E9 000000B8	   *	    jmp    @C026F
 000017D9		   *@C026A:
 000017D9  3C 05	   *	    cmp    al, 005h
 000017DB  74 0C	   *	    je	@C0271
 000017DD  3C 12	   *	    cmp    al, 012h
 000017DF  74 08	   *	    je	@C0271
 000017E1  3C 1F	   *	    cmp    al, 01Fh
 000017E3  74 04	   *	    je	@C0271
 000017E5  3C 2C	   *	    cmp    al, 02Ch
 000017E7  75 07	   *	    jne    @C0270
 000017E9		   *@C0271:
 000017E9  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000017EB  E9 000000A1	   *	    jmp    @C0275
 000017F0		   *@C0270:
 000017F0  3C 06	   *	    cmp    al, 006h
 000017F2  74 0C	   *	    je	@C0277
 000017F4  3C 13	   *	    cmp    al, 013h
 000017F6  74 08	   *	    je	@C0277
 000017F8  3C 20	   *	    cmp    al, 020h
 000017FA  74 04	   *	    je	@C0277
 000017FC  3C 2D	   *	    cmp    al, 02Dh
 000017FE  75 07	   *	    jne    @C0276
 00001800		   *@C0277:
 00001800  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001802  E9 0000008A	   *	    jmp    @C027B
 00001807		   *@C0276:
 00001807  3C 07	   *	    cmp    al, 007h
 00001809  74 0C	   *	    je	@C027D
 0000180B  3C 14	   *	    cmp    al, 014h
 0000180D  74 08	   *	    je	@C027D
 0000180F  3C 21	   *	    cmp    al, 021h
 00001811  74 04	   *	    je	@C027D
 00001813  3C 2E	   *	    cmp    al, 02Eh
 00001815  75 04	   *	    jne    @C027C
 00001817		   *@C027D:
 00001817  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001819  EB 76	   *	    jmp    @C0281
 0000181B		   *@C027C:
 0000181B  3C 08	   *	    cmp    al, 008h
 0000181D  74 0C	   *	    je	@C0283
 0000181F  3C 15	   *	    cmp    al, 015h
 00001821  74 08	   *	    je	@C0283
 00001823  3C 22	   *	    cmp    al, 022h
 00001825  74 04	   *	    je	@C0283
 00001827  3C 2F	   *	    cmp    al, 02Fh
 00001829  75 04	   *	    jne    @C0282
 0000182B		   *@C0283:
 0000182B  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000182D  EB 62	   *	    jmp    @C0287
 0000182F		   *@C0282:
 0000182F  3C 09	   *	    cmp    al, 009h
 00001831  74 0C	   *	    je	@C0289
 00001833  3C 16	   *	    cmp    al, 016h
 00001835  74 08	   *	    je	@C0289
 00001837  3C 23	   *	    cmp    al, 023h
 00001839  74 04	   *	    je	@C0289
 0000183B  3C 30	   *	    cmp    al, 030h
 0000183D  75 04	   *	    jne    @C0288
 0000183F		   *@C0289:
 0000183F  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001841  EB 4E	   *	    jmp    @C028D
 00001843		   *@C0288:
 00001843  3C 0A	   *	    cmp    al, 00Ah
 00001845  74 0C	   *	    je	@C028F
 00001847  3C 17	   *	    cmp    al, 017h
 00001849  74 08	   *	    je	@C028F
 0000184B  3C 24	   *	    cmp    al, 024h
 0000184D  74 04	   *	    je	@C028F
 0000184F  3C 31	   *	    cmp    al, 031h
 00001851  75 04	   *	    jne    @C028E
 00001853		   *@C028F:
 00001853  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001855  EB 3A	   *	    jmp    @C0293
 00001857		   *@C028E:
 00001857  3C 0B	   *	    cmp    al, 00Bh
 00001859  74 0C	   *	    je	@C0295
 0000185B  3C 18	   *	    cmp    al, 018h
 0000185D  74 08	   *	    je	@C0295
 0000185F  3C 25	   *	    cmp    al, 025h
 00001861  74 04	   *	    je	@C0295
 00001863  3C 32	   *	    cmp    al, 032h
 00001865  75 04	   *	    jne    @C0294
 00001867		   *@C0295:
 00001867  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001869  EB 26	   *	    jmp    @C0299
 0000186B		   *@C0294:
 0000186B  3C 0C	   *	    cmp    al, 00Ch
 0000186D  74 0C	   *	    je	@C029B
 0000186F  3C 19	   *	    cmp    al, 019h
 00001871  74 08	   *	    je	@C029B
 00001873  3C 26	   *	    cmp    al, 026h
 00001875  74 04	   *	    je	@C029B
 00001877  3C 33	   *	    cmp    al, 033h
 00001879  75 04	   *	    jne    @C029A
 0000187B		   *@C029B:
 0000187B  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000187D  EB 12	   *	    jmp    @C029F
 0000187F		   *@C029A:
 0000187F  3C 0D	   *	    cmp    al, 00Dh
 00001881  74 0C	   *	    je	@C02A1
 00001883  3C 1A	   *	    cmp    al, 01Ah
 00001885  74 08	   *	    je	@C02A1
 00001887  3C 27	   *	    cmp    al, 027h
 00001889  74 04	   *	    je	@C02A1
 0000188B  3C 34	   *	    cmp    al, 034h
 0000188D  75 02	   *	    jne    @C02A0
 0000188F		   *@C02A1:
 0000188F  B0 0D			mov al,13
				.endif
 00001891		   *@C02A0:
 00001891		   *@C029F:
 00001891		   *@C0299:
 00001891		   *@C0293:
 00001891		   *@C028D:
 00001891		   *@C0287:
 00001891		   *@C0281:
 00001891		   *@C027B:
 00001891		   *@C0275:
 00001891		   *@C026F:
 00001891		   *@C0269:
 00001891		   *@C0263:
 00001891		   *@C025D:
 00001891  A2 00000025 R	mov straights[1], al

 00001896  A0 0000000C R	mov al, cards3.value
				.if (al == 1||al==14||al==27||al==40)
 0000189B  3C 01	   *	    cmp    al, 001h
 0000189D  74 0C	   *	    je	@C02A6
 0000189F  3C 0E	   *	    cmp    al, 00Eh
 000018A1  74 08	   *	    je	@C02A6
 000018A3  3C 1B	   *	    cmp    al, 01Bh
 000018A5  74 04	   *	    je	@C02A6
 000018A7  3C 28	   *	    cmp    al, 028h
 000018A9  75 07	   *	    jne    @C02A5
 000018AB		   *@C02A6:
 000018AB  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000018AD  E9 000000FD	   *	    jmp    @C02AA
 000018B2		   *@C02A5:
 000018B2  3C 02	   *	    cmp    al, 002h
 000018B4  74 0C	   *	    je	@C02AC
 000018B6  3C 0F	   *	    cmp    al, 00Fh
 000018B8  74 08	   *	    je	@C02AC
 000018BA  3C 1C	   *	    cmp    al, 01Ch
 000018BC  74 04	   *	    je	@C02AC
 000018BE  3C 29	   *	    cmp    al, 029h
 000018C0  75 07	   *	    jne    @C02AB
 000018C2		   *@C02AC:
 000018C2  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000018C4  E9 000000E6	   *	    jmp    @C02B0
 000018C9		   *@C02AB:
 000018C9  3C 03	   *	    cmp    al, 003h
 000018CB  74 0C	   *	    je	@C02B2
 000018CD  3C 10	   *	    cmp    al, 010h
 000018CF  74 08	   *	    je	@C02B2
 000018D1  3C 1D	   *	    cmp    al, 01Dh
 000018D3  74 04	   *	    je	@C02B2
 000018D5  3C 2A	   *	    cmp    al, 02Ah
 000018D7  75 07	   *	    jne    @C02B1
 000018D9		   *@C02B2:
 000018D9  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000018DB  E9 000000CF	   *	    jmp    @C02B6
 000018E0		   *@C02B1:
 000018E0  3C 04	   *	    cmp    al, 004h
 000018E2  74 0C	   *	    je	@C02B8
 000018E4  3C 11	   *	    cmp    al, 011h
 000018E6  74 08	   *	    je	@C02B8
 000018E8  3C 1E	   *	    cmp    al, 01Eh
 000018EA  74 04	   *	    je	@C02B8
 000018EC  3C 2B	   *	    cmp    al, 02Bh
 000018EE  75 07	   *	    jne    @C02B7
 000018F0		   *@C02B8:
 000018F0  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000018F2  E9 000000B8	   *	    jmp    @C02BC
 000018F7		   *@C02B7:
 000018F7  3C 05	   *	    cmp    al, 005h
 000018F9  74 0C	   *	    je	@C02BE
 000018FB  3C 12	   *	    cmp    al, 012h
 000018FD  74 08	   *	    je	@C02BE
 000018FF  3C 1F	   *	    cmp    al, 01Fh
 00001901  74 04	   *	    je	@C02BE
 00001903  3C 2C	   *	    cmp    al, 02Ch
 00001905  75 07	   *	    jne    @C02BD
 00001907		   *@C02BE:
 00001907  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001909  E9 000000A1	   *	    jmp    @C02C2
 0000190E		   *@C02BD:
 0000190E  3C 06	   *	    cmp    al, 006h
 00001910  74 0C	   *	    je	@C02C4
 00001912  3C 13	   *	    cmp    al, 013h
 00001914  74 08	   *	    je	@C02C4
 00001916  3C 20	   *	    cmp    al, 020h
 00001918  74 04	   *	    je	@C02C4
 0000191A  3C 2D	   *	    cmp    al, 02Dh
 0000191C  75 07	   *	    jne    @C02C3
 0000191E		   *@C02C4:
 0000191E  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001920  E9 0000008A	   *	    jmp    @C02C8
 00001925		   *@C02C3:
 00001925  3C 07	   *	    cmp    al, 007h
 00001927  74 0C	   *	    je	@C02CA
 00001929  3C 14	   *	    cmp    al, 014h
 0000192B  74 08	   *	    je	@C02CA
 0000192D  3C 21	   *	    cmp    al, 021h
 0000192F  74 04	   *	    je	@C02CA
 00001931  3C 2E	   *	    cmp    al, 02Eh
 00001933  75 04	   *	    jne    @C02C9
 00001935		   *@C02CA:
 00001935  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001937  EB 76	   *	    jmp    @C02CE
 00001939		   *@C02C9:
 00001939  3C 08	   *	    cmp    al, 008h
 0000193B  74 0C	   *	    je	@C02D0
 0000193D  3C 15	   *	    cmp    al, 015h
 0000193F  74 08	   *	    je	@C02D0
 00001941  3C 22	   *	    cmp    al, 022h
 00001943  74 04	   *	    je	@C02D0
 00001945  3C 2F	   *	    cmp    al, 02Fh
 00001947  75 04	   *	    jne    @C02CF
 00001949		   *@C02D0:
 00001949  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000194B  EB 62	   *	    jmp    @C02D4
 0000194D		   *@C02CF:
 0000194D  3C 09	   *	    cmp    al, 009h
 0000194F  74 0C	   *	    je	@C02D6
 00001951  3C 16	   *	    cmp    al, 016h
 00001953  74 08	   *	    je	@C02D6
 00001955  3C 23	   *	    cmp    al, 023h
 00001957  74 04	   *	    je	@C02D6
 00001959  3C 30	   *	    cmp    al, 030h
 0000195B  75 04	   *	    jne    @C02D5
 0000195D		   *@C02D6:
 0000195D  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 0000195F  EB 4E	   *	    jmp    @C02DA
 00001961		   *@C02D5:
 00001961  3C 0A	   *	    cmp    al, 00Ah
 00001963  74 0C	   *	    je	@C02DC
 00001965  3C 17	   *	    cmp    al, 017h
 00001967  74 08	   *	    je	@C02DC
 00001969  3C 24	   *	    cmp    al, 024h
 0000196B  74 04	   *	    je	@C02DC
 0000196D  3C 31	   *	    cmp    al, 031h
 0000196F  75 04	   *	    jne    @C02DB
 00001971		   *@C02DC:
 00001971  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001973  EB 3A	   *	    jmp    @C02E0
 00001975		   *@C02DB:
 00001975  3C 0B	   *	    cmp    al, 00Bh
 00001977  74 0C	   *	    je	@C02E2
 00001979  3C 18	   *	    cmp    al, 018h
 0000197B  74 08	   *	    je	@C02E2
 0000197D  3C 25	   *	    cmp    al, 025h
 0000197F  74 04	   *	    je	@C02E2
 00001981  3C 32	   *	    cmp    al, 032h
 00001983  75 04	   *	    jne    @C02E1
 00001985		   *@C02E2:
 00001985  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001987  EB 26	   *	    jmp    @C02E6
 00001989		   *@C02E1:
 00001989  3C 0C	   *	    cmp    al, 00Ch
 0000198B  74 0C	   *	    je	@C02E8
 0000198D  3C 19	   *	    cmp    al, 019h
 0000198F  74 08	   *	    je	@C02E8
 00001991  3C 26	   *	    cmp    al, 026h
 00001993  74 04	   *	    je	@C02E8
 00001995  3C 33	   *	    cmp    al, 033h
 00001997  75 04	   *	    jne    @C02E7
 00001999		   *@C02E8:
 00001999  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000199B  EB 12	   *	    jmp    @C02EC
 0000199D		   *@C02E7:
 0000199D  3C 0D	   *	    cmp    al, 00Dh
 0000199F  74 0C	   *	    je	@C02EE
 000019A1  3C 1A	   *	    cmp    al, 01Ah
 000019A3  74 08	   *	    je	@C02EE
 000019A5  3C 27	   *	    cmp    al, 027h
 000019A7  74 04	   *	    je	@C02EE
 000019A9  3C 34	   *	    cmp    al, 034h
 000019AB  75 02	   *	    jne    @C02ED
 000019AD		   *@C02EE:
 000019AD  B0 0D			mov al,13
				.endif
 000019AF		   *@C02ED:
 000019AF		   *@C02EC:
 000019AF		   *@C02E6:
 000019AF		   *@C02E0:
 000019AF		   *@C02DA:
 000019AF		   *@C02D4:
 000019AF		   *@C02CE:
 000019AF		   *@C02C8:
 000019AF		   *@C02C2:
 000019AF		   *@C02BC:
 000019AF		   *@C02B6:
 000019AF		   *@C02B0:
 000019AF		   *@C02AA:
 000019AF  A2 00000026 R	mov straights[2], al

 000019B4  A0 0000000E R	mov al, cards4.value
				.if (al == 1||al==14||al==27||al==40)
 000019B9  3C 01	   *	    cmp    al, 001h
 000019BB  74 0C	   *	    je	@C02F3
 000019BD  3C 0E	   *	    cmp    al, 00Eh
 000019BF  74 08	   *	    je	@C02F3
 000019C1  3C 1B	   *	    cmp    al, 01Bh
 000019C3  74 04	   *	    je	@C02F3
 000019C5  3C 28	   *	    cmp    al, 028h
 000019C7  75 07	   *	    jne    @C02F2
 000019C9		   *@C02F3:
 000019C9  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000019CB  E9 000000FD	   *	    jmp    @C02F7
 000019D0		   *@C02F2:
 000019D0  3C 02	   *	    cmp    al, 002h
 000019D2  74 0C	   *	    je	@C02F9
 000019D4  3C 0F	   *	    cmp    al, 00Fh
 000019D6  74 08	   *	    je	@C02F9
 000019D8  3C 1C	   *	    cmp    al, 01Ch
 000019DA  74 04	   *	    je	@C02F9
 000019DC  3C 29	   *	    cmp    al, 029h
 000019DE  75 07	   *	    jne    @C02F8
 000019E0		   *@C02F9:
 000019E0  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000019E2  E9 000000E6	   *	    jmp    @C02FD
 000019E7		   *@C02F8:
 000019E7  3C 03	   *	    cmp    al, 003h
 000019E9  74 0C	   *	    je	@C02FF
 000019EB  3C 10	   *	    cmp    al, 010h
 000019ED  74 08	   *	    je	@C02FF
 000019EF  3C 1D	   *	    cmp    al, 01Dh
 000019F1  74 04	   *	    je	@C02FF
 000019F3  3C 2A	   *	    cmp    al, 02Ah
 000019F5  75 07	   *	    jne    @C02FE
 000019F7		   *@C02FF:
 000019F7  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000019F9  E9 000000CF	   *	    jmp    @C0303
 000019FE		   *@C02FE:
 000019FE  3C 04	   *	    cmp    al, 004h
 00001A00  74 0C	   *	    je	@C0305
 00001A02  3C 11	   *	    cmp    al, 011h
 00001A04  74 08	   *	    je	@C0305
 00001A06  3C 1E	   *	    cmp    al, 01Eh
 00001A08  74 04	   *	    je	@C0305
 00001A0A  3C 2B	   *	    cmp    al, 02Bh
 00001A0C  75 07	   *	    jne    @C0304
 00001A0E		   *@C0305:
 00001A0E  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001A10  E9 000000B8	   *	    jmp    @C0309
 00001A15		   *@C0304:
 00001A15  3C 05	   *	    cmp    al, 005h
 00001A17  74 0C	   *	    je	@C030B
 00001A19  3C 12	   *	    cmp    al, 012h
 00001A1B  74 08	   *	    je	@C030B
 00001A1D  3C 1F	   *	    cmp    al, 01Fh
 00001A1F  74 04	   *	    je	@C030B
 00001A21  3C 2C	   *	    cmp    al, 02Ch
 00001A23  75 07	   *	    jne    @C030A
 00001A25		   *@C030B:
 00001A25  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001A27  E9 000000A1	   *	    jmp    @C030F
 00001A2C		   *@C030A:
 00001A2C  3C 06	   *	    cmp    al, 006h
 00001A2E  74 0C	   *	    je	@C0311
 00001A30  3C 13	   *	    cmp    al, 013h
 00001A32  74 08	   *	    je	@C0311
 00001A34  3C 20	   *	    cmp    al, 020h
 00001A36  74 04	   *	    je	@C0311
 00001A38  3C 2D	   *	    cmp    al, 02Dh
 00001A3A  75 07	   *	    jne    @C0310
 00001A3C		   *@C0311:
 00001A3C  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001A3E  E9 0000008A	   *	    jmp    @C0315
 00001A43		   *@C0310:
 00001A43  3C 07	   *	    cmp    al, 007h
 00001A45  74 0C	   *	    je	@C0317
 00001A47  3C 14	   *	    cmp    al, 014h
 00001A49  74 08	   *	    je	@C0317
 00001A4B  3C 21	   *	    cmp    al, 021h
 00001A4D  74 04	   *	    je	@C0317
 00001A4F  3C 2E	   *	    cmp    al, 02Eh
 00001A51  75 04	   *	    jne    @C0316
 00001A53		   *@C0317:
 00001A53  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001A55  EB 76	   *	    jmp    @C031B
 00001A57		   *@C0316:
 00001A57  3C 08	   *	    cmp    al, 008h
 00001A59  74 0C	   *	    je	@C031D
 00001A5B  3C 15	   *	    cmp    al, 015h
 00001A5D  74 08	   *	    je	@C031D
 00001A5F  3C 22	   *	    cmp    al, 022h
 00001A61  74 04	   *	    je	@C031D
 00001A63  3C 2F	   *	    cmp    al, 02Fh
 00001A65  75 04	   *	    jne    @C031C
 00001A67		   *@C031D:
 00001A67  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001A69  EB 62	   *	    jmp    @C0321
 00001A6B		   *@C031C:
 00001A6B  3C 09	   *	    cmp    al, 009h
 00001A6D  74 0C	   *	    je	@C0323
 00001A6F  3C 16	   *	    cmp    al, 016h
 00001A71  74 08	   *	    je	@C0323
 00001A73  3C 23	   *	    cmp    al, 023h
 00001A75  74 04	   *	    je	@C0323
 00001A77  3C 30	   *	    cmp    al, 030h
 00001A79  75 04	   *	    jne    @C0322
 00001A7B		   *@C0323:
 00001A7B  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001A7D  EB 4E	   *	    jmp    @C0327
 00001A7F		   *@C0322:
 00001A7F  3C 0A	   *	    cmp    al, 00Ah
 00001A81  74 0C	   *	    je	@C0329
 00001A83  3C 17	   *	    cmp    al, 017h
 00001A85  74 08	   *	    je	@C0329
 00001A87  3C 24	   *	    cmp    al, 024h
 00001A89  74 04	   *	    je	@C0329
 00001A8B  3C 31	   *	    cmp    al, 031h
 00001A8D  75 04	   *	    jne    @C0328
 00001A8F		   *@C0329:
 00001A8F  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001A91  EB 3A	   *	    jmp    @C032D
 00001A93		   *@C0328:
 00001A93  3C 0B	   *	    cmp    al, 00Bh
 00001A95  74 0C	   *	    je	@C032F
 00001A97  3C 18	   *	    cmp    al, 018h
 00001A99  74 08	   *	    je	@C032F
 00001A9B  3C 25	   *	    cmp    al, 025h
 00001A9D  74 04	   *	    je	@C032F
 00001A9F  3C 32	   *	    cmp    al, 032h
 00001AA1  75 04	   *	    jne    @C032E
 00001AA3		   *@C032F:
 00001AA3  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001AA5  EB 26	   *	    jmp    @C0333
 00001AA7		   *@C032E:
 00001AA7  3C 0C	   *	    cmp    al, 00Ch
 00001AA9  74 0C	   *	    je	@C0335
 00001AAB  3C 19	   *	    cmp    al, 019h
 00001AAD  74 08	   *	    je	@C0335
 00001AAF  3C 26	   *	    cmp    al, 026h
 00001AB1  74 04	   *	    je	@C0335
 00001AB3  3C 33	   *	    cmp    al, 033h
 00001AB5  75 04	   *	    jne    @C0334
 00001AB7		   *@C0335:
 00001AB7  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001AB9  EB 12	   *	    jmp    @C0339
 00001ABB		   *@C0334:
 00001ABB  3C 0D	   *	    cmp    al, 00Dh
 00001ABD  74 0C	   *	    je	@C033B
 00001ABF  3C 1A	   *	    cmp    al, 01Ah
 00001AC1  74 08	   *	    je	@C033B
 00001AC3  3C 27	   *	    cmp    al, 027h
 00001AC5  74 04	   *	    je	@C033B
 00001AC7  3C 34	   *	    cmp    al, 034h
 00001AC9  75 02	   *	    jne    @C033A
 00001ACB		   *@C033B:
 00001ACB  B0 0D			mov al,13
				.endif
 00001ACD		   *@C033A:
 00001ACD		   *@C0339:
 00001ACD		   *@C0333:
 00001ACD		   *@C032D:
 00001ACD		   *@C0327:
 00001ACD		   *@C0321:
 00001ACD		   *@C031B:
 00001ACD		   *@C0315:
 00001ACD		   *@C030F:
 00001ACD		   *@C0309:
 00001ACD		   *@C0303:
 00001ACD		   *@C02FD:
 00001ACD		   *@C02F7:
 00001ACD  A2 00000027 R	mov straights[3], al

 00001AD2  A0 00000010 R	mov al, cards5.value
				.if (al == 1||al==14||al==27||al==40)
 00001AD7  3C 01	   *	    cmp    al, 001h
 00001AD9  74 0C	   *	    je	@C0340
 00001ADB  3C 0E	   *	    cmp    al, 00Eh
 00001ADD  74 08	   *	    je	@C0340
 00001ADF  3C 1B	   *	    cmp    al, 01Bh
 00001AE1  74 04	   *	    je	@C0340
 00001AE3  3C 28	   *	    cmp    al, 028h
 00001AE5  75 07	   *	    jne    @C033F
 00001AE7		   *@C0340:
 00001AE7  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001AE9  E9 000000FD	   *	    jmp    @C0344
 00001AEE		   *@C033F:
 00001AEE  3C 02	   *	    cmp    al, 002h
 00001AF0  74 0C	   *	    je	@C0346
 00001AF2  3C 0F	   *	    cmp    al, 00Fh
 00001AF4  74 08	   *	    je	@C0346
 00001AF6  3C 1C	   *	    cmp    al, 01Ch
 00001AF8  74 04	   *	    je	@C0346
 00001AFA  3C 29	   *	    cmp    al, 029h
 00001AFC  75 07	   *	    jne    @C0345
 00001AFE		   *@C0346:
 00001AFE  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001B00  E9 000000E6	   *	    jmp    @C034A
 00001B05		   *@C0345:
 00001B05  3C 03	   *	    cmp    al, 003h
 00001B07  74 0C	   *	    je	@C034C
 00001B09  3C 10	   *	    cmp    al, 010h
 00001B0B  74 08	   *	    je	@C034C
 00001B0D  3C 1D	   *	    cmp    al, 01Dh
 00001B0F  74 04	   *	    je	@C034C
 00001B11  3C 2A	   *	    cmp    al, 02Ah
 00001B13  75 07	   *	    jne    @C034B
 00001B15		   *@C034C:
 00001B15  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001B17  E9 000000CF	   *	    jmp    @C0350
 00001B1C		   *@C034B:
 00001B1C  3C 04	   *	    cmp    al, 004h
 00001B1E  74 0C	   *	    je	@C0352
 00001B20  3C 11	   *	    cmp    al, 011h
 00001B22  74 08	   *	    je	@C0352
 00001B24  3C 1E	   *	    cmp    al, 01Eh
 00001B26  74 04	   *	    je	@C0352
 00001B28  3C 2B	   *	    cmp    al, 02Bh
 00001B2A  75 07	   *	    jne    @C0351
 00001B2C		   *@C0352:
 00001B2C  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001B2E  E9 000000B8	   *	    jmp    @C0356
 00001B33		   *@C0351:
 00001B33  3C 05	   *	    cmp    al, 005h
 00001B35  74 0C	   *	    je	@C0358
 00001B37  3C 12	   *	    cmp    al, 012h
 00001B39  74 08	   *	    je	@C0358
 00001B3B  3C 1F	   *	    cmp    al, 01Fh
 00001B3D  74 04	   *	    je	@C0358
 00001B3F  3C 2C	   *	    cmp    al, 02Ch
 00001B41  75 07	   *	    jne    @C0357
 00001B43		   *@C0358:
 00001B43  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001B45  E9 000000A1	   *	    jmp    @C035C
 00001B4A		   *@C0357:
 00001B4A  3C 06	   *	    cmp    al, 006h
 00001B4C  74 0C	   *	    je	@C035E
 00001B4E  3C 13	   *	    cmp    al, 013h
 00001B50  74 08	   *	    je	@C035E
 00001B52  3C 20	   *	    cmp    al, 020h
 00001B54  74 04	   *	    je	@C035E
 00001B56  3C 2D	   *	    cmp    al, 02Dh
 00001B58  75 07	   *	    jne    @C035D
 00001B5A		   *@C035E:
 00001B5A  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001B5C  E9 0000008A	   *	    jmp    @C0362
 00001B61		   *@C035D:
 00001B61  3C 07	   *	    cmp    al, 007h
 00001B63  74 0C	   *	    je	@C0364
 00001B65  3C 14	   *	    cmp    al, 014h
 00001B67  74 08	   *	    je	@C0364
 00001B69  3C 21	   *	    cmp    al, 021h
 00001B6B  74 04	   *	    je	@C0364
 00001B6D  3C 2E	   *	    cmp    al, 02Eh
 00001B6F  75 04	   *	    jne    @C0363
 00001B71		   *@C0364:
 00001B71  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001B73  EB 76	   *	    jmp    @C0368
 00001B75		   *@C0363:
 00001B75  3C 08	   *	    cmp    al, 008h
 00001B77  74 0C	   *	    je	@C036A
 00001B79  3C 15	   *	    cmp    al, 015h
 00001B7B  74 08	   *	    je	@C036A
 00001B7D  3C 22	   *	    cmp    al, 022h
 00001B7F  74 04	   *	    je	@C036A
 00001B81  3C 2F	   *	    cmp    al, 02Fh
 00001B83  75 04	   *	    jne    @C0369
 00001B85		   *@C036A:
 00001B85  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001B87  EB 62	   *	    jmp    @C036E
 00001B89		   *@C0369:
 00001B89  3C 09	   *	    cmp    al, 009h
 00001B8B  74 0C	   *	    je	@C0370
 00001B8D  3C 16	   *	    cmp    al, 016h
 00001B8F  74 08	   *	    je	@C0370
 00001B91  3C 23	   *	    cmp    al, 023h
 00001B93  74 04	   *	    je	@C0370
 00001B95  3C 30	   *	    cmp    al, 030h
 00001B97  75 04	   *	    jne    @C036F
 00001B99		   *@C0370:
 00001B99  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001B9B  EB 4E	   *	    jmp    @C0374
 00001B9D		   *@C036F:
 00001B9D  3C 0A	   *	    cmp    al, 00Ah
 00001B9F  74 0C	   *	    je	@C0376
 00001BA1  3C 17	   *	    cmp    al, 017h
 00001BA3  74 08	   *	    je	@C0376
 00001BA5  3C 24	   *	    cmp    al, 024h
 00001BA7  74 04	   *	    je	@C0376
 00001BA9  3C 31	   *	    cmp    al, 031h
 00001BAB  75 04	   *	    jne    @C0375
 00001BAD		   *@C0376:
 00001BAD  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001BAF  EB 3A	   *	    jmp    @C037A
 00001BB1		   *@C0375:
 00001BB1  3C 0B	   *	    cmp    al, 00Bh
 00001BB3  74 0C	   *	    je	@C037C
 00001BB5  3C 18	   *	    cmp    al, 018h
 00001BB7  74 08	   *	    je	@C037C
 00001BB9  3C 25	   *	    cmp    al, 025h
 00001BBB  74 04	   *	    je	@C037C
 00001BBD  3C 32	   *	    cmp    al, 032h
 00001BBF  75 04	   *	    jne    @C037B
 00001BC1		   *@C037C:
 00001BC1  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001BC3  EB 26	   *	    jmp    @C0380
 00001BC5		   *@C037B:
 00001BC5  3C 0C	   *	    cmp    al, 00Ch
 00001BC7  74 0C	   *	    je	@C0382
 00001BC9  3C 19	   *	    cmp    al, 019h
 00001BCB  74 08	   *	    je	@C0382
 00001BCD  3C 26	   *	    cmp    al, 026h
 00001BCF  74 04	   *	    je	@C0382
 00001BD1  3C 33	   *	    cmp    al, 033h
 00001BD3  75 04	   *	    jne    @C0381
 00001BD5		   *@C0382:
 00001BD5  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001BD7  EB 12	   *	    jmp    @C0386
 00001BD9		   *@C0381:
 00001BD9  3C 0D	   *	    cmp    al, 00Dh
 00001BDB  74 0C	   *	    je	@C0388
 00001BDD  3C 1A	   *	    cmp    al, 01Ah
 00001BDF  74 08	   *	    je	@C0388
 00001BE1  3C 27	   *	    cmp    al, 027h
 00001BE3  74 04	   *	    je	@C0388
 00001BE5  3C 34	   *	    cmp    al, 034h
 00001BE7  75 02	   *	    jne    @C0387
 00001BE9		   *@C0388:
 00001BE9  B0 0D			mov al,13
				.endif
 00001BEB		   *@C0387:
 00001BEB		   *@C0386:
 00001BEB		   *@C0380:
 00001BEB		   *@C037A:
 00001BEB		   *@C0374:
 00001BEB		   *@C036E:
 00001BEB		   *@C0368:
 00001BEB		   *@C0362:
 00001BEB		   *@C035C:
 00001BEB		   *@C0356:
 00001BEB		   *@C0350:
 00001BEB		   *@C034A:
 00001BEB		   *@C0344:
 00001BEB  A2 00000028 R	mov straights[4], al

 00001BF0  A0 00000012 R	mov al, cards6.value
				.if (al == 1||al==14||al==27||al==40)
 00001BF5  3C 01	   *	    cmp    al, 001h
 00001BF7  74 0C	   *	    je	@C038D
 00001BF9  3C 0E	   *	    cmp    al, 00Eh
 00001BFB  74 08	   *	    je	@C038D
 00001BFD  3C 1B	   *	    cmp    al, 01Bh
 00001BFF  74 04	   *	    je	@C038D
 00001C01  3C 28	   *	    cmp    al, 028h
 00001C03  75 07	   *	    jne    @C038C
 00001C05		   *@C038D:
 00001C05  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001C07  E9 000000FD	   *	    jmp    @C0391
 00001C0C		   *@C038C:
 00001C0C  3C 02	   *	    cmp    al, 002h
 00001C0E  74 0C	   *	    je	@C0393
 00001C10  3C 0F	   *	    cmp    al, 00Fh
 00001C12  74 08	   *	    je	@C0393
 00001C14  3C 1C	   *	    cmp    al, 01Ch
 00001C16  74 04	   *	    je	@C0393
 00001C18  3C 29	   *	    cmp    al, 029h
 00001C1A  75 07	   *	    jne    @C0392
 00001C1C		   *@C0393:
 00001C1C  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001C1E  E9 000000E6	   *	    jmp    @C0397
 00001C23		   *@C0392:
 00001C23  3C 03	   *	    cmp    al, 003h
 00001C25  74 0C	   *	    je	@C0399
 00001C27  3C 10	   *	    cmp    al, 010h
 00001C29  74 08	   *	    je	@C0399
 00001C2B  3C 1D	   *	    cmp    al, 01Dh
 00001C2D  74 04	   *	    je	@C0399
 00001C2F  3C 2A	   *	    cmp    al, 02Ah
 00001C31  75 07	   *	    jne    @C0398
 00001C33		   *@C0399:
 00001C33  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001C35  E9 000000CF	   *	    jmp    @C039D
 00001C3A		   *@C0398:
 00001C3A  3C 04	   *	    cmp    al, 004h
 00001C3C  74 0C	   *	    je	@C039F
 00001C3E  3C 11	   *	    cmp    al, 011h
 00001C40  74 08	   *	    je	@C039F
 00001C42  3C 1E	   *	    cmp    al, 01Eh
 00001C44  74 04	   *	    je	@C039F
 00001C46  3C 2B	   *	    cmp    al, 02Bh
 00001C48  75 07	   *	    jne    @C039E
 00001C4A		   *@C039F:
 00001C4A  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001C4C  E9 000000B8	   *	    jmp    @C03A3
 00001C51		   *@C039E:
 00001C51  3C 05	   *	    cmp    al, 005h
 00001C53  74 0C	   *	    je	@C03A5
 00001C55  3C 12	   *	    cmp    al, 012h
 00001C57  74 08	   *	    je	@C03A5
 00001C59  3C 1F	   *	    cmp    al, 01Fh
 00001C5B  74 04	   *	    je	@C03A5
 00001C5D  3C 2C	   *	    cmp    al, 02Ch
 00001C5F  75 07	   *	    jne    @C03A4
 00001C61		   *@C03A5:
 00001C61  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001C63  E9 000000A1	   *	    jmp    @C03A9
 00001C68		   *@C03A4:
 00001C68  3C 06	   *	    cmp    al, 006h
 00001C6A  74 0C	   *	    je	@C03AB
 00001C6C  3C 13	   *	    cmp    al, 013h
 00001C6E  74 08	   *	    je	@C03AB
 00001C70  3C 20	   *	    cmp    al, 020h
 00001C72  74 04	   *	    je	@C03AB
 00001C74  3C 2D	   *	    cmp    al, 02Dh
 00001C76  75 07	   *	    jne    @C03AA
 00001C78		   *@C03AB:
 00001C78  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001C7A  E9 0000008A	   *	    jmp    @C03AF
 00001C7F		   *@C03AA:
 00001C7F  3C 07	   *	    cmp    al, 007h
 00001C81  74 0C	   *	    je	@C03B1
 00001C83  3C 14	   *	    cmp    al, 014h
 00001C85  74 08	   *	    je	@C03B1
 00001C87  3C 21	   *	    cmp    al, 021h
 00001C89  74 04	   *	    je	@C03B1
 00001C8B  3C 2E	   *	    cmp    al, 02Eh
 00001C8D  75 04	   *	    jne    @C03B0
 00001C8F		   *@C03B1:
 00001C8F  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001C91  EB 76	   *	    jmp    @C03B5
 00001C93		   *@C03B0:
 00001C93  3C 08	   *	    cmp    al, 008h
 00001C95  74 0C	   *	    je	@C03B7
 00001C97  3C 15	   *	    cmp    al, 015h
 00001C99  74 08	   *	    je	@C03B7
 00001C9B  3C 22	   *	    cmp    al, 022h
 00001C9D  74 04	   *	    je	@C03B7
 00001C9F  3C 2F	   *	    cmp    al, 02Fh
 00001CA1  75 04	   *	    jne    @C03B6
 00001CA3		   *@C03B7:
 00001CA3  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001CA5  EB 62	   *	    jmp    @C03BB
 00001CA7		   *@C03B6:
 00001CA7  3C 09	   *	    cmp    al, 009h
 00001CA9  74 0C	   *	    je	@C03BD
 00001CAB  3C 16	   *	    cmp    al, 016h
 00001CAD  74 08	   *	    je	@C03BD
 00001CAF  3C 23	   *	    cmp    al, 023h
 00001CB1  74 04	   *	    je	@C03BD
 00001CB3  3C 30	   *	    cmp    al, 030h
 00001CB5  75 04	   *	    jne    @C03BC
 00001CB7		   *@C03BD:
 00001CB7  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001CB9  EB 4E	   *	    jmp    @C03C1
 00001CBB		   *@C03BC:
 00001CBB  3C 0A	   *	    cmp    al, 00Ah
 00001CBD  74 0C	   *	    je	@C03C3
 00001CBF  3C 17	   *	    cmp    al, 017h
 00001CC1  74 08	   *	    je	@C03C3
 00001CC3  3C 24	   *	    cmp    al, 024h
 00001CC5  74 04	   *	    je	@C03C3
 00001CC7  3C 31	   *	    cmp    al, 031h
 00001CC9  75 04	   *	    jne    @C03C2
 00001CCB		   *@C03C3:
 00001CCB  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001CCD  EB 3A	   *	    jmp    @C03C7
 00001CCF		   *@C03C2:
 00001CCF  3C 0B	   *	    cmp    al, 00Bh
 00001CD1  74 0C	   *	    je	@C03C9
 00001CD3  3C 18	   *	    cmp    al, 018h
 00001CD5  74 08	   *	    je	@C03C9
 00001CD7  3C 25	   *	    cmp    al, 025h
 00001CD9  74 04	   *	    je	@C03C9
 00001CDB  3C 32	   *	    cmp    al, 032h
 00001CDD  75 04	   *	    jne    @C03C8
 00001CDF		   *@C03C9:
 00001CDF  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001CE1  EB 26	   *	    jmp    @C03CD
 00001CE3		   *@C03C8:
 00001CE3  3C 0C	   *	    cmp    al, 00Ch
 00001CE5  74 0C	   *	    je	@C03CF
 00001CE7  3C 19	   *	    cmp    al, 019h
 00001CE9  74 08	   *	    je	@C03CF
 00001CEB  3C 26	   *	    cmp    al, 026h
 00001CED  74 04	   *	    je	@C03CF
 00001CEF  3C 33	   *	    cmp    al, 033h
 00001CF1  75 04	   *	    jne    @C03CE
 00001CF3		   *@C03CF:
 00001CF3  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001CF5  EB 12	   *	    jmp    @C03D3
 00001CF7		   *@C03CE:
 00001CF7  3C 0D	   *	    cmp    al, 00Dh
 00001CF9  74 0C	   *	    je	@C03D5
 00001CFB  3C 1A	   *	    cmp    al, 01Ah
 00001CFD  74 08	   *	    je	@C03D5
 00001CFF  3C 27	   *	    cmp    al, 027h
 00001D01  74 04	   *	    je	@C03D5
 00001D03  3C 34	   *	    cmp    al, 034h
 00001D05  75 02	   *	    jne    @C03D4
 00001D07		   *@C03D5:
 00001D07  B0 0D			mov al,13
				.endif
 00001D09		   *@C03D4:
 00001D09		   *@C03D3:
 00001D09		   *@C03CD:
 00001D09		   *@C03C7:
 00001D09		   *@C03C1:
 00001D09		   *@C03BB:
 00001D09		   *@C03B5:
 00001D09		   *@C03AF:
 00001D09		   *@C03A9:
 00001D09		   *@C03A3:
 00001D09		   *@C039D:
 00001D09		   *@C0397:
 00001D09		   *@C0391:
 00001D09  A2 00000029 R	mov straights[5], al

 00001D0E  A0 00000014 R	mov al, cards7.value
				.if (al == 1||al==14||al==27||al==40)
 00001D13  3C 01	   *	    cmp    al, 001h
 00001D15  74 0C	   *	    je	@C03DA
 00001D17  3C 0E	   *	    cmp    al, 00Eh
 00001D19  74 08	   *	    je	@C03DA
 00001D1B  3C 1B	   *	    cmp    al, 01Bh
 00001D1D  74 04	   *	    je	@C03DA
 00001D1F  3C 28	   *	    cmp    al, 028h
 00001D21  75 07	   *	    jne    @C03D9
 00001D23		   *@C03DA:
 00001D23  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001D25  E9 000000FD	   *	    jmp    @C03DE
 00001D2A		   *@C03D9:
 00001D2A  3C 02	   *	    cmp    al, 002h
 00001D2C  74 0C	   *	    je	@C03E0
 00001D2E  3C 0F	   *	    cmp    al, 00Fh
 00001D30  74 08	   *	    je	@C03E0
 00001D32  3C 1C	   *	    cmp    al, 01Ch
 00001D34  74 04	   *	    je	@C03E0
 00001D36  3C 29	   *	    cmp    al, 029h
 00001D38  75 07	   *	    jne    @C03DF
 00001D3A		   *@C03E0:
 00001D3A  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001D3C  E9 000000E6	   *	    jmp    @C03E4
 00001D41		   *@C03DF:
 00001D41  3C 03	   *	    cmp    al, 003h
 00001D43  74 0C	   *	    je	@C03E6
 00001D45  3C 10	   *	    cmp    al, 010h
 00001D47  74 08	   *	    je	@C03E6
 00001D49  3C 1D	   *	    cmp    al, 01Dh
 00001D4B  74 04	   *	    je	@C03E6
 00001D4D  3C 2A	   *	    cmp    al, 02Ah
 00001D4F  75 07	   *	    jne    @C03E5
 00001D51		   *@C03E6:
 00001D51  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001D53  E9 000000CF	   *	    jmp    @C03EA
 00001D58		   *@C03E5:
 00001D58  3C 04	   *	    cmp    al, 004h
 00001D5A  74 0C	   *	    je	@C03EC
 00001D5C  3C 11	   *	    cmp    al, 011h
 00001D5E  74 08	   *	    je	@C03EC
 00001D60  3C 1E	   *	    cmp    al, 01Eh
 00001D62  74 04	   *	    je	@C03EC
 00001D64  3C 2B	   *	    cmp    al, 02Bh
 00001D66  75 07	   *	    jne    @C03EB
 00001D68		   *@C03EC:
 00001D68  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001D6A  E9 000000B8	   *	    jmp    @C03F0
 00001D6F		   *@C03EB:
 00001D6F  3C 05	   *	    cmp    al, 005h
 00001D71  74 0C	   *	    je	@C03F2
 00001D73  3C 12	   *	    cmp    al, 012h
 00001D75  74 08	   *	    je	@C03F2
 00001D77  3C 1F	   *	    cmp    al, 01Fh
 00001D79  74 04	   *	    je	@C03F2
 00001D7B  3C 2C	   *	    cmp    al, 02Ch
 00001D7D  75 07	   *	    jne    @C03F1
 00001D7F		   *@C03F2:
 00001D7F  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001D81  E9 000000A1	   *	    jmp    @C03F6
 00001D86		   *@C03F1:
 00001D86  3C 06	   *	    cmp    al, 006h
 00001D88  74 0C	   *	    je	@C03F8
 00001D8A  3C 13	   *	    cmp    al, 013h
 00001D8C  74 08	   *	    je	@C03F8
 00001D8E  3C 20	   *	    cmp    al, 020h
 00001D90  74 04	   *	    je	@C03F8
 00001D92  3C 2D	   *	    cmp    al, 02Dh
 00001D94  75 07	   *	    jne    @C03F7
 00001D96		   *@C03F8:
 00001D96  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001D98  E9 0000008A	   *	    jmp    @C03FC
 00001D9D		   *@C03F7:
 00001D9D  3C 07	   *	    cmp    al, 007h
 00001D9F  74 0C	   *	    je	@C03FE
 00001DA1  3C 14	   *	    cmp    al, 014h
 00001DA3  74 08	   *	    je	@C03FE
 00001DA5  3C 21	   *	    cmp    al, 021h
 00001DA7  74 04	   *	    je	@C03FE
 00001DA9  3C 2E	   *	    cmp    al, 02Eh
 00001DAB  75 04	   *	    jne    @C03FD
 00001DAD		   *@C03FE:
 00001DAD  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001DAF  EB 76	   *	    jmp    @C0402
 00001DB1		   *@C03FD:
 00001DB1  3C 08	   *	    cmp    al, 008h
 00001DB3  74 0C	   *	    je	@C0404
 00001DB5  3C 15	   *	    cmp    al, 015h
 00001DB7  74 08	   *	    je	@C0404
 00001DB9  3C 22	   *	    cmp    al, 022h
 00001DBB  74 04	   *	    je	@C0404
 00001DBD  3C 2F	   *	    cmp    al, 02Fh
 00001DBF  75 04	   *	    jne    @C0403
 00001DC1		   *@C0404:
 00001DC1  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001DC3  EB 62	   *	    jmp    @C0408
 00001DC5		   *@C0403:
 00001DC5  3C 09	   *	    cmp    al, 009h
 00001DC7  74 0C	   *	    je	@C040A
 00001DC9  3C 16	   *	    cmp    al, 016h
 00001DCB  74 08	   *	    je	@C040A
 00001DCD  3C 23	   *	    cmp    al, 023h
 00001DCF  74 04	   *	    je	@C040A
 00001DD1  3C 30	   *	    cmp    al, 030h
 00001DD3  75 04	   *	    jne    @C0409
 00001DD5		   *@C040A:
 00001DD5  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001DD7  EB 4E	   *	    jmp    @C040E
 00001DD9		   *@C0409:
 00001DD9  3C 0A	   *	    cmp    al, 00Ah
 00001DDB  74 0C	   *	    je	@C0410
 00001DDD  3C 17	   *	    cmp    al, 017h
 00001DDF  74 08	   *	    je	@C0410
 00001DE1  3C 24	   *	    cmp    al, 024h
 00001DE3  74 04	   *	    je	@C0410
 00001DE5  3C 31	   *	    cmp    al, 031h
 00001DE7  75 04	   *	    jne    @C040F
 00001DE9		   *@C0410:
 00001DE9  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001DEB  EB 3A	   *	    jmp    @C0414
 00001DED		   *@C040F:
 00001DED  3C 0B	   *	    cmp    al, 00Bh
 00001DEF  74 0C	   *	    je	@C0416
 00001DF1  3C 18	   *	    cmp    al, 018h
 00001DF3  74 08	   *	    je	@C0416
 00001DF5  3C 25	   *	    cmp    al, 025h
 00001DF7  74 04	   *	    je	@C0416
 00001DF9  3C 32	   *	    cmp    al, 032h
 00001DFB  75 04	   *	    jne    @C0415
 00001DFD		   *@C0416:
 00001DFD  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001DFF  EB 26	   *	    jmp    @C041A
 00001E01		   *@C0415:
 00001E01  3C 0C	   *	    cmp    al, 00Ch
 00001E03  74 0C	   *	    je	@C041C
 00001E05  3C 19	   *	    cmp    al, 019h
 00001E07  74 08	   *	    je	@C041C
 00001E09  3C 26	   *	    cmp    al, 026h
 00001E0B  74 04	   *	    je	@C041C
 00001E0D  3C 33	   *	    cmp    al, 033h
 00001E0F  75 04	   *	    jne    @C041B
 00001E11		   *@C041C:
 00001E11  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001E13  EB 12	   *	    jmp    @C0420
 00001E15		   *@C041B:
 00001E15  3C 0D	   *	    cmp    al, 00Dh
 00001E17  74 0C	   *	    je	@C0422
 00001E19  3C 1A	   *	    cmp    al, 01Ah
 00001E1B  74 08	   *	    je	@C0422
 00001E1D  3C 27	   *	    cmp    al, 027h
 00001E1F  74 04	   *	    je	@C0422
 00001E21  3C 34	   *	    cmp    al, 034h
 00001E23  75 02	   *	    jne    @C0421
 00001E25		   *@C0422:
 00001E25  B0 0D			mov al,13
				.endif
 00001E27		   *@C0421:
 00001E27		   *@C0420:
 00001E27		   *@C041A:
 00001E27		   *@C0414:
 00001E27		   *@C040E:
 00001E27		   *@C0408:
 00001E27		   *@C0402:
 00001E27		   *@C03FC:
 00001E27		   *@C03F6:
 00001E27		   *@C03F0:
 00001E27		   *@C03EA:
 00001E27		   *@C03E4:
 00001E27		   *@C03DE:
 00001E27  A2 0000002A R	mov straights[6], al

 00001E2C  B9 00000006		mov ecx,6 
 00001E31  BF 00000006		 mov edi,6 
 00001E36  BE 00000000		 mov esi,0 
				 	 
 00001E3B			 	SS1: 
 00001E3B  8B D6		 		mov edx,esi 
 00001E3D  42			 		inc edx 
 00001E3E  51			 		push ecx 
 00001E3F  8B CF		 		mov ecx, edi 
 00001E41			 			SS2: 
 00001E41  8A 86 00000024 R	 				mov al, straights[esi] 
 00001E47  8A 9A 00000024 R	 				mov bl, straights[edx] 
				 					.if (al < bl) 
 00001E4D  3A C3	   *	    cmp    al, bl
 00001E4F  73 0E	   *	    jae    @C0426
 00001E51  86 C3		 						xchg al, bl 
 00001E53  88 86 00000024 R	 						mov straights[esi],al 
 00001E59  88 9A 00000024 R	 						mov straights[edx],bl 
				 					.endif  
 00001E5F		   *@C0426:
 00001E5F  42			 				inc edx 
 00001E60  E2 DF		 			Loop SS2 
 00001E62  59			 		pop ecx 
 00001E63  46			 		inc esi		 
 00001E64  4F			 		dec edi 
 00001E65  E2 D4		 	Loop SS1 

 00001E67  BE 00000000		mov esi,0
 00001E6C  BF 00000001		mov edi,1
 00001E71  8A 86 00000024 R		mov al, straights[esi]
 00001E77  8A 9F 00000024 R		mov bl, straights[edi]
 00001E7D  89 35 00000000 R		mov var1, esi
 00001E83  89 3D 00000004 R		mov var2, edi
					.if(al==bl)
 00001E89  3A C3	   *	    cmp    al, bl
 00001E8B  75 07	   *	    jne    @C0428
 00001E8D  47					inc edi
 00001E8E  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001E94		   *@C0428:
					.if(al==bl)
 00001E94  3A C3	   *	    cmp    al, bl
 00001E96  75 07	   *	    jne    @C042A
 00001E98  47					inc edi
 00001E99  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001E9F		   *@C042A:
 00001E9F  2A C3			sub al,bl
 00001EA1  46				inc esi
 00001EA2  47				inc edi
						.if(al==bl)
 00001EA3  3A C3	   *	    cmp    al, bl
 00001EA5  0F 85 000000CB  *	    jne    @C042C
 00001EAB  8A 86 00000024 R				mov al, straights[esi]
 00001EB1  8A 9F 00000024 R				mov bl, straights[edi]
							.if(al==bl)
 00001EB7  3A C3	   *	    cmp    al, bl
 00001EB9  75 07	   *	    jne    @C042E
 00001EBB  47							inc edi
 00001EBC  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 00001EC2		   *@C042E:
 00001EC2  3A C3	   *	    cmp    al, bl
 00001EC4  75 07	   *	    jne    @C0430
 00001EC6  47							inc edi
 00001EC7  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
 00001ECD		   *@C0430:
 00001ECD  2A C3					sub al,bl
 00001ECF  46						inc esi
 00001ED0  47						inc edi
								.if(al==bl)
 00001ED1  3A C3	   *	    cmp    al, bl
 00001ED3  0F 85 0000009D  *	    jne    @C0432
 00001ED9  8A 86 00000024 R						mov al, straights[esi]
 00001EDF  8A 9F 00000024 R						mov bl, straights[edi]
									.if(al==bl)
 00001EE5  3A C3	   *	    cmp    al, bl
 00001EE7  75 07	   *	    jne    @C0434
 00001EE9  47									inc edi
 00001EEA  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 00001EF0		   *@C0434:
 00001EF0  3A C3	   *	    cmp    al, bl
 00001EF2  75 07	   *	    jne    @C0436
 00001EF4  47									inc edi
 00001EF5  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
 00001EFB		   *@C0436:
 00001EFB  2A C3							sub al,bl
 00001EFD  46								inc esi
 00001EFE  47								inc edi
										.if(al==bl)
 00001EFF  3A C3	   *	    cmp    al, bl
 00001F01  75 73	   *	    jne    @C0438
 00001F03  8A 86 00000024 R								mov al, straights[esi]
 00001F09  8A 9F 00000024 R									mov bl, straights[edi]
												.if(al==bl)
 00001F0F  3A C3	   *	    cmp    al, bl
 00001F11  75 07	   *	    jne    @C043A
 00001F13  47												inc edi
 00001F14  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 00001F1A		   *@C043A:
 00001F1A  3A C3	   *	    cmp    al, bl
 00001F1C  75 07	   *	    jne    @C043C
 00001F1E  47												inc edi
 00001F1F  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
 00001F25		   *@C043C:
 00001F25  2A C3										sub al,bl
 00001F27  46											inc esi
 00001F28  47											inc edi
													.if(al==bl)
 00001F29  3A C3	   *	    cmp    al, bl
 00001F2B  75 49	   *	    jne    @C043E
 00001F2D  8A 86 00000024 R											mov al, straights[esi]
 00001F33  8A 9F 00000024 R											mov bl, straights[edi]
														.if(al==bl)
 00001F39  3A C3	   *	    cmp    al, bl
 00001F3B  75 07	   *	    jne    @C0440
 00001F3D  47														inc edi
 00001F3E  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 00001F44		   *@C0440:
 00001F44  3A C3	   *	    cmp    al, bl
 00001F46  75 07	   *	    jne    @C0442
 00001F48  47														inc edi
 00001F49  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
 00001F4F		   *@C0442:
 00001F4F  2A C3												sub al,bl
 00001F51  46													inc esi
 00001F52  47													inc edi
															.if(al==bl)
 00001F53  3A C3	   *	    cmp    al, bl
 00001F55  75 1F	   *	    jne    @C0444
 00001F57  FF 05 0000005A R													inc isstraights
 00001F5D  8B 35 00000000 R													mov esi, var1
 00001F63  8A 86 00000024 R													mov al, straights[esi]
																	.if(HighSts < al)
 00001F69  38 05 00000076 R *	    cmp    HighSts, al
 00001F6F  73 05	   *	    jae    @C0446
 00001F71  A2 00000076 R															mov HighSts, al
																	.endif

													.endif
 00001F76		   *@C0446:
											.endif
 00001F76		   *@C0444:
									.endif
 00001F76		   *@C043E:
							.endif
 00001F76		   *@C0438:
					.endif
 00001F76		   *@C0432:
 00001F76		   *@C042C:
 00001F76  8B 35 00000000 R	mov esi, var1
 00001F7C  8B 3D 00000004 R	mov edi, var2
 00001F82  46			inc esi
 00001F83  47			inc edi

 00001F84  8A 86 00000024 R		mov al, straights[esi]
 00001F8A  8A 9F 00000024 R		mov bl, straights[edi]
 00001F90  8B 35 00000000 R		mov esi, var1
 00001F96  8B 3D 00000004 R		mov edi, var2
					.if(al==bl)
 00001F9C  3A C3	   *	    cmp    al, bl
 00001F9E  75 07	   *	    jne    @C0448
 00001FA0  47					inc edi
 00001FA1  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001FA7		   *@C0448:
					.if(al==bl)
 00001FA7  3A C3	   *	    cmp    al, bl
 00001FA9  75 07	   *	    jne    @C044A
 00001FAB  47					inc edi
 00001FAC  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001FB2		   *@C044A:
 00001FB2  2A C3			sub al,bl
 00001FB4  46				inc esi
 00001FB5  47				inc edi
						.if(al==bl)
 00001FB6  3A C3	   *	    cmp    al, bl
 00001FB8  0F 85 000000CB  *	    jne    @C044C
 00001FBE  8A 86 00000024 R				mov al, straights[esi]
 00001FC4  8A 9F 00000024 R				mov bl, straights[edi]
							.if(al==bl)
 00001FCA  3A C3	   *	    cmp    al, bl
 00001FCC  75 07	   *	    jne    @C044E
 00001FCE  47							inc edi
 00001FCF  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 00001FD5		   *@C044E:
 00001FD5  3A C3	   *	    cmp    al, bl
 00001FD7  75 07	   *	    jne    @C0450
 00001FD9  47							inc edi
 00001FDA  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
 00001FE0		   *@C0450:
 00001FE0  2A C3					sub al,bl
 00001FE2  46						inc esi
 00001FE3  47						inc edi
								.if(al==bl)
 00001FE4  3A C3	   *	    cmp    al, bl
 00001FE6  0F 85 0000009D  *	    jne    @C0452
 00001FEC  8A 86 00000024 R						mov al, straights[esi]
 00001FF2  8A 9F 00000024 R						mov bl, straights[edi]
									.if(al==bl)
 00001FF8  3A C3	   *	    cmp    al, bl
 00001FFA  75 07	   *	    jne    @C0454
 00001FFC  47									inc edi
 00001FFD  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 00002003		   *@C0454:
 00002003  3A C3	   *	    cmp    al, bl
 00002005  75 07	   *	    jne    @C0456
 00002007  47									inc edi
 00002008  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
 0000200E		   *@C0456:
 0000200E  2A C3							sub al,bl
 00002010  46								inc esi
 00002011  47								inc edi
										.if(al==bl)
 00002012  3A C3	   *	    cmp    al, bl
 00002014  75 73	   *	    jne    @C0458
 00002016  8A 86 00000024 R								mov al, straights[esi]
 0000201C  8A 9F 00000024 R									mov bl, straights[edi]
												.if(al==bl)
 00002022  3A C3	   *	    cmp    al, bl
 00002024  75 07	   *	    jne    @C045A
 00002026  47												inc edi
 00002027  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 0000202D		   *@C045A:
 0000202D  3A C3	   *	    cmp    al, bl
 0000202F  75 07	   *	    jne    @C045C
 00002031  47												inc edi
 00002032  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
 00002038		   *@C045C:
 00002038  2A C3										sub al,bl
 0000203A  46											inc esi
 0000203B  47											inc edi
													.if(al==bl)
 0000203C  3A C3	   *	    cmp    al, bl
 0000203E  75 49	   *	    jne    @C045E
 00002040  8A 86 00000024 R											mov al, straights[esi]
 00002046  8A 9F 00000024 R											mov bl, straights[edi]
														.if(al==bl)
 0000204C  3A C3	   *	    cmp    al, bl
 0000204E  75 07	   *	    jne    @C0460
 00002050  47														inc edi
 00002051  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 00002057		   *@C0460:
 00002057  3A C3	   *	    cmp    al, bl
 00002059  75 07	   *	    jne    @C0462
 0000205B  47														inc edi
 0000205C  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
 00002062		   *@C0462:
 00002062  2A C3												sub al,bl
 00002064  46													inc esi
 00002065  47													inc edi
															.if(al==bl)
 00002066  3A C3	   *	    cmp    al, bl
 00002068  75 1F	   *	    jne    @C0464
 0000206A  FF 05 0000005A R													inc isstraights
 00002070  8B 35 00000000 R													mov esi, var1
 00002076  8A 86 00000024 R													mov al, straights[esi]
																	.if(HighSts < al)
 0000207C  38 05 00000076 R *	    cmp    HighSts, al
 00002082  73 05	   *	    jae    @C0466
 00002084  A2 00000076 R															mov HighSts, al
																	.endif
													.endif
 00002089		   *@C0466:
											.endif
 00002089		   *@C0464:
									.endif
 00002089		   *@C045E:
							.endif
 00002089		   *@C0458:
					.endif
 00002089		   *@C0452:
 00002089		   *@C044C:
 00002089  8B 35 00000000 R	mov esi,var1
 0000208F  8B 3D 00000004 R	mov edi,var2
 00002095  46			inc esi
 00002096  47			inc edi

 00002097  8A 86 00000024 R		mov al, straights[esi]
 0000209D  8A 9F 00000024 R		mov bl, straights[edi]
					.if(al==bl)
 000020A3  3A C3	   *	    cmp    al, bl
 000020A5  75 07	   *	    jne    @C0468
 000020A7  47					inc edi
 000020A8  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 000020AE		   *@C0468:
					.if(al==bl)
 000020AE  3A C3	   *	    cmp    al, bl
 000020B0  75 07	   *	    jne    @C046A
 000020B2  47					inc edi
 000020B3  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 000020B9		   *@C046A:
 000020B9  2A C3			sub al,bl
 000020BB  46				inc esi
 000020BC  47				inc edi
						.if(al==bl)
 000020BD  3A C3	   *	    cmp    al, bl
 000020BF  0F 85 000000CB  *	    jne    @C046C
 000020C5  8A 86 00000024 R				mov al, straights[esi]
 000020CB  8A 9F 00000024 R				mov bl, straights[edi]
							.if(al==bl)
 000020D1  3A C3	   *	    cmp    al, bl
 000020D3  75 07	   *	    jne    @C046E
 000020D5  47							inc edi
 000020D6  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 000020DC		   *@C046E:
 000020DC  3A C3	   *	    cmp    al, bl
 000020DE  75 07	   *	    jne    @C0470
 000020E0  47							inc edi
 000020E1  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
 000020E7		   *@C0470:
 000020E7  2A C3					sub al,bl
 000020E9  46						inc esi
 000020EA  47						inc edi
								.if(al==bl)
 000020EB  3A C3	   *	    cmp    al, bl
 000020ED  0F 85 0000009D  *	    jne    @C0472
 000020F3  8A 86 00000024 R						mov al, straights[esi]
 000020F9  8A 9F 00000024 R						mov bl, straights[edi]
									.if(al==bl)
 000020FF  3A C3	   *	    cmp    al, bl
 00002101  75 07	   *	    jne    @C0474
 00002103  47									inc edi
 00002104  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 0000210A		   *@C0474:
 0000210A  3A C3	   *	    cmp    al, bl
 0000210C  75 07	   *	    jne    @C0476
 0000210E  47									inc edi
 0000210F  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
 00002115		   *@C0476:
 00002115  2A C3							sub al,bl
 00002117  46								inc esi
 00002118  47								inc edi
										.if(al==bl)
 00002119  3A C3	   *	    cmp    al, bl
 0000211B  75 73	   *	    jne    @C0478
 0000211D  8A 86 00000024 R								mov al, straights[esi]
 00002123  8A 9F 00000024 R									mov bl, straights[edi]
												.if(al==bl)
 00002129  3A C3	   *	    cmp    al, bl
 0000212B  75 07	   *	    jne    @C047A
 0000212D  47												inc edi
 0000212E  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 00002134		   *@C047A:
 00002134  3A C3	   *	    cmp    al, bl
 00002136  75 07	   *	    jne    @C047C
 00002138  47												inc edi
 00002139  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
 0000213F		   *@C047C:
 0000213F  2A C3										sub al,bl
 00002141  46											inc esi
 00002142  47											inc edi
													.if(al==bl)
 00002143  3A C3	   *	    cmp    al, bl
 00002145  75 49	   *	    jne    @C047E
 00002147  8A 86 00000024 R											mov al, straights[esi]
 0000214D  8A 9F 00000024 R											mov bl, straights[edi]
														.if(al==bl)
 00002153  3A C3	   *	    cmp    al, bl
 00002155  75 07	   *	    jne    @C0480
 00002157  47														inc edi
 00002158  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 0000215E		   *@C0480:
 0000215E  3A C3	   *	    cmp    al, bl
 00002160  75 07	   *	    jne    @C0482
 00002162  47														inc edi
 00002163  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
 00002169		   *@C0482:
 00002169  2A C3												sub al,bl
 0000216B  46													inc esi
 0000216C  47													inc edi
															.if(al==bl)
 0000216D  3A C3	   *	    cmp    al, bl
 0000216F  75 1F	   *	    jne    @C0484
 00002171  FF 05 0000005A R													inc isstraights
 00002177  8B 35 00000000 R													mov esi, var1
 0000217D  8A 86 00000024 R													mov al, straights[esi]
																	.if(HighSts < al)
 00002183  38 05 00000076 R *	    cmp    HighSts, al
 00002189  73 05	   *	    jae    @C0486
 0000218B  A2 00000076 R															mov HighSts, al
																	.endif
													.endif
 00002190		   *@C0486:
											.endif
 00002190		   *@C0484:
									.endif
 00002190		   *@C047E:
							.endif
 00002190		   *@C0478:
					.endif
 00002190		   *@C0472:
 00002190		   *@C046C:

					.if(HighSts==13)
 00002190  80 3D 00000076 R
	   0D		   *	    cmp    HighSts, 00Dh
 00002197  75 13	   *	    jne    @C0488
						.if(SpockFlush > 0)
 00002199  83 3D 000000CA R
	   00		   *	    cmp    SpockFlush, 000h
 000021A0  76 0A	   *	    jbe    @C048A
 000021A2  C7 05 000000BA R				mov SpockRoyal, 1
	   00000001
						.endif
					.endif
 000021AC		   *@C048A:
 000021AC		   *@C0488:

					.if (HighStS > 0)
 000021AC  80 3D 00000076 R
	   00		   *	    cmp    HighSts, 000h
 000021B3  76 0A	   *	    jbe    @C048C
 000021B5  C7 05 000000CE R			mov SpockStraight,1
	   00000001
					.endif
 000021BF		   *@C048C:

				;Player Straight
 000021BF  A0 00000016 R	mov al, cardp1.value
				.if (al == 1||al==14||al==27||al==40)
 000021C4  3C 01	   *	    cmp    al, 001h
 000021C6  74 0C	   *	    je	@C048F
 000021C8  3C 0E	   *	    cmp    al, 00Eh
 000021CA  74 08	   *	    je	@C048F
 000021CC  3C 1B	   *	    cmp    al, 01Bh
 000021CE  74 04	   *	    je	@C048F
 000021D0  3C 28	   *	    cmp    al, 028h
 000021D2  75 07	   *	    jne    @C048E
 000021D4		   *@C048F:
 000021D4  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000021D6  E9 000000FD	   *	    jmp    @C0493
 000021DB		   *@C048E:
 000021DB  3C 02	   *	    cmp    al, 002h
 000021DD  74 0C	   *	    je	@C0495
 000021DF  3C 0F	   *	    cmp    al, 00Fh
 000021E1  74 08	   *	    je	@C0495
 000021E3  3C 1C	   *	    cmp    al, 01Ch
 000021E5  74 04	   *	    je	@C0495
 000021E7  3C 29	   *	    cmp    al, 029h
 000021E9  75 07	   *	    jne    @C0494
 000021EB		   *@C0495:
 000021EB  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000021ED  E9 000000E6	   *	    jmp    @C0499
 000021F2		   *@C0494:
 000021F2  3C 03	   *	    cmp    al, 003h
 000021F4  74 0C	   *	    je	@C049B
 000021F6  3C 10	   *	    cmp    al, 010h
 000021F8  74 08	   *	    je	@C049B
 000021FA  3C 1D	   *	    cmp    al, 01Dh
 000021FC  74 04	   *	    je	@C049B
 000021FE  3C 2A	   *	    cmp    al, 02Ah
 00002200  75 07	   *	    jne    @C049A
 00002202		   *@C049B:
 00002202  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002204  E9 000000CF	   *	    jmp    @C049F
 00002209		   *@C049A:
 00002209  3C 04	   *	    cmp    al, 004h
 0000220B  74 0C	   *	    je	@C04A1
 0000220D  3C 11	   *	    cmp    al, 011h
 0000220F  74 08	   *	    je	@C04A1
 00002211  3C 1E	   *	    cmp    al, 01Eh
 00002213  74 04	   *	    je	@C04A1
 00002215  3C 2B	   *	    cmp    al, 02Bh
 00002217  75 07	   *	    jne    @C04A0
 00002219		   *@C04A1:
 00002219  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 0000221B  E9 000000B8	   *	    jmp    @C04A5
 00002220		   *@C04A0:
 00002220  3C 05	   *	    cmp    al, 005h
 00002222  74 0C	   *	    je	@C04A7
 00002224  3C 12	   *	    cmp    al, 012h
 00002226  74 08	   *	    je	@C04A7
 00002228  3C 1F	   *	    cmp    al, 01Fh
 0000222A  74 04	   *	    je	@C04A7
 0000222C  3C 2C	   *	    cmp    al, 02Ch
 0000222E  75 07	   *	    jne    @C04A6
 00002230		   *@C04A7:
 00002230  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002232  E9 000000A1	   *	    jmp    @C04AB
 00002237		   *@C04A6:
 00002237  3C 06	   *	    cmp    al, 006h
 00002239  74 0C	   *	    je	@C04AD
 0000223B  3C 13	   *	    cmp    al, 013h
 0000223D  74 08	   *	    je	@C04AD
 0000223F  3C 20	   *	    cmp    al, 020h
 00002241  74 04	   *	    je	@C04AD
 00002243  3C 2D	   *	    cmp    al, 02Dh
 00002245  75 07	   *	    jne    @C04AC
 00002247		   *@C04AD:
 00002247  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002249  E9 0000008A	   *	    jmp    @C04B1
 0000224E		   *@C04AC:
 0000224E  3C 07	   *	    cmp    al, 007h
 00002250  74 0C	   *	    je	@C04B3
 00002252  3C 14	   *	    cmp    al, 014h
 00002254  74 08	   *	    je	@C04B3
 00002256  3C 21	   *	    cmp    al, 021h
 00002258  74 04	   *	    je	@C04B3
 0000225A  3C 2E	   *	    cmp    al, 02Eh
 0000225C  75 04	   *	    jne    @C04B2
 0000225E		   *@C04B3:
 0000225E  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002260  EB 76	   *	    jmp    @C04B7
 00002262		   *@C04B2:
 00002262  3C 08	   *	    cmp    al, 008h
 00002264  74 0C	   *	    je	@C04B9
 00002266  3C 15	   *	    cmp    al, 015h
 00002268  74 08	   *	    je	@C04B9
 0000226A  3C 22	   *	    cmp    al, 022h
 0000226C  74 04	   *	    je	@C04B9
 0000226E  3C 2F	   *	    cmp    al, 02Fh
 00002270  75 04	   *	    jne    @C04B8
 00002272		   *@C04B9:
 00002272  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002274  EB 62	   *	    jmp    @C04BD
 00002276		   *@C04B8:
 00002276  3C 09	   *	    cmp    al, 009h
 00002278  74 0C	   *	    je	@C04BF
 0000227A  3C 16	   *	    cmp    al, 016h
 0000227C  74 08	   *	    je	@C04BF
 0000227E  3C 23	   *	    cmp    al, 023h
 00002280  74 04	   *	    je	@C04BF
 00002282  3C 30	   *	    cmp    al, 030h
 00002284  75 04	   *	    jne    @C04BE
 00002286		   *@C04BF:
 00002286  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002288  EB 4E	   *	    jmp    @C04C3
 0000228A		   *@C04BE:
 0000228A  3C 0A	   *	    cmp    al, 00Ah
 0000228C  74 0C	   *	    je	@C04C5
 0000228E  3C 17	   *	    cmp    al, 017h
 00002290  74 08	   *	    je	@C04C5
 00002292  3C 24	   *	    cmp    al, 024h
 00002294  74 04	   *	    je	@C04C5
 00002296  3C 31	   *	    cmp    al, 031h
 00002298  75 04	   *	    jne    @C04C4
 0000229A		   *@C04C5:
 0000229A  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000229C  EB 3A	   *	    jmp    @C04C9
 0000229E		   *@C04C4:
 0000229E  3C 0B	   *	    cmp    al, 00Bh
 000022A0  74 0C	   *	    je	@C04CB
 000022A2  3C 18	   *	    cmp    al, 018h
 000022A4  74 08	   *	    je	@C04CB
 000022A6  3C 25	   *	    cmp    al, 025h
 000022A8  74 04	   *	    je	@C04CB
 000022AA  3C 32	   *	    cmp    al, 032h
 000022AC  75 04	   *	    jne    @C04CA
 000022AE		   *@C04CB:
 000022AE  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000022B0  EB 26	   *	    jmp    @C04CF
 000022B2		   *@C04CA:
 000022B2  3C 0C	   *	    cmp    al, 00Ch
 000022B4  74 0C	   *	    je	@C04D1
 000022B6  3C 19	   *	    cmp    al, 019h
 000022B8  74 08	   *	    je	@C04D1
 000022BA  3C 26	   *	    cmp    al, 026h
 000022BC  74 04	   *	    je	@C04D1
 000022BE  3C 33	   *	    cmp    al, 033h
 000022C0  75 04	   *	    jne    @C04D0
 000022C2		   *@C04D1:
 000022C2  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000022C4  EB 12	   *	    jmp    @C04D5
 000022C6		   *@C04D0:
 000022C6  3C 0D	   *	    cmp    al, 00Dh
 000022C8  74 0C	   *	    je	@C04D7
 000022CA  3C 1A	   *	    cmp    al, 01Ah
 000022CC  74 08	   *	    je	@C04D7
 000022CE  3C 27	   *	    cmp    al, 027h
 000022D0  74 04	   *	    je	@C04D7
 000022D2  3C 34	   *	    cmp    al, 034h
 000022D4  75 02	   *	    jne    @C04D6
 000022D6		   *@C04D7:
 000022D6  B0 0D			mov al,13
				.endif
 000022D8		   *@C04D6:
 000022D8		   *@C04D5:
 000022D8		   *@C04CF:
 000022D8		   *@C04C9:
 000022D8		   *@C04C3:
 000022D8		   *@C04BD:
 000022D8		   *@C04B7:
 000022D8		   *@C04B1:
 000022D8		   *@C04AB:
 000022D8		   *@C04A5:
 000022D8		   *@C049F:
 000022D8		   *@C0499:
 000022D8		   *@C0493:
 000022D8  A2 0000002B R	mov straightp[0], al


 000022DD  A0 00000018 R	mov al, cardp2.value
				.if (al == 1||al==14||al==27||al==40)
 000022E2  3C 01	   *	    cmp    al, 001h
 000022E4  74 0C	   *	    je	@C04DC
 000022E6  3C 0E	   *	    cmp    al, 00Eh
 000022E8  74 08	   *	    je	@C04DC
 000022EA  3C 1B	   *	    cmp    al, 01Bh
 000022EC  74 04	   *	    je	@C04DC
 000022EE  3C 28	   *	    cmp    al, 028h
 000022F0  75 07	   *	    jne    @C04DB
 000022F2		   *@C04DC:
 000022F2  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000022F4  E9 000000FD	   *	    jmp    @C04E0
 000022F9		   *@C04DB:
 000022F9  3C 02	   *	    cmp    al, 002h
 000022FB  74 0C	   *	    je	@C04E2
 000022FD  3C 0F	   *	    cmp    al, 00Fh
 000022FF  74 08	   *	    je	@C04E2
 00002301  3C 1C	   *	    cmp    al, 01Ch
 00002303  74 04	   *	    je	@C04E2
 00002305  3C 29	   *	    cmp    al, 029h
 00002307  75 07	   *	    jne    @C04E1
 00002309		   *@C04E2:
 00002309  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 0000230B  E9 000000E6	   *	    jmp    @C04E6
 00002310		   *@C04E1:
 00002310  3C 03	   *	    cmp    al, 003h
 00002312  74 0C	   *	    je	@C04E8
 00002314  3C 10	   *	    cmp    al, 010h
 00002316  74 08	   *	    je	@C04E8
 00002318  3C 1D	   *	    cmp    al, 01Dh
 0000231A  74 04	   *	    je	@C04E8
 0000231C  3C 2A	   *	    cmp    al, 02Ah
 0000231E  75 07	   *	    jne    @C04E7
 00002320		   *@C04E8:
 00002320  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002322  E9 000000CF	   *	    jmp    @C04EC
 00002327		   *@C04E7:
 00002327  3C 04	   *	    cmp    al, 004h
 00002329  74 0C	   *	    je	@C04EE
 0000232B  3C 11	   *	    cmp    al, 011h
 0000232D  74 08	   *	    je	@C04EE
 0000232F  3C 1E	   *	    cmp    al, 01Eh
 00002331  74 04	   *	    je	@C04EE
 00002333  3C 2B	   *	    cmp    al, 02Bh
 00002335  75 07	   *	    jne    @C04ED
 00002337		   *@C04EE:
 00002337  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002339  E9 000000B8	   *	    jmp    @C04F2
 0000233E		   *@C04ED:
 0000233E  3C 05	   *	    cmp    al, 005h
 00002340  74 0C	   *	    je	@C04F4
 00002342  3C 12	   *	    cmp    al, 012h
 00002344  74 08	   *	    je	@C04F4
 00002346  3C 1F	   *	    cmp    al, 01Fh
 00002348  74 04	   *	    je	@C04F4
 0000234A  3C 2C	   *	    cmp    al, 02Ch
 0000234C  75 07	   *	    jne    @C04F3
 0000234E		   *@C04F4:
 0000234E  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002350  E9 000000A1	   *	    jmp    @C04F8
 00002355		   *@C04F3:
 00002355  3C 06	   *	    cmp    al, 006h
 00002357  74 0C	   *	    je	@C04FA
 00002359  3C 13	   *	    cmp    al, 013h
 0000235B  74 08	   *	    je	@C04FA
 0000235D  3C 20	   *	    cmp    al, 020h
 0000235F  74 04	   *	    je	@C04FA
 00002361  3C 2D	   *	    cmp    al, 02Dh
 00002363  75 07	   *	    jne    @C04F9
 00002365		   *@C04FA:
 00002365  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002367  E9 0000008A	   *	    jmp    @C04FE
 0000236C		   *@C04F9:
 0000236C  3C 07	   *	    cmp    al, 007h
 0000236E  74 0C	   *	    je	@C0500
 00002370  3C 14	   *	    cmp    al, 014h
 00002372  74 08	   *	    je	@C0500
 00002374  3C 21	   *	    cmp    al, 021h
 00002376  74 04	   *	    je	@C0500
 00002378  3C 2E	   *	    cmp    al, 02Eh
 0000237A  75 04	   *	    jne    @C04FF
 0000237C		   *@C0500:
 0000237C  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000237E  EB 76	   *	    jmp    @C0504
 00002380		   *@C04FF:
 00002380  3C 08	   *	    cmp    al, 008h
 00002382  74 0C	   *	    je	@C0506
 00002384  3C 15	   *	    cmp    al, 015h
 00002386  74 08	   *	    je	@C0506
 00002388  3C 22	   *	    cmp    al, 022h
 0000238A  74 04	   *	    je	@C0506
 0000238C  3C 2F	   *	    cmp    al, 02Fh
 0000238E  75 04	   *	    jne    @C0505
 00002390		   *@C0506:
 00002390  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002392  EB 62	   *	    jmp    @C050A
 00002394		   *@C0505:
 00002394  3C 09	   *	    cmp    al, 009h
 00002396  74 0C	   *	    je	@C050C
 00002398  3C 16	   *	    cmp    al, 016h
 0000239A  74 08	   *	    je	@C050C
 0000239C  3C 23	   *	    cmp    al, 023h
 0000239E  74 04	   *	    je	@C050C
 000023A0  3C 30	   *	    cmp    al, 030h
 000023A2  75 04	   *	    jne    @C050B
 000023A4		   *@C050C:
 000023A4  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000023A6  EB 4E	   *	    jmp    @C0510
 000023A8		   *@C050B:
 000023A8  3C 0A	   *	    cmp    al, 00Ah
 000023AA  74 0C	   *	    je	@C0512
 000023AC  3C 17	   *	    cmp    al, 017h
 000023AE  74 08	   *	    je	@C0512
 000023B0  3C 24	   *	    cmp    al, 024h
 000023B2  74 04	   *	    je	@C0512
 000023B4  3C 31	   *	    cmp    al, 031h
 000023B6  75 04	   *	    jne    @C0511
 000023B8		   *@C0512:
 000023B8  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000023BA  EB 3A	   *	    jmp    @C0516
 000023BC		   *@C0511:
 000023BC  3C 0B	   *	    cmp    al, 00Bh
 000023BE  74 0C	   *	    je	@C0518
 000023C0  3C 18	   *	    cmp    al, 018h
 000023C2  74 08	   *	    je	@C0518
 000023C4  3C 25	   *	    cmp    al, 025h
 000023C6  74 04	   *	    je	@C0518
 000023C8  3C 32	   *	    cmp    al, 032h
 000023CA  75 04	   *	    jne    @C0517
 000023CC		   *@C0518:
 000023CC  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000023CE  EB 26	   *	    jmp    @C051C
 000023D0		   *@C0517:
 000023D0  3C 0C	   *	    cmp    al, 00Ch
 000023D2  74 0C	   *	    je	@C051E
 000023D4  3C 19	   *	    cmp    al, 019h
 000023D6  74 08	   *	    je	@C051E
 000023D8  3C 26	   *	    cmp    al, 026h
 000023DA  74 04	   *	    je	@C051E
 000023DC  3C 33	   *	    cmp    al, 033h
 000023DE  75 04	   *	    jne    @C051D
 000023E0		   *@C051E:
 000023E0  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000023E2  EB 12	   *	    jmp    @C0522
 000023E4		   *@C051D:
 000023E4  3C 0D	   *	    cmp    al, 00Dh
 000023E6  74 0C	   *	    je	@C0524
 000023E8  3C 1A	   *	    cmp    al, 01Ah
 000023EA  74 08	   *	    je	@C0524
 000023EC  3C 27	   *	    cmp    al, 027h
 000023EE  74 04	   *	    je	@C0524
 000023F0  3C 34	   *	    cmp    al, 034h
 000023F2  75 02	   *	    jne    @C0523
 000023F4		   *@C0524:
 000023F4  B0 0D			mov al,13
				.endif
 000023F6		   *@C0523:
 000023F6		   *@C0522:
 000023F6		   *@C051C:
 000023F6		   *@C0516:
 000023F6		   *@C0510:
 000023F6		   *@C050A:
 000023F6		   *@C0504:
 000023F6		   *@C04FE:
 000023F6		   *@C04F8:
 000023F6		   *@C04F2:
 000023F6		   *@C04EC:
 000023F6		   *@C04E6:
 000023F6		   *@C04E0:
 000023F6  A2 0000002C R	mov straightp[1], al


 000023FB  A0 0000001A R	mov al, cardp3.value
				.if (al == 1||al==14||al==27||al==40)
 00002400  3C 01	   *	    cmp    al, 001h
 00002402  74 0C	   *	    je	@C0529
 00002404  3C 0E	   *	    cmp    al, 00Eh
 00002406  74 08	   *	    je	@C0529
 00002408  3C 1B	   *	    cmp    al, 01Bh
 0000240A  74 04	   *	    je	@C0529
 0000240C  3C 28	   *	    cmp    al, 028h
 0000240E  75 07	   *	    jne    @C0528
 00002410		   *@C0529:
 00002410  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002412  E9 000000FD	   *	    jmp    @C052D
 00002417		   *@C0528:
 00002417  3C 02	   *	    cmp    al, 002h
 00002419  74 0C	   *	    je	@C052F
 0000241B  3C 0F	   *	    cmp    al, 00Fh
 0000241D  74 08	   *	    je	@C052F
 0000241F  3C 1C	   *	    cmp    al, 01Ch
 00002421  74 04	   *	    je	@C052F
 00002423  3C 29	   *	    cmp    al, 029h
 00002425  75 07	   *	    jne    @C052E
 00002427		   *@C052F:
 00002427  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002429  E9 000000E6	   *	    jmp    @C0533
 0000242E		   *@C052E:
 0000242E  3C 03	   *	    cmp    al, 003h
 00002430  74 0C	   *	    je	@C0535
 00002432  3C 10	   *	    cmp    al, 010h
 00002434  74 08	   *	    je	@C0535
 00002436  3C 1D	   *	    cmp    al, 01Dh
 00002438  74 04	   *	    je	@C0535
 0000243A  3C 2A	   *	    cmp    al, 02Ah
 0000243C  75 07	   *	    jne    @C0534
 0000243E		   *@C0535:
 0000243E  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002440  E9 000000CF	   *	    jmp    @C0539
 00002445		   *@C0534:
 00002445  3C 04	   *	    cmp    al, 004h
 00002447  74 0C	   *	    je	@C053B
 00002449  3C 11	   *	    cmp    al, 011h
 0000244B  74 08	   *	    je	@C053B
 0000244D  3C 1E	   *	    cmp    al, 01Eh
 0000244F  74 04	   *	    je	@C053B
 00002451  3C 2B	   *	    cmp    al, 02Bh
 00002453  75 07	   *	    jne    @C053A
 00002455		   *@C053B:
 00002455  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002457  E9 000000B8	   *	    jmp    @C053F
 0000245C		   *@C053A:
 0000245C  3C 05	   *	    cmp    al, 005h
 0000245E  74 0C	   *	    je	@C0541
 00002460  3C 12	   *	    cmp    al, 012h
 00002462  74 08	   *	    je	@C0541
 00002464  3C 1F	   *	    cmp    al, 01Fh
 00002466  74 04	   *	    je	@C0541
 00002468  3C 2C	   *	    cmp    al, 02Ch
 0000246A  75 07	   *	    jne    @C0540
 0000246C		   *@C0541:
 0000246C  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000246E  E9 000000A1	   *	    jmp    @C0545
 00002473		   *@C0540:
 00002473  3C 06	   *	    cmp    al, 006h
 00002475  74 0C	   *	    je	@C0547
 00002477  3C 13	   *	    cmp    al, 013h
 00002479  74 08	   *	    je	@C0547
 0000247B  3C 20	   *	    cmp    al, 020h
 0000247D  74 04	   *	    je	@C0547
 0000247F  3C 2D	   *	    cmp    al, 02Dh
 00002481  75 07	   *	    jne    @C0546
 00002483		   *@C0547:
 00002483  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002485  E9 0000008A	   *	    jmp    @C054B
 0000248A		   *@C0546:
 0000248A  3C 07	   *	    cmp    al, 007h
 0000248C  74 0C	   *	    je	@C054D
 0000248E  3C 14	   *	    cmp    al, 014h
 00002490  74 08	   *	    je	@C054D
 00002492  3C 21	   *	    cmp    al, 021h
 00002494  74 04	   *	    je	@C054D
 00002496  3C 2E	   *	    cmp    al, 02Eh
 00002498  75 04	   *	    jne    @C054C
 0000249A		   *@C054D:
 0000249A  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000249C  EB 76	   *	    jmp    @C0551
 0000249E		   *@C054C:
 0000249E  3C 08	   *	    cmp    al, 008h
 000024A0  74 0C	   *	    je	@C0553
 000024A2  3C 15	   *	    cmp    al, 015h
 000024A4  74 08	   *	    je	@C0553
 000024A6  3C 22	   *	    cmp    al, 022h
 000024A8  74 04	   *	    je	@C0553
 000024AA  3C 2F	   *	    cmp    al, 02Fh
 000024AC  75 04	   *	    jne    @C0552
 000024AE		   *@C0553:
 000024AE  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000024B0  EB 62	   *	    jmp    @C0557
 000024B2		   *@C0552:
 000024B2  3C 09	   *	    cmp    al, 009h
 000024B4  74 0C	   *	    je	@C0559
 000024B6  3C 16	   *	    cmp    al, 016h
 000024B8  74 08	   *	    je	@C0559
 000024BA  3C 23	   *	    cmp    al, 023h
 000024BC  74 04	   *	    je	@C0559
 000024BE  3C 30	   *	    cmp    al, 030h
 000024C0  75 04	   *	    jne    @C0558
 000024C2		   *@C0559:
 000024C2  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000024C4  EB 4E	   *	    jmp    @C055D
 000024C6		   *@C0558:
 000024C6  3C 0A	   *	    cmp    al, 00Ah
 000024C8  74 0C	   *	    je	@C055F
 000024CA  3C 17	   *	    cmp    al, 017h
 000024CC  74 08	   *	    je	@C055F
 000024CE  3C 24	   *	    cmp    al, 024h
 000024D0  74 04	   *	    je	@C055F
 000024D2  3C 31	   *	    cmp    al, 031h
 000024D4  75 04	   *	    jne    @C055E
 000024D6		   *@C055F:
 000024D6  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000024D8  EB 3A	   *	    jmp    @C0563
 000024DA		   *@C055E:
 000024DA  3C 0B	   *	    cmp    al, 00Bh
 000024DC  74 0C	   *	    je	@C0565
 000024DE  3C 18	   *	    cmp    al, 018h
 000024E0  74 08	   *	    je	@C0565
 000024E2  3C 25	   *	    cmp    al, 025h
 000024E4  74 04	   *	    je	@C0565
 000024E6  3C 32	   *	    cmp    al, 032h
 000024E8  75 04	   *	    jne    @C0564
 000024EA		   *@C0565:
 000024EA  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000024EC  EB 26	   *	    jmp    @C0569
 000024EE		   *@C0564:
 000024EE  3C 0C	   *	    cmp    al, 00Ch
 000024F0  74 0C	   *	    je	@C056B
 000024F2  3C 19	   *	    cmp    al, 019h
 000024F4  74 08	   *	    je	@C056B
 000024F6  3C 26	   *	    cmp    al, 026h
 000024F8  74 04	   *	    je	@C056B
 000024FA  3C 33	   *	    cmp    al, 033h
 000024FC  75 04	   *	    jne    @C056A
 000024FE		   *@C056B:
 000024FE  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002500  EB 12	   *	    jmp    @C056F
 00002502		   *@C056A:
 00002502  3C 0D	   *	    cmp    al, 00Dh
 00002504  74 0C	   *	    je	@C0571
 00002506  3C 1A	   *	    cmp    al, 01Ah
 00002508  74 08	   *	    je	@C0571
 0000250A  3C 27	   *	    cmp    al, 027h
 0000250C  74 04	   *	    je	@C0571
 0000250E  3C 34	   *	    cmp    al, 034h
 00002510  75 02	   *	    jne    @C0570
 00002512		   *@C0571:
 00002512  B0 0D			mov al,13
				.endif
 00002514		   *@C0570:
 00002514		   *@C056F:
 00002514		   *@C0569:
 00002514		   *@C0563:
 00002514		   *@C055D:
 00002514		   *@C0557:
 00002514		   *@C0551:
 00002514		   *@C054B:
 00002514		   *@C0545:
 00002514		   *@C053F:
 00002514		   *@C0539:
 00002514		   *@C0533:
 00002514		   *@C052D:
 00002514  A2 0000002D R	mov straightp[2], al


 00002519  A0 0000001C R	mov al, cardp4.value
				.if (al == 1||al==14||al==27||al==40)
 0000251E  3C 01	   *	    cmp    al, 001h
 00002520  74 0C	   *	    je	@C0576
 00002522  3C 0E	   *	    cmp    al, 00Eh
 00002524  74 08	   *	    je	@C0576
 00002526  3C 1B	   *	    cmp    al, 01Bh
 00002528  74 04	   *	    je	@C0576
 0000252A  3C 28	   *	    cmp    al, 028h
 0000252C  75 07	   *	    jne    @C0575
 0000252E		   *@C0576:
 0000252E  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002530  E9 000000FD	   *	    jmp    @C057A
 00002535		   *@C0575:
 00002535  3C 02	   *	    cmp    al, 002h
 00002537  74 0C	   *	    je	@C057C
 00002539  3C 0F	   *	    cmp    al, 00Fh
 0000253B  74 08	   *	    je	@C057C
 0000253D  3C 1C	   *	    cmp    al, 01Ch
 0000253F  74 04	   *	    je	@C057C
 00002541  3C 29	   *	    cmp    al, 029h
 00002543  75 07	   *	    jne    @C057B
 00002545		   *@C057C:
 00002545  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002547  E9 000000E6	   *	    jmp    @C0580
 0000254C		   *@C057B:
 0000254C  3C 03	   *	    cmp    al, 003h
 0000254E  74 0C	   *	    je	@C0582
 00002550  3C 10	   *	    cmp    al, 010h
 00002552  74 08	   *	    je	@C0582
 00002554  3C 1D	   *	    cmp    al, 01Dh
 00002556  74 04	   *	    je	@C0582
 00002558  3C 2A	   *	    cmp    al, 02Ah
 0000255A  75 07	   *	    jne    @C0581
 0000255C		   *@C0582:
 0000255C  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000255E  E9 000000CF	   *	    jmp    @C0586
 00002563		   *@C0581:
 00002563  3C 04	   *	    cmp    al, 004h
 00002565  74 0C	   *	    je	@C0588
 00002567  3C 11	   *	    cmp    al, 011h
 00002569  74 08	   *	    je	@C0588
 0000256B  3C 1E	   *	    cmp    al, 01Eh
 0000256D  74 04	   *	    je	@C0588
 0000256F  3C 2B	   *	    cmp    al, 02Bh
 00002571  75 07	   *	    jne    @C0587
 00002573		   *@C0588:
 00002573  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002575  E9 000000B8	   *	    jmp    @C058C
 0000257A		   *@C0587:
 0000257A  3C 05	   *	    cmp    al, 005h
 0000257C  74 0C	   *	    je	@C058E
 0000257E  3C 12	   *	    cmp    al, 012h
 00002580  74 08	   *	    je	@C058E
 00002582  3C 1F	   *	    cmp    al, 01Fh
 00002584  74 04	   *	    je	@C058E
 00002586  3C 2C	   *	    cmp    al, 02Ch
 00002588  75 07	   *	    jne    @C058D
 0000258A		   *@C058E:
 0000258A  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000258C  E9 000000A1	   *	    jmp    @C0592
 00002591		   *@C058D:
 00002591  3C 06	   *	    cmp    al, 006h
 00002593  74 0C	   *	    je	@C0594
 00002595  3C 13	   *	    cmp    al, 013h
 00002597  74 08	   *	    je	@C0594
 00002599  3C 20	   *	    cmp    al, 020h
 0000259B  74 04	   *	    je	@C0594
 0000259D  3C 2D	   *	    cmp    al, 02Dh
 0000259F  75 07	   *	    jne    @C0593
 000025A1		   *@C0594:
 000025A1  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000025A3  E9 0000008A	   *	    jmp    @C0598
 000025A8		   *@C0593:
 000025A8  3C 07	   *	    cmp    al, 007h
 000025AA  74 0C	   *	    je	@C059A
 000025AC  3C 14	   *	    cmp    al, 014h
 000025AE  74 08	   *	    je	@C059A
 000025B0  3C 21	   *	    cmp    al, 021h
 000025B2  74 04	   *	    je	@C059A
 000025B4  3C 2E	   *	    cmp    al, 02Eh
 000025B6  75 04	   *	    jne    @C0599
 000025B8		   *@C059A:
 000025B8  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000025BA  EB 76	   *	    jmp    @C059E
 000025BC		   *@C0599:
 000025BC  3C 08	   *	    cmp    al, 008h
 000025BE  74 0C	   *	    je	@C05A0
 000025C0  3C 15	   *	    cmp    al, 015h
 000025C2  74 08	   *	    je	@C05A0
 000025C4  3C 22	   *	    cmp    al, 022h
 000025C6  74 04	   *	    je	@C05A0
 000025C8  3C 2F	   *	    cmp    al, 02Fh
 000025CA  75 04	   *	    jne    @C059F
 000025CC		   *@C05A0:
 000025CC  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000025CE  EB 62	   *	    jmp    @C05A4
 000025D0		   *@C059F:
 000025D0  3C 09	   *	    cmp    al, 009h
 000025D2  74 0C	   *	    je	@C05A6
 000025D4  3C 16	   *	    cmp    al, 016h
 000025D6  74 08	   *	    je	@C05A6
 000025D8  3C 23	   *	    cmp    al, 023h
 000025DA  74 04	   *	    je	@C05A6
 000025DC  3C 30	   *	    cmp    al, 030h
 000025DE  75 04	   *	    jne    @C05A5
 000025E0		   *@C05A6:
 000025E0  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000025E2  EB 4E	   *	    jmp    @C05AA
 000025E4		   *@C05A5:
 000025E4  3C 0A	   *	    cmp    al, 00Ah
 000025E6  74 0C	   *	    je	@C05AC
 000025E8  3C 17	   *	    cmp    al, 017h
 000025EA  74 08	   *	    je	@C05AC
 000025EC  3C 24	   *	    cmp    al, 024h
 000025EE  74 04	   *	    je	@C05AC
 000025F0  3C 31	   *	    cmp    al, 031h
 000025F2  75 04	   *	    jne    @C05AB
 000025F4		   *@C05AC:
 000025F4  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000025F6  EB 3A	   *	    jmp    @C05B0
 000025F8		   *@C05AB:
 000025F8  3C 0B	   *	    cmp    al, 00Bh
 000025FA  74 0C	   *	    je	@C05B2
 000025FC  3C 18	   *	    cmp    al, 018h
 000025FE  74 08	   *	    je	@C05B2
 00002600  3C 25	   *	    cmp    al, 025h
 00002602  74 04	   *	    je	@C05B2
 00002604  3C 32	   *	    cmp    al, 032h
 00002606  75 04	   *	    jne    @C05B1
 00002608		   *@C05B2:
 00002608  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000260A  EB 26	   *	    jmp    @C05B6
 0000260C		   *@C05B1:
 0000260C  3C 0C	   *	    cmp    al, 00Ch
 0000260E  74 0C	   *	    je	@C05B8
 00002610  3C 19	   *	    cmp    al, 019h
 00002612  74 08	   *	    je	@C05B8
 00002614  3C 26	   *	    cmp    al, 026h
 00002616  74 04	   *	    je	@C05B8
 00002618  3C 33	   *	    cmp    al, 033h
 0000261A  75 04	   *	    jne    @C05B7
 0000261C		   *@C05B8:
 0000261C  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000261E  EB 12	   *	    jmp    @C05BC
 00002620		   *@C05B7:
 00002620  3C 0D	   *	    cmp    al, 00Dh
 00002622  74 0C	   *	    je	@C05BE
 00002624  3C 1A	   *	    cmp    al, 01Ah
 00002626  74 08	   *	    je	@C05BE
 00002628  3C 27	   *	    cmp    al, 027h
 0000262A  74 04	   *	    je	@C05BE
 0000262C  3C 34	   *	    cmp    al, 034h
 0000262E  75 02	   *	    jne    @C05BD
 00002630		   *@C05BE:
 00002630  B0 0D			mov al,13
				.endif
 00002632		   *@C05BD:
 00002632		   *@C05BC:
 00002632		   *@C05B6:
 00002632		   *@C05B0:
 00002632		   *@C05AA:
 00002632		   *@C05A4:
 00002632		   *@C059E:
 00002632		   *@C0598:
 00002632		   *@C0592:
 00002632		   *@C058C:
 00002632		   *@C0586:
 00002632		   *@C0580:
 00002632		   *@C057A:
 00002632  A2 0000002E R	mov straightp[3], al


 00002637  A0 0000001E R	mov al, cardp5.value
				.if (al == 1||al==14||al==27||al==40)
 0000263C  3C 01	   *	    cmp    al, 001h
 0000263E  74 0C	   *	    je	@C05C3
 00002640  3C 0E	   *	    cmp    al, 00Eh
 00002642  74 08	   *	    je	@C05C3
 00002644  3C 1B	   *	    cmp    al, 01Bh
 00002646  74 04	   *	    je	@C05C3
 00002648  3C 28	   *	    cmp    al, 028h
 0000264A  75 07	   *	    jne    @C05C2
 0000264C		   *@C05C3:
 0000264C  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000264E  E9 000000FD	   *	    jmp    @C05C7
 00002653		   *@C05C2:
 00002653  3C 02	   *	    cmp    al, 002h
 00002655  74 0C	   *	    je	@C05C9
 00002657  3C 0F	   *	    cmp    al, 00Fh
 00002659  74 08	   *	    je	@C05C9
 0000265B  3C 1C	   *	    cmp    al, 01Ch
 0000265D  74 04	   *	    je	@C05C9
 0000265F  3C 29	   *	    cmp    al, 029h
 00002661  75 07	   *	    jne    @C05C8
 00002663		   *@C05C9:
 00002663  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002665  E9 000000E6	   *	    jmp    @C05CD
 0000266A		   *@C05C8:
 0000266A  3C 03	   *	    cmp    al, 003h
 0000266C  74 0C	   *	    je	@C05CF
 0000266E  3C 10	   *	    cmp    al, 010h
 00002670  74 08	   *	    je	@C05CF
 00002672  3C 1D	   *	    cmp    al, 01Dh
 00002674  74 04	   *	    je	@C05CF
 00002676  3C 2A	   *	    cmp    al, 02Ah
 00002678  75 07	   *	    jne    @C05CE
 0000267A		   *@C05CF:
 0000267A  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000267C  E9 000000CF	   *	    jmp    @C05D3
 00002681		   *@C05CE:
 00002681  3C 04	   *	    cmp    al, 004h
 00002683  74 0C	   *	    je	@C05D5
 00002685  3C 11	   *	    cmp    al, 011h
 00002687  74 08	   *	    je	@C05D5
 00002689  3C 1E	   *	    cmp    al, 01Eh
 0000268B  74 04	   *	    je	@C05D5
 0000268D  3C 2B	   *	    cmp    al, 02Bh
 0000268F  75 07	   *	    jne    @C05D4
 00002691		   *@C05D5:
 00002691  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002693  E9 000000B8	   *	    jmp    @C05D9
 00002698		   *@C05D4:
 00002698  3C 05	   *	    cmp    al, 005h
 0000269A  74 0C	   *	    je	@C05DB
 0000269C  3C 12	   *	    cmp    al, 012h
 0000269E  74 08	   *	    je	@C05DB
 000026A0  3C 1F	   *	    cmp    al, 01Fh
 000026A2  74 04	   *	    je	@C05DB
 000026A4  3C 2C	   *	    cmp    al, 02Ch
 000026A6  75 07	   *	    jne    @C05DA
 000026A8		   *@C05DB:
 000026A8  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000026AA  E9 000000A1	   *	    jmp    @C05DF
 000026AF		   *@C05DA:
 000026AF  3C 06	   *	    cmp    al, 006h
 000026B1  74 0C	   *	    je	@C05E1
 000026B3  3C 13	   *	    cmp    al, 013h
 000026B5  74 08	   *	    je	@C05E1
 000026B7  3C 20	   *	    cmp    al, 020h
 000026B9  74 04	   *	    je	@C05E1
 000026BB  3C 2D	   *	    cmp    al, 02Dh
 000026BD  75 07	   *	    jne    @C05E0
 000026BF		   *@C05E1:
 000026BF  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000026C1  E9 0000008A	   *	    jmp    @C05E5
 000026C6		   *@C05E0:
 000026C6  3C 07	   *	    cmp    al, 007h
 000026C8  74 0C	   *	    je	@C05E7
 000026CA  3C 14	   *	    cmp    al, 014h
 000026CC  74 08	   *	    je	@C05E7
 000026CE  3C 21	   *	    cmp    al, 021h
 000026D0  74 04	   *	    je	@C05E7
 000026D2  3C 2E	   *	    cmp    al, 02Eh
 000026D4  75 04	   *	    jne    @C05E6
 000026D6		   *@C05E7:
 000026D6  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000026D8  EB 76	   *	    jmp    @C05EB
 000026DA		   *@C05E6:
 000026DA  3C 08	   *	    cmp    al, 008h
 000026DC  74 0C	   *	    je	@C05ED
 000026DE  3C 15	   *	    cmp    al, 015h
 000026E0  74 08	   *	    je	@C05ED
 000026E2  3C 22	   *	    cmp    al, 022h
 000026E4  74 04	   *	    je	@C05ED
 000026E6  3C 2F	   *	    cmp    al, 02Fh
 000026E8  75 04	   *	    jne    @C05EC
 000026EA		   *@C05ED:
 000026EA  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000026EC  EB 62	   *	    jmp    @C05F1
 000026EE		   *@C05EC:
 000026EE  3C 09	   *	    cmp    al, 009h
 000026F0  74 0C	   *	    je	@C05F3
 000026F2  3C 16	   *	    cmp    al, 016h
 000026F4  74 08	   *	    je	@C05F3
 000026F6  3C 23	   *	    cmp    al, 023h
 000026F8  74 04	   *	    je	@C05F3
 000026FA  3C 30	   *	    cmp    al, 030h
 000026FC  75 04	   *	    jne    @C05F2
 000026FE		   *@C05F3:
 000026FE  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002700  EB 4E	   *	    jmp    @C05F7
 00002702		   *@C05F2:
 00002702  3C 0A	   *	    cmp    al, 00Ah
 00002704  74 0C	   *	    je	@C05F9
 00002706  3C 17	   *	    cmp    al, 017h
 00002708  74 08	   *	    je	@C05F9
 0000270A  3C 24	   *	    cmp    al, 024h
 0000270C  74 04	   *	    je	@C05F9
 0000270E  3C 31	   *	    cmp    al, 031h
 00002710  75 04	   *	    jne    @C05F8
 00002712		   *@C05F9:
 00002712  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002714  EB 3A	   *	    jmp    @C05FD
 00002716		   *@C05F8:
 00002716  3C 0B	   *	    cmp    al, 00Bh
 00002718  74 0C	   *	    je	@C05FF
 0000271A  3C 18	   *	    cmp    al, 018h
 0000271C  74 08	   *	    je	@C05FF
 0000271E  3C 25	   *	    cmp    al, 025h
 00002720  74 04	   *	    je	@C05FF
 00002722  3C 32	   *	    cmp    al, 032h
 00002724  75 04	   *	    jne    @C05FE
 00002726		   *@C05FF:
 00002726  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002728  EB 26	   *	    jmp    @C0603
 0000272A		   *@C05FE:
 0000272A  3C 0C	   *	    cmp    al, 00Ch
 0000272C  74 0C	   *	    je	@C0605
 0000272E  3C 19	   *	    cmp    al, 019h
 00002730  74 08	   *	    je	@C0605
 00002732  3C 26	   *	    cmp    al, 026h
 00002734  74 04	   *	    je	@C0605
 00002736  3C 33	   *	    cmp    al, 033h
 00002738  75 04	   *	    jne    @C0604
 0000273A		   *@C0605:
 0000273A  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000273C  EB 12	   *	    jmp    @C0609
 0000273E		   *@C0604:
 0000273E  3C 0D	   *	    cmp    al, 00Dh
 00002740  74 0C	   *	    je	@C060B
 00002742  3C 1A	   *	    cmp    al, 01Ah
 00002744  74 08	   *	    je	@C060B
 00002746  3C 27	   *	    cmp    al, 027h
 00002748  74 04	   *	    je	@C060B
 0000274A  3C 34	   *	    cmp    al, 034h
 0000274C  75 02	   *	    jne    @C060A
 0000274E		   *@C060B:
 0000274E  B0 0D			mov al,13
				.endif
 00002750		   *@C060A:
 00002750		   *@C0609:
 00002750		   *@C0603:
 00002750		   *@C05FD:
 00002750		   *@C05F7:
 00002750		   *@C05F1:
 00002750		   *@C05EB:
 00002750		   *@C05E5:
 00002750		   *@C05DF:
 00002750		   *@C05D9:
 00002750		   *@C05D3:
 00002750		   *@C05CD:
 00002750		   *@C05C7:
 00002750  A2 0000002F R	mov straightp[4], al


 00002755  A0 00000020 R	mov al, cardp6.value
				.if (al == 1||al==14||al==27||al==40)
 0000275A  3C 01	   *	    cmp    al, 001h
 0000275C  74 0C	   *	    je	@C0610
 0000275E  3C 0E	   *	    cmp    al, 00Eh
 00002760  74 08	   *	    je	@C0610
 00002762  3C 1B	   *	    cmp    al, 01Bh
 00002764  74 04	   *	    je	@C0610
 00002766  3C 28	   *	    cmp    al, 028h
 00002768  75 07	   *	    jne    @C060F
 0000276A		   *@C0610:
 0000276A  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000276C  E9 000000FD	   *	    jmp    @C0614
 00002771		   *@C060F:
 00002771  3C 02	   *	    cmp    al, 002h
 00002773  74 0C	   *	    je	@C0616
 00002775  3C 0F	   *	    cmp    al, 00Fh
 00002777  74 08	   *	    je	@C0616
 00002779  3C 1C	   *	    cmp    al, 01Ch
 0000277B  74 04	   *	    je	@C0616
 0000277D  3C 29	   *	    cmp    al, 029h
 0000277F  75 07	   *	    jne    @C0615
 00002781		   *@C0616:
 00002781  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002783  E9 000000E6	   *	    jmp    @C061A
 00002788		   *@C0615:
 00002788  3C 03	   *	    cmp    al, 003h
 0000278A  74 0C	   *	    je	@C061C
 0000278C  3C 10	   *	    cmp    al, 010h
 0000278E  74 08	   *	    je	@C061C
 00002790  3C 1D	   *	    cmp    al, 01Dh
 00002792  74 04	   *	    je	@C061C
 00002794  3C 2A	   *	    cmp    al, 02Ah
 00002796  75 07	   *	    jne    @C061B
 00002798		   *@C061C:
 00002798  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000279A  E9 000000CF	   *	    jmp    @C0620
 0000279F		   *@C061B:
 0000279F  3C 04	   *	    cmp    al, 004h
 000027A1  74 0C	   *	    je	@C0622
 000027A3  3C 11	   *	    cmp    al, 011h
 000027A5  74 08	   *	    je	@C0622
 000027A7  3C 1E	   *	    cmp    al, 01Eh
 000027A9  74 04	   *	    je	@C0622
 000027AB  3C 2B	   *	    cmp    al, 02Bh
 000027AD  75 07	   *	    jne    @C0621
 000027AF		   *@C0622:
 000027AF  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000027B1  E9 000000B8	   *	    jmp    @C0626
 000027B6		   *@C0621:
 000027B6  3C 05	   *	    cmp    al, 005h
 000027B8  74 0C	   *	    je	@C0628
 000027BA  3C 12	   *	    cmp    al, 012h
 000027BC  74 08	   *	    je	@C0628
 000027BE  3C 1F	   *	    cmp    al, 01Fh
 000027C0  74 04	   *	    je	@C0628
 000027C2  3C 2C	   *	    cmp    al, 02Ch
 000027C4  75 07	   *	    jne    @C0627
 000027C6		   *@C0628:
 000027C6  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000027C8  E9 000000A1	   *	    jmp    @C062C
 000027CD		   *@C0627:
 000027CD  3C 06	   *	    cmp    al, 006h
 000027CF  74 0C	   *	    je	@C062E
 000027D1  3C 13	   *	    cmp    al, 013h
 000027D3  74 08	   *	    je	@C062E
 000027D5  3C 20	   *	    cmp    al, 020h
 000027D7  74 04	   *	    je	@C062E
 000027D9  3C 2D	   *	    cmp    al, 02Dh
 000027DB  75 07	   *	    jne    @C062D
 000027DD		   *@C062E:
 000027DD  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000027DF  E9 0000008A	   *	    jmp    @C0632
 000027E4		   *@C062D:
 000027E4  3C 07	   *	    cmp    al, 007h
 000027E6  74 0C	   *	    je	@C0634
 000027E8  3C 14	   *	    cmp    al, 014h
 000027EA  74 08	   *	    je	@C0634
 000027EC  3C 21	   *	    cmp    al, 021h
 000027EE  74 04	   *	    je	@C0634
 000027F0  3C 2E	   *	    cmp    al, 02Eh
 000027F2  75 04	   *	    jne    @C0633
 000027F4		   *@C0634:
 000027F4  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000027F6  EB 76	   *	    jmp    @C0638
 000027F8		   *@C0633:
 000027F8  3C 08	   *	    cmp    al, 008h
 000027FA  74 0C	   *	    je	@C063A
 000027FC  3C 15	   *	    cmp    al, 015h
 000027FE  74 08	   *	    je	@C063A
 00002800  3C 22	   *	    cmp    al, 022h
 00002802  74 04	   *	    je	@C063A
 00002804  3C 2F	   *	    cmp    al, 02Fh
 00002806  75 04	   *	    jne    @C0639
 00002808		   *@C063A:
 00002808  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000280A  EB 62	   *	    jmp    @C063E
 0000280C		   *@C0639:
 0000280C  3C 09	   *	    cmp    al, 009h
 0000280E  74 0C	   *	    je	@C0640
 00002810  3C 16	   *	    cmp    al, 016h
 00002812  74 08	   *	    je	@C0640
 00002814  3C 23	   *	    cmp    al, 023h
 00002816  74 04	   *	    je	@C0640
 00002818  3C 30	   *	    cmp    al, 030h
 0000281A  75 04	   *	    jne    @C063F
 0000281C		   *@C0640:
 0000281C  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 0000281E  EB 4E	   *	    jmp    @C0644
 00002820		   *@C063F:
 00002820  3C 0A	   *	    cmp    al, 00Ah
 00002822  74 0C	   *	    je	@C0646
 00002824  3C 17	   *	    cmp    al, 017h
 00002826  74 08	   *	    je	@C0646
 00002828  3C 24	   *	    cmp    al, 024h
 0000282A  74 04	   *	    je	@C0646
 0000282C  3C 31	   *	    cmp    al, 031h
 0000282E  75 04	   *	    jne    @C0645
 00002830		   *@C0646:
 00002830  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002832  EB 3A	   *	    jmp    @C064A
 00002834		   *@C0645:
 00002834  3C 0B	   *	    cmp    al, 00Bh
 00002836  74 0C	   *	    je	@C064C
 00002838  3C 18	   *	    cmp    al, 018h
 0000283A  74 08	   *	    je	@C064C
 0000283C  3C 25	   *	    cmp    al, 025h
 0000283E  74 04	   *	    je	@C064C
 00002840  3C 32	   *	    cmp    al, 032h
 00002842  75 04	   *	    jne    @C064B
 00002844		   *@C064C:
 00002844  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002846  EB 26	   *	    jmp    @C0650
 00002848		   *@C064B:
 00002848  3C 0C	   *	    cmp    al, 00Ch
 0000284A  74 0C	   *	    je	@C0652
 0000284C  3C 19	   *	    cmp    al, 019h
 0000284E  74 08	   *	    je	@C0652
 00002850  3C 26	   *	    cmp    al, 026h
 00002852  74 04	   *	    je	@C0652
 00002854  3C 33	   *	    cmp    al, 033h
 00002856  75 04	   *	    jne    @C0651
 00002858		   *@C0652:
 00002858  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000285A  EB 12	   *	    jmp    @C0656
 0000285C		   *@C0651:
 0000285C  3C 0D	   *	    cmp    al, 00Dh
 0000285E  74 0C	   *	    je	@C0658
 00002860  3C 1A	   *	    cmp    al, 01Ah
 00002862  74 08	   *	    je	@C0658
 00002864  3C 27	   *	    cmp    al, 027h
 00002866  74 04	   *	    je	@C0658
 00002868  3C 34	   *	    cmp    al, 034h
 0000286A  75 02	   *	    jne    @C0657
 0000286C		   *@C0658:
 0000286C  B0 0D			mov al,13
				.endif
 0000286E		   *@C0657:
 0000286E		   *@C0656:
 0000286E		   *@C0650:
 0000286E		   *@C064A:
 0000286E		   *@C0644:
 0000286E		   *@C063E:
 0000286E		   *@C0638:
 0000286E		   *@C0632:
 0000286E		   *@C062C:
 0000286E		   *@C0626:
 0000286E		   *@C0620:
 0000286E		   *@C061A:
 0000286E		   *@C0614:
 0000286E  A2 00000030 R	mov straightp[5], al


 00002873  A0 00000022 R	mov al, cardp7.value
				.if (al == 1||al==14||al==27||al==40)
 00002878  3C 01	   *	    cmp    al, 001h
 0000287A  74 0C	   *	    je	@C065D
 0000287C  3C 0E	   *	    cmp    al, 00Eh
 0000287E  74 08	   *	    je	@C065D
 00002880  3C 1B	   *	    cmp    al, 01Bh
 00002882  74 04	   *	    je	@C065D
 00002884  3C 28	   *	    cmp    al, 028h
 00002886  75 07	   *	    jne    @C065C
 00002888		   *@C065D:
 00002888  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000288A  E9 000000FD	   *	    jmp    @C0661
 0000288F		   *@C065C:
 0000288F  3C 02	   *	    cmp    al, 002h
 00002891  74 0C	   *	    je	@C0663
 00002893  3C 0F	   *	    cmp    al, 00Fh
 00002895  74 08	   *	    je	@C0663
 00002897  3C 1C	   *	    cmp    al, 01Ch
 00002899  74 04	   *	    je	@C0663
 0000289B  3C 29	   *	    cmp    al, 029h
 0000289D  75 07	   *	    jne    @C0662
 0000289F		   *@C0663:
 0000289F  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000028A1  E9 000000E6	   *	    jmp    @C0667
 000028A6		   *@C0662:
 000028A6  3C 03	   *	    cmp    al, 003h
 000028A8  74 0C	   *	    je	@C0669
 000028AA  3C 10	   *	    cmp    al, 010h
 000028AC  74 08	   *	    je	@C0669
 000028AE  3C 1D	   *	    cmp    al, 01Dh
 000028B0  74 04	   *	    je	@C0669
 000028B2  3C 2A	   *	    cmp    al, 02Ah
 000028B4  75 07	   *	    jne    @C0668
 000028B6		   *@C0669:
 000028B6  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000028B8  E9 000000CF	   *	    jmp    @C066D
 000028BD		   *@C0668:
 000028BD  3C 04	   *	    cmp    al, 004h
 000028BF  74 0C	   *	    je	@C066F
 000028C1  3C 11	   *	    cmp    al, 011h
 000028C3  74 08	   *	    je	@C066F
 000028C5  3C 1E	   *	    cmp    al, 01Eh
 000028C7  74 04	   *	    je	@C066F
 000028C9  3C 2B	   *	    cmp    al, 02Bh
 000028CB  75 07	   *	    jne    @C066E
 000028CD		   *@C066F:
 000028CD  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000028CF  E9 000000B8	   *	    jmp    @C0673
 000028D4		   *@C066E:
 000028D4  3C 05	   *	    cmp    al, 005h
 000028D6  74 0C	   *	    je	@C0675
 000028D8  3C 12	   *	    cmp    al, 012h
 000028DA  74 08	   *	    je	@C0675
 000028DC  3C 1F	   *	    cmp    al, 01Fh
 000028DE  74 04	   *	    je	@C0675
 000028E0  3C 2C	   *	    cmp    al, 02Ch
 000028E2  75 07	   *	    jne    @C0674
 000028E4		   *@C0675:
 000028E4  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000028E6  E9 000000A1	   *	    jmp    @C0679
 000028EB		   *@C0674:
 000028EB  3C 06	   *	    cmp    al, 006h
 000028ED  74 0C	   *	    je	@C067B
 000028EF  3C 13	   *	    cmp    al, 013h
 000028F1  74 08	   *	    je	@C067B
 000028F3  3C 20	   *	    cmp    al, 020h
 000028F5  74 04	   *	    je	@C067B
 000028F7  3C 2D	   *	    cmp    al, 02Dh
 000028F9  75 07	   *	    jne    @C067A
 000028FB		   *@C067B:
 000028FB  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000028FD  E9 0000008A	   *	    jmp    @C067F
 00002902		   *@C067A:
 00002902  3C 07	   *	    cmp    al, 007h
 00002904  74 0C	   *	    je	@C0681
 00002906  3C 14	   *	    cmp    al, 014h
 00002908  74 08	   *	    je	@C0681
 0000290A  3C 21	   *	    cmp    al, 021h
 0000290C  74 04	   *	    je	@C0681
 0000290E  3C 2E	   *	    cmp    al, 02Eh
 00002910  75 04	   *	    jne    @C0680
 00002912		   *@C0681:
 00002912  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002914  EB 76	   *	    jmp    @C0685
 00002916		   *@C0680:
 00002916  3C 08	   *	    cmp    al, 008h
 00002918  74 0C	   *	    je	@C0687
 0000291A  3C 15	   *	    cmp    al, 015h
 0000291C  74 08	   *	    je	@C0687
 0000291E  3C 22	   *	    cmp    al, 022h
 00002920  74 04	   *	    je	@C0687
 00002922  3C 2F	   *	    cmp    al, 02Fh
 00002924  75 04	   *	    jne    @C0686
 00002926		   *@C0687:
 00002926  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002928  EB 62	   *	    jmp    @C068B
 0000292A		   *@C0686:
 0000292A  3C 09	   *	    cmp    al, 009h
 0000292C  74 0C	   *	    je	@C068D
 0000292E  3C 16	   *	    cmp    al, 016h
 00002930  74 08	   *	    je	@C068D
 00002932  3C 23	   *	    cmp    al, 023h
 00002934  74 04	   *	    je	@C068D
 00002936  3C 30	   *	    cmp    al, 030h
 00002938  75 04	   *	    jne    @C068C
 0000293A		   *@C068D:
 0000293A  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 0000293C  EB 4E	   *	    jmp    @C0691
 0000293E		   *@C068C:
 0000293E  3C 0A	   *	    cmp    al, 00Ah
 00002940  74 0C	   *	    je	@C0693
 00002942  3C 17	   *	    cmp    al, 017h
 00002944  74 08	   *	    je	@C0693
 00002946  3C 24	   *	    cmp    al, 024h
 00002948  74 04	   *	    je	@C0693
 0000294A  3C 31	   *	    cmp    al, 031h
 0000294C  75 04	   *	    jne    @C0692
 0000294E		   *@C0693:
 0000294E  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002950  EB 3A	   *	    jmp    @C0697
 00002952		   *@C0692:
 00002952  3C 0B	   *	    cmp    al, 00Bh
 00002954  74 0C	   *	    je	@C0699
 00002956  3C 18	   *	    cmp    al, 018h
 00002958  74 08	   *	    je	@C0699
 0000295A  3C 25	   *	    cmp    al, 025h
 0000295C  74 04	   *	    je	@C0699
 0000295E  3C 32	   *	    cmp    al, 032h
 00002960  75 04	   *	    jne    @C0698
 00002962		   *@C0699:
 00002962  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002964  EB 26	   *	    jmp    @C069D
 00002966		   *@C0698:
 00002966  3C 0C	   *	    cmp    al, 00Ch
 00002968  74 0C	   *	    je	@C069F
 0000296A  3C 19	   *	    cmp    al, 019h
 0000296C  74 08	   *	    je	@C069F
 0000296E  3C 26	   *	    cmp    al, 026h
 00002970  74 04	   *	    je	@C069F
 00002972  3C 33	   *	    cmp    al, 033h
 00002974  75 04	   *	    jne    @C069E
 00002976		   *@C069F:
 00002976  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002978  EB 12	   *	    jmp    @C06A3
 0000297A		   *@C069E:
 0000297A  3C 0D	   *	    cmp    al, 00Dh
 0000297C  74 0C	   *	    je	@C06A5
 0000297E  3C 1A	   *	    cmp    al, 01Ah
 00002980  74 08	   *	    je	@C06A5
 00002982  3C 27	   *	    cmp    al, 027h
 00002984  74 04	   *	    je	@C06A5
 00002986  3C 34	   *	    cmp    al, 034h
 00002988  75 02	   *	    jne    @C06A4
 0000298A		   *@C06A5:
 0000298A  B0 0D			mov al,13
				.endif
 0000298C		   *@C06A4:
 0000298C		   *@C06A3:
 0000298C		   *@C069D:
 0000298C		   *@C0697:
 0000298C		   *@C0691:
 0000298C		   *@C068B:
 0000298C		   *@C0685:
 0000298C		   *@C067F:
 0000298C		   *@C0679:
 0000298C		   *@C0673:
 0000298C		   *@C066D:
 0000298C		   *@C0667:
 0000298C		   *@C0661:
 0000298C  A2 00000031 R	mov straightp[6], al

 00002991  B9 00000006		mov ecx,6 
 00002996  BF 00000006		 mov edi,6 
 0000299B  BE 00000000		 mov esi,0 
				 	 
 000029A0			 	PS1: 
 000029A0  8B D6		 		mov edx,esi 
 000029A2  42			 		inc edx 
 000029A3  51			 		push ecx 
 000029A4  8B CF		 		mov ecx, edi 
 000029A6			 			PS2: 
 000029A6  8A 86 0000002B R	 				mov al, straightp[esi] 
 000029AC  8A 9A 0000002B R	 				mov bl, straightp[edx] 
				 					.if (al < bl) 
 000029B2  3A C3	   *	    cmp    al, bl
 000029B4  73 0E	   *	    jae    @C06A9
 000029B6  86 C3		 						xchg al, bl 
 000029B8  88 86 0000002B R	 						mov straightp[esi],al 
 000029BE  88 9A 0000002B R	 						mov straightp[edx],bl 
				 					.endif  
 000029C4		   *@C06A9:
 000029C4  42			 				inc edx 
 000029C5  E2 DF		 			Loop PS2 
 000029C7  59			 		pop ecx 
 000029C8  46			 		inc esi		 
 000029C9  4F			 		dec edi 
 000029CA  E2 D4		 	Loop PS1 

					
 000029CC  BE 00000000		mov esi,0
 000029D1  BF 00000001		mov edi,1
 000029D6  89 35 00000000 R		mov var1, esi
 000029DC  89 3D 00000004 R		mov var2, edi
 000029E2  8A 86 0000002B R		mov al, straightp[esi]
 000029E8  8A 9F 0000002B R		mov bl, straightp[edi]
					.if(al==bl)
 000029EE  3A C3	   *	    cmp    al, bl
 000029F0  75 07	   *	    jne    @C06AB
 000029F2  47					inc edi
 000029F3  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 000029F9		   *@C06AB:
					.if(al==bl)
 000029F9  3A C3	   *	    cmp    al, bl
 000029FB  75 07	   *	    jne    @C06AD
 000029FD  47					inc edi
 000029FE  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002A04		   *@C06AD:
 00002A04  2A C3			sub al,bl
 00002A06  46				inc esi
 00002A07  47				inc edi
						.if(al==bl)
 00002A08  3A C3	   *	    cmp    al, bl
 00002A0A  0F 85 000000CB  *	    jne    @C06AF
 00002A10  8A 86 0000002B R				mov al, straightp[esi]
 00002A16  8A 9F 0000002B R				mov bl, straightp[edi]
							.if(al==bl)
 00002A1C  3A C3	   *	    cmp    al, bl
 00002A1E  75 07	   *	    jne    @C06B1
 00002A20  47							inc edi
 00002A21  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00002A27		   *@C06B1:
 00002A27  3A C3	   *	    cmp    al, bl
 00002A29  75 07	   *	    jne    @C06B3
 00002A2B  47							inc edi
 00002A2C  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
 00002A32		   *@C06B3:
 00002A32  2A C3					sub al,bl
 00002A34  46						inc esi
 00002A35  47						inc edi
								.if(al==bl)
 00002A36  3A C3	   *	    cmp    al, bl
 00002A38  0F 85 0000009D  *	    jne    @C06B5
 00002A3E  8A 86 0000002B R						mov al, straightp[esi]
 00002A44  8A 9F 0000002B R						mov bl, straightp[edi]
									.if(al==bl)
 00002A4A  3A C3	   *	    cmp    al, bl
 00002A4C  75 07	   *	    jne    @C06B7
 00002A4E  47									inc edi
 00002A4F  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00002A55		   *@C06B7:
 00002A55  3A C3	   *	    cmp    al, bl
 00002A57  75 07	   *	    jne    @C06B9
 00002A59  47									inc edi
 00002A5A  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
 00002A60		   *@C06B9:
 00002A60  2A C3							sub al,bl
 00002A62  46								inc esi
 00002A63  47								inc edi
										.if(al==bl)
 00002A64  3A C3	   *	    cmp    al, bl
 00002A66  75 73	   *	    jne    @C06BB
 00002A68  8A 86 0000002B R								mov al, straightp[esi]
 00002A6E  8A 9F 0000002B R									mov bl, straightp[edi]
												.if(al==bl)
 00002A74  3A C3	   *	    cmp    al, bl
 00002A76  75 07	   *	    jne    @C06BD
 00002A78  47												inc edi
 00002A79  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00002A7F		   *@C06BD:
 00002A7F  3A C3	   *	    cmp    al, bl
 00002A81  75 07	   *	    jne    @C06BF
 00002A83  47												inc edi
 00002A84  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
 00002A8A		   *@C06BF:
 00002A8A  2A C3										sub al,bl
 00002A8C  46											inc esi
 00002A8D  47											inc edi
													.if(al==bl)
 00002A8E  3A C3	   *	    cmp    al, bl
 00002A90  75 49	   *	    jne    @C06C1
 00002A92  8A 86 0000002B R											mov al, straightp[esi]
 00002A98  8A 9F 0000002B R											mov bl, straightp[edi]
														.if(al==bl)
 00002A9E  3A C3	   *	    cmp    al, bl
 00002AA0  75 07	   *	    jne    @C06C3
 00002AA2  47														inc edi
 00002AA3  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 00002AA9		   *@C06C3:
 00002AA9  3A C3	   *	    cmp    al, bl
 00002AAB  75 07	   *	    jne    @C06C5
 00002AAD  47														inc edi
 00002AAE  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
 00002AB4		   *@C06C5:
 00002AB4  2A C3												sub al,bl
 00002AB6  46													inc esi
 00002AB7  47													inc edi
															.if(al==bl)
 00002AB8  3A C3	   *	    cmp    al, bl
 00002ABA  75 1F	   *	    jne    @C06C7
 00002ABC  FF 05 0000005E R													inc isstraightp
 00002AC2  8B 35 00000000 R													mov esi, var1
 00002AC8  8A 86 0000002B R													mov al, straightP[esi]
																	.if(HighStP < al)
 00002ACE  38 05 00000077 R *	    cmp    HighStp, al
 00002AD4  73 05	   *	    jae    @C06C9
 00002AD6  A2 00000077 R															mov HighStP, al
																	.endif
													.endif
 00002ADB		   *@C06C9:
											.endif
 00002ADB		   *@C06C7:
									.endif
 00002ADB		   *@C06C1:
							.endif
 00002ADB		   *@C06BB:
					.endif
 00002ADB		   *@C06B5:
 00002ADB		   *@C06AF:
 00002ADB  8B 35 00000000 R		mov esi, var1
 00002AE1  8B 3D 00000004 R		mov edi, var2
 00002AE7  46				inc esi
 00002AE8  47				inc edi

 00002AE9  89 35 00000000 R		mov var1, esi
 00002AEF  89 3D 00000004 R		mov var2, edi
 00002AF5  8A 86 0000002B R		mov al, straightp[esi]
 00002AFB  8A 9F 0000002B R		mov bl, straightp[edi]
					.if(al==bl)
 00002B01  3A C3	   *	    cmp    al, bl
 00002B03  75 07	   *	    jne    @C06CB
 00002B05  47					inc edi
 00002B06  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002B0C		   *@C06CB:
					.if(al==bl)
 00002B0C  3A C3	   *	    cmp    al, bl
 00002B0E  75 07	   *	    jne    @C06CD
 00002B10  47					inc edi
 00002B11  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002B17		   *@C06CD:
 00002B17  2A C3			sub al,bl
 00002B19  46				inc esi
 00002B1A  47				inc edi
						.if(al==bl)
 00002B1B  3A C3	   *	    cmp    al, bl
 00002B1D  0F 85 000000CB  *	    jne    @C06CF
 00002B23  8A 86 0000002B R				mov al, straightp[esi]
 00002B29  8A 9F 0000002B R				mov bl, straightp[edi]
							.if(al==bl)
 00002B2F  3A C3	   *	    cmp    al, bl
 00002B31  75 07	   *	    jne    @C06D1
 00002B33  47							inc edi
 00002B34  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00002B3A		   *@C06D1:
 00002B3A  3A C3	   *	    cmp    al, bl
 00002B3C  75 07	   *	    jne    @C06D3
 00002B3E  47							inc edi
 00002B3F  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
 00002B45		   *@C06D3:
 00002B45  2A C3					sub al,bl
 00002B47  46						inc esi
 00002B48  47						inc edi
								.if(al==bl)
 00002B49  3A C3	   *	    cmp    al, bl
 00002B4B  0F 85 0000009D  *	    jne    @C06D5
 00002B51  8A 86 0000002B R						mov al, straightp[esi]
 00002B57  8A 9F 0000002B R						mov bl, straightp[edi]
									.if(al==bl)
 00002B5D  3A C3	   *	    cmp    al, bl
 00002B5F  75 07	   *	    jne    @C06D7
 00002B61  47									inc edi
 00002B62  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00002B68		   *@C06D7:
 00002B68  3A C3	   *	    cmp    al, bl
 00002B6A  75 07	   *	    jne    @C06D9
 00002B6C  47									inc edi
 00002B6D  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
 00002B73		   *@C06D9:
 00002B73  2A C3							sub al,bl
 00002B75  46								inc esi
 00002B76  47								inc edi
										.if(al==bl)
 00002B77  3A C3	   *	    cmp    al, bl
 00002B79  75 73	   *	    jne    @C06DB
 00002B7B  8A 86 0000002B R								mov al, straightp[esi]
 00002B81  8A 9F 0000002B R									mov bl, straightp[edi]
												.if(al==bl)
 00002B87  3A C3	   *	    cmp    al, bl
 00002B89  75 07	   *	    jne    @C06DD
 00002B8B  47												inc edi
 00002B8C  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00002B92		   *@C06DD:
 00002B92  3A C3	   *	    cmp    al, bl
 00002B94  75 07	   *	    jne    @C06DF
 00002B96  47												inc edi
 00002B97  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
 00002B9D		   *@C06DF:
 00002B9D  2A C3										sub al,bl
 00002B9F  46											inc esi
 00002BA0  47											inc edi
													.if(al==bl)
 00002BA1  3A C3	   *	    cmp    al, bl
 00002BA3  75 49	   *	    jne    @C06E1
 00002BA5  8A 86 0000002B R											mov al, straightp[esi]
 00002BAB  8A 9F 0000002B R											mov bl, straightp[edi]
														.if(al==bl)
 00002BB1  3A C3	   *	    cmp    al, bl
 00002BB3  75 07	   *	    jne    @C06E3
 00002BB5  47														inc edi
 00002BB6  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 00002BBC		   *@C06E3:
 00002BBC  3A C3	   *	    cmp    al, bl
 00002BBE  75 07	   *	    jne    @C06E5
 00002BC0  47														inc edi
 00002BC1  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
 00002BC7		   *@C06E5:
 00002BC7  2A C3												sub al,bl
 00002BC9  46													inc esi
 00002BCA  47													inc edi
															.if(al==bl)
 00002BCB  3A C3	   *	    cmp    al, bl
 00002BCD  75 1F	   *	    jne    @C06E7
 00002BCF  FF 05 0000005E R													inc isstraightp
 00002BD5  8B 35 00000000 R													mov esi, var1
 00002BDB  8A 86 0000002B R													mov al, straightp[esi]
																	.if(HighStp < al)
 00002BE1  38 05 00000077 R *	    cmp    HighStp, al
 00002BE7  73 05	   *	    jae    @C06E9
 00002BE9  A2 00000077 R															mov HighStp, al
																	.endif
													.endif
 00002BEE		   *@C06E9:
											.endif
 00002BEE		   *@C06E7:
									.endif
 00002BEE		   *@C06E1:
							.endif
 00002BEE		   *@C06DB:
					.endif
 00002BEE		   *@C06D5:
 00002BEE		   *@C06CF:
 00002BEE  8B 35 00000000 R		mov esi, var1
 00002BF4  8B 3D 00000004 R		mov edi,var2
 00002BFA  46				inc esi
 00002BFB  47				inc edi

 00002BFC  89 35 00000000 R		mov var1,esi
 00002C02  89 3D 00000004 R		mov var2, edi
 00002C08  8A 86 0000002B R		mov al, straightp[esi]
 00002C0E  8A 9F 0000002B R		mov bl, straightp[edi]
					.if(al==bl)
 00002C14  3A C3	   *	    cmp    al, bl
 00002C16  75 07	   *	    jne    @C06EB
 00002C18  47					inc edi
 00002C19  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002C1F		   *@C06EB:
					.if(al==bl)
 00002C1F  3A C3	   *	    cmp    al, bl
 00002C21  75 07	   *	    jne    @C06ED
 00002C23  47					inc edi
 00002C24  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002C2A		   *@C06ED:
 00002C2A  2A C3			sub al,bl
 00002C2C  46				inc esi
 00002C2D  47				inc edi
						.if(al==bl)
 00002C2E  3A C3	   *	    cmp    al, bl
 00002C30  0F 85 000000CB  *	    jne    @C06EF
 00002C36  8A 86 0000002B R				mov al, straightp[esi]
 00002C3C  8A 9F 0000002B R				mov bl, straightp[edi]
							.if(al==bl)
 00002C42  3A C3	   *	    cmp    al, bl
 00002C44  75 07	   *	    jne    @C06F1
 00002C46  47							inc edi
 00002C47  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00002C4D		   *@C06F1:
 00002C4D  3A C3	   *	    cmp    al, bl
 00002C4F  75 07	   *	    jne    @C06F3
 00002C51  47							inc edi
 00002C52  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
 00002C58		   *@C06F3:
 00002C58  2A C3					sub al,bl
 00002C5A  46						inc esi
 00002C5B  47						inc edi
								.if(al==bl)
 00002C5C  3A C3	   *	    cmp    al, bl
 00002C5E  0F 85 0000009D  *	    jne    @C06F5
 00002C64  8A 86 0000002B R						mov al, straightp[esi]
 00002C6A  8A 9F 0000002B R						mov bl, straightp[edi]
									.if(al==bl)
 00002C70  3A C3	   *	    cmp    al, bl
 00002C72  75 07	   *	    jne    @C06F7
 00002C74  47									inc edi
 00002C75  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00002C7B		   *@C06F7:
 00002C7B  3A C3	   *	    cmp    al, bl
 00002C7D  75 07	   *	    jne    @C06F9
 00002C7F  47									inc edi
 00002C80  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
 00002C86		   *@C06F9:
 00002C86  2A C3							sub al,bl
 00002C88  46								inc esi
 00002C89  47								inc edi
										.if(al==bl)
 00002C8A  3A C3	   *	    cmp    al, bl
 00002C8C  75 73	   *	    jne    @C06FB
 00002C8E  8A 86 0000002B R								mov al, straightp[esi]
 00002C94  8A 9F 0000002B R									mov bl, straightp[edi]
												.if(al==bl)
 00002C9A  3A C3	   *	    cmp    al, bl
 00002C9C  75 07	   *	    jne    @C06FD
 00002C9E  47												inc edi
 00002C9F  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00002CA5		   *@C06FD:
 00002CA5  3A C3	   *	    cmp    al, bl
 00002CA7  75 07	   *	    jne    @C06FF
 00002CA9  47												inc edi
 00002CAA  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
 00002CB0		   *@C06FF:
 00002CB0  2A C3										sub al,bl
 00002CB2  46											inc esi
 00002CB3  47											inc edi
													.if(al==bl)
 00002CB4  3A C3	   *	    cmp    al, bl
 00002CB6  75 49	   *	    jne    @C0701
 00002CB8  8A 86 0000002B R											mov al, straightp[esi]
 00002CBE  8A 9F 0000002B R											mov bl, straightp[edi]
														.if(al==bl)
 00002CC4  3A C3	   *	    cmp    al, bl
 00002CC6  75 07	   *	    jne    @C0703
 00002CC8  47														inc edi
 00002CC9  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 00002CCF		   *@C0703:
 00002CCF  3A C3	   *	    cmp    al, bl
 00002CD1  75 07	   *	    jne    @C0705
 00002CD3  47														inc edi
 00002CD4  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
 00002CDA		   *@C0705:
 00002CDA  2A C3												sub al,bl
 00002CDC  46													inc esi
 00002CDD  47													inc edi
															.if(al==bl)
 00002CDE  3A C3	   *	    cmp    al, bl
 00002CE0  75 1F	   *	    jne    @C0707
 00002CE2  FF 05 0000005E R													inc isstraightp
 00002CE8  8B 35 00000000 R													mov esi, var1
 00002CEE  8A 86 0000002B R													mov al, straightp[esi]
																	.if(HighStp < al)
 00002CF4  38 05 00000077 R *	    cmp    HighStp, al
 00002CFA  73 05	   *	    jae    @C0709
 00002CFC  A2 00000077 R															mov HighStp, al
																	.endif
													.endif
 00002D01		   *@C0709:
											.endif
 00002D01		   *@C0707:
									.endif
 00002D01		   *@C0701:
							.endif
 00002D01		   *@C06FB:
					.endif
 00002D01		   *@C06F5:
 00002D01		   *@C06EF:

					.if(HighStP==13)
 00002D01  80 3D 00000077 R
	   0D		   *	    cmp    HighStp, 00Dh
 00002D08  75 13	   *	    jne    @C070B
						.if(PlayerFlush > 0)
 00002D0A  83 3D 0000008A R
	   00		   *	    cmp    PlayerFlush, 000h
 00002D11  76 0A	   *	    jbe    @C070D
 00002D13  C7 05 0000007A R				mov PlayerRoyal, 1
	   00000001
						.endif
					.endif
 00002D1D		   *@C070D:
 00002D1D		   *@C070B:
					.if (HighStP > 0)
 00002D1D  80 3D 00000077 R
	   00		   *	    cmp    HighStp, 000h
 00002D24  76 0A	   *	    jbe    @C070F
 00002D26  C7 05 0000008E R			mov PlayerStraight, 1
	   00000001
					.endif
 00002D30		   *@C070F:

 00002D30  C3			ret
 00002D31			IsAStraight ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002D31			 FourKind PROC
 00002D31  B9 00000004		mov ecx, 4
 00002D36  BE 00000000		mov esi,0
 00002D3B  BF 00000001		mov edi,1
 00002D40				FKs:
 00002D40  8A 86 00000024 R			mov al, straights[esi]
 00002D46  8A 9F 00000024 R			mov bl, straights[edi]
 00002D4C  89 35 00000000 R			mov var1, esi
 00002D52  46					inc esi
 00002D53  89 3D 00000004 R			mov var2, edi
 00002D59  47					inc edi
							.if(al==bl)
 00002D5A  3A C3	   *	    cmp    al, bl
 00002D5C  75 47	   *	    jne    @C0711
 00002D5E  8A 86 00000024 R					mov al, straights[esi]
 00002D64  8A 9F 00000024 R					mov bl, straights[edi]
 00002D6A  46							inc esi
 00002D6B  47							inc edi
									.if(al==bl)
 00002D6C  3A C3	   *	    cmp    al, bl
 00002D6E  75 35	   *	    jne    @C0713
 00002D70  8A 86 00000024 R							mov al, straights[esi]
 00002D76  8A 9F 00000024 R							mov bl, straights[edi]
 00002D7C  46									inc esi
 00002D7D  47									inc edi
											.if(al==bl)
 00002D7E  3A C3	   *	    cmp    al, bl
 00002D80  75 23	   *	    jne    @C0715
 00002D82  C7 05 000000C2 R									mov SpockFour,1
	   00000001
 00002D8C  8A 86 00000024 R									mov al, straights[esi]
 00002D92  A2 0000006A R									mov HighFourS, al
 00002D97  8B 3D 00000004 R									mov edi,var2
 00002D9D  8B 35 00000000 R									mov esi,var1
 00002DA3  46											inc esi
 00002DA4  47											inc edi
											.endif
									.endif
 00002DA5		   *@C0715:
							.endif
 00002DA5		   *@C0713:
 00002DA5		   *@C0711:
 00002DA5  E2 99			Loop FKS

				;Player

 00002DA7  B9 00000004			mov ecx, 4
 00002DAC  BE 00000000		mov esi,0
 00002DB1  BF 00000001		mov edi,1
 00002DB6				FKp:
 00002DB6  8A 86 0000002B R			mov al, straightp[esi]
 00002DBC  8A 9F 0000002B R			mov bl, straightp[edi]
 00002DC2  89 35 00000000 R			mov var1, esi
 00002DC8  46					inc esi
 00002DC9  89 3D 00000004 R			mov var2, edi
 00002DCF  47					inc edi
							.if(al==bl)
 00002DD0  3A C3	   *	    cmp    al, bl
 00002DD2  75 47	   *	    jne    @C0717
 00002DD4  8A 86 0000002B R					mov al, straightp[esi]
 00002DDA  8A 9F 0000002B R					mov bl, straightp[edi]
 00002DE0  46							inc esi
 00002DE1  47							inc edi
									.if(al==bl)
 00002DE2  3A C3	   *	    cmp    al, bl
 00002DE4  75 35	   *	    jne    @C0719
 00002DE6  8A 86 0000002B R							mov al, straightp[esi]
 00002DEC  8A 9F 0000002B R							mov bl, straightp[edi]
 00002DF2  46									inc esi
 00002DF3  47									inc edi
											.if(al==bl)
 00002DF4  3A C3	   *	    cmp    al, bl
 00002DF6  75 23	   *	    jne    @C071B
 00002DF8  C7 05 00000082 R									mov PlayerFour,1
	   00000001
 00002E02  8A 86 0000002B R									mov al, straightp[esi]
 00002E08  A2 0000006B R									mov HighFourP, al
 00002E0D  8B 3D 00000004 R									mov edi,var2
 00002E13  8B 35 00000000 R									mov esi,var1
 00002E19  46											inc esi
 00002E1A  47											inc edi
											.endif
									.endif
 00002E1B		   *@C071B:
							.endif
 00002E1B		   *@C0719:
 00002E1B		   *@C0717:
 00002E1B  E2 99			Loop FKp
 00002E1D  C3			ret
 00002E1E			FourKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002E1E			FullHouse PROC

				.if(HighThrees > 0)
 00002E1E  80 3D 0000006C R
	   00		   *	    cmp    HighThreeS, 000h
 00002E25  76 13	   *	    jbe    @C071D
					.if(High2Pairs > 0)
 00002E27  80 3D 0000006E R
	   00		   *	    cmp    High2PairS, 000h
 00002E2E  76 0A	   *	    jbe    @C071F
 00002E30  C7 05 000000C6 R			mov SpockFull, 1
	   00000001
					.endif
				.endif
 00002E3A		   *@C071F:
 00002E3A		   *@C071D:

				.if(HighThreep > 0)
 00002E3A  80 3D 0000006D R
	   00		   *	    cmp    HighThreeP, 000h
 00002E41  76 13	   *	    jbe    @C0721
					.if(High2Pairp > 0)
 00002E43  80 3D 0000006F R
	   00		   *	    cmp    High2PairP, 000h
 00002E4A  76 0A	   *	    jbe    @C0723
 00002E4C  C7 05 00000086 R			mov PlayerFull, 1
	   00000001
					.endif
				.endif
 00002E56		   *@C0723:
 00002E56		   *@C0721:

 00002E56  C3			ret
 00002E57			FullHouse ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002E57			ThreeKind PROC

 00002E57  B9 00000005		mov ecx,5
 00002E5C  BE 00000000		mov esi,0
 00002E61  BF 00000001		mov edi,1

 00002E66				TKS:
 00002E66  89 35 00000000 R			mov var1, esi
 00002E6C  89 3D 00000004 R			mov var2, edi
 00002E72  8A 86 00000024 R			mov al, straights[esi]
 00002E78  8A 9F 00000024 R			mov bl, straights[edi]
							.if(al==bl)
 00002E7E  3A C3	   *	    cmp    al, bl
 00002E80  75 2B	   *	    jne    @C0725
 00002E82  46							inc esi
 00002E83  47							inc edi
 00002E84  8A 86 00000024 R					mov al, straights[esi]
 00002E8A  8A 9F 00000024 R					mov bl, straights[edi]
									.if(al==bl)
 00002E90  3A C3	   *	    cmp    al, bl
 00002E92  75 19	   *	    jne    @C0727
 00002E94  8B 35 00000000 R									mov esi, var1
 00002E9A  8A 86 00000024 R									mov al, straights[esi]
													.if(HighThreeS < al)
 00002EA0  38 05 0000006C R *	    cmp    HighThreeS, al
 00002EA6  73 05	   *	    jae    @C0729
 00002EA8  A2 0000006C R											mov HighThreeS,al
											.endif
									.endif
 00002EAD		   *@C0729:
							.endif
 00002EAD		   *@C0727:
 00002EAD		   *@C0725:
 00002EAD  8B 35 00000000 R			mov esi,var1
 00002EB3  8B 3D 00000004 R			mov edi, var2
 00002EB9  46					inc esi
 00002EBA  47					inc edi
 00002EBB  E2 A9			Loop TKS
					.if(HighThreeS > 0)
 00002EBD  80 3D 0000006C R
	   00		   *	    cmp    HighThreeS, 000h
 00002EC4  76 0A	   *	    jbe    @C072B
 00002EC6  C7 05 000000D2 R			mov SpockThree, 1
	   00000001
					.endif
 00002ED0		   *@C072B:

				;player

 00002ED0  B9 00000005		mov ecx,5
 00002ED5  BE 00000000		mov esi,0
 00002EDA  BF 00000001		mov edi,1

 00002EDF				TKP:
 00002EDF  89 35 00000000 R			mov var1, esi
 00002EE5  89 3D 00000004 R			mov var2, edi
 00002EEB  8A 86 0000002B R			mov al, straightP[esi]
 00002EF1  8A 9F 0000002B R			mov bl, straightP[edi]
							.if(al==bl)
 00002EF7  3A C3	   *	    cmp    al, bl
 00002EF9  75 2B	   *	    jne    @C072D
 00002EFB  46							inc esi
 00002EFC  47							inc edi
 00002EFD  8A 86 0000002B R					mov al, straightP[esi]
 00002F03  8A 9F 0000002B R					mov bl, straightP[edi]
											.if(al==bl)
 00002F09  3A C3	   *	    cmp    al, bl
 00002F0B  75 19	   *	    jne    @C072F
 00002F0D  8B 35 00000000 R									mov esi, var1
 00002F13  8A 86 0000002B R									mov al, straightP[esi]
													.if(HighThreeP < al)
 00002F19  38 05 0000006D R *	    cmp    HighThreeP, al
 00002F1F  73 05	   *	    jae    @C0731
 00002F21  A2 0000006D R											mov HighThreeP,al
											.endif
									.endif
 00002F26		   *@C0731:
							.endif
 00002F26		   *@C072F:
 00002F26		   *@C072D:
 00002F26  8B 35 00000000 R			mov esi,var1
 00002F2C  8B 3D 00000004 R			mov edi, var2
 00002F32  46					inc esi
 00002F33  47					inc edi
 00002F34  E2 A9			Loop TKP
					.if(HighThreeP > 0)
 00002F36  80 3D 0000006D R
	   00		   *	    cmp    HighThreeP, 000h
 00002F3D  76 0A	   *	    jbe    @C0733
 00002F3F  C7 05 00000092 R			mov PlayerThree,1
	   00000001
					.endif
 00002F49		   *@C0733:
 00002F49  C3			ret
 00002F4A			ThreeKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002F4A			TwoPair PROC

 00002F4A  B9 00000006		mov ecx,6
 00002F4F  BE 00000000		mov esi,0
 00002F54  BF 00000001		mov edi,1
 00002F59			TPS:
 00002F59  8A 86 00000024 R		mov al, straights[esi]
 00002F5F  8A 9F 00000024 R		mov bl, straights[edi]
						.if(al==bl)
 00002F65  3A C3	   *	    cmp    al, bl
 00002F67  75 2D	   *	    jne    @C0735
							.if(al > High2Pairs)
 00002F69  3A 05 0000006E R *	    cmp    al, High2PairS
 00002F6F  76 11	   *	    jbe    @C0737
 00002F71  A2 0000006E R					mov High2Pairs, al
 00002F76  C7 05 000000DA R					mov SpockOnePair,1
	   00000001
							.elseif (al > low2pairs)
 00002F80  EB 14	   *	    jmp    @C0739
 00002F82		   *@C0737:
 00002F82  3A 05 00000070 R *	    cmp    al, Low2PairS
 00002F88  76 07	   *	    jbe    @C073A
 00002F8A  A2 00000070 R					mov Low2Pairs, al
							.else	
 00002F8F  EB 05	   *	    jmp    @C073C
 00002F91		   *@C073A:
 00002F91  A2 00000072 R					mov Pairs, al
							.endif
						.endif
 00002F96		   *@C073C:
 00002F96		   *@C0739:
 00002F96		   *@C0735:
 00002F96  46				inc esi
 00002F97  47				inc edi
 00002F98  E2 BF		Loop TPS

					.if(High2pairs>0)
 00002F9A  80 3D 0000006E R
	   00		   *	    cmp    High2PairS, 000h
 00002FA1  76 13	   *	    jbe    @C073D
						.if(Low2pairs>0)
 00002FA3  80 3D 00000070 R
	   00		   *	    cmp    Low2PairS, 000h
 00002FAA  76 0A	   *	    jbe    @C073F
 00002FAC  C7 05 000000D6 R				mov SpockTwoPair, 1
	   00000001
						.endif
					.endif
 00002FB6		   *@C073F:
 00002FB6		   *@C073D:

				;player

 00002FB6  B9 00000006		mov ecx,6
 00002FBB  BE 00000000		mov esi,0
 00002FC0  BF 00000001		mov edi,1
 00002FC5			TPP:
 00002FC5  8A 86 0000002B R		mov al, straightp[esi]
 00002FCB  8A 9F 0000002B R		mov bl, straightp[edi]
						.if(al==bl)
 00002FD1  3A C3	   *	    cmp    al, bl
 00002FD3  75 2D	   *	    jne    @C0741
							.if(al > High2Pairp)
 00002FD5  3A 05 0000006F R *	    cmp    al, High2PairP
 00002FDB  76 11	   *	    jbe    @C0743
 00002FDD  A2 0000006F R					mov High2Pairp, al
 00002FE2  C7 05 0000009A R					mov PlayerOnePair,1
	   00000001
							.elseif (al > low2pairp)
 00002FEC  EB 14	   *	    jmp    @C0745
 00002FEE		   *@C0743:
 00002FEE  3A 05 00000071 R *	    cmp    al, Low2PairP
 00002FF4  76 07	   *	    jbe    @C0746
 00002FF6  A2 00000071 R					mov Low2Pairp, al
							.else	
 00002FFB  EB 05	   *	    jmp    @C0748
 00002FFD		   *@C0746:
 00002FFD  A2 00000073 R					mov Pairp, al
							.endif
						.endif
 00003002		   *@C0748:
 00003002		   *@C0745:
 00003002		   *@C0741:
 00003002  46				inc esi
 00003003  47				inc edi
 00003004  E2 BF		Loop TPP

					.if(High2pairp>0)
 00003006  80 3D 0000006F R
	   00		   *	    cmp    High2PairP, 000h
 0000300D  76 13	   *	    jbe    @C0749
						.if(Low2pairp>0)
 0000300F  80 3D 00000071 R
	   00		   *	    cmp    Low2PairP, 000h
 00003016  76 0A	   *	    jbe    @C074B
 00003018  C7 05 00000096 R				mov PlayerTwoPair, 1
	   00000001
						.endif
					.endif
 00003022		   *@C074B:
 00003022		   *@C0749:

 00003022  C3			ret
 00003023			TwoPair ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003023			HighCard PROC
 00003023  A0 00000024 R	mov al, straights[0]
 00003028  A2 00000078 R	mov HighCards,al

 0000302D  A0 0000002B R	mov al, straightp[0]
 00003032  A2 00000079 R	mov HighCardp, al
 00003037  C3			ret
 00003038			HighCard ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003038			Display PROC
 00003038  C6 05 0000015F R		mov PromptSuit, "X"
	   58
 0000303F  E8 FFFFD286			Call HandSpock
 00003044  E8 FFFFD4CF			Call HandPlayer
 00003049  E8 00000000 E		call clrscr

 0000304E  BA 000000F3 R		mov edx, OFFSET PromptShowSpock
 00003053  E8 00000000 E		Call writestring
 00003058  E8 00000000 E		call crlf
 0000305D  BA 00000134 R		mov edx, OFFSET PromptShowSpockChips
 00003062  E8 00000000 E		call writestring
 00003067  A1 000001AA R		mov eax, ChipsSpock
 0000306C  E8 00000000 E		call writeint
 00003071  E8 00000000 E		call crlf
 00003076  E8 00000000 E		call crlf

 0000307B  BA 00000109 R		mov edx, OFFSET PromptShowTable1
 00003080  E8 00000000 E		call writestring
 00003085  8A 1D 00000008 R		mov bl, cards1.value
					.if(bl < 53 && bl > 0)
 0000308B  80 FB 35	   *	    cmp    bl, 035h
 0000308E  73 0F	   *	    jae    @C074D
 00003090  80 FB 00	   *	    cmp    bl, 000h
 00003093  76 0A	   *	    jbe    @C074D
 00003095  0F B6 C3				movzx eax, bl
 00003098  E8 00000000 E			call writeint
					.else
 0000309D  EB 0A	   *	    jmp    @C0750
 0000309F		   *@C074D:
 0000309F  BA 0000015F R			mov edx, OFFSET PromptSuit
 000030A4  E8 00000000 E			call writestring
					.endif
 000030A9		   *@C0750:
 000030A9  A0 00000009 R		mov al, cards1.suit
						.if(al == 1)
 000030AE  3C 01	   *	    cmp    al, 001h
 000030B0  75 0A	   *	    jne    @C0751
 000030B2  B3 73					mov bl, "s"
 000030B4  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 2)
 000030BA  EB 32	   *	    jmp    @C0753
 000030BC		   *@C0751:
 000030BC  3C 02	   *	    cmp    al, 002h
 000030BE  75 0A	   *	    jne    @C0754
 000030C0  B3 68					mov bl, "h"
 000030C2  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000030C8  EB 24	   *	    jmp    @C0756
 000030CA		   *@C0754:
 000030CA  3C 03	   *	    cmp    al, 003h
 000030CC  75 0A	   *	    jne    @C0757
 000030CE  B3 63					mov bl, "c"
 000030D0  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000030D6  EB 16	   *	    jmp    @C0759
 000030D8		   *@C0757:
 000030D8  3C 03	   *	    cmp    al, 003h
 000030DA  75 0A	   *	    jne    @C075A
 000030DC  B3 64					mov bl, "d"
 000030DE  88 1D 0000015F R				mov PromptSuit, bl
						.else
 000030E4  EB 08	   *	    jmp    @C075C
 000030E6		   *@C075A:
 000030E6  B3 58					mov bl, "X"
 000030E8  88 1D 0000015F R				mov PromptSuit, bl
						.endif
 000030EE		   *@C075C:
 000030EE		   *@C0759:
 000030EE		   *@C0756:
 000030EE		   *@C0753:
 000030EE  BA 0000015F R		mov edx, OFFSET PromptSuit
 000030F3  E8 00000000 E		call writestring

 000030F8  BA 00000118 R		mov edx, OFFSET PromptShowTable2
 000030FD  E8 00000000 E		call writestring
 00003102  8A 1D 0000000A R		mov bl, cards2.value
					.if(bl < 53 && bl > 0)
 00003108  80 FB 35	   *	    cmp    bl, 035h
 0000310B  73 0F	   *	    jae    @C075D
 0000310D  80 FB 00	   *	    cmp    bl, 000h
 00003110  76 0A	   *	    jbe    @C075D
 00003112  0F B6 C3				movzx eax, bl
 00003115  E8 00000000 E			call writeint
					.else
 0000311A  EB 0A	   *	    jmp    @C0760
 0000311C		   *@C075D:
 0000311C  BA 0000015F R			mov edx, OFFSET PromptSuit
 00003121  E8 00000000 E			call writestring
					.endif
 00003126		   *@C0760:
 00003126  A0 0000000B R		mov al, cards2.suit
						.if(al == 1)
 0000312B  3C 01	   *	    cmp    al, 001h
 0000312D  75 0A	   *	    jne    @C0761
 0000312F  B3 73					mov bl, "s"
 00003131  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 2)
 00003137  EB 32	   *	    jmp    @C0763
 00003139		   *@C0761:
 00003139  3C 02	   *	    cmp    al, 002h
 0000313B  75 0A	   *	    jne    @C0764
 0000313D  B3 68					mov bl, "h"
 0000313F  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 00003145  EB 24	   *	    jmp    @C0766
 00003147		   *@C0764:
 00003147  3C 03	   *	    cmp    al, 003h
 00003149  75 0A	   *	    jne    @C0767
 0000314B  B3 63					mov bl, "c"
 0000314D  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 00003153  EB 16	   *	    jmp    @C0769
 00003155		   *@C0767:
 00003155  3C 03	   *	    cmp    al, 003h
 00003157  75 0A	   *	    jne    @C076A
 00003159  B3 64					mov bl, "d"
 0000315B  88 1D 0000015F R				mov PromptSuit, bl
						.else
 00003161  EB 08	   *	    jmp    @C076C
 00003163		   *@C076A:
 00003163  B3 58					mov bl, "X"
 00003165  88 1D 0000015F R				mov PromptSuit, bl
						.endif
 0000316B		   *@C076C:
 0000316B		   *@C0769:
 0000316B		   *@C0766:
 0000316B		   *@C0763:
 0000316B  BA 0000015F R		mov edx, OFFSET PromptSuit
 00003170  E8 00000000 E		call writestring

 00003175  BA 00000118 R		mov edx, OFFSET PromptShowTable2
 0000317A  E8 00000000 E		call writestring
 0000317F  8A 1D 0000000C R		mov bl, cards3.value
					.if(bl < 53 && bl > 0)
 00003185  80 FB 35	   *	    cmp    bl, 035h
 00003188  73 0F	   *	    jae    @C076D
 0000318A  80 FB 00	   *	    cmp    bl, 000h
 0000318D  76 0A	   *	    jbe    @C076D
 0000318F  0F B6 C3				movzx eax, bl
 00003192  E8 00000000 E			call writeint
					.else
 00003197  EB 0A	   *	    jmp    @C0770
 00003199		   *@C076D:
 00003199  BA 0000015F R			mov edx, OFFSET PromptSuit
 0000319E  E8 00000000 E			call writestring
					.endif
 000031A3		   *@C0770:
 000031A3  A0 0000000D R		mov al, cards3.suit
						.if(al == 1)
 000031A8  3C 01	   *	    cmp    al, 001h
 000031AA  75 0A	   *	    jne    @C0771
 000031AC  B3 73					mov bl, "s"
 000031AE  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 2)
 000031B4  EB 32	   *	    jmp    @C0773
 000031B6		   *@C0771:
 000031B6  3C 02	   *	    cmp    al, 002h
 000031B8  75 0A	   *	    jne    @C0774
 000031BA  B3 68					mov bl, "h"
 000031BC  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000031C2  EB 24	   *	    jmp    @C0776
 000031C4		   *@C0774:
 000031C4  3C 03	   *	    cmp    al, 003h
 000031C6  75 0A	   *	    jne    @C0777
 000031C8  B3 63					mov bl, "c"
 000031CA  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000031D0  EB 16	   *	    jmp    @C0779
 000031D2		   *@C0777:
 000031D2  3C 03	   *	    cmp    al, 003h
 000031D4  75 0A	   *	    jne    @C077A
 000031D6  B3 64					mov bl, "d"
 000031D8  88 1D 0000015F R				mov PromptSuit, bl
						.else
 000031DE  EB 08	   *	    jmp    @C077C
 000031E0		   *@C077A:
 000031E0  B3 58					mov bl, "X"
 000031E2  88 1D 0000015F R				mov PromptSuit, bl
						.endif
 000031E8		   *@C077C:
 000031E8		   *@C0779:
 000031E8		   *@C0776:
 000031E8		   *@C0773:
 000031E8  BA 0000015F R		mov edx, OFFSET PromptSuit
 000031ED  E8 00000000 E		call writestring

 000031F2  BA 00000118 R		mov edx, OFFSET PromptShowTable2
 000031F7  E8 00000000 E		call writestring
 000031FC  8A 1D 0000000E R		mov bl, cards4.value
					.if(bl < 53 && bl > 0)
 00003202  80 FB 35	   *	    cmp    bl, 035h
 00003205  73 0F	   *	    jae    @C077D
 00003207  80 FB 00	   *	    cmp    bl, 000h
 0000320A  76 0A	   *	    jbe    @C077D
 0000320C  0F B6 C3				movzx eax, bl
 0000320F  E8 00000000 E			call writeint
					.else
 00003214  EB 0A	   *	    jmp    @C0780
 00003216		   *@C077D:
 00003216  BA 0000015F R			mov edx, OFFSET PromptSuit
 0000321B  E8 00000000 E			call writestring
					.endif
 00003220		   *@C0780:
 00003220  A0 0000000F R		mov al, cards4.suit
						.if(al == 1)
 00003225  3C 01	   *	    cmp    al, 001h
 00003227  75 0A	   *	    jne    @C0781
 00003229  B3 73					mov bl, "s"
 0000322B  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 2)
 00003231  EB 32	   *	    jmp    @C0783
 00003233		   *@C0781:
 00003233  3C 02	   *	    cmp    al, 002h
 00003235  75 0A	   *	    jne    @C0784
 00003237  B3 68					mov bl, "h"
 00003239  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 0000323F  EB 24	   *	    jmp    @C0786
 00003241		   *@C0784:
 00003241  3C 03	   *	    cmp    al, 003h
 00003243  75 0A	   *	    jne    @C0787
 00003245  B3 63					mov bl, "c"
 00003247  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 0000324D  EB 16	   *	    jmp    @C0789
 0000324F		   *@C0787:
 0000324F  3C 03	   *	    cmp    al, 003h
 00003251  75 0A	   *	    jne    @C078A
 00003253  B3 64					mov bl, "d"
 00003255  88 1D 0000015F R				mov PromptSuit, bl
						.else
 0000325B  EB 08	   *	    jmp    @C078C
 0000325D		   *@C078A:
 0000325D  B3 58					mov bl, "X"
 0000325F  88 1D 0000015F R				mov PromptSuit, bl
						.endif
 00003265		   *@C078C:
 00003265		   *@C0789:
 00003265		   *@C0786:
 00003265		   *@C0783:
 00003265  BA 0000015F R		mov edx, OFFSET PromptSuit
 0000326A  E8 00000000 E		call writestring

 0000326F  BA 00000118 R		mov edx, OFFSET PromptShowTable2
 00003274  E8 00000000 E		call writestring
 00003279  8A 1D 00000010 R		mov bl, cards5.value
					.if(bl < 53 && bl > 0)
 0000327F  80 FB 35	   *	    cmp    bl, 035h
 00003282  73 0F	   *	    jae    @C078D
 00003284  80 FB 00	   *	    cmp    bl, 000h
 00003287  76 0A	   *	    jbe    @C078D
 00003289  0F B6 C3				movzx eax, bl
 0000328C  E8 00000000 E			call writeint
					.else
 00003291  EB 0A	   *	    jmp    @C0790
 00003293		   *@C078D:
 00003293  BA 0000015F R			mov edx, OFFSET PromptSuit
 00003298  E8 00000000 E			call writestring
					.endif
 0000329D		   *@C0790:
 0000329D  A0 00000011 R		mov al, cards5.suit
						.if(al == 1)
 000032A2  3C 01	   *	    cmp    al, 001h
 000032A4  75 0A	   *	    jne    @C0791
 000032A6  B3 73					mov bl, "s"
 000032A8  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 2)
 000032AE  EB 32	   *	    jmp    @C0793
 000032B0		   *@C0791:
 000032B0  3C 02	   *	    cmp    al, 002h
 000032B2  75 0A	   *	    jne    @C0794
 000032B4  B3 68					mov bl, "h"
 000032B6  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000032BC  EB 24	   *	    jmp    @C0796
 000032BE		   *@C0794:
 000032BE  3C 03	   *	    cmp    al, 003h
 000032C0  75 0A	   *	    jne    @C0797
 000032C2  B3 63					mov bl, "c"
 000032C4  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000032CA  EB 16	   *	    jmp    @C0799
 000032CC		   *@C0797:
 000032CC  3C 03	   *	    cmp    al, 003h
 000032CE  75 0A	   *	    jne    @C079A
 000032D0  B3 64					mov bl, "d"
 000032D2  88 1D 0000015F R				mov PromptSuit, bl
						.else
 000032D8  EB 08	   *	    jmp    @C079C
 000032DA		   *@C079A:
 000032DA  B3 58					mov bl, "X"
 000032DC  88 1D 0000015F R				mov PromptSuit, bl
						.endif
 000032E2		   *@C079C:
 000032E2		   *@C0799:
 000032E2		   *@C0796:
 000032E2		   *@C0793:
 000032E2  BA 0000015F R		mov edx, OFFSET PromptSuit
 000032E7  E8 00000000 E		call writestring
 000032EC  BA 0000011C R		mov edx, OFFSET PromptShowTable3
 000032F1  E8 00000000 E		call writestring
 000032F6  E8 00000000 E		call crlf
 000032FB  BA 00000142 R		mov edx, OFFSET PromptShowTableChips
 00003300  E8 00000000 E		call writestring
 00003305  A1 000001AE R		mov eax, ChipsTable
 0000330A  E8 00000000 E		call writeint
 0000330F  E8 00000000 E		call crlf
 00003314  E8 00000000 E		call crlf

 00003319  BA 0000011E R		mov edx, OFFSET PromptShowPlayer1
 0000331E  E8 00000000 E		call writestring
 00003323  8A 1D 00000020 R		mov bl, cardp6.value
					.if(bl < 53 && bl > 0)
 00003329  80 FB 35	   *	    cmp    bl, 035h
 0000332C  73 0F	   *	    jae    @C079D
 0000332E  80 FB 00	   *	    cmp    bl, 000h
 00003331  76 0A	   *	    jbe    @C079D
 00003333  0F B6 C3				movzx eax, bl
 00003336  E8 00000000 E			call writeint
					.else
 0000333B  EB 0A	   *	    jmp    @C07A0
 0000333D		   *@C079D:
 0000333D  BA 0000015F R			mov edx, OFFSET PromptSuit
 00003342  E8 00000000 E			call writestring
					.endif
 00003347		   *@C07A0:
 00003347  A0 00000021 R		mov al, cardp6.suit
						.if(al == 1)
 0000334C  3C 01	   *	    cmp    al, 001h
 0000334E  75 0A	   *	    jne    @C07A1
 00003350  B3 73					mov bl, "s"
 00003352  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 2)
 00003358  EB 32	   *	    jmp    @C07A3
 0000335A		   *@C07A1:
 0000335A  3C 02	   *	    cmp    al, 002h
 0000335C  75 0A	   *	    jne    @C07A4
 0000335E  B3 68					mov bl, "h"
 00003360  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 00003366  EB 24	   *	    jmp    @C07A6
 00003368		   *@C07A4:
 00003368  3C 03	   *	    cmp    al, 003h
 0000336A  75 0A	   *	    jne    @C07A7
 0000336C  B3 63					mov bl, "c"
 0000336E  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 00003374  EB 16	   *	    jmp    @C07A9
 00003376		   *@C07A7:
 00003376  3C 03	   *	    cmp    al, 003h
 00003378  75 0A	   *	    jne    @C07AA
 0000337A  B3 64					mov bl, "d"
 0000337C  88 1D 0000015F R				mov PromptSuit, bl
						.else
 00003382  EB 08	   *	    jmp    @C07AC
 00003384		   *@C07AA:
 00003384  B3 58					mov bl, "X"
 00003386  88 1D 0000015F R				mov PromptSuit, bl
						.endif
 0000338C		   *@C07AC:
 0000338C		   *@C07A9:
 0000338C		   *@C07A6:
 0000338C		   *@C07A3:
 0000338C  BA 0000015F R		mov edx, OFFSET PromptSuit
 00003391  E8 00000000 E		call writestring

 00003396  BA 0000012E R		mov edx, OFFSET PromptShowPlayer2
 0000339B  E8 00000000 E		call writestring
 000033A0  8A 1D 00000022 R		mov bl, cardp7.value
					.if(bl < 53 && bl > 0)
 000033A6  80 FB 35	   *	    cmp    bl, 035h
 000033A9  73 0F	   *	    jae    @C07AD
 000033AB  80 FB 00	   *	    cmp    bl, 000h
 000033AE  76 0A	   *	    jbe    @C07AD
 000033B0  0F B6 C3				movzx eax, bl
 000033B3  E8 00000000 E			call writeint
					.else
 000033B8  EB 0A	   *	    jmp    @C07B0
 000033BA		   *@C07AD:
 000033BA  BA 0000015F R			mov edx, OFFSET PromptSuit
 000033BF  E8 00000000 E			call writestring
					.endif
 000033C4		   *@C07B0:
 000033C4  A0 00000023 R		mov al, cardp7.suit
						.if(al == 1)
 000033C9  3C 01	   *	    cmp    al, 001h
 000033CB  75 0A	   *	    jne    @C07B1
 000033CD  B3 73					mov bl, "s"
 000033CF  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 2)
 000033D5  EB 32	   *	    jmp    @C07B3
 000033D7		   *@C07B1:
 000033D7  3C 02	   *	    cmp    al, 002h
 000033D9  75 0A	   *	    jne    @C07B4
 000033DB  B3 68					mov bl, "h"
 000033DD  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000033E3  EB 24	   *	    jmp    @C07B6
 000033E5		   *@C07B4:
 000033E5  3C 03	   *	    cmp    al, 003h
 000033E7  75 0A	   *	    jne    @C07B7
 000033E9  B3 63					mov bl, "c"
 000033EB  88 1D 0000015F R				mov PromptSuit, bl
						.elseif(al == 3)
 000033F1  EB 16	   *	    jmp    @C07B9
 000033F3		   *@C07B7:
 000033F3  3C 03	   *	    cmp    al, 003h
 000033F5  75 0A	   *	    jne    @C07BA
 000033F7  B3 64					mov bl, "d"
 000033F9  88 1D 0000015F R				mov PromptSuit, bl
						.else
 000033FF  EB 08	   *	    jmp    @C07BC
 00003401		   *@C07BA:
 00003401  B3 58					mov bl, "X"
 00003403  88 1D 0000015F R				mov PromptSuit, bl
						.endif
 00003409		   *@C07BC:
 00003409		   *@C07B9:
 00003409		   *@C07B6:
 00003409		   *@C07B3:
 00003409  BA 0000015F R		mov edx, OFFSET PromptSuit
 0000340E  E8 00000000 E		call writestring

 00003413  BA 00000132 R		mov edx, OFFSET PromptShowPlayer3
 00003418  E8 00000000 E		call writestring
 0000341D  E8 00000000 E		call crlf
 00003422  BA 00000150 R		mov edx, OFFSET PromptShowPlayerChips
 00003427  E8 00000000 E		call writestring
 0000342C  A1 000001A6 R		mov eax, ChipsPlayer
 00003431  E8 00000000 E		call writeint
 00003436  E8 00000000 E		call crlf
 0000343B  E8 00000000 E		call crlf




 00003440  C3			ret
 00003441			Display ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				END main
				t1 byte, dup 2 (0)
				t1 byte, dup 2 (0)
				t1 byte, dup 2 (0)
				t1 byte, dup 2 (0)
				t1 byte, dup 2 (0)
				p1 byte, dup 2(0)
				p2 byte, dup 2 (0)

				PromptCardUnknown byte "X",0
				PromptShowSpock byte		"Spock Cards: |X|  |X|",0
				PromptShowSpockChips byte	"Spock Chips: "
				PromptShowTable1 byte		"Table Cards: |",0
				PromptShowTable2 byte       "| |",0
				PromptShowTable3 byte       "|",0
				PromptShowTableChips byte	"Table Chips: "

				PromptShowPlayer1 byte		"Player Cards: |",0
				PromptShowPlayer2 byte		"| |",0
				PromptShowPlayer3 byte		"|",0
				PromptShowPlayerChips byte	"Player Chips: "
Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/10/14 15:31:30
MASM Templat						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Card . . . . . . . . . . . . . .	 00000002
  value  . . . . . . . . . . . .	 00000000	 Byte
  Suit . . . . . . . . . . . . .	 00000001	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003A6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00003441 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Ante . . . . . . . . . . . . . .	P Near	 00000199 _TEXT	Length= 000000A4 Public STDCALL
Bid  . . . . . . . . . . . . . .	P Near	 00000768 _TEXT	Length= 00000667 Public STDCALL
  BadInput1  . . . . . . . . . .	L Near	 000009AC _TEXT	
  BadInput . . . . . . . . . . .	L Near	 00000AC5 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CompareHand  . . . . . . . . . .	P Near	 00001157 _TEXT	Length= 000000FC Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DealFlop . . . . . . . . . . . .	P Near	 0000011E _TEXT	Length= 00000031 Public STDCALL
  T1 . . . . . . . . . . . . . .	L Near	 0000012E _TEXT	
DealHand . . . . . . . . . . . .	P Near	 000000E5 _TEXT	Length= 00000039 Public STDCALL
  H1 . . . . . . . . . . . . . .	L Near	 000000F4 _TEXT	
DealRiver  . . . . . . . . . . .	P Near	 0000017D _TEXT	Length= 0000001C Public STDCALL
DealTurn . . . . . . . . . . . .	P Near	 0000014F _TEXT	Length= 0000002E Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Display  . . . . . . . . . . . .	P Near	 00003038 _TEXT	Length= 00000409 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FourKind . . . . . . . . . . . .	P Near	 00002D31 _TEXT	Length= 000000ED Public STDCALL
  FKs  . . . . . . . . . . . . .	L Near	 00002D40 _TEXT	
  FKp  . . . . . . . . . . . . .	L Near	 00002DB6 _TEXT	
FullHouse  . . . . . . . . . . .	P Near	 00002E1E _TEXT	Length= 00000039 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandPlayer . . . . . . . . . . .	P Near	 00000518 _TEXT	Length= 00000250 Public STDCALL
  FPH1 . . . . . . . . . . . . .	L Near	 00000522 _TEXT	
  FPH2 . . . . . . . . . . . . .	L Near	 0000053D _TEXT	
HandSpock  . . . . . . . . . . .	P Near	 000002CA _TEXT	Length= 0000024E Public STDCALL
  FSH1 . . . . . . . . . . . . .	L Near	 000002D4 _TEXT	
  FSH2 . . . . . . . . . . . . .	L Near	 000002EF _TEXT	
HandValue  . . . . . . . . . . .	P Near	 00000DCF _TEXT	Length= 00000388 Public STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HighCard . . . . . . . . . . . .	P Near	 00003023 _TEXT	Length= 00000015 Public STDCALL
IsAFlush . . . . . . . . . . . .	P Near	 00001253 _TEXT	Length= 00000407 Public STDCALL
IsAStraight  . . . . . . . . . .	P Near	 0000165A _TEXT	Length= 000016D7 Public STDCALL
  SS1  . . . . . . . . . . . . .	L Near	 00001E3B _TEXT	
  SS2  . . . . . . . . . . . . .	L Near	 00001E41 _TEXT	
  PS1  . . . . . . . . . . . . .	L Near	 000029A0 _TEXT	
  PS2  . . . . . . . . . . . . .	L Near	 000029A6 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Lose . . . . . . . . . . . . . .	P Near	 0000026A _TEXT	Length= 0000002D Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayAgain  . . . . . . . . . . .	P Near	 00000297 _TEXT	Length= 00000033 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Shuffel  . . . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 0000007D Public STDCALL
  EmptyHands . . . . . . . . . .	L Near	 00000074 _TEXT	
  EmptyTable . . . . . . . . . .	L Near	 00000091 _TEXT	
  L0 . . . . . . . . . . . . . .	L Near	 000000AA _TEXT	
  S1 . . . . . . . . . . . . . .	L Near	 000000BE _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ThreeKind  . . . . . . . . . . .	P Near	 00002E57 _TEXT	Length= 000000F3 Public STDCALL
  TKS  . . . . . . . . . . . . .	L Near	 00002E66 _TEXT	
  TKP  . . . . . . . . . . . . .	L Near	 00002EDF _TEXT	
TwoPair  . . . . . . . . . . . .	P Near	 00002F4A _TEXT	Length= 000000D9 Public STDCALL
  TPS  . . . . . . . . . . . . .	L Near	 00002F59 _TEXT	
  TPP  . . . . . . . . . . . . .	L Near	 00002FC5 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Win  . . . . . . . . . . . . . .	P Near	 0000023D _TEXT	Length= 0000002D Public STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000068 Public STDCALL
  G1 . . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BigBlind . . . . . . . . . . . .	DWord	 000001B2 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ChipsCall  . . . . . . . . . . .	DWord	 000000A2 _DATA	
ChipsPlayer  . . . . . . . . . .	DWord	 000001A6 _DATA	
ChipsRaise . . . . . . . . . . .	DWord	 000000A6 _DATA	
ChipsSpock . . . . . . . . . . .	DWord	 000001AA _DATA	
ChipsTable . . . . . . . . . . .	DWord	 000001AE _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DeckMark . . . . . . . . . . . .	DWord	 0000019E _DATA	
Deck . . . . . . . . . . . . . .	Byte	 00000161 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FoldP  . . . . . . . . . . . . .	DWord	 000000B6 _DATA	
FoldS  . . . . . . . . . . . . .	DWord	 000000B2 _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FullHandPlayer . . . . . . . . .	Byte	 000001BD _DATA	
FullHandSpock  . . . . . . . . .	Byte	 000001B6 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
High2PairP . . . . . . . . . . .	Byte	 0000006F _DATA	
High2PairS . . . . . . . . . . .	Byte	 0000006E _DATA	
HighCardp  . . . . . . . . . . .	Byte	 00000079 _DATA	
HighCards  . . . . . . . . . . .	Byte	 00000078 _DATA	
HighFourP  . . . . . . . . . . .	Byte	 0000006B _DATA	
HighFourS  . . . . . . . . . . .	Byte	 0000006A _DATA	
HighPairP  . . . . . . . . . . .	Byte	 00000075 _DATA	
HighPairS  . . . . . . . . . . .	Byte	 00000074 _DATA	
HighStp  . . . . . . . . . . . .	Byte	 00000077 _DATA	
HighSts  . . . . . . . . . . . .	Byte	 00000076 _DATA	
HighThreeP . . . . . . . . . . .	Byte	 0000006D _DATA	
HighThreeS . . . . . . . . . . .	Byte	 0000006C _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Low2PairP  . . . . . . . . . . .	Byte	 00000071 _DATA	
Low2PairS  . . . . . . . . . . .	Byte	 00000070 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PairP  . . . . . . . . . . . . .	Byte	 00000073 _DATA	
PairS  . . . . . . . . . . . . .	Byte	 00000072 _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PlayerBet  . . . . . . . . . . .	DWord	 000000AE _DATA	
PlayerFlush  . . . . . . . . . .	DWord	 0000008A _DATA	
PlayerFour . . . . . . . . . . .	DWord	 00000082 _DATA	
PlayerFull . . . . . . . . . . .	DWord	 00000086 _DATA	
PlayerHandValue  . . . . . . . .	DWord	 0000009E _DATA	
PlayerHand . . . . . . . . . . .	Byte	 00000195 _DATA	
PlayerOnePair  . . . . . . . . .	DWord	 0000009A _DATA	
PlayerRoyal  . . . . . . . . . .	DWord	 0000007A _DATA	
PlayerStraightFlush  . . . . . .	DWord	 0000007E _DATA	
PlayerStraight . . . . . . . . .	DWord	 0000008E _DATA	
PlayerThree  . . . . . . . . . .	DWord	 00000092 _DATA	
PlayerTwoPair  . . . . . . . . .	DWord	 00000096 _DATA	
PromptBadInput . . . . . . . . .	Byte	 0000023D _DATA	
PromptCardUnknown  . . . . . . .	Byte	 000000F0 _DATA	
PromptChipsPlayer  . . . . . . .	Byte	 00000239 _DATA	
PromptChipsSpock . . . . . . . .	Byte	 0000023B _DATA	
PromptLine . . . . . . . . . . .	Byte	 00000362 _DATA	
PromptLoseImage  . . . . . . . .	Byte	 00000237 _DATA	
PromptPlayAgain  . . . . . . . .	Byte	 000001FF _DATA	
PromptPlayerBet  . . . . . . . .	Byte	 000002B1 _DATA	
PromptPlayerCall . . . . . . . .	Byte	 00000332 _DATA	
PromptPlayerFold . . . . . . . .	Byte	 00000337 _DATA	
PromptPlayerNotEnoughChips . . .	Byte	 0000033C _DATA	
PromptPlayerRaise  . . . . . . .	Byte	 0000031F _DATA	
PromptPlayerSecond . . . . . . .	Byte	 000002DF _DATA	
PromptPlayerTurn . . . . . . . .	Byte	 0000030F _DATA	
PromptShowPlayer1  . . . . . . .	Byte	 0000011E _DATA	
PromptShowPlayer2  . . . . . . .	Byte	 0000012E _DATA	
PromptShowPlayer3  . . . . . . .	Byte	 00000132 _DATA	
PromptShowPlayerChips  . . . . .	Byte	 00000150 _DATA	
PromptShowSpockChips . . . . . .	Byte	 00000134 _DATA	
PromptShowSpock  . . . . . . . .	Byte	 000000F3 _DATA	
PromptShowTable1 . . . . . . . .	Byte	 00000109 _DATA	
PromptShowTable2 . . . . . . . .	Byte	 00000118 _DATA	
PromptShowTable3 . . . . . . . .	Byte	 0000011C _DATA	
PromptShowTableChips . . . . . .	Byte	 00000142 _DATA	
PromptSpockBet . . . . . . . . .	Byte	 0000027D _DATA	
PromptSpockCall  . . . . . . . .	Byte	 00000299 _DATA	
PromptSpockFold  . . . . . . . .	Byte	 000002A5 _DATA	
PromptSpockRaise . . . . . . . .	Byte	 0000028A _DATA	
PromptSpockTurn  . . . . . . . .	Byte	 0000026A _DATA	
PromptSuit . . . . . . . . . . .	Byte	 0000015F _DATA	
PromptWinImage . . . . . . . . .	Byte	 00000235 _DATA	
PromptYouLose  . . . . . . . . .	Byte	 000001E0 _DATA	
PromptYouWin . . . . . . . . . .	Byte	 000001C4 _DATA	
RFp  . . . . . . . . . . . . . .	DWord	 00000062 _DATA	
RFs  . . . . . . . . . . . . . .	DWord	 00000066 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SpockBet . . . . . . . . . . . .	DWord	 000000AA _DATA	
SpockFlush . . . . . . . . . . .	DWord	 000000CA _DATA	
SpockFour  . . . . . . . . . . .	DWord	 000000C2 _DATA	
SpockFull  . . . . . . . . . . .	DWord	 000000C6 _DATA	
SpockHandValue . . . . . . . . .	DWord	 000000DE _DATA	
SpockHand  . . . . . . . . . . .	Byte	 00000197 _DATA	
SpockOnePair . . . . . . . . . .	DWord	 000000DA _DATA	
SpockRoyal . . . . . . . . . . .	DWord	 000000BA _DATA	
SpockStraightFlush . . . . . . .	DWord	 000000BE _DATA	
SpockStraight  . . . . . . . . .	DWord	 000000CE _DATA	
SpockThree . . . . . . . . . . .	DWord	 000000D2 _DATA	
SpockTwoPair . . . . . . . . . .	DWord	 000000D6 _DATA	
StraightP  . . . . . . . . . . .	Byte	 0000002B _DATA	
StraightS  . . . . . . . . . . .	Byte	 00000024 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TableMark  . . . . . . . . . . .	DWord	 000001A2 _DATA	
Table  . . . . . . . . . . . . .	Byte	 00000199 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardp1 . . . . . . . . . . . . .	Card	 00000016 _DATA	
cardp2 . . . . . . . . . . . . .	Card	 00000018 _DATA	
cardp3 . . . . . . . . . . . . .	Card	 0000001A _DATA	
cardp4 . . . . . . . . . . . . .	Card	 0000001C _DATA	
cardp5 . . . . . . . . . . . . .	Card	 0000001E _DATA	
cardp6 . . . . . . . . . . . . .	Card	 00000020 _DATA	
cardp7 . . . . . . . . . . . . .	Card	 00000022 _DATA	
cards1 . . . . . . . . . . . . .	Card	 00000008 _DATA	
cards2 . . . . . . . . . . . . .	Card	 0000000A _DATA	
cards3 . . . . . . . . . . . . .	Card	 0000000C _DATA	
cards4 . . . . . . . . . . . . .	Card	 0000000E _DATA	
cards5 . . . . . . . . . . . . .	Card	 00000010 _DATA	
cards6 . . . . . . . . . . . . .	Card	 00000012 _DATA	
cards7 . . . . . . . . . . . . .	Card	 00000014 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isClubP  . . . . . . . . . . . .	DWord	 0000003A _DATA	
isClubS  . . . . . . . . . . . .	DWord	 0000004E _DATA	
isDimondP  . . . . . . . . . . .	DWord	 0000003E _DATA	
isDimondS  . . . . . . . . . . .	DWord	 00000052 _DATA	
isFlushP . . . . . . . . . . . .	DWord	 00000042 _DATA	
isFlushS . . . . . . . . . . . .	DWord	 00000056 _DATA	
isHeartP . . . . . . . . . . . .	DWord	 00000036 _DATA	
isHeartS . . . . . . . . . . . .	DWord	 0000004A _DATA	
isSpadeP . . . . . . . . . . . .	DWord	 00000032 _DATA	
isSpadeS . . . . . . . . . . . .	DWord	 00000046 _DATA	
isStraightP  . . . . . . . . . .	DWord	 0000005E _DATA	
isStraightS  . . . . . . . . . .	DWord	 0000005A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
plr1 . . . . . . . . . . . . . .	Byte	 000000EC _DATA	
plr2 . . . . . . . . . . . . . .	Byte	 000000EE _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tbl1 . . . . . . . . . . . . . .	Byte	 000000E2 _DATA	
tbl2 . . . . . . . . . . . . . .	Byte	 000000E4 _DATA	
tbl3 . . . . . . . . . . . . . .	Byte	 000000E6 _DATA	
tbl4 . . . . . . . . . . . . . .	Byte	 000000E8 _DATA	
tbl5 . . . . . . . . . . . . . .	Byte	 000000EA _DATA	
var1 . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
var2 . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
