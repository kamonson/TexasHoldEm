Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/04/14 16:24:01
MASM Templat						     Page 1 - 1


				TITLE MASM Template

				; Zeus cs278 EX
				;Write a program that 

				INCLUDE Irvine32.inc 
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000  00000034 [		Deck byte 52 dup (?)
	    00
	   ]

																					;array of Suits
 00000034  00000002 [		PlayerHand byte 2 dup (?)											;2 Cards for the player
	    00
	   ]
 00000036  00000002 [		SpockHand byte 2 dup (?)											;2 Cards for the AI
	    00
	   ]
 00000038  00000005 [		Table byte 5 dup (?)												;3 Flop cards, 1 Turn card, 1 River card
	    00
	   ]

 0000003D 00000000		DeckMark DWORD ?													;Bookmark for place in Deck
 00000041 00000000		TableMark DWORD ?													;Bookmark for place in Table

 00000045 00000000		ChipsPlayer DWORD 0
 00000049 00000000		ChipsSpock  DWORD 0
 0000004D 00000000		ChipsTable DWORD 0
 00000051 00000001		BigBlind DWORD 1													;Variable for who is responsible for Big blind, other is responsible for little blind 1/2 big blind bet
 00000055  00000007 [		FullHandSpock BYTE 7 dup (0)
	    00
	   ]
 0000005C  00000007 [		FullHandPlayer BYTE 7 dup (0)
	    00
	   ]

 00000063 59 6F 75 20 57	PromptYouWin byte "You Win, your earning are: ", 0
	   69 6E 2C 20 79
	   6F 75 72 20 65
	   61 72 6E 69 6E
	   67 20 61 72 65
	   3A 20 00
 0000007F 59 6F 75 20 4C	PromptYouLose byte "You Lose, you walk away with: ", 0
	   6F 73 65 2C 20
	   79 6F 75 20 77
	   61 6C 6B 20 61
	   77 61 79 20 77
	   69 74 68 3A 20
	   00
 0000009E 57 6F 75 6C 64	PromptPlayAgain byte "Would you like to play again 1 for yes or 0 for no:  "
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 20 31
	   20 66 6F 72 20
	   79 65 73 20 6F
	   72 20 30 20 66
	   6F 72 20 6E 6F
	   3A 20 20
 000000D3 3F			PromptWinImage byte "?"
 000000D4 3F			PromptLoseImage byte "?"
 000000D5 3F			PromptChipsPlayer byte "?"
 000000D6 3F			PromptChipsSpock byte "?"
 000000D7 54 68 61 74 20	PromptBadInput byte "That is not a valid choice, please try again"
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   63 68 6F 69 63
	   65 2C 20 70 6C
	   65 61 73 65 20
	   74 72 79 20 61
	   67 61 69 6E


 00000000			.code
 00000000			main PROC
 00000000  C7 05 00000045 R		mov ChipsPlayer, 100
	   00000064
 0000000A  C7 05 00000049 R		mov ChipsSpock, 100
	   00000064
 00000014				G1:
 00000014  E8 00000147				Call Ante
 00000019  E8 00000045				Call Shuffel
 0000001E  E8 00000089				Call DealHand
 00000023  E8 0000023A				Call HandSpock
 00000028  E8 000002AB				Call Bid1
 0000002D  E8 000000B3				Call DealFlop
 00000032  E8 0000022B				Call HandSpock
 00000037  E8 0000029D				Call Bid2
 0000003C  E8 000000D5				Call DealTurn
 00000041  E8 0000021C				Call HandSpock
 00000046  E8 0000028F				Call Bid3
 0000004B  E8 000000F4				Call DealRiver
 00000050  E8 00000247				Call HandPlayer
 00000055  E8 00000281				Call CompareHand
 0000005A  E2 B8			Loop G1

				exit
 0000005C  6A 00	   *	    push   +000000000h
 0000005E  E8 00000000 E   *	    call   ExitProcess
 00000063			main ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000063			Shuffel PROC																																							;
				;	Recieves: nothing																																					;
				;	Returns: Full/shuffled Deck																																			;
				;Adds 52 cards to the Deck 13 from each suit and shuffles them		Values 1-13 =Spades 14-26 Hearts 27-39 Clubs 40-52													;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000063  B9 00000034		mov ecx, 52
 00000068  B2 00		mov dl, 0
 0000006A  B0 01		mov al, 1
 0000006C  BE 00000000		mov esi, 0
 00000071				L0:
 00000071  88 86 00000000 R			mov Deck[esi], al
 00000077  FE C0				inc al
 00000079  83 C6 01				add esi,TYPE Deck
 0000007C  FE C2				inc dl
 0000007E  E2 F1			Loop L0

 00000080  B9 00000068		mov ecx, 104

 00000085				S1:
 00000085  B8 00000035				mov eax,53
 0000008A  E8 00000000 E			call randomrange
 0000008F  8B F0				mov esi, eax
 00000091  8A 9E 00000000 R			mov bl,Deck[esi]
 00000097  A0 00000000 R			mov al, Deck[0]
 0000009C  86 C3				xchg al,bl
 0000009E  88 9E 00000000 R			mov Deck[esi], bl
 000000A4  A2 00000000 R			mov Deck[0], al
 000000A9  E2 DA			Loop S1

 000000AB  C3			ret
 000000AC			Shuffel ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000AC			DealHand PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to PlayerHand/SpockHand																														;
				;Procedure deals PlayerHand/SpockHand																																	;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000AC  B9 00000002		mov ecx, 2
 000000B1  BE 00000000		mov esi, 0
 000000B6  BB 00000000		mov ebx, 0

 000000BB				H1:
 000000BB  8A 83 00000000 R			mov al, Deck[ebx]
 000000C1  88 86 00000034 R			mov PlayerHand[esi], al
 000000C7  83 C3 01				add ebx, TYPE Deck
 000000CA  8A 83 00000000 R			mov al, Deck [ebx]
 000000D0  88 86 00000036 R			mov SpockHand[esi], al
 000000D6  83 C6 01				add esi, TYPE PlayerHand
 000000D9  83 C3 01				add ebx, TYPE Deck
 000000DC  E2 DD			Loop H1
 000000DE  89 1D 0000003D R	mov DeckMark,EBX
 000000E4  C3			ret
 000000E5			DealHand ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000E5			DealFlop PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Dek to Flop																																		;
				;Procedure deals Flop																																					;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 000000E5  B9 00000003		mov ecx, 3
 000000EA  8B 1D 0000003D R	mov ebx, DeckMark
 000000F0  BF 00000000		mov edi,0

 000000F5				T1:
 000000F5  8A 83 00000000 R			mov al, Deck[ebx]
 000000FB  88 87 00000038 R			mov Table[edi], al
 00000101  83 C3 01				add ebx, TYPE Deck
 00000104  83 C7 01				add edi, TYPE Table
 00000107  E2 EC			Loop T1
 00000109  89 3D 00000041 R	mov TableMark,edi
 0000010F  89 1D 0000003D R	mov DeckMark,ebx
 00000115  C3			ret
 00000116			DealFlop ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000116			DealTurn PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to Turn																																		;
				;Procedure skips a card for burn and deals Turn																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00000116  8B 1D 0000003D R	mov ebx, DeckMark
 0000011C  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 0000011F  8B 3D 00000041 R	mov edi, TableMark
 00000125  8A 83 00000000 R	mov al, Deck[ebx]
 0000012B  88 87 00000038 R	mov Table[edi],al
 00000131  83 C3 01		add ebx, TYPE Deck
 00000134  89 1D 0000003D R	mov DeckMark, EBX
 0000013A  83 C7 01		add edi, TYPE Table
 0000013D  89 3D 00000041 R	mov TableMark, edi

 00000143  C3			ret
 00000144			DealTurn ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000144			DealRiver PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to River																																	;
				;Procedure skips a card from Deck for burn and deals River																												;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00000144  8B 1D 0000003D R	mov ebx, DeckMark
 0000014A  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 0000014D  8B 3D 00000041 R	mov edi, TableMark
 00000153  8A 83 00000000 R	mov al, Deck[ebx]
 00000159  88 87 00000038 R	mov Table[edi],al

 0000015F  C3			ret
 00000160			DealRiver ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000160			Ante PROC																																								;
				;	Recieves: BigBlind, ChipsPlayer, ChipsSpock, ChipsTable,																											;
				;	Returns: ChipsPlayer(modified) ChipsSpock(modified), ChipTable(modified)																							;
				;	Big and Little blinds paid in for oppening bet																														;
				;Procedure Checks to ensure that player and spock have the chips to make bet if not game end call win/lose, change the value of chips									;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				.if(BigBlind > 0)
 00000160  83 3D 00000051 R
	   00		   *	    cmp    BigBlind, 000h
 00000167  76 28	   *	    jbe    @C0001
 00000169  C7 05 00000051 R		mov BigBlind, 0
	   00000000
					.if(ChipsPlayer < 25)
 00000173  83 3D 00000045 R
	   19		   *	    cmp    ChipsPlayer, 019h
 0000017A  73 05	   *	    jae    @C0003
 0000017C  E8 00000094					call Lose
						.endif
					
						.if(ChipsSpock < 50)
 00000181		   *@C0003:
 00000181  83 3D 00000049 R
	   32		   *	    cmp    ChipsSpock, 032h
 00000188  73 23	   *	    jae    @C0005
 0000018A  E8 0000006C					call Win	
						.endif

						.else
 0000018F  EB 1C	   *	    jmp    @C0007
 00000191		   *@C0001:
 00000191  83 2D 00000045 R				sub ChipsPlayer, 25
	   19
 00000198  83 05 0000004D R				add ChipsTable, 25
	   19
 0000019F  83 2D 00000049 R				sub ChipsSpock, 50
	   32
 000001A6  83 05 0000004D R				add ChipsTable, 50
	   32
					.endif
 000001AD		   *@C0007:
 000001AD		   *@C0005:

					.if(BigBlind<1)
 000001AD  83 3D 00000051 R
	   01		   *	    cmp    BigBlind, 001h
 000001B4  73 28	   *	    jae    @C0008
 000001B6  C7 05 00000051 R			mov BigBlind, 1
	   00000001
						.if(ChipsPlayer < 50)
 000001C0  83 3D 00000045 R
	   32		   *	    cmp    ChipsPlayer, 032h
 000001C7  73 05	   *	    jae    @C000A
 000001C9  E8 00000047					call Lose
						.endif
					
						.if(ChipsSpock < 25)
 000001CE		   *@C000A:
 000001CE  83 3D 00000049 R
	   19		   *	    cmp    ChipsSpock, 019h
 000001D5  73 23	   *	    jae    @C000C
 000001D7  E8 0000001F					call Win	
						.endif

						.else
 000001DC  EB 1C	   *	    jmp    @C000E
 000001DE		   *@C0008:
 000001DE  83 2D 00000045 R				sub ChipsPlayer, 50
	   32
 000001E5  83 05 0000004D R				add ChipsTable, 50
	   32
 000001EC  83 2D 00000049 R				sub ChipsSpock, 25
	   19
 000001F3  83 05 0000004D R				add ChipsTable, 25
	   19
					.endif
 000001FA		   *@C000E:
 000001FA		   *@C000C:

 000001FA  C3			ret
 000001FB			Ante ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000001FB			Win PROC																																								;
				;	Recieves: PromptWinImage, PromptYouWin, PlayerChips																													;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000001FB  BA 000000D3 R		mov edx, OFFSET PromptWinImage
 00000200  E8 00000000 E		call WriteString
 00000205  8B 15 00000045 R		mov edx, ChipsPlayer
 0000020B  E8 00000000 E		call WriteString
 00000210  E8 0000001A			Call PlayAgain
 00000215			Win ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000215			Lose PROC																																								;
				;	Recieves: PromptLoseImage, PromptYouLose, PlayerChips																												;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000215  BA 000000D4 R		mov edx, OFFSET PromptLoseImage
 0000021A  E8 00000000 E		call WriteString
 0000021F  8B 15 00000045 R		mov edx, ChipsPlayer
 00000225  E8 00000000 E		call WriteString
 0000022A  E8 00000000			Call PlayAgain
 0000022F			Lose ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000022F			PlayAgain PROC																																							;
				;	Recieves: PromptPlayAgain																																			;
				;	Returns: Nothing																																					;
				;	Asks if you want to PlayAgain, if y call main/if n invoke exitproccess/if else prompbadinput																		;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000022F  BA 0000009E R		mov edx, OFFSET PromptPlayAgain
 00000234  E8 00000000 E		call WriteString
 00000239  E8 00000000 E		call Readint
						.if(eax==0)
 0000023E  0B C0	   *	    or	eax, eax
 00000240  75 09	   *	    jne    @C000F
							INVOKE ExitProcess, 0
 00000242  6A 00	   *	    push   +000000000h
 00000244  E8 00000000 E   *	    call   ExitProcess
						.elseif(eax==1)
 00000249  EB 16	   *	    jmp    @C0011
 0000024B		   *@C000F:
 0000024B  83 F8 01	   *	    cmp    eax, 001h
 0000024E  75 07	   *	    jne    @C0012
 00000250  E8 FFFFFDAB					call Main
						.else
 00000255  EB 0A	   *	    jmp    @C0014
 00000257		   *@C0012:
 00000257  A0 000000D7 R				mov al, PromptBadInput
 0000025C  E8 FFFFFFCE					call PlayAgain
						.endif
 00000261		   *@C0014:
 00000261		   *@C0011:
 00000261  C3			ret
 00000262			PlayAgain ENDP


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000262			HandSpock PROC																																							;
				;	Recieves: Table, SpockHand, FullHandSpock																															;
				;	Returns: FullHandSpock																																				;
				;	Adds Spock and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000262  B8 00000000		mov eax, 0
 00000267  B9 00000005		mov ecx, 5
 0000026C				FSH1:	
 0000026C  8A 90 00000038 R			mov dl, table[eax]																						;FullSpockHand1
 00000272  88 90 00000055 R			mov FullHandSpock[eax],dl		
 00000278  83 C0 01				add eax, TYPE FullHandSpock
 0000027B  E2 EF			Loop FSH1																						
 0000027D  BB 00000000		mov ebx, 0
 00000282  B9 00000002		mov ecx, 2
 00000287				FSH2:																										;FullSpockHand2
 00000287  8A 93 00000036 R			mov dl, SpockHand[ebx]
 0000028D  88 90 00000055 R			mov FullHandSpock[eax],dl
 00000293  83 C0 01				add eax, TYPE FullHandSpock
 00000296  83 C3 01				add ebx, TYPE SpockHand
 00000299  E2 EC			Loop FSH2
 0000029B  C3			ret
 0000029C			HandSpock ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000029C			HandPlayer PROC																																							;
				;	Recieves: Table, PlayerHand, FullHandPlayer																															;
				;	Returns: FullHandPlayer																																				;
				;	Adds Player and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000029C  B8 00000000		mov eax, 0
 000002A1  B9 00000005		mov ecx, 5
 000002A6				FPH1:																									;FullPlayerHand1
 000002A6  8A 90 00000038 R			mov dl, table[eax]																						
 000002AC  88 90 0000005C R			mov FullHandPlayer[eax], dl
 000002B2  83 C0 01				add eax, TYPE FullHandPlayer
 000002B5  E2 EF			Loop FPH1																						
 000002B7  BB 00000000		mov ebx, 0
 000002BC  B9 00000002		mov ecx, 2
 000002C1				FPH2:																									;FullPlayerHand2
 000002C1  8A 93 00000034 R			mov dl, PlayerHand[ebx]																						
 000002C7  88 90 0000005C R			mov FullHandPlayer[eax], dl
 000002CD  83 C0 01				add eax, TYPE FullHandPlayer
 000002D0  BB 00000001				mov ebx, TYPE PlayerHand
 000002D5  E2 EA			Loop FPH2
 000002D7  C3			ret
 000002D8			HandPlayer ENDP


 000002D8			Bid1 PROC
 000002D8  C3				ret
 000002D9			Bid1 ENDP


 000002D9			Bid2 PROC
 000002D9  C3				ret
 000002DA			Bid2 ENDP


 000002DA			Bid3 PROC
 000002DA  C3				ret
 000002DB			Bid3 ENDP

 000002DB			CompareHand Proc
 000002DB  C3				ret
 000002DC			CompareHand ENDP


				END main









Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/04/14 16:24:01
MASM Templat						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000103 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002DC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Ante . . . . . . . . . . . . . .	P Near	 00000160 _TEXT	Length= 0000009B Public STDCALL
Bid1 . . . . . . . . . . . . . .	P Near	 000002D8 _TEXT	Length= 00000001 Public STDCALL
Bid2 . . . . . . . . . . . . . .	P Near	 000002D9 _TEXT	Length= 00000001 Public STDCALL
Bid3 . . . . . . . . . . . . . .	P Near	 000002DA _TEXT	Length= 00000001 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CompareHand  . . . . . . . . . .	P Near	 000002DB _TEXT	Length= 00000001 Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DealFlop . . . . . . . . . . . .	P Near	 000000E5 _TEXT	Length= 00000031 Public STDCALL
  T1 . . . . . . . . . . . . . .	L Near	 000000F5 _TEXT	
DealHand . . . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000039 Public STDCALL
  H1 . . . . . . . . . . . . . .	L Near	 000000BB _TEXT	
DealRiver  . . . . . . . . . . .	P Near	 00000144 _TEXT	Length= 0000001C Public STDCALL
DealTurn . . . . . . . . . . . .	P Near	 00000116 _TEXT	Length= 0000002E Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandPlayer . . . . . . . . . . .	P Near	 0000029C _TEXT	Length= 0000003C Public STDCALL
  FPH1 . . . . . . . . . . . . .	L Near	 000002A6 _TEXT	
  FPH2 . . . . . . . . . . . . .	L Near	 000002C1 _TEXT	
HandSpock  . . . . . . . . . . .	P Near	 00000262 _TEXT	Length= 0000003A Public STDCALL
  FSH1 . . . . . . . . . . . . .	L Near	 0000026C _TEXT	
  FSH2 . . . . . . . . . . . . .	L Near	 00000287 _TEXT	
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Lose . . . . . . . . . . . . . .	P Near	 00000215 _TEXT	Length= 0000001A Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayAgain  . . . . . . . . . . .	P Near	 0000022F _TEXT	Length= 00000033 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Shuffel  . . . . . . . . . . . .	P Near	 00000063 _TEXT	Length= 00000049 Public STDCALL
  L0 . . . . . . . . . . . . . .	L Near	 00000071 _TEXT	
  S1 . . . . . . . . . . . . . .	L Near	 00000085 _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Win  . . . . . . . . . . . . . .	P Near	 000001FB _TEXT	Length= 0000001A Public STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000063 Public STDCALL
  G1 . . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BigBlind . . . . . . . . . . . .	DWord	 00000051 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ChipsPlayer  . . . . . . . . . .	DWord	 00000045 _DATA	
ChipsSpock . . . . . . . . . . .	DWord	 00000049 _DATA	
ChipsTable . . . . . . . . . . .	DWord	 0000004D _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DeckMark . . . . . . . . . . . .	DWord	 0000003D _DATA	
Deck . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FullHandPlayer . . . . . . . . .	Byte	 0000005C _DATA	
FullHandSpock  . . . . . . . . .	Byte	 00000055 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PlayerHand . . . . . . . . . . .	Byte	 00000034 _DATA	
PromptBadInput . . . . . . . . .	Byte	 000000D7 _DATA	
PromptChipsPlayer  . . . . . . .	Byte	 000000D5 _DATA	
PromptChipsSpock . . . . . . . .	Byte	 000000D6 _DATA	
PromptLoseImage  . . . . . . . .	Byte	 000000D4 _DATA	
PromptPlayAgain  . . . . . . . .	Byte	 0000009E _DATA	
PromptWinImage . . . . . . . . .	Byte	 000000D3 _DATA	
PromptYouLose  . . . . . . . . .	Byte	 0000007F _DATA	
PromptYouWin . . . . . . . . . .	Byte	 00000063 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SpockHand  . . . . . . . . . . .	Byte	 00000036 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TableMark  . . . . . . . . . . .	DWord	 00000041 _DATA	
Table  . . . . . . . . . . . . .	Byte	 00000038 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
