Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/08/14 00:11:47
MASM Templat						     Page 1 - 1


				TITLE MASM Template

				; Zeus cs278 EX
				;Write a program that 

				INCLUDE Irvine32.inc 
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000002			Card STRUCT																																							    ;
				;	Basic class for all all cards suits containing suit and value																										;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000000  00				value byte 0																																						;
 00000001  00				Suit byte 0																																							;
				Card ENDS																																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00000000 00000000			var1 DWORD 0
 00000004 00000000			var2 DWORD 0

 00000008 00 00				cards1 Card <0,0>
 0000000A 00 00				cards2 Card <0,0>
 0000000C 00 00				cards3 Card <0,0>
 0000000E 00 00				cards4 Card <0,0>
 00000010 00 00				cards5 Card <0,0>
 00000012 00 00				cards6 Card <0,0>
 00000014 00 00				cards7 Card <0,0>

 00000016 00 00				cardp1 Card <0,0>
 00000018 00 00				cardp2 Card <0,0>
 0000001A 00 00				cardp3 Card <0,0>
 0000001C 00 00				cardp4 Card <0,0>
 0000001E 00 00				cardp5 Card <0,0>
 00000020 00 00				cardp6 Card <0,0>
 00000022 00 00				cardp7 Card <0,0>

 00000024  00000007 [			StraightS byte 7 dup (0)
	    00
	   ]
 0000002B  00000007 [			StraightP byte 7 dup (0)
	    00
	   ]

 00000032 00000000			isSpadeP DWORD 0
 00000036 00000000			isHeartP DWORD 0
 0000003A 00000000			isClubP	DWORD 0
 0000003E 00000000			isDimondP DWORD 0
 00000042 00000000			isFlushP DWORD 0
 00000046 00000000			isSpadeS DWORD 0
 0000004A 00000000			isHeartS DWORD 0
 0000004E 00000000			isClubS DWORD 0
 00000052 00000000			isDimondS DWORD 0
 00000056 00000000			isFlushS DWORD 0
 0000005A 00000000			isStraightS DWORD 0
 0000005E 00000000			isStraightP DWORD 0

 00000062 00000000			RFp DWORD 0
 00000066 00000000			RFs DWORD 0
 0000006A 00				HighFourS byte 0
 0000006B 00				HighFourP byte 0
 0000006C 00				HighThreeS byte 0
 0000006D 00				HighThreeP byte 0
 0000006E 00				High2PairS byte 0
 0000006F 00				High2PairP byte 0
 00000070 00				Low2PairS byte 0
 00000071 00				Low2PairP byte 0
 00000072 00				PairS byte 0
 00000073 00				PairP byte 0
 00000074 00				HighPairS byte 0
 00000075 00				HighPairP byte 0
 00000076 00				HighSts byte 0
 00000077 00				HighStp byte 0
 00000078 00				HighCards byte 0
 00000079 00				HighCardp byte 0

 0000007A 00000000			PlayerRoyal DWORD 0
 0000007E 00000000			PlayerStraightFlush DWORD 0
 00000082 00000000			PlayerFour DWORD 0
 00000086 00000000			PlayerFull DWORD 0
 0000008A 00000000			PlayerFlush DWORD 0
 0000008E 00000000			PlayerStraight DWORD 0
 00000092 00000000			PlayerThree DWORD 0
 00000096 00000000			PlayerTwoPair DWORD 0
 0000009A 00000000			PlayerOnePair DWORD 0
 0000009E 00000000			PlayerHandValue DWORD 0
 000000A2 00000000			ChipsCall DWORD 0
 000000A6 00000000			ChipsRaise DWORD 0
 000000AA 00000000			SpockBet DWORD 0
 000000AE 00000000			PlayerBet DWORD 0
 000000B2 00000000			FoldS DWORD 0
 000000B6 00000000			FoldP DWORD 0

 000000BA 00000000			SpockRoyal DWORD 0
 000000BE 00000000			SpockStraightFlush DWORD 0
 000000C2 00000000			SpockFour DWORD 0
 000000C6 00000000			SpockFull DWORD 0
 000000CA 00000000			SpockFlush DWORD 0
 000000CE 00000000			SpockStraight DWORD 0
 000000D2 00000000			SpockThree DWORD 0
 000000D6 00000000			SpockTwoPair DWORD 0
 000000DA 00000000			SpockOnePair DWORD 0
 000000DE 00000000			SpockHandValue DWORD 0

 000000E2  00000034 [		Deck byte 52 dup (?)
	    00
	   ]

																					;array of Suits
 00000116  00000002 [		PlayerHand byte 2 dup (?)											;2 Cards for the player
	    00
	   ]
 00000118  00000002 [		SpockHand byte 2 dup (?)											;2 Cards for the AI
	    00
	   ]
 0000011A  00000005 [		Table byte 5 dup (?)												;3 Flop cards, 1 Turn card, 1 River card
	    00
	   ]

 0000011F 00000000		DeckMark DWORD ?													;Bookmark for place in Deck
 00000123 00000000		TableMark DWORD ?													;Bookmark for place in Table

 00000127 00000000		ChipsPlayer DWORD 0
 0000012B 00000000		ChipsSpock  DWORD 0
 0000012F 00000000		ChipsTable DWORD 0
 00000133 00000001		BigBlind DWORD 1													;Variable for who is responsible for Big blind, other is responsible for little blind 1/2 big blind bet
 00000137  00000007 [		FullHandSpock BYTE 7 dup (0)
	    00
	   ]
 0000013E  00000007 [		FullHandPlayer BYTE 7 dup (0)
	    00
	   ]

 00000145 59 6F 75 20 57	PromptYouWin byte "You Win, your earning are: ", 0
	   69 6E 2C 20 79
	   6F 75 72 20 65
	   61 72 6E 69 6E
	   67 20 61 72 65
	   3A 20 00
 00000161 59 6F 75 20 4C	PromptYouLose byte "You Lose, you walk away with: ", 0
	   6F 73 65 2C 20
	   79 6F 75 20 77
	   61 6C 6B 20 61
	   77 61 79 20 77
	   69 74 68 3A 20
	   00
 00000180 57 6F 75 6C 64	PromptPlayAgain byte "Would you like to play again 1 for yes or 0 for no:  ",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 20 31
	   20 66 6F 72 20
	   79 65 73 20 6F
	   72 20 30 20 66
	   6F 72 20 6E 6F
	   3A 20 20 00
 000001B6 3F 00			PromptWinImage byte "?",0
 000001B8 3F 00			PromptLoseImage byte "?",0
 000001BA 3F 00			PromptChipsPlayer byte "?",0
 000001BC 3F 00			PromptChipsSpock byte "?",0
 000001BE 54 68 61 74 20	PromptBadInput byte "That is not a valid choice, please try again",0
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   63 68 6F 69 63
	   65 2C 20 70 6C
	   65 61 73 65 20
	   74 72 79 20 61
	   67 61 69 6E 00
 000001EB 53 70 6F 63 6B	PromptSpockTurn byte "Spocks Turn To bet",0
	   73 20 54 75 72
	   6E 20 54 6F 20
	   62 65 74 00
 000001FE 53 70 6F 63 6B	PromptSpockBet byte "Spock Bets: ",0
	   20 42 65 74 73
	   3A 20 00
 0000020B 53 70 6F 63 6B	PromptSpockRaise byte "Spock Raises: ",0
	   20 52 61 69 73
	   65 73 3A 20 00
 0000021A 53 70 6F 63 6B	PromptSpockCall byte "Spock Calls",0
	   20 43 61 6C 6C
	   73 00
 00000226 53 70 6F 63 6B	PromptSpockFold byte "Spock Folds",0
	   20 46 6F 6C 64
	   73 00
 00000232 57 6F 75 6C 64	PromptPlayerBet byte "Would you like to bet<1>, call<2>, or fold<0>",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 62 65
	   74 3C 31 3E 2C
	   20 63 61 6C 6C
	   3C 32 3E 2C 20
	   6F 72 20 66 6F
	   6C 64 3C 30 3E
	   00
 00000260 57 6F 75 6C 64	PromptPlayerSecond byte "Would you like to raise<1>, call<2>, or fold<0>",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 72 61
	   69 73 65 3C 31
	   3E 2C 20 63 61
	   6C 6C 3C 32 3E
	   2C 20 6F 72 20
	   66 6F 6C 64 3C
	   30 3E 00
 00000290 49 74 20 69 73	PromptPlayerTurn byte "It is your turn",0
	   20 79 6F 75 72
	   20 74 75 72 6E
	   00
 000002A0 41 6D 6D 6F 75	PromptPlayerRaise byte "Ammount to raise: ",0
	   6E 74 20 74 6F
	   20 72 61 69 73
	   65 3A 20 00
 000002B3 43 61 6C 6C 00	PromptPlayerCall byte "Call",0
 000002B8 46 6F 6C 64 00	PromptPlayerFold byte "Fold",0
 000002BD 59 6F 75 20 64	PromptPlayerNotEnoughChips byte "You do not have enough chips for that",0
	   6F 20 6E 6F 74
	   20 68 61 76 65
	   20 65 6E 6F 75
	   67 68 20 63 68
	   69 70 73 20 66
	   6F 72 20 74 68
	   61 74 00

 00000000			.code
 00000000			main PROC
 00000000  C7 05 00000127 R		mov ChipsPlayer, 1000
	   000003E8
 0000000A  C7 05 0000012B R		mov ChipsSpock, 1000
	   000003E8
 00000014				G1:
 00000014  E8 00000180				Call Ante
 00000019  E8 0000004A				Call Shuffel
 0000001E  E8 000000C2				Call DealHand
 00000023  E8 000002A2				Call HandSpock
 00000028  E8 0000073B				Call Bid
 0000002D  E8 000000EC				Call DealFlop
 00000032  E8 00000293				Call HandSpock
 00000037  E8 0000072C				Call Bid
 0000003C  E8 0000010E				Call DealTurn
 00000041  E8 00000284				Call HandSpock
 00000046  E8 0000071D				Call Bid
 0000004B  E8 0000012D				Call DealRiver
 00000050  E8 00000275				Call HandSpock
 00000055  E8 000004BE				Call HandPlayer
 0000005A  E8 000010F3				Call CompareHand
 0000005F  E2 B3			Loop G1

				exit
 00000061  6A 00	   *	    push   +000000000h
 00000063  E8 00000000 E   *	    call   ExitProcess
 00000068			main ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000068			Shuffel PROC																																							;
				;	Recieves: nothing																																					;
				;	Returns: Full/shuffled Deck																																			;
				;Adds 52 cards to the Deck 13 from each suit and shuffles them		Values 1-13 =Spades 14-26 Hearts 27-39 Clubs 40-52													;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00000068  B9 00000007		mov ecx, 7
 0000006D  B0 3C		mov al, 60
 0000006F  BE 00000000		mov esi, 0
 00000074				EmptyHands:
 00000074  88 86 00000024 R			mov StraightS[esi], al
 0000007A  88 86 0000002B R			mov StraightP[esi], al
 00000080  04 02				add al, 2
 00000082  46					inc esi
 00000083  E2 EF			Loop EmptyHands

 00000085  B9 00000005		mov ecx, 5
 0000008A  B0 46		mov al, 70
 0000008C  BE 00000000		mov esi, 0
 00000091				EmptyTable:
 00000091  88 86 0000011A R			mov Table[esi],al
 00000097  04 02				add al, 2
 00000099  46					inc esi
 0000009A  E2 F5			Loop EmptyTable

 0000009C  B9 00000034		mov ecx, 52
 000000A1  B2 00		mov dl, 0
 000000A3  B0 01		mov al, 1
 000000A5  BE 00000000		mov esi, 0
 000000AA				L0:
 000000AA  88 86 000000E2 R			mov Deck[esi], al
 000000B0  FE C0				inc al
 000000B2  83 C6 01				add esi,TYPE Deck
 000000B5  FE C2				inc dl
 000000B7  E2 F1			Loop L0

 000000B9  B9 00000068		mov ecx, 104

 000000BE				S1:
 000000BE  B8 00000035				mov eax,53
 000000C3  E8 00000000 E			call randomrange
 000000C8  8B F0				mov esi, eax
 000000CA  8A 9E 000000E2 R			mov bl,Deck[esi]
 000000D0  A0 000000E2 R			mov al, Deck[0]
 000000D5  86 C3				xchg al,bl
 000000D7  88 9E 000000E2 R			mov Deck[esi], bl
 000000DD  A2 000000E2 R			mov Deck[0], al
 000000E2  E2 DA			Loop S1

 000000E4  C3			ret
 000000E5			Shuffel ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000E5			DealHand PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to PlayerHand/SpockHand																														;
				;Procedure deals PlayerHand/SpockHand																																	;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000E5  B9 00000002		mov ecx, 2
 000000EA  BE 00000000		mov esi, 0
 000000EF  BB 00000000		mov ebx, 0

 000000F4				H1:
 000000F4  8A 83 000000E2 R			mov al, Deck[ebx]
 000000FA  88 86 00000116 R			mov PlayerHand[esi], al
 00000100  83 C3 01				add ebx, TYPE Deck
 00000103  8A 83 000000E2 R			mov al, Deck [ebx]
 00000109  88 86 00000118 R			mov SpockHand[esi], al
 0000010F  83 C6 01				add esi, TYPE PlayerHand
 00000112  83 C3 01				add ebx, TYPE Deck
 00000115  E2 DD			Loop H1
 00000117  89 1D 0000011F R	mov DeckMark,EBX
 0000011D  C3			ret
 0000011E			DealHand ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000011E			DealFlop PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Dek to Flop																																		;
				;Procedure deals Flop																																					;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000011E  B9 00000003		mov ecx, 3
 00000123  8B 1D 0000011F R	mov ebx, DeckMark
 00000129  BF 00000000		mov edi,0

 0000012E				T1:
 0000012E  8A 83 000000E2 R			mov al, Deck[ebx]
 00000134  88 87 0000011A R			mov Table[edi], al
 0000013A  83 C3 01				add ebx, TYPE Deck
 0000013D  83 C7 01				add edi, TYPE Table
 00000140  E2 EC			Loop T1
 00000142  89 3D 00000123 R	mov TableMark,edi
 00000148  89 1D 0000011F R	mov DeckMark,ebx
 0000014E  C3			ret
 0000014F			DealFlop ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000014F			DealTurn PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to Turn																																		;
				;Procedure skips a card for burn and deals Turn																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000014F  8B 1D 0000011F R	mov ebx, DeckMark
 00000155  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 00000158  8B 3D 00000123 R	mov edi, TableMark
 0000015E  8A 83 000000E2 R	mov al, Deck[ebx]
 00000164  88 87 0000011A R	mov Table[edi],al
 0000016A  83 C3 01		add ebx, TYPE Deck
 0000016D  89 1D 0000011F R	mov DeckMark, EBX
 00000173  83 C7 01		add edi, TYPE Table
 00000176  89 3D 00000123 R	mov TableMark, edi

 0000017C  C3			ret
 0000017D			DealTurn ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000017D			DealRiver PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to River																																	;
				;Procedure skips a card from Deck for burn and deals River																												;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000017D  8B 1D 0000011F R	mov ebx, DeckMark
 00000183  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 00000186  8B 3D 00000123 R	mov edi, TableMark
 0000018C  8A 83 000000E2 R	mov al, Deck[ebx]
 00000192  88 87 0000011A R	mov Table[edi],al

 00000198  C3			ret
 00000199			DealRiver ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000199			Ante PROC																																								;
				;	Recieves: BigBlind, ChipsPlayer, ChipsSpock, ChipsTable,																											;
				;	Returns: ChipsPlayer(modified) ChipsSpock(modified), ChipTable(modified)																							;
				;	Big and Little blinds paid in for oppening bet																														;
				;Procedure Checks to ensure that player and spock have the chips to make bet if not game end call win/lose, change the value of chips									;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				.if(BigBlind > 0)
 00000199  83 3D 00000133 R
	   00		   *	    cmp    BigBlind, 000h
 000001A0  76 3A	   *	    jbe    @C0001
					
					.if(ChipsPlayer < 25)
 000001A2  83 3D 00000127 R
	   19		   *	    cmp    ChipsPlayer, 019h
 000001A9  73 05	   *	    jae    @C0003
 000001AB  E8 000000BA					call Lose
						.endif
					
						.if(ChipsSpock < 50)
 000001B0		   *@C0003:
 000001B0  83 3D 0000012B R
	   32		   *	    cmp    ChipsSpock, 032h
 000001B7  73 05	   *	    jae    @C0005
 000001B9  E8 0000007F					call Win	
						.endif
					
 000001BE		   *@C0005:
 000001BE  83 2D 00000127 R			sub ChipsPlayer, 25
	   19
 000001C5  83 05 0000012F R			add ChipsTable, 25
	   19
 000001CC  83 2D 0000012B R			sub ChipsSpock, 50
	   32
 000001D3  83 05 0000012F R			add ChipsTable, 50
	   32

					.elseif (BigBlind<1)
 000001DA  EB 41	   *	    jmp    @C0007
 000001DC		   *@C0001:
 000001DC  83 3D 00000133 R
	   01		   *	    cmp    BigBlind, 001h
 000001E3  73 38	   *	    jae    @C0008
					
						.if(ChipsPlayer < 50)
 000001E5  83 3D 00000127 R
	   32		   *	    cmp    ChipsPlayer, 032h
 000001EC  73 05	   *	    jae    @C000A
 000001EE  E8 00000077					call Lose
						.endif
					
						.if(ChipsSpock < 25)
 000001F3		   *@C000A:
 000001F3  83 3D 0000012B R
	   19		   *	    cmp    ChipsSpock, 019h
 000001FA  73 05	   *	    jae    @C000C
 000001FC  E8 0000003C					call Win	
						.endif
					
 00000201		   *@C000C:
 00000201  83 2D 00000127 R				sub ChipsPlayer, 50
	   32
 00000208  83 05 0000012F R				add ChipsTable, 50
	   32
 0000020F  83 2D 0000012B R				sub ChipsSpock, 25
	   19
 00000216  83 05 0000012F R				add ChipsTable, 25
	   19
				.endif
 0000021D		   *@C0008:
 0000021D		   *@C0007:

 0000021D  A1 00000133 R	mov eax, BigBlind
				.if(BigBlind > 0)
 00000222  83 3D 00000133 R
	   00		   *	    cmp    BigBlind, 000h
 00000229  76 07	   *	    jbe    @C000E
 0000022B  B8 00000000			mov eax, 0
				.else
 00000230  EB 05	   *	    jmp    @C0010
 00000232		   *@C000E:
 00000232  B8 00000001			mov eax, 1
				.endif
 00000237		   *@C0010:
 00000237  A3 00000133 R	mov bigblind,eax

 0000023C  C3			ret
 0000023D			Ante ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000023D			Win PROC																																								;
				;	Recieves: PromptWinImage, PromptYouWin, PlayerChips																													;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000023D  BA 000001B6 R		mov edx, OFFSET PromptWinImage
 00000242  E8 00000000 E		call WriteString
 00000247  E8 00000000 E		call CRLF
 0000024C  BA 00000145 R		mov edx, OFFSET PromptYouWin
 00000251  E8 00000000 E		call WriteString
 00000256  A1 00000127 R		mov eax, ChipsPlayer
 0000025B  E8 00000000 E		call WriteInt   
 00000260  E8 00000000 E		call CRLF
 00000265  E8 0000002D			Call PlayAgain
 0000026A			Win ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000026A			Lose PROC																																								;
				;	Recieves: PromptLoseImage, PromptYouLose, PlayerChips																												;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000026A  BA 000001B8 R		mov edx, OFFSET PromptLoseImage
 0000026F  E8 00000000 E		call WriteString
 00000274  E8 00000000 E		call CRLF
 00000279  BA 00000161 R		mov edx, OFFSET PromptYouLose
 0000027E  E8 00000000 E		call WriteString
 00000283  A1 00000127 R		mov eax, ChipsPlayer
 00000288  E8 00000000 E		call WriteInt   
 0000028D  E8 00000000 E		call CRLF
 00000292  E8 00000000			Call PlayAgain
 00000297			Lose ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000297			PlayAgain PROC																																							;
				;	Recieves: PromptPlayAgain																																			;
				;	Returns: Nothing																																					;
				;	Asks if you want to PlayAgain, if y call main/if n invoke exitproccess/if else prompbadinput																		;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000297  BA 00000180 R		mov edx, OFFSET PromptPlayAgain
 0000029C  E8 00000000 E		call WriteString
 000002A1  E8 00000000 E		call Readint
						.if(eax==0)
 000002A6  0B C0	   *	    or	eax, eax
 000002A8  75 09	   *	    jne    @C0011
							INVOKE ExitProcess, 0
 000002AA  6A 00	   *	    push   +000000000h
 000002AC  E8 00000000 E   *	    call   ExitProcess
						.elseif(eax==1)
 000002B1  EB 16	   *	    jmp    @C0013
 000002B3		   *@C0011:
 000002B3  83 F8 01	   *	    cmp    eax, 001h
 000002B6  75 07	   *	    jne    @C0014
 000002B8  E8 FFFFFD43					call Main
						.else
 000002BD  EB 0A	   *	    jmp    @C0016
 000002BF		   *@C0014:
 000002BF  A0 000001BE R				mov al, PromptBadInput
 000002C4  E8 FFFFFFCE					call PlayAgain
						.endif
 000002C9		   *@C0016:
 000002C9		   *@C0013:
 000002C9  C3			ret
 000002CA			PlayAgain ENDP


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000002CA			HandSpock PROC																																							;
				;	Recieves: Table, SpockHand, FullHandSpock																															;
				;	Returns: FullHandSpock																																				;
				;	Adds Spock and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000002CA  B8 00000000		mov eax, 0
 000002CF  B9 00000005		mov ecx, 5
 000002D4				FSH1:	
 000002D4  8A 90 0000011A R			mov dl, table[eax]																						;FullSpockHand1
 000002DA  88 90 00000137 R			mov FullHandSpock[eax],dl		
 000002E0  83 C0 01				add eax, TYPE FullHandSpock
 000002E3  E2 EF			Loop FSH1																						
 000002E5  BB 00000000		mov ebx, 0
 000002EA  B9 00000002		mov ecx, 2
 000002EF				FSH2:																										;FullSpockHand2
 000002EF  8A 93 00000118 R			mov dl, SpockHand[ebx]
 000002F5  88 90 00000137 R			mov FullHandSpock[eax],dl
 000002FB  83 C0 01				add eax, TYPE FullHandSpock
 000002FE  83 C3 01				add ebx, TYPE SpockHand
 00000301  E2 EC			Loop FSH2

 00000303  A0 00000137 R	mov al, FullHandSpock[0]
 00000308  A2 00000008 R	mov cards1.value,al
					.if(al >0 && al < 14)
 0000030D  3C 00	   *	    cmp    al, 000h
 0000030F  76 0D	   *	    jbe    @C0017
 00000311  3C 0E	   *	    cmp    al, 00Eh
 00000313  73 09	   *	    jae    @C0017
 00000315  C6 05 00000009 R			mov cards1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000031C  EB 31	   *	    jmp    @C001A
 0000031E		   *@C0017:
 0000031E  3C 0D	   *	    cmp    al, 00Dh
 00000320  76 0D	   *	    jbe    @C001B
 00000322  3C 1B	   *	    cmp    al, 01Bh
 00000324  73 09	   *	    jae    @C001B
 00000326  C6 05 00000009 R			mov cards1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000032D  EB 20	   *	    jmp    @C001E
 0000032F		   *@C001B:
 0000032F  3C 1A	   *	    cmp    al, 01Ah
 00000331  76 0D	   *	    jbe    @C001F
 00000333  3C 28	   *	    cmp    al, 028h
 00000335  73 09	   *	    jae    @C001F
 00000337  C6 05 00000009 R			mov cards1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000033E  EB 0F	   *	    jmp    @C0022
 00000340		   *@C001F:
 00000340  3C 27	   *	    cmp    al, 027h
 00000342  76 0B	   *	    jbe    @C0023
 00000344  3C 35	   *	    cmp    al, 035h
 00000346  73 07	   *	    jae    @C0023
 00000348  C6 05 00000009 R			mov cards1.suit, 4
	   04
					.endif
 0000034F		   *@C0023:
 0000034F		   *@C0022:
 0000034F		   *@C001E:
 0000034F		   *@C001A:
 0000034F  A0 00000138 R	mov al, FullHandSpock[1]
 00000354  A2 0000000A R	mov cards2.value,al
					.if(al >0 && al < 14)
 00000359  3C 00	   *	    cmp    al, 000h
 0000035B  76 0D	   *	    jbe    @C0026
 0000035D  3C 0E	   *	    cmp    al, 00Eh
 0000035F  73 09	   *	    jae    @C0026
 00000361  C6 05 0000000B R			mov cards2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000368  EB 31	   *	    jmp    @C0029
 0000036A		   *@C0026:
 0000036A  3C 0D	   *	    cmp    al, 00Dh
 0000036C  76 0D	   *	    jbe    @C002A
 0000036E  3C 1B	   *	    cmp    al, 01Bh
 00000370  73 09	   *	    jae    @C002A
 00000372  C6 05 0000000B R			mov cards2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000379  EB 20	   *	    jmp    @C002D
 0000037B		   *@C002A:
 0000037B  3C 1A	   *	    cmp    al, 01Ah
 0000037D  76 0D	   *	    jbe    @C002E
 0000037F  3C 28	   *	    cmp    al, 028h
 00000381  73 09	   *	    jae    @C002E
 00000383  C6 05 0000000B R			mov cards2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000038A  EB 0F	   *	    jmp    @C0031
 0000038C		   *@C002E:
 0000038C  3C 27	   *	    cmp    al, 027h
 0000038E  76 0B	   *	    jbe    @C0032
 00000390  3C 35	   *	    cmp    al, 035h
 00000392  73 07	   *	    jae    @C0032
 00000394  C6 05 0000000B R			mov cards2.suit, 4
	   04
					.endif
 0000039B		   *@C0032:
 0000039B		   *@C0031:
 0000039B		   *@C002D:
 0000039B		   *@C0029:
 0000039B  A0 00000139 R	mov al, FullHandSpock[2]
 000003A0  A2 0000000C R	mov cards3.value,al
					.if(al >0 && al < 14)
 000003A5  3C 00	   *	    cmp    al, 000h
 000003A7  76 0D	   *	    jbe    @C0035
 000003A9  3C 0E	   *	    cmp    al, 00Eh
 000003AB  73 09	   *	    jae    @C0035
 000003AD  C6 05 0000000D R			mov cards3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000003B4  EB 31	   *	    jmp    @C0038
 000003B6		   *@C0035:
 000003B6  3C 0D	   *	    cmp    al, 00Dh
 000003B8  76 0D	   *	    jbe    @C0039
 000003BA  3C 1B	   *	    cmp    al, 01Bh
 000003BC  73 09	   *	    jae    @C0039
 000003BE  C6 05 0000000D R			mov cards3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000003C5  EB 20	   *	    jmp    @C003C
 000003C7		   *@C0039:
 000003C7  3C 1A	   *	    cmp    al, 01Ah
 000003C9  76 0D	   *	    jbe    @C003D
 000003CB  3C 28	   *	    cmp    al, 028h
 000003CD  73 09	   *	    jae    @C003D
 000003CF  C6 05 0000000D R			mov cards3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000003D6  EB 0F	   *	    jmp    @C0040
 000003D8		   *@C003D:
 000003D8  3C 27	   *	    cmp    al, 027h
 000003DA  76 0B	   *	    jbe    @C0041
 000003DC  3C 35	   *	    cmp    al, 035h
 000003DE  73 07	   *	    jae    @C0041
 000003E0  C6 05 0000000D R			mov cards3.suit, 4
	   04
					.endif
 000003E7		   *@C0041:
 000003E7		   *@C0040:
 000003E7		   *@C003C:
 000003E7		   *@C0038:
 000003E7  A0 0000013A R	mov al, FullHandSpock[3]
 000003EC  A2 0000000E R	mov cards4.value,al
					.if(al >0 && al < 14)
 000003F1  3C 00	   *	    cmp    al, 000h
 000003F3  76 0D	   *	    jbe    @C0044
 000003F5  3C 0E	   *	    cmp    al, 00Eh
 000003F7  73 09	   *	    jae    @C0044
 000003F9  C6 05 0000000F R			mov cards4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000400  EB 31	   *	    jmp    @C0047
 00000402		   *@C0044:
 00000402  3C 0D	   *	    cmp    al, 00Dh
 00000404  76 0D	   *	    jbe    @C0048
 00000406  3C 1B	   *	    cmp    al, 01Bh
 00000408  73 09	   *	    jae    @C0048
 0000040A  C6 05 0000000F R			mov cards4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000411  EB 20	   *	    jmp    @C004B
 00000413		   *@C0048:
 00000413  3C 1A	   *	    cmp    al, 01Ah
 00000415  76 0D	   *	    jbe    @C004C
 00000417  3C 28	   *	    cmp    al, 028h
 00000419  73 09	   *	    jae    @C004C
 0000041B  C6 05 0000000F R			mov cards4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000422  EB 0F	   *	    jmp    @C004F
 00000424		   *@C004C:
 00000424  3C 27	   *	    cmp    al, 027h
 00000426  76 0B	   *	    jbe    @C0050
 00000428  3C 35	   *	    cmp    al, 035h
 0000042A  73 07	   *	    jae    @C0050
 0000042C  C6 05 0000000F R			mov cards4.suit, 4
	   04
					.endif
 00000433		   *@C0050:
 00000433		   *@C004F:
 00000433		   *@C004B:
 00000433		   *@C0047:
 00000433  A0 0000013B R	mov al, FullHandSpock[4]
 00000438  A2 00000010 R	mov cards5.value,al
					.if(al >0 && al < 14)
 0000043D  3C 00	   *	    cmp    al, 000h
 0000043F  76 0D	   *	    jbe    @C0053
 00000441  3C 0E	   *	    cmp    al, 00Eh
 00000443  73 09	   *	    jae    @C0053
 00000445  C6 05 00000011 R			mov cards5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000044C  EB 31	   *	    jmp    @C0056
 0000044E		   *@C0053:
 0000044E  3C 0D	   *	    cmp    al, 00Dh
 00000450  76 0D	   *	    jbe    @C0057
 00000452  3C 1B	   *	    cmp    al, 01Bh
 00000454  73 09	   *	    jae    @C0057
 00000456  C6 05 00000011 R			mov cards5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000045D  EB 20	   *	    jmp    @C005A
 0000045F		   *@C0057:
 0000045F  3C 1A	   *	    cmp    al, 01Ah
 00000461  76 0D	   *	    jbe    @C005B
 00000463  3C 28	   *	    cmp    al, 028h
 00000465  73 09	   *	    jae    @C005B
 00000467  C6 05 00000011 R			mov cards5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000046E  EB 0F	   *	    jmp    @C005E
 00000470		   *@C005B:
 00000470  3C 27	   *	    cmp    al, 027h
 00000472  76 0B	   *	    jbe    @C005F
 00000474  3C 35	   *	    cmp    al, 035h
 00000476  73 07	   *	    jae    @C005F
 00000478  C6 05 00000011 R			mov cards5.suit, 4
	   04
					.endif
 0000047F		   *@C005F:
 0000047F		   *@C005E:
 0000047F		   *@C005A:
 0000047F		   *@C0056:
 0000047F  A0 0000013C R	mov al, FullHandSpock[5]
 00000484  A2 00000012 R	mov cards6.value,al
					.if(al >0 && al < 14)
 00000489  3C 00	   *	    cmp    al, 000h
 0000048B  76 0D	   *	    jbe    @C0062
 0000048D  3C 0E	   *	    cmp    al, 00Eh
 0000048F  73 09	   *	    jae    @C0062
 00000491  C6 05 00000013 R			mov cards6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000498  EB 31	   *	    jmp    @C0065
 0000049A		   *@C0062:
 0000049A  3C 0D	   *	    cmp    al, 00Dh
 0000049C  76 0D	   *	    jbe    @C0066
 0000049E  3C 1B	   *	    cmp    al, 01Bh
 000004A0  73 09	   *	    jae    @C0066
 000004A2  C6 05 00000013 R			mov cards6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000004A9  EB 20	   *	    jmp    @C0069
 000004AB		   *@C0066:
 000004AB  3C 1A	   *	    cmp    al, 01Ah
 000004AD  76 0D	   *	    jbe    @C006A
 000004AF  3C 28	   *	    cmp    al, 028h
 000004B1  73 09	   *	    jae    @C006A
 000004B3  C6 05 00000013 R			mov cards6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000004BA  EB 0F	   *	    jmp    @C006D
 000004BC		   *@C006A:
 000004BC  3C 27	   *	    cmp    al, 027h
 000004BE  76 0B	   *	    jbe    @C006E
 000004C0  3C 35	   *	    cmp    al, 035h
 000004C2  73 07	   *	    jae    @C006E
 000004C4  C6 05 00000013 R			mov cards6.suit, 4
	   04
					.endif
 000004CB		   *@C006E:
 000004CB		   *@C006D:
 000004CB		   *@C0069:
 000004CB		   *@C0065:
 000004CB  A0 0000013D R	mov al, FullHandSpock[6]
 000004D0  A2 00000014 R	mov cards7.value,al
					.if(al >0 && al < 14)
 000004D5  3C 00	   *	    cmp    al, 000h
 000004D7  76 0D	   *	    jbe    @C0071
 000004D9  3C 0E	   *	    cmp    al, 00Eh
 000004DB  73 09	   *	    jae    @C0071
 000004DD  C6 05 00000015 R			mov cards7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000004E4  EB 31	   *	    jmp    @C0074
 000004E6		   *@C0071:
 000004E6  3C 0D	   *	    cmp    al, 00Dh
 000004E8  76 0D	   *	    jbe    @C0075
 000004EA  3C 1B	   *	    cmp    al, 01Bh
 000004EC  73 09	   *	    jae    @C0075
 000004EE  C6 05 00000015 R			mov cards7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000004F5  EB 20	   *	    jmp    @C0078
 000004F7		   *@C0075:
 000004F7  3C 1A	   *	    cmp    al, 01Ah
 000004F9  76 0D	   *	    jbe    @C0079
 000004FB  3C 28	   *	    cmp    al, 028h
 000004FD  73 09	   *	    jae    @C0079
 000004FF  C6 05 00000015 R			mov cards7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000506  EB 0F	   *	    jmp    @C007C
 00000508		   *@C0079:
 00000508  3C 27	   *	    cmp    al, 027h
 0000050A  76 0B	   *	    jbe    @C007D
 0000050C  3C 35	   *	    cmp    al, 035h
 0000050E  73 07	   *	    jae    @C007D
 00000510  C6 05 00000015 R			mov cards7.suit, 4
	   04
					.endif
 00000517		   *@C007D:
 00000517		   *@C007C:
 00000517		   *@C0078:
 00000517		   *@C0074:
 00000517  C3			ret
 00000518			HandSpock ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000518			HandPlayer PROC																																							;
				;	Recieves: Table, PlayerHand, FullHandPlayer																															;
				;	Returns: FullHandPlayer																																				;
				;	Adds Player and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000518  B8 00000000		mov eax, 0
 0000051D  B9 00000005		mov ecx, 5
 00000522				FPH1:																									;FullPlayerHand1
 00000522  8A 90 0000011A R			mov dl, table[eax]																						
 00000528  88 90 0000013E R			mov FullHandPlayer[eax], dl
 0000052E  83 C0 01				add eax, TYPE FullHandPlayer
 00000531  E2 EF			Loop FPH1																						
 00000533  BB 00000000		mov ebx, 0
 00000538  B9 00000002		mov ecx, 2
 0000053D				FPH2:																									;FullPlayerHand2
 0000053D  8A 93 00000116 R			mov dl, PlayerHand[ebx]																						
 00000543  88 90 0000013E R			mov FullHandPlayer[eax], dl
 00000549  83 C0 01				add eax, TYPE FullHandPlayer
 0000054C  BB 00000001				mov ebx, TYPE PlayerHand
 00000551  E2 EA			Loop FPH2

 00000553  A0 0000013E R	mov al, FullHandplayer[0]
 00000558  A2 00000016 R	mov cardp1.value,al
					.if(al >0 && al < 14)
 0000055D  3C 00	   *	    cmp    al, 000h
 0000055F  76 0D	   *	    jbe    @C0080
 00000561  3C 0E	   *	    cmp    al, 00Eh
 00000563  73 09	   *	    jae    @C0080
 00000565  C6 05 00000017 R			mov cardp1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000056C  EB 31	   *	    jmp    @C0083
 0000056E		   *@C0080:
 0000056E  3C 0D	   *	    cmp    al, 00Dh
 00000570  76 0D	   *	    jbe    @C0084
 00000572  3C 1B	   *	    cmp    al, 01Bh
 00000574  73 09	   *	    jae    @C0084
 00000576  C6 05 00000017 R			mov cardp1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000057D  EB 20	   *	    jmp    @C0087
 0000057F		   *@C0084:
 0000057F  3C 1A	   *	    cmp    al, 01Ah
 00000581  76 0D	   *	    jbe    @C0088
 00000583  3C 28	   *	    cmp    al, 028h
 00000585  73 09	   *	    jae    @C0088
 00000587  C6 05 00000017 R			mov cardp1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000058E  EB 0F	   *	    jmp    @C008B
 00000590		   *@C0088:
 00000590  3C 27	   *	    cmp    al, 027h
 00000592  76 0B	   *	    jbe    @C008C
 00000594  3C 35	   *	    cmp    al, 035h
 00000596  73 07	   *	    jae    @C008C
 00000598  C6 05 00000017 R			mov cardp1.suit, 4
	   04
					.endif
 0000059F		   *@C008C:
 0000059F		   *@C008B:
 0000059F		   *@C0087:
 0000059F		   *@C0083:
 0000059F  A0 0000013F R	mov al, FullHandplayer[1]
 000005A4  A2 00000018 R	mov cardp2.value,al
					.if(al >0 && al < 14)
 000005A9  3C 00	   *	    cmp    al, 000h
 000005AB  76 0D	   *	    jbe    @C008F
 000005AD  3C 0E	   *	    cmp    al, 00Eh
 000005AF  73 09	   *	    jae    @C008F
 000005B1  C6 05 00000019 R			mov cardp2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000005B8  EB 31	   *	    jmp    @C0092
 000005BA		   *@C008F:
 000005BA  3C 0D	   *	    cmp    al, 00Dh
 000005BC  76 0D	   *	    jbe    @C0093
 000005BE  3C 1B	   *	    cmp    al, 01Bh
 000005C0  73 09	   *	    jae    @C0093
 000005C2  C6 05 00000019 R			mov cardp2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000005C9  EB 20	   *	    jmp    @C0096
 000005CB		   *@C0093:
 000005CB  3C 1A	   *	    cmp    al, 01Ah
 000005CD  76 0D	   *	    jbe    @C0097
 000005CF  3C 28	   *	    cmp    al, 028h
 000005D1  73 09	   *	    jae    @C0097
 000005D3  C6 05 00000019 R			mov cardp2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000005DA  EB 0F	   *	    jmp    @C009A
 000005DC		   *@C0097:
 000005DC  3C 27	   *	    cmp    al, 027h
 000005DE  76 0B	   *	    jbe    @C009B
 000005E0  3C 35	   *	    cmp    al, 035h
 000005E2  73 07	   *	    jae    @C009B
 000005E4  C6 05 00000019 R			mov cardp2.suit, 4
	   04
					.endif
 000005EB		   *@C009B:
 000005EB		   *@C009A:
 000005EB		   *@C0096:
 000005EB		   *@C0092:
 000005EB  A0 00000140 R	mov al, FullHandplayer[2]
 000005F0  A2 0000001A R	mov cardp3.value,al
					.if(al >0 && al < 14)
 000005F5  3C 00	   *	    cmp    al, 000h
 000005F7  76 0D	   *	    jbe    @C009E
 000005F9  3C 0E	   *	    cmp    al, 00Eh
 000005FB  73 09	   *	    jae    @C009E
 000005FD  C6 05 0000001B R			mov cardp3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000604  EB 31	   *	    jmp    @C00A1
 00000606		   *@C009E:
 00000606  3C 0D	   *	    cmp    al, 00Dh
 00000608  76 0D	   *	    jbe    @C00A2
 0000060A  3C 1B	   *	    cmp    al, 01Bh
 0000060C  73 09	   *	    jae    @C00A2
 0000060E  C6 05 0000001B R			mov cardp3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000615  EB 20	   *	    jmp    @C00A5
 00000617		   *@C00A2:
 00000617  3C 1A	   *	    cmp    al, 01Ah
 00000619  76 0D	   *	    jbe    @C00A6
 0000061B  3C 28	   *	    cmp    al, 028h
 0000061D  73 09	   *	    jae    @C00A6
 0000061F  C6 05 0000001B R			mov cardp3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000626  EB 0F	   *	    jmp    @C00A9
 00000628		   *@C00A6:
 00000628  3C 27	   *	    cmp    al, 027h
 0000062A  76 0B	   *	    jbe    @C00AA
 0000062C  3C 35	   *	    cmp    al, 035h
 0000062E  73 07	   *	    jae    @C00AA
 00000630  C6 05 0000001B R			mov cardp3.suit, 4
	   04
					.endif
 00000637		   *@C00AA:
 00000637		   *@C00A9:
 00000637		   *@C00A5:
 00000637		   *@C00A1:
 00000637  A0 00000141 R	mov al, FullHandplayer[3]
 0000063C  A2 0000001C R	mov cardp4.value,al
					.if(al >0 && al < 14)
 00000641  3C 00	   *	    cmp    al, 000h
 00000643  76 0D	   *	    jbe    @C00AD
 00000645  3C 0E	   *	    cmp    al, 00Eh
 00000647  73 09	   *	    jae    @C00AD
 00000649  C6 05 0000001D R			mov cardp4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000650  EB 31	   *	    jmp    @C00B0
 00000652		   *@C00AD:
 00000652  3C 0D	   *	    cmp    al, 00Dh
 00000654  76 0D	   *	    jbe    @C00B1
 00000656  3C 1B	   *	    cmp    al, 01Bh
 00000658  73 09	   *	    jae    @C00B1
 0000065A  C6 05 0000001D R			mov cardp4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000661  EB 20	   *	    jmp    @C00B4
 00000663		   *@C00B1:
 00000663  3C 1A	   *	    cmp    al, 01Ah
 00000665  76 0D	   *	    jbe    @C00B5
 00000667  3C 28	   *	    cmp    al, 028h
 00000669  73 09	   *	    jae    @C00B5
 0000066B  C6 05 0000001D R			mov cardp4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000672  EB 0F	   *	    jmp    @C00B8
 00000674		   *@C00B5:
 00000674  3C 27	   *	    cmp    al, 027h
 00000676  76 0B	   *	    jbe    @C00B9
 00000678  3C 35	   *	    cmp    al, 035h
 0000067A  73 07	   *	    jae    @C00B9
 0000067C  C6 05 0000001D R			mov cardp4.suit, 4
	   04
					.endif
 00000683		   *@C00B9:
 00000683		   *@C00B8:
 00000683		   *@C00B4:
 00000683		   *@C00B0:
 00000683  A0 00000142 R	mov al, FullHandplayer[4]
 00000688  A2 0000001E R	mov cardp5.value,al
					.if(al >0 && al < 14)
 0000068D  3C 00	   *	    cmp    al, 000h
 0000068F  76 0D	   *	    jbe    @C00BC
 00000691  3C 0E	   *	    cmp    al, 00Eh
 00000693  73 09	   *	    jae    @C00BC
 00000695  C6 05 0000001F R			mov cardp5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000069C  EB 31	   *	    jmp    @C00BF
 0000069E		   *@C00BC:
 0000069E  3C 0D	   *	    cmp    al, 00Dh
 000006A0  76 0D	   *	    jbe    @C00C0
 000006A2  3C 1B	   *	    cmp    al, 01Bh
 000006A4  73 09	   *	    jae    @C00C0
 000006A6  C6 05 0000001F R			mov cardp5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000006AD  EB 20	   *	    jmp    @C00C3
 000006AF		   *@C00C0:
 000006AF  3C 1A	   *	    cmp    al, 01Ah
 000006B1  76 0D	   *	    jbe    @C00C4
 000006B3  3C 28	   *	    cmp    al, 028h
 000006B5  73 09	   *	    jae    @C00C4
 000006B7  C6 05 0000001F R			mov cardp5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000006BE  EB 0F	   *	    jmp    @C00C7
 000006C0		   *@C00C4:
 000006C0  3C 27	   *	    cmp    al, 027h
 000006C2  76 0B	   *	    jbe    @C00C8
 000006C4  3C 35	   *	    cmp    al, 035h
 000006C6  73 07	   *	    jae    @C00C8
 000006C8  C6 05 0000001F R			mov cardp5.suit, 4
	   04
					.endif
 000006CF		   *@C00C8:
 000006CF		   *@C00C7:
 000006CF		   *@C00C3:
 000006CF		   *@C00BF:
 000006CF  A0 00000143 R	mov al, FullHandplayer[5]
 000006D4  A2 00000020 R	mov cardp6.value,al
					.if(al >0 && al < 14)
 000006D9  3C 00	   *	    cmp    al, 000h
 000006DB  76 0D	   *	    jbe    @C00CB
 000006DD  3C 0E	   *	    cmp    al, 00Eh
 000006DF  73 09	   *	    jae    @C00CB
 000006E1  C6 05 00000021 R			mov cardp6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000006E8  EB 31	   *	    jmp    @C00CE
 000006EA		   *@C00CB:
 000006EA  3C 0D	   *	    cmp    al, 00Dh
 000006EC  76 0D	   *	    jbe    @C00CF
 000006EE  3C 1B	   *	    cmp    al, 01Bh
 000006F0  73 09	   *	    jae    @C00CF
 000006F2  C6 05 00000021 R			mov cardp6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000006F9  EB 20	   *	    jmp    @C00D2
 000006FB		   *@C00CF:
 000006FB  3C 1A	   *	    cmp    al, 01Ah
 000006FD  76 0D	   *	    jbe    @C00D3
 000006FF  3C 28	   *	    cmp    al, 028h
 00000701  73 09	   *	    jae    @C00D3
 00000703  C6 05 00000021 R			mov cardp6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000070A  EB 0F	   *	    jmp    @C00D6
 0000070C		   *@C00D3:
 0000070C  3C 27	   *	    cmp    al, 027h
 0000070E  76 0B	   *	    jbe    @C00D7
 00000710  3C 35	   *	    cmp    al, 035h
 00000712  73 07	   *	    jae    @C00D7
 00000714  C6 05 00000021 R			mov cardp6.suit, 4
	   04
					.endif
 0000071B		   *@C00D7:
 0000071B		   *@C00D6:
 0000071B		   *@C00D2:
 0000071B		   *@C00CE:
 0000071B  A0 00000144 R	mov al, FullHandplayer[6]
 00000720  A2 00000022 R	mov cardp7.value,al
					.if(al >0 && al < 14)
 00000725  3C 00	   *	    cmp    al, 000h
 00000727  76 0D	   *	    jbe    @C00DA
 00000729  3C 0E	   *	    cmp    al, 00Eh
 0000072B  73 09	   *	    jae    @C00DA
 0000072D  C6 05 00000023 R			mov cardp7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000734  EB 31	   *	    jmp    @C00DD
 00000736		   *@C00DA:
 00000736  3C 0D	   *	    cmp    al, 00Dh
 00000738  76 0D	   *	    jbe    @C00DE
 0000073A  3C 1B	   *	    cmp    al, 01Bh
 0000073C  73 09	   *	    jae    @C00DE
 0000073E  C6 05 00000023 R			mov cardp7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000745  EB 20	   *	    jmp    @C00E1
 00000747		   *@C00DE:
 00000747  3C 1A	   *	    cmp    al, 01Ah
 00000749  76 0D	   *	    jbe    @C00E2
 0000074B  3C 28	   *	    cmp    al, 028h
 0000074D  73 09	   *	    jae    @C00E2
 0000074F  C6 05 00000023 R			mov cardp7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000756  EB 0F	   *	    jmp    @C00E5
 00000758		   *@C00E2:
 00000758  3C 27	   *	    cmp    al, 027h
 0000075A  76 0B	   *	    jbe    @C00E6
 0000075C  3C 35	   *	    cmp    al, 035h
 0000075E  73 07	   *	    jae    @C00E6
 00000760  C6 05 00000023 R			mov cardp7.suit, 4
	   04
					.endif
 00000767		   *@C00E6:
 00000767		   *@C00E5:
 00000767		   *@C00E1:
 00000767		   *@C00DD:
 00000767  C3				ret
 00000768			HandPlayer ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000768			Bid PROC
 00000768  C7 05 000000A2 R	mov ChipsCall, 0
	   00000000
 00000772  E8 00000653			call HandValue
				.if(FoldS == 1)
 00000777  83 3D 000000B2 R
	   01		   *	    cmp    FoldS, 001h
 0000077E  75 06	   *	    jne    @C00E9
 00000780  C3				ret
				.elseif(FoldP == 1)
 00000781  E9 00000643	   *	    jmp    @C00EB
 00000786		   *@C00E9:
 00000786  83 3D 000000B6 R
	   01		   *	    cmp    FoldP, 001h
 0000078D  75 06	   *	    jne    @C00EC
 0000078F  C3				ret
				.elseif(bigblind == 1) ;spock bid first
 00000790  E9 00000634	   *	    jmp    @C00EE
 00000795		   *@C00EC:
 00000795  83 3D 00000133 R
	   01		   *	    cmp    BigBlind, 001h
 0000079C  0F 85 000002F3  *	    jne    @C00EF
 000007A2  BA 000001EB R		mov edx, OFFSET PromptSpockTurn
 000007A7  E8 00000000 E		call WriteString
 000007AC  E8 00000000 E		call CRLF
						.if(SpockHandValue > 8)
 000007B1  83 3D 000000DE R
	   08		   *	    cmp    SpockHandValue, 008h
 000007B8  76 39	   *	    jbe    @C00F1
 000007BA  8B 3D 0000012B R				mov edi, ChipsSpock
 000007C0  29 3D 0000012B R				sub ChipsSpock, edi
 000007C6  89 3D 000000AA R				mov SpockBet,edi
 000007CC  01 3D 0000012F R				add ChipsTable, edi
 000007D2  89 3D 000000A2 R				mov ChipsCall, edi
							
 000007D8  BA 000001FE R				mov edx, OFFSET PromptSpockBet
 000007DD  E8 00000000 E				call WriteString
 000007E2  8B C7					mov eax, edi
 000007E4  E8 00000000 E				call writeint
 000007E9  E8 00000000 E				call CRLF

						.elseif(SpockHandValue > 4)
 000007EE  E9 000001A5	   *	    jmp    @C00F3
 000007F3		   *@C00F1:
 000007F3  83 3D 000000DE R
	   04		   *	    cmp    SpockHandValue, 004h
 000007FA  76 7A	   *	    jbe    @C00F4
							.if(ChipsSpock < 100)
 000007FC  83 3D 0000012B R
	   64		   *	    cmp    ChipsSpock, 064h
 00000803  73 39	   *	    jae    @C00F6
 00000805  8B 3D 0000012B R					mov edi, ChipsSpock
 0000080B  29 3D 0000012B R					sub ChipsSpock, edi
 00000811  89 3D 000000AA R					mov SpockBet,edi
 00000817  01 3D 0000012F R					add ChipsTable, edi
 0000081D  89 3D 000000A2 R					mov ChipsCall, edi	
								
 00000823  BA 000001FE R					mov edx, OFFSET PromptSpockBet
 00000828  E8 00000000 E					call WriteString
 0000082D  8B C7						mov eax, edi
 0000082F  E8 00000000 E					call writeint
 00000834  E8 00000000 E					call CRLF		
							
							.else
 00000839  E9 0000015A	   *	    jmp    @C00F8
 0000083E		   *@C00F6:
 0000083E  BF 00000064						mov edi, 100
 00000843  29 3D 0000012B R					sub ChipsSpock, edi
 00000849  89 3D 000000AA R					mov SpockBet,edi
 0000084F  01 3D 0000012F R					add ChipsTable, edi
 00000855  89 3D 000000A2 R					mov ChipsCall, edi

 0000085B  BA 000001FE R					mov edx, OFFSET PromptSpockBet
 00000860  E8 00000000 E					call WriteString
 00000865  8B C7						mov eax, edi
 00000867  E8 00000000 E					call writeint
 0000086C  E8 00000000 E					call CRLF

							.endif
						.elseif(SpockHandValue > 1)
 00000871  E9 00000122	   *	    jmp    @C00F9
 00000876		   *@C00F4:
 00000876  83 3D 000000DE R
	   01		   *	    cmp    SpockHandValue, 001h
 0000087D  76 7A	   *	    jbe    @C00FA
							.if(ChipsSpock < 50)
 0000087F  83 3D 0000012B R
	   32		   *	    cmp    ChipsSpock, 032h
 00000886  73 39	   *	    jae    @C00FC
 00000888  8B 3D 0000012B R					mov edi, ChipsSpock
 0000088E  29 3D 0000012B R					sub ChipsSpock, edi
 00000894  89 3D 000000AA R					mov SpockBet,edi
 0000089A  01 3D 0000012F R					add ChipsTable, edi
 000008A0  89 3D 000000A2 R					mov ChipsCall, edi

 000008A6  BA 000001FE R					mov edx, OFFSET PromptSpockBet
 000008AB  E8 00000000 E					call WriteString
 000008B0  8B C7						mov eax, edi
 000008B2  E8 00000000 E					call writeint
 000008B7  E8 00000000 E					call CRLF

							.else
 000008BC  E9 000000D7	   *	    jmp    @C00FE
 000008C1		   *@C00FC:
 000008C1  BF 00000032						mov edi, 50
 000008C6  29 3D 0000012B R					sub ChipsSpock, edi
 000008CC  89 3D 000000AA R					mov SpockBet,edi
 000008D2  01 3D 0000012F R					add ChipsTable, edi
 000008D8  89 3D 000000A2 R					mov ChipsCall, edi

 000008DE  BA 000001FE R					mov edx, OFFSET PromptSpockBet
 000008E3  E8 00000000 E					call WriteString
 000008E8  8B C7						mov eax, edi
 000008EA  E8 00000000 E					call writeint
 000008EF  E8 00000000 E					call CRLF

							.endif
						.elseif(HighCardS > 4)
 000008F4  E9 0000009F	   *	    jmp    @C00FF
 000008F9		   *@C00FA:
 000008F9  80 3D 00000078 R
	   04		   *	    cmp    HighCards, 004h
 00000900  76 74	   *	    jbe    @C0100
							.if(ChipsSpock < 25)
 00000902  83 3D 0000012B R
	   19		   *	    cmp    ChipsSpock, 019h
 00000909  73 36	   *	    jae    @C0102
 0000090B  8B 3D 0000012B R					mov edi, ChipsSpock
 00000911  29 3D 0000012B R					sub ChipsSpock, edi
 00000917  89 3D 000000AA R					mov SpockBet,edi
 0000091D  01 3D 0000012F R					add ChipsTable, edi
 00000923  89 3D 000000A2 R					mov ChipsCall, edi

 00000929  BA 000001FE R					mov edx, OFFSET PromptSpockBet
 0000092E  E8 00000000 E					call WriteString
 00000933  8B C7						mov eax, edi
 00000935  E8 00000000 E					call writeint
 0000093A  E8 00000000 E					call CRLF

							.else
 0000093F  EB 57	   *	    jmp    @C0104
 00000941		   *@C0102:
 00000941  BF 00000019						mov edi, 25
 00000946  29 3D 0000012B R					sub ChipsSpock, edi
 0000094C  89 3D 000000AA R					mov SpockBet, edi
 00000952  01 3D 0000012F R					add ChipsTable, edi
 00000958  89 3D 000000A2 R					mov ChipsCall, edi

 0000095E  BA 000001FE R					mov edx, OFFSET PromptSpockBet
 00000963  E8 00000000 E					call WriteString
 00000968  8B C7						mov eax, edi
 0000096A  E8 00000000 E					call writeint
 0000096F  E8 00000000 E					call CRLF

							.endif
						.elseif(HighCardS < 5)
 00000974  EB 22	   *	    jmp    @C0105
 00000976		   *@C0100:
 00000976  80 3D 00000078 R
	   05		   *	    cmp    HighCards, 005h
 0000097D  73 19	   *	    jae    @C0106
 0000097F  C7 05 000000B2 R				mov FoldS, 1
	   00000001

 00000989  BA 00000226 R				mov edx, OFFSET PromptSpockFold
 0000098E  E8 00000000 E				call WriteString
 00000993  E8 00000000 E				call CRLF
						.endif

 00000998		   *@C0106:
 00000998		   *@C0105:
 00000998		   *@C00FF:
 00000998		   *@C00F9:
 00000998		   *@C00F3:
 00000998		   *@C00F8:
 00000998		   *@C00FE:
 00000998		   *@C0104:
 00000998  BA 00000260 R			mov edx, OFFSET PromptPlayerSecond
 0000099D  E8 00000000 E			call WriteString
 000009A2  E8 00000000 E			call CRLF
 000009A7						BadInput1:
 000009A7  E8 00000000 E					Call ReadInt
									.if(eax==1)
 000009AC  83 F8 01	   *	    cmp    eax, 001h
 000009AF  75 7D	   *	    jne    @C0108
 000009B1  BA 000002A0 R							mov edx, OFFSET PromptPlayerRaise
 000009B6  E8 00000000 E							Call WriteString
 000009BB  E8 00000000 E							call readint
 000009C0  E8 00000000 E							call CRLF
 000009C5  A3 000000A2 R							mov ChipsCall, eax
 000009CA  8B 35 000000A2 R							mov esi, ChipsCall
 000009D0  03 C6								add eax, esi
 000009D2  29 05 00000127 R							sub ChipsPlayer, eax
 000009D8  01 05 0000012F R							add ChipsTable, eax
 000009DE  8B 35 000000AA R							mov esi, SpockBet
 000009E4  2B C6								sub eax, esi
											.if(ChipsSpock < eax)
 000009E6  39 05 0000012B R *	    cmp    ChipsSpock, eax
 000009EC  73 1F	   *	    jae    @C010A
 000009EE  C7 05 000000B2 R									mov FoldS, 1
	   00000001
 000009F8  BA 00000226 R									mov edx, OFFSET PromptSpockFold
 000009FD  E8 00000000 E									call WriteString
 00000A02  E8 00000000 E									call CRLF
 00000A07  C3											ret
											.else
 00000A08  E9 000003BC	   *	    jmp    @C010C
 00000A0D		   *@C010A:
 00000A0D  29 05 0000012B R									sub ChipsSpock, eax
 00000A13  01 05 0000012F R									add ChipsTable, eax
 00000A19  BA 0000021A R									mov edx, OFFSET PromptSpockCall
 00000A1E  E8 00000000 E									Call WriteString
 00000A23  E8 00000000 E									call CRLF
 00000A28  C3											ret
											.endif
									.elseif(eax==2)
 00000A29  E9 0000039B	   *	    jmp    @C010D
 00000A2E		   *@C0108:
 00000A2E  83 F8 02	   *	    cmp    eax, 002h
 00000A31  75 26	   *	    jne    @C010E
 00000A33  BA 000002B3 R							mov edx, OFFSET PromptPlayerCall
 00000A38  E8 00000000 E							Call WriteString
 00000A3D  E8 00000000 E							call CRLF
 00000A42  A1 000000A2 R							mov eax, ChipsCall
 00000A47  29 05 00000127 R							sub ChipsPlayer, eax
 00000A4D  01 05 0000012F R							add ChipsTable, eax
 00000A53  C3									ret
									.elseif(eax==0)
 00000A54  E9 00000370	   *	    jmp    @C0110
 00000A59		   *@C010E:
 00000A59  0B C0	   *	    or	eax, eax
 00000A5B  75 1F	   *	    jne    @C0111
 00000A5D  C7 05 000000B6 R							mov FoldP, 1
	   00000001
 00000A67  BA 000002B8 R							mov edx, OFFSET PromptPlayerFold
 00000A6C  E8 00000000 E							call WriteString
 00000A71  E8 00000000 E							call CRLF
 00000A76  C3									ret
									.else
 00000A77  E9 0000034D	   *	    jmp    @C0113
 00000A7C		   *@C0111:
 00000A7C  BA 000001BE R							mov edx, OFFSET PromptBadInput
 00000A81  E8 00000000 E							Call WriteString
 00000A86  E8 00000000 E							call CRLF
 00000A8B  E9 FFFFFF17								jmp BadInput1
									.endif
					
					.elseif(BigBlind==0)												;player turn
 00000A90  E9 00000334	   *	    jmp    @C0114
 00000A95		   *@C00EF:
 00000A95  83 3D 00000133 R
	   00		   *	    cmp    BigBlind, 000h
 00000A9C  0F 85 00000327  *	    jne    @C0115
 00000AA2  BA 00000290 R			mov edx, OFFSET PromptPlayerTurn
 00000AA7  E8 00000000 E			call WriteString
 00000AAC  E8 00000000 E			call CRLF
 00000AB1  BA 00000232 R			mov edx, OFFSET PromptPlayerBet
 00000AB6  E8 00000000 E			call WriteString
 00000ABB  E8 00000000 E			call CRLF
 00000AC0						BadInput:
 00000AC0  E8 00000000 E					Call ReadInt
									.if(eax==1)
 00000AC5  83 F8 01	   *	    cmp    eax, 001h
 00000AC8  0F 85 0000029F  *	    jne    @C0117
 00000ACE  BA 000002A0 R							mov edx, OFFSET PromptPlayerRaise
 00000AD3  E8 00000000 E							Call WriteString
 00000AD8  E8 00000000 E							call readint
 00000ADD  E8 00000000 E							call CRLF
 00000AE2  29 05 00000127 R							sub ChipsPlayer, eax
 00000AE8  01 05 0000012F R							add ChipsTable, eax
 00000AEE  A3 000000A2 R							mov ChipsCall, eax
 00000AF3  83 C0 64								add eax, 100

											.if(ChipsSpock < edi)
 00000AF6  39 3D 0000012B R *	    cmp    ChipsSpock, edi
 00000AFC  73 1F	   *	    jae    @C0119
 00000AFE  C7 05 000000B2 R									mov FoldS, 1
	   00000001
 00000B08  BA 00000226 R									mov edx, OFFSET PromptSpockFold
 00000B0D  E8 00000000 E									call WriteString
 00000B12  E8 00000000 E									call CRLF
 00000B17  C3											ret
											.elseif(SpockHandValue < 1)
 00000B18  E9 0000024D	   *	    jmp    @C011B
 00000B1D		   *@C0119:
 00000B1D  83 3D 000000DE R
	   01		   *	    cmp    SpockHandValue, 001h
 00000B24  0F 83 00000216  *	    jae    @C011C
														.if(SpockHandValue > 8)
 00000B2A  83 3D 000000DE R
	   08		   *	    cmp    SpockHandValue, 008h
 00000B31  76 3C	   *	    jbe    @C011E
 00000B33  8B 3D 000000A2 R												mov edi, ChipsCall
 00000B39  83 C7 32													add edi, 50
 00000B3C  29 3D 0000012B R												sub ChipsSpock, edi
 00000B42  89 3D 000000AA R												mov SpockBet,edi
 00000B48  01 3D 0000012F R												add ChipsTable, edi
 00000B4E  89 3D 000000A2 R												mov ChipsCall, edi
							
 00000B54  BA 000001FE R												mov edx, OFFSET PromptSpockBet
 00000B59  E8 00000000 E												call WriteString
 00000B5E  8B C7													mov eax, edi
 00000B60  E8 00000000 E												call writeint
 00000B65  E8 00000000 E												call CRLF

														.elseif(SpockHandValue > 4)
 00000B6A  E9 000001FB	   *	    jmp    @C0120
 00000B6F		   *@C011E:
 00000B6F  83 3D 000000DE R
	   04		   *	    cmp    SpockHandValue, 004h
 00000B76  0F 86 0000008B  *	    jbe    @C0121
 00000B7C  8B 3D 000000A2 R												mov edi, ChipsCall
 00000B82  83 C7 32													add edi, 50
															.if(ChipsSpock < edi)
 00000B85  39 3D 0000012B R *	    cmp    ChipsSpock, edi
 00000B8B  73 42	   *	    jae    @C0123
 00000B8D  8B 3D 0000012B R													mov edi, ChipsSpock
 00000B93  8B 3D 000000A2 R													mov edi, ChipsCall
 00000B99  83 C7 32														add edi, 50
 00000B9C  29 3D 0000012B R													sub ChipsSpock, edi
 00000BA2  89 3D 000000AA R													mov SpockBet,edi
 00000BA8  01 3D 0000012F R													add ChipsTable, edi
 00000BAE  89 3D 000000A2 R													mov ChipsCall, edi
							
 00000BB4  BA 000001FE R													mov edx, OFFSET PromptSpockBet
 00000BB9  E8 00000000 E													call WriteString
 00000BBE  8B C7														mov eax, edi
 00000BC0  E8 00000000 E													call writeint
 00000BC5  E8 00000000 E													call CRLF		
							
															.else
 00000BCA  E9 0000019B	   *	    jmp    @C0125
 00000BCF		   *@C0123:
 00000BCF  BF 00000032														mov edi, 50
 00000BD4  29 3D 0000012B R													sub ChipsSpock, edi
 00000BDA  89 3D 000000AA R													mov SpockBet,edi
 00000BE0  01 3D 0000012F R													add ChipsTable, edi
 00000BE6  89 3D 000000A2 R													mov ChipsCall, edi

 00000BEC  BA 000001FE R													mov edx, OFFSET PromptSpockBet
 00000BF1  E8 00000000 E													call WriteString
 00000BF6  8B C7														mov eax, edi
 00000BF8  E8 00000000 E													call writeint
 00000BFD  E8 00000000 E													call CRLF

															.endif
														.elseif(SpockHandValue > 1)
 00000C02  E9 00000163	   *	    jmp    @C0126
 00000C07		   *@C0121:
 00000C07  83 3D 000000DE R
	   01		   *	    cmp    SpockHandValue, 001h
 00000C0E  0F 86 00000082  *	    jbe    @C0127
 00000C14  8B 3D 000000A2 R												mov edi, ChipsCall
 00000C1A  83 C7 19													add edi, 25
															.if(ChipsSpock < edi)
 00000C1D  39 3D 0000012B R *	    cmp    ChipsSpock, edi
 00000C23  73 39	   *	    jae    @C0129
 00000C25  8B 3D 0000012B R													mov edi, ChipsSpock
 00000C2B  29 3D 0000012B R													sub ChipsSpock, edi
 00000C31  89 3D 000000AA R													mov SpockBet,edi
 00000C37  01 3D 0000012F R													add ChipsTable, edi
 00000C3D  89 3D 000000A2 R													mov ChipsCall, edi

 00000C43  BA 000001FE R													mov edx, OFFSET PromptSpockBet
 00000C48  E8 00000000 E													call WriteString
 00000C4D  8B C7														mov eax, edi
 00000C4F  E8 00000000 E													call writeint
 00000C54  E8 00000000 E													call CRLF

															.else
 00000C59  E9 0000010C	   *	    jmp    @C012B
 00000C5E		   *@C0129:
 00000C5E  BF 00000019														mov edi, 25
 00000C63  29 3D 0000012B R													sub ChipsSpock, edi
 00000C69  89 3D 000000AA R													mov SpockBet,edi
 00000C6F  01 3D 0000012F R													add ChipsTable, edi
 00000C75  89 3D 000000A2 R													mov ChipsCall, edi

 00000C7B  BA 000001FE R													mov edx, OFFSET PromptSpockBet
 00000C80  E8 00000000 E													call WriteString
 00000C85  8B C7														mov eax, edi
 00000C87  E8 00000000 E													call writeint
 00000C8C  E8 00000000 E													call CRLF

															.endif
														.elseif(HighCardS > 4)
 00000C91  E9 000000D4	   *	    jmp    @C012C
 00000C96		   *@C0127:
 00000C96  80 3D 00000078 R
	   04		   *	    cmp    HighCards, 004h
 00000C9D  76 7D	   *	    jbe    @C012D
 00000C9F  8B 3D 000000A2 R											mov edi, ChipsCall
															.if(ChipsSpock < edi)
 00000CA5  39 3D 0000012B R *	    cmp    ChipsSpock, edi
 00000CAB  73 39	   *	    jae    @C012F
 00000CAD  8B 3D 0000012B R													mov edi, ChipsSpock
 00000CB3  29 3D 0000012B R													sub ChipsSpock, edi
 00000CB9  89 3D 000000AA R													mov SpockBet,edi
 00000CBF  01 3D 0000012F R													add ChipsTable, edi
 00000CC5  89 3D 000000A2 R													mov ChipsCall, edi

 00000CCB  BA 0000021A R													mov edx, OFFSET PromptSpockCall
 00000CD0  E8 00000000 E													call WriteString
 00000CD5  8B C7														mov eax, edi
 00000CD7  E8 00000000 E													call writeint
 00000CDC  E8 00000000 E													call CRLF

															.else
 00000CE1  E9 00000084	   *	    jmp    @C0131
 00000CE6		   *@C012F:
 00000CE6  8B 3D 000000A2 R													mov edi, ChipsCall
 00000CEC  29 3D 0000012B R													sub ChipsSpock, edi
 00000CF2  89 3D 000000AA R													mov SpockBet, edi
 00000CF8  01 3D 0000012F R													add ChipsTable, edi
 00000CFE  89 3D 000000A2 R													mov ChipsCall, edi

 00000D04  BA 0000021A R													mov edx, OFFSET PromptSpockCall
 00000D09  E8 00000000 E													call WriteString
 00000D0E  8B C7														mov eax, edi
 00000D10  E8 00000000 E													call writeint
 00000D15  E8 00000000 E													call CRLF
								
															.endif
														.elseif(HighCardS < 5)
 00000D1A  EB 4E	   *	    jmp    @C0132
 00000D1C		   *@C012D:
 00000D1C  80 3D 00000078 R
	   05		   *	    cmp    HighCards, 005h
 00000D23  73 45	   *	    jae    @C0133
 00000D25  C7 05 000000B2 R												mov FoldS, 1
	   00000001
 00000D2F  BA 00000226 R												mov edx, OFFSET PromptSpockFold
 00000D34  E8 00000000 E												call WriteString
 00000D39  E8 00000000 E												call CRLF
														.endif
											
											.elseif(SpockHandValue > 0)
 00000D3E  EB 2A	   *	    jmp    @C0135
 00000D40		   *@C011C:
 00000D40  83 3D 000000DE R
	   00		   *	    cmp    SpockHandValue, 000h
 00000D47  76 21	   *	    jbe    @C0136
 00000D49  8B 3D 000000A2 R									mov edi, ChipsCall
 00000D4F  29 3D 0000012B R									sub ChipsSpock, edi
 00000D55  01 3D 0000012F R									add ChipsTable, edi
 00000D5B  BA 0000021A R									mov edx, OFFSET PromptSpockCall
 00000D60  E8 00000000 E									call WriteString
 00000D65  E8 00000000 E									call CRLF			

											.endif
 00000D6A		   *@C0136:
 00000D6A		   *@C0135:
 00000D6A		   *@C011B:
 00000D6A		   *@C0133:
 00000D6A		   *@C0132:
 00000D6A		   *@C012C:
 00000D6A		   *@C0126:
 00000D6A		   *@C0120:
 00000D6A		   *@C0125:
 00000D6A		   *@C012B:
 00000D6A		   *@C0131:
 00000D6A  C3									ret

									.elseif(eax==2)
 00000D6B  EB 5C	   *	    jmp    @C0138
 00000D6D		   *@C0117:
 00000D6D  83 F8 02	   *	    cmp    eax, 002h
 00000D70  75 23	   *	    jne    @C0139
 00000D72  BA 000002B3 R							mov edx, OFFSET PromptPlayerCall
 00000D77  E8 00000000 E							Call WriteString
 00000D7C  E8 00000000 E							call CRLF
 00000D81  A1 000000A2 R							mov eax, ChipsCall
 00000D86  29 05 00000127 R							sub ChipsPlayer, eax
 00000D8C  01 05 0000012F R							add ChipsTable, eax
 00000D92  C3									ret
									.elseif(eax==0)
 00000D93  EB 34	   *	    jmp    @C013B
 00000D95		   *@C0139:
 00000D95  0B C0	   *	    or	eax, eax
 00000D97  75 1C	   *	    jne    @C013C
 00000D99  C7 05 000000B6 R							mov FoldP, 1
	   00000001
 00000DA3  BA 000002B8 R							mov edx, OFFSET PromptPlayerFold
 00000DA8  E8 00000000 E							call WriteString
 00000DAD  E8 00000000 E							call CRLF
 00000DB2  C3									ret
									.else
 00000DB3  EB 14	   *	    jmp    @C013E
 00000DB5		   *@C013C:
 00000DB5  BA 000001BE R							mov edx, OFFSET PromptBadInput
 00000DBA  E8 00000000 E							Call WriteString
 00000DBF  E8 00000000 E							call CRLF
 00000DC4  E9 FFFFFCF7								jmp BadInput
									.endif
				.endif
 00000DC9		   *@C013E:
 00000DC9		   *@C013B:
 00000DC9		   *@C0138:
 00000DC9		   *@C0115:
 00000DC9		   *@C0114:
 00000DC9		   *@C00EE:
 00000DC9		   *@C00EB:
 00000DC9		   *@C0113:
 00000DC9		   *@C0110:
 00000DC9		   *@C010D:
 00000DC9		   *@C010C:


 00000DC9  C3				ret
 00000DCA			Bid ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000DCA			HandValue PROC

 00000DCA  C7 05 00000032 R	mov isSpadeP, 0
	   00000000
 00000DD4  C7 05 00000036 R	mov isHeartP, 0
	   00000000
 00000DDE  C7 05 0000003A R	mov isClubP, 0
	   00000000
 00000DE8  C7 05 0000003E R	mov isDimondP, 0
	   00000000
 00000DF2  C7 05 00000042 R	mov isFlushP, 0
	   00000000
 00000DFC  C7 05 00000046 R	mov isSpadeS, 0
	   00000000
 00000E06  C7 05 0000004A R	mov isHeartS, 0
	   00000000
 00000E10  C7 05 0000004E R	mov isClubS, 0
	   00000000
 00000E1A  C7 05 00000052 R	mov isDimondS, 0
	   00000000
 00000E24  C7 05 00000056 R	mov isFlushS, 0
	   00000000
 00000E2E  C7 05 0000005A R	mov isStraightS, 0
	   00000000
 00000E38  C7 05 0000005E R	mov isStraightP, 0
	   00000000

 00000E42  C7 05 00000062 R	mov RFp, 0
	   00000000
 00000E4C  C7 05 00000066 R	mov RFs, 0
	   00000000
 00000E56  C6 05 0000006A R	mov HighFourS, 0
	   00
 00000E5D  C6 05 0000006B R	mov HighFourP, 0
	   00
 00000E64  C6 05 0000006C R	mov HighThreeS, 0
	   00
 00000E6B  C6 05 0000006D R	mov HighThreeP, 0
	   00
 00000E72  C6 05 0000006E R	mov High2PairS, 0
	   00
 00000E79  C6 05 0000006F R	mov High2PairP, 0
	   00
 00000E80  C6 05 00000070 R	mov Low2PairS, 0
	   00
 00000E87  C6 05 00000071 R	mov Low2PairP, 0
	   00
 00000E8E  C6 05 00000072 R	mov PairS, 0
	   00
 00000E95  C6 05 00000073 R	mov PairP, 0
	   00
 00000E9C  C6 05 00000074 R	mov HighPairS, 0
	   00
 00000EA3  C6 05 00000075 R	mov HighPairP, 0
	   00
 00000EAA  C6 05 00000076 R	mov HighSts, 0
	   00
 00000EB1  C6 05 00000077 R	mov HighStp, 0
	   00
 00000EB8  C6 05 00000078 R	mov HighCards, 0
	   00
 00000EBF  C6 05 00000079 R	mov HighCardp, 0
	   00

 00000EC6  C7 05 0000007A R	mov PlayerRoyal, 0
	   00000000
 00000ED0  C7 05 0000007E R	mov PlayerStraightFlush, 0
	   00000000
 00000EDA  C7 05 00000082 R	mov PlayerFour, 0
	   00000000
 00000EE4  C7 05 00000086 R	mov PlayerFull, 0
	   00000000
 00000EEE  C7 05 0000008A R	mov PlayerFlush, 0
	   00000000
 00000EF8  C7 05 0000008E R	mov PlayerStraight, 0
	   00000000
 00000F02  C7 05 00000092 R	mov PlayerThree, 0
	   00000000
 00000F0C  C7 05 00000096 R	mov PlayerTwoPair, 0
	   00000000
 00000F16  C7 05 0000009A R	mov PlayerOnePair, 0
	   00000000
 00000F20  C7 05 0000009E R	mov PlayerHandValue, 0
	   00000000

 00000F2A  C7 05 000000BA R	mov SpockRoyal, 0
	   00000000
 00000F34  C7 05 000000BE R	mov SpockStraightFlush, 0
	   00000000
 00000F3E  C7 05 000000C2 R	mov SpockFour, 0
	   00000000
 00000F48  C7 05 000000C6 R	mov SpockFull, 0
	   00000000
 00000F52  C7 05 000000CA R	mov SpockFlush, 0
	   00000000
 00000F5C  C7 05 000000CE R	mov SpockStraight, 0
	   00000000
 00000F66  C7 05 000000D2 R	mov SpockThree, 0
	   00000000
 00000F70  C7 05 000000D6 R	mov SpockTwoPair, 0
	   00000000
 00000F7A  C7 05 000000DA R	mov SpockOnePair, 0
	   00000000
 00000F84  C7 05 000000DE R	mov SpockHandValue, 0
	   00000000

 00000F8E  E8 000002BB			call IsAFlush
 00000F93  E8 000006BD			call IsAStraight
 00000F98  E8 00001D8F			call FourKind
 00000F9D  E8 00001EB0			call ThreeKind
 00000FA2  E8 00001F9E			call TwoPair
 00000FA7  E8 00001E6D			call FullHouse
 00000FAC  E8 0000206D			Call HighCard

					.if(SpockRoyal > 0)
 00000FB1  83 3D 000000BA R
	   00		   *	    cmp    SpockRoyal, 000h
 00000FB8  76 0F	   *	    jbe    @C013F
 00000FBA  C7 05 000000DE R			mov SpockHandValue, 9
	   00000009
						.elseif(SpockStraightFlush > 0)
 00000FC4  E9 000000B8	   *	    jmp    @C0141
 00000FC9		   *@C013F:
 00000FC9  83 3D 000000BE R
	   00		   *	    cmp    SpockStraightFlush, 000h
 00000FD0  76 0F	   *	    jbe    @C0142
 00000FD2  C7 05 000000DE R				mov SpockHandValue, 8
	   00000008
						.elseif(SpockFour > 0)
 00000FDC  E9 000000A0	   *	    jmp    @C0144
 00000FE1		   *@C0142:
 00000FE1  83 3D 000000C2 R
	   00		   *	    cmp    SpockFour, 000h
 00000FE8  76 0F	   *	    jbe    @C0145
 00000FEA  C7 05 000000DE R				mov SpockHandValue, 7
	   00000007
						.elseif(SpockFull > 0)
 00000FF4  E9 00000088	   *	    jmp    @C0147
 00000FF9		   *@C0145:
 00000FF9  83 3D 000000C6 R
	   00		   *	    cmp    SpockFull, 000h
 00001000  76 0C	   *	    jbe    @C0148
 00001002  C7 05 000000DE R				mov SpockHandValue, 6
	   00000006
						.elseif(SpockFlush > 0)
 0000100C  EB 73	   *	    jmp    @C014A
 0000100E		   *@C0148:
 0000100E  83 3D 000000CA R
	   00		   *	    cmp    SpockFlush, 000h
 00001015  76 0C	   *	    jbe    @C014B
 00001017  C7 05 000000DE R				mov SpockHandValue, 5
	   00000005
						.elseif(SpockStraight > 0)
 00001021  EB 5E	   *	    jmp    @C014D
 00001023		   *@C014B:
 00001023  83 3D 000000CE R
	   00		   *	    cmp    SpockStraight, 000h
 0000102A  76 0C	   *	    jbe    @C014E
 0000102C  C7 05 000000DE R				mov SpockHandValue, 4
	   00000004
						.elseif(SpockThree > 0)
 00001036  EB 49	   *	    jmp    @C0150
 00001038		   *@C014E:
 00001038  83 3D 000000D2 R
	   00		   *	    cmp    SpockThree, 000h
 0000103F  76 0C	   *	    jbe    @C0151
 00001041  C7 05 000000DE R				mov SpockHandValue, 3
	   00000003
						.elseif(SpockTwoPair > 0)
 0000104B  EB 34	   *	    jmp    @C0153
 0000104D		   *@C0151:
 0000104D  83 3D 000000D6 R
	   00		   *	    cmp    SpockTwoPair, 000h
 00001054  76 0C	   *	    jbe    @C0154
 00001056  C7 05 000000DE R				mov SpockHandValue, 2
	   00000002
						.elseif(SpockOnePair > 0)
 00001060  EB 1F	   *	    jmp    @C0156
 00001062		   *@C0154:
 00001062  83 3D 000000DA R
	   00		   *	    cmp    SpockOnePair, 000h
 00001069  76 0C	   *	    jbe    @C0157
 0000106B  C7 05 000000DE R				mov SpockHandValue, 1
	   00000001
						.else
 00001075  EB 0A	   *	    jmp    @C0159
 00001077		   *@C0157:
 00001077  C7 05 000000DE R				mov SpockHandValue,0
	   00000000
					.endif
 00001081		   *@C0159:
 00001081		   *@C0156:
 00001081		   *@C0153:
 00001081		   *@C0150:
 00001081		   *@C014D:
 00001081		   *@C014A:
 00001081		   *@C0147:
 00001081		   *@C0144:
 00001081		   *@C0141:

					.if(PlayerRoyal > 0)
 00001081  83 3D 0000007A R
	   00		   *	    cmp    PlayerRoyal, 000h
 00001088  76 0F	   *	    jbe    @C015A
 0000108A  C7 05 0000009E R			mov PlayerHandValue, 9
	   00000009
						.elseif(PlayerStraightFlush > 0)
 00001094  E9 000000B8	   *	    jmp    @C015C
 00001099		   *@C015A:
 00001099  83 3D 0000007E R
	   00		   *	    cmp    PlayerStraightFlush, 000h
 000010A0  76 0F	   *	    jbe    @C015D
 000010A2  C7 05 0000009E R				mov PlayerHandValue, 8
	   00000008
						.elseif(PlayerFour > 0)
 000010AC  E9 000000A0	   *	    jmp    @C015F
 000010B1		   *@C015D:
 000010B1  83 3D 00000082 R
	   00		   *	    cmp    PlayerFour, 000h
 000010B8  76 0F	   *	    jbe    @C0160
 000010BA  C7 05 0000009E R				mov PlayerHandValue, 7
	   00000007
						.elseif(PlayerFull > 0)
 000010C4  E9 00000088	   *	    jmp    @C0162
 000010C9		   *@C0160:
 000010C9  83 3D 00000086 R
	   00		   *	    cmp    PlayerFull, 000h
 000010D0  76 0C	   *	    jbe    @C0163
 000010D2  C7 05 0000009E R				mov PlayerHandValue, 6
	   00000006
						.elseif(PlayerFlush > 0)
 000010DC  EB 73	   *	    jmp    @C0165
 000010DE		   *@C0163:
 000010DE  83 3D 0000008A R
	   00		   *	    cmp    PlayerFlush, 000h
 000010E5  76 0C	   *	    jbe    @C0166
 000010E7  C7 05 0000009E R				mov PlayerHandValue, 5
	   00000005
						.elseif(PlayerStraight > 0)
 000010F1  EB 5E	   *	    jmp    @C0168
 000010F3		   *@C0166:
 000010F3  83 3D 0000008E R
	   00		   *	    cmp    PlayerStraight, 000h
 000010FA  76 0C	   *	    jbe    @C0169
 000010FC  C7 05 0000009E R				mov PlayerHandValue, 4
	   00000004
						.elseif(PlayerThree > 0)
 00001106  EB 49	   *	    jmp    @C016B
 00001108		   *@C0169:
 00001108  83 3D 00000092 R
	   00		   *	    cmp    PlayerThree, 000h
 0000110F  76 0C	   *	    jbe    @C016C
 00001111  C7 05 0000009E R				mov PlayerHandValue, 3
	   00000003
						.elseif(PlayerTwoPair > 0)
 0000111B  EB 34	   *	    jmp    @C016E
 0000111D		   *@C016C:
 0000111D  83 3D 00000096 R
	   00		   *	    cmp    PlayerTwoPair, 000h
 00001124  76 0C	   *	    jbe    @C016F
 00001126  C7 05 0000009E R				mov PlayerHandValue, 2
	   00000002
						.elseif(PlayerOnePair > 0)
 00001130  EB 1F	   *	    jmp    @C0171
 00001132		   *@C016F:
 00001132  83 3D 0000009A R
	   00		   *	    cmp    PlayerOnePair, 000h
 00001139  76 0C	   *	    jbe    @C0172
 0000113B  C7 05 0000009E R				mov PlayerHandValue, 1
	   00000001
						.else
 00001145  EB 0A	   *	    jmp    @C0174
 00001147		   *@C0172:
 00001147  C7 05 0000009E R				mov PlayerHandValue,0
	   00000000
					.endif 
 00001151		   *@C0174:
 00001151		   *@C0171:
 00001151		   *@C016E:
 00001151		   *@C016B:
 00001151		   *@C0168:
 00001151		   *@C0165:
 00001151		   *@C0162:
 00001151		   *@C015F:
 00001151		   *@C015C:

 00001151  C3				ret
 00001152			HandValue ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001152			CompareHand Proc



 00001152  E8 FFFFFC73			Call HandValue
 00001157  8B 35 0000009E R		mov esi, PlayerHandValue
 0000115D  8B 3D 000000DE R		mov edi, SpockHandValue

					.if(FoldS==1)
 00001163  83 3D 000000B2 R
	   01		   *	    cmp    FoldS, 001h
 0000116A  75 11	   *	    jne    @C0175
 0000116C  C7 05 000000DE R		mov SpockHandValue,0
	   00000000
 00001176  C6 05 00000078 R		mov HighCards,0
	   00
				.endif
 0000117D		   *@C0175:

				.if(FoldP==1)
 0000117D  83 3D 000000B6 R
	   01		   *	    cmp    FoldP, 001h
 00001184  75 11	   *	    jne    @C0177
 00001186  C7 05 0000009E R		mov PlayerHandValue,0
	   00000000
 00001190  C6 05 00000079 R		mov HighCardP,0
	   00
				.endif
 00001197		   *@C0177:

					.if(esi>edi)
 00001197  3B F7	   *	    cmp    esi, edi
 00001199  76 1A	   *	    jbe    @C0179
 0000119B  A1 0000012F R			mov eax, ChipsTable
 000011A0  01 05 00000127 R			add ChipsPlayer, eax
 000011A6  C7 05 0000012F R			mov ChipsTable, 0
	   00000000

					.elseif(edi>esi)
 000011B0  E9 00000084	   *	    jmp    @C017B
 000011B5		   *@C0179:
 000011B5  3B FE	   *	    cmp    edi, esi
 000011B7  76 17	   *	    jbe    @C017C
 000011B9  A1 0000012F R			mov eax, ChipsTable
 000011BE  01 05 0000012B R			add ChipsSpock, eax
 000011C4  C7 05 0000012F R			mov ChipsTable, 0
	   00000000
					.else
 000011CE  EB 69	   *	    jmp    @C017E
 000011D0		   *@C017C:
 000011D0  A0 00000079 R			mov al, HighCardp
 000011D5  8A 1D 00000078 R			mov bl, Highcards
							.if(al>bl)
 000011DB  3A C3	   *	    cmp    al, bl
 000011DD  76 17	   *	    jbe    @C017F
 000011DF  A1 0000012F R					mov eax, ChipsTable
 000011E4  01 05 00000127 R					add ChipsPlayer, eax
 000011EA  C7 05 0000012F R					mov ChipsTable, 0
	   00000000
							.elseif(bl>al)
 000011F4  EB 43	   *	    jmp    @C0181
 000011F6		   *@C017F:
 000011F6  3A D8	   *	    cmp    bl, al
 000011F8  76 17	   *	    jbe    @C0182
 000011FA  A1 0000012F R					mov eax, ChipsTable
 000011FF  01 05 0000012B R					add ChipsSpock, eax
 00001205  C7 05 0000012F R					mov ChipsTable, 0
	   00000000
							.elseif(al==bl)
 0000120F  EB 28	   *	    jmp    @C0184
 00001211		   *@C0182:
 00001211  3A C3	   *	    cmp    al, bl
 00001213  75 24	   *	    jne    @C0185
 00001215  A1 0000012F R					mov eax, ChipsTable
 0000121A  BB 00000002						mov ebx, 2
 0000121F  2B D2						sub edx, edx
 00001221  F7 F3						div ebx
 00001223  01 05 0000012B R					add ChipsSpock, eax
 00001229  01 05 00000127 R					add ChipsPlayer, eax
 0000122F  C7 05 0000012F R					mov ChipsTable, 0
	   00000000
							.endif

					.endif
 00001239		   *@C0185:
 00001239		   *@C0184:
 00001239		   *@C0181:
 00001239		   *@C017E:
 00001239		   *@C017B:
 00001239  C7 05 000000B6 R		mov FoldP, 0
	   00000000
 00001243  C7 05 000000B2 R		mov FoldS, 0
	   00000000
 0000124D  C3				ret
 0000124E			CompareHand ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000124E			IsAFlush Proc
				;Spock Check
					.if (cards1.suit == 1)
 0000124E  80 3D 00000009 R
	   01		   *	    cmp    cards1 . Suit, 001h
 00001255  75 06	   *	    jne    @C0187
 00001257  FF 05 00000046 R			inc IsSpadeS
					.endif
 0000125D		   *@C0187:
					.if (cards2.suit == 1)
 0000125D  80 3D 0000000B R
	   01		   *	    cmp    cards2 . Suit, 001h
 00001264  75 06	   *	    jne    @C0189
 00001266  FF 05 00000046 R			inc IsSpadeS
					.endif
 0000126C		   *@C0189:
					.if (cards3.suit == 1)
 0000126C  80 3D 0000000D R
	   01		   *	    cmp    cards3 . Suit, 001h
 00001273  75 06	   *	    jne    @C018B
 00001275  FF 05 00000046 R			inc IsSpadeS
					.endif
 0000127B		   *@C018B:
					.if (cards4.suit == 1)
 0000127B  80 3D 0000000F R
	   01		   *	    cmp    cards4 . Suit, 001h
 00001282  75 06	   *	    jne    @C018D
 00001284  FF 05 00000046 R			inc IsSpadeS
					.endif
 0000128A		   *@C018D:
					.if (cards5.suit == 1)
 0000128A  80 3D 00000011 R
	   01		   *	    cmp    cards5 . Suit, 001h
 00001291  75 06	   *	    jne    @C018F
 00001293  FF 05 00000046 R			inc IsSpadeS
					.endif
 00001299		   *@C018F:
					.if (cards6.suit == 1)
 00001299  80 3D 00000013 R
	   01		   *	    cmp    cards6 . Suit, 001h
 000012A0  75 06	   *	    jne    @C0191
 000012A2  FF 05 00000046 R			inc IsSpadeS
					.endif
 000012A8		   *@C0191:
					.if (cards7.suit == 1)
 000012A8  80 3D 00000015 R
	   01		   *	    cmp    cards7 . Suit, 001h
 000012AF  75 06	   *	    jne    @C0193
 000012B1  FF 05 00000046 R			inc IsSpadeS
					.endif
 000012B7		   *@C0193:

					.if (cards1.suit == 2)
 000012B7  80 3D 00000009 R
	   02		   *	    cmp    cards1 . Suit, 002h
 000012BE  75 06	   *	    jne    @C0195
 000012C0  FF 05 0000004A R			inc IsHeartS
					.endif
 000012C6		   *@C0195:
					.if (cards2.suit == 2)
 000012C6  80 3D 0000000B R
	   02		   *	    cmp    cards2 . Suit, 002h
 000012CD  75 06	   *	    jne    @C0197
 000012CF  FF 05 0000004A R			inc IsHeartS
					.endif
 000012D5		   *@C0197:
					.if (cards3.suit == 2)
 000012D5  80 3D 0000000D R
	   02		   *	    cmp    cards3 . Suit, 002h
 000012DC  75 06	   *	    jne    @C0199
 000012DE  FF 05 0000004A R			inc IsHeartS
					.endif
 000012E4		   *@C0199:
					.if (cards4.suit == 2)
 000012E4  80 3D 0000000F R
	   02		   *	    cmp    cards4 . Suit, 002h
 000012EB  75 06	   *	    jne    @C019B
 000012ED  FF 05 0000004A R			inc IsHeartS
					.endif
 000012F3		   *@C019B:
					.if (cards5.suit == 2)
 000012F3  80 3D 00000011 R
	   02		   *	    cmp    cards5 . Suit, 002h
 000012FA  75 06	   *	    jne    @C019D
 000012FC  FF 05 0000004A R			inc IsHeartS
					.endif
 00001302		   *@C019D:
					.if (cards6.suit == 2)
 00001302  80 3D 00000013 R
	   02		   *	    cmp    cards6 . Suit, 002h
 00001309  75 06	   *	    jne    @C019F
 0000130B  FF 05 0000004A R			inc IsHeartS
					.endif
 00001311		   *@C019F:
					.if (cards7.suit == 2)
 00001311  80 3D 00000015 R
	   02		   *	    cmp    cards7 . Suit, 002h
 00001318  75 06	   *	    jne    @C01A1
 0000131A  FF 05 0000004A R			inc IsHeartS
					.endif
 00001320		   *@C01A1:

					.if (cards1.suit == 3)
 00001320  80 3D 00000009 R
	   03		   *	    cmp    cards1 . Suit, 003h
 00001327  75 06	   *	    jne    @C01A3
 00001329  FF 05 0000004E R			inc IsClubS
					.endif
 0000132F		   *@C01A3:
					.if (cards2.suit == 3)
 0000132F  80 3D 0000000B R
	   03		   *	    cmp    cards2 . Suit, 003h
 00001336  75 06	   *	    jne    @C01A5
 00001338  FF 05 0000004E R			inc IsClubS
					.endif
 0000133E		   *@C01A5:
					.if (cards3.suit == 3)
 0000133E  80 3D 0000000D R
	   03		   *	    cmp    cards3 . Suit, 003h
 00001345  75 06	   *	    jne    @C01A7
 00001347  FF 05 0000004E R			inc IsClubS
					.endif
 0000134D		   *@C01A7:
					.if (cards4.suit == 3)
 0000134D  80 3D 0000000F R
	   03		   *	    cmp    cards4 . Suit, 003h
 00001354  75 06	   *	    jne    @C01A9
 00001356  FF 05 0000004E R			inc IsClubS
					.endif
 0000135C		   *@C01A9:
					.if (cards5.suit == 3)
 0000135C  80 3D 00000011 R
	   03		   *	    cmp    cards5 . Suit, 003h
 00001363  75 06	   *	    jne    @C01AB
 00001365  FF 05 0000004E R			inc IsClubS
					.endif
 0000136B		   *@C01AB:
					.if (cards6.suit == 3)
 0000136B  80 3D 00000013 R
	   03		   *	    cmp    cards6 . Suit, 003h
 00001372  75 06	   *	    jne    @C01AD
 00001374  FF 05 0000004E R			inc IsClubS
					.endif
 0000137A		   *@C01AD:
					.if (cards7.suit == 3)
 0000137A  80 3D 00000015 R
	   03		   *	    cmp    cards7 . Suit, 003h
 00001381  75 06	   *	    jne    @C01AF
 00001383  FF 05 0000004E R			inc IsClubS
					.endif
 00001389		   *@C01AF:

					.if (cards1.suit == 4)
 00001389  80 3D 00000009 R
	   04		   *	    cmp    cards1 . Suit, 004h
 00001390  75 06	   *	    jne    @C01B1
 00001392  FF 05 00000052 R			inc IsDimondS
					.endif
 00001398		   *@C01B1:
					.if (cards2.suit == 4)
 00001398  80 3D 0000000B R
	   04		   *	    cmp    cards2 . Suit, 004h
 0000139F  75 06	   *	    jne    @C01B3
 000013A1  FF 05 00000052 R			inc IsDimondS
					.endif
 000013A7		   *@C01B3:
					.if (cards3.suit == 4)
 000013A7  80 3D 0000000D R
	   04		   *	    cmp    cards3 . Suit, 004h
 000013AE  75 06	   *	    jne    @C01B5
 000013B0  FF 05 00000052 R			inc IsDimondS
					.endif
 000013B6		   *@C01B5:
					.if (cards4.suit == 4)
 000013B6  80 3D 0000000F R
	   04		   *	    cmp    cards4 . Suit, 004h
 000013BD  75 06	   *	    jne    @C01B7
 000013BF  FF 05 00000052 R			inc IsDimondS
					.endif
 000013C5		   *@C01B7:
					.if (cards5.suit == 4)
 000013C5  80 3D 00000011 R
	   04		   *	    cmp    cards5 . Suit, 004h
 000013CC  75 06	   *	    jne    @C01B9
 000013CE  FF 05 00000052 R			inc IsDimondS
					.endif
 000013D4		   *@C01B9:
					.if (cards6.suit == 4)
 000013D4  80 3D 00000013 R
	   04		   *	    cmp    cards6 . Suit, 004h
 000013DB  75 06	   *	    jne    @C01BB
 000013DD  FF 05 00000052 R			inc IsDimondS
					.endif
 000013E3		   *@C01BB:
					.if (cards7.suit == 4)
 000013E3  80 3D 00000015 R
	   04		   *	    cmp    cards7 . Suit, 004h
 000013EA  75 06	   *	    jne    @C01BD
 000013EC  FF 05 00000052 R			inc IsDimondS
					.endif
 000013F2		   *@C01BD:

					.if(IsSpadeS>4)
 000013F2  83 3D 00000046 R
	   04		   *	    cmp    isSpadeS, 004h
 000013F9  76 0A	   *	    jbe    @C01BF
 000013FB  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 00001405		   *@C01BF:
					.if(IsHeartS>4)
 00001405  83 3D 0000004A R
	   04		   *	    cmp    isHeartS, 004h
 0000140C  76 0A	   *	    jbe    @C01C1
 0000140E  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 00001418		   *@C01C1:
					.if(IsClubS>4)
 00001418  83 3D 0000004E R
	   04		   *	    cmp    isClubS, 004h
 0000141F  76 0A	   *	    jbe    @C01C3
 00001421  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 0000142B		   *@C01C3:
					.if(IsDimondS>4)
 0000142B  83 3D 00000052 R
	   04		   *	    cmp    isDimondS, 004h
 00001432  76 0A	   *	    jbe    @C01C5
 00001434  C7 05 00000056 R			mov isFlushS, 1
	   00000001
					.endif
 0000143E		   *@C01C5:
					.if(isFlushS>0)
 0000143E  83 3D 00000056 R
	   00		   *	    cmp    isFlushS, 000h
 00001445  76 0A	   *	    jbe    @C01C7
 00001447  C7 05 000000CA R			mov SpockFlush,1
	   00000001
					.endif
 00001451		   *@C01C7:

				;Player Check
					.if (cardp1.suit == 1)
 00001451  80 3D 00000017 R
	   01		   *	    cmp    cardp1 . Suit, 001h
 00001458  75 06	   *	    jne    @C01C9
 0000145A  FF 05 00000032 R			inc IsSpadeP
					.endif
 00001460		   *@C01C9:
					.if (cardp2.suit == 1)
 00001460  80 3D 00000019 R
	   01		   *	    cmp    cardp2 . Suit, 001h
 00001467  75 06	   *	    jne    @C01CB
 00001469  FF 05 00000032 R			inc IsSpadeP
					.endif
 0000146F		   *@C01CB:
					.if (cardp3.suit == 1)
 0000146F  80 3D 0000001B R
	   01		   *	    cmp    cardp3 . Suit, 001h
 00001476  75 06	   *	    jne    @C01CD
 00001478  FF 05 00000032 R			inc IsSpadeP
					.endif
 0000147E		   *@C01CD:
					.if (cardp4.suit == 1)
 0000147E  80 3D 0000001D R
	   01		   *	    cmp    cardp4 . Suit, 001h
 00001485  75 06	   *	    jne    @C01CF
 00001487  FF 05 00000032 R			inc IsSpadeP
					.endif
 0000148D		   *@C01CF:
					.if (cardp5.suit == 1)
 0000148D  80 3D 0000001F R
	   01		   *	    cmp    cardp5 . Suit, 001h
 00001494  75 06	   *	    jne    @C01D1
 00001496  FF 05 00000032 R			inc IsSpadeP
					.endif
 0000149C		   *@C01D1:
					.if (cardp6.suit == 1)
 0000149C  80 3D 00000021 R
	   01		   *	    cmp    cardp6 . Suit, 001h
 000014A3  75 06	   *	    jne    @C01D3
 000014A5  FF 05 00000032 R			inc IsSpadeP
					.endif
 000014AB		   *@C01D3:
					.if (cardp7.suit == 1)
 000014AB  80 3D 00000023 R
	   01		   *	    cmp    cardp7 . Suit, 001h
 000014B2  75 06	   *	    jne    @C01D5
 000014B4  FF 05 00000032 R			inc IsSpadeP
					.endif
 000014BA		   *@C01D5:

					.if (cardp1.suit == 2)
 000014BA  80 3D 00000017 R
	   02		   *	    cmp    cardp1 . Suit, 002h
 000014C1  75 06	   *	    jne    @C01D7
 000014C3  FF 05 00000036 R			inc IsHeartP
					.endif
 000014C9		   *@C01D7:
					.if (cardp2.suit == 2)
 000014C9  80 3D 00000019 R
	   02		   *	    cmp    cardp2 . Suit, 002h
 000014D0  75 06	   *	    jne    @C01D9
 000014D2  FF 05 00000036 R			inc IsHeartP
					.endif
 000014D8		   *@C01D9:
					.if (cardp3.suit == 2)
 000014D8  80 3D 0000001B R
	   02		   *	    cmp    cardp3 . Suit, 002h
 000014DF  75 06	   *	    jne    @C01DB
 000014E1  FF 05 00000036 R			inc IsHeartP
					.endif
 000014E7		   *@C01DB:
					.if (cardp4.suit == 2)
 000014E7  80 3D 0000001D R
	   02		   *	    cmp    cardp4 . Suit, 002h
 000014EE  75 06	   *	    jne    @C01DD
 000014F0  FF 05 00000036 R			inc IsHeartP
					.endif
 000014F6		   *@C01DD:
					.if (cardp5.suit == 2)
 000014F6  80 3D 0000001F R
	   02		   *	    cmp    cardp5 . Suit, 002h
 000014FD  75 06	   *	    jne    @C01DF
 000014FF  FF 05 00000036 R			inc IsHeartP
					.endif
 00001505		   *@C01DF:
					.if (cardp6.suit == 2)
 00001505  80 3D 00000021 R
	   02		   *	    cmp    cardp6 . Suit, 002h
 0000150C  75 06	   *	    jne    @C01E1
 0000150E  FF 05 00000036 R			inc IsHeartP
					.endif
 00001514		   *@C01E1:
					.if (cardp7.suit == 2)
 00001514  80 3D 00000023 R
	   02		   *	    cmp    cardp7 . Suit, 002h
 0000151B  75 06	   *	    jne    @C01E3
 0000151D  FF 05 00000036 R			inc IsHeartP
					.endif
 00001523		   *@C01E3:

					.if (cardp1.suit == 3)
 00001523  80 3D 00000017 R
	   03		   *	    cmp    cardp1 . Suit, 003h
 0000152A  75 06	   *	    jne    @C01E5
 0000152C  FF 05 0000003A R			inc IsClubP
					.endif
 00001532		   *@C01E5:
					.if (cardp2.suit == 3)
 00001532  80 3D 00000019 R
	   03		   *	    cmp    cardp2 . Suit, 003h
 00001539  75 06	   *	    jne    @C01E7
 0000153B  FF 05 0000003A R			inc IsClubP
					.endif
 00001541		   *@C01E7:
					.if (cardp3.suit == 3)
 00001541  80 3D 0000001B R
	   03		   *	    cmp    cardp3 . Suit, 003h
 00001548  75 06	   *	    jne    @C01E9
 0000154A  FF 05 0000003A R			inc IsClubP
					.endif
 00001550		   *@C01E9:
					.if (cardp4.suit == 3)
 00001550  80 3D 0000001D R
	   03		   *	    cmp    cardp4 . Suit, 003h
 00001557  75 06	   *	    jne    @C01EB
 00001559  FF 05 0000003A R			inc IsClubP
					.endif
 0000155F		   *@C01EB:
					.if (cardp5.suit == 3)
 0000155F  80 3D 0000001F R
	   03		   *	    cmp    cardp5 . Suit, 003h
 00001566  75 06	   *	    jne    @C01ED
 00001568  FF 05 0000003A R			inc IsClubP
					.endif
 0000156E		   *@C01ED:
					.if (cardp6.suit == 3)
 0000156E  80 3D 00000021 R
	   03		   *	    cmp    cardp6 . Suit, 003h
 00001575  75 06	   *	    jne    @C01EF
 00001577  FF 05 0000003A R			inc IsClubP
					.endif
 0000157D		   *@C01EF:
					.if (cardp7.suit == 3)
 0000157D  80 3D 00000023 R
	   03		   *	    cmp    cardp7 . Suit, 003h
 00001584  75 06	   *	    jne    @C01F1
 00001586  FF 05 0000003A R			inc IsClubP
					.endif
 0000158C		   *@C01F1:

					.if (cardp1.suit == 4)
 0000158C  80 3D 00000017 R
	   04		   *	    cmp    cardp1 . Suit, 004h
 00001593  75 06	   *	    jne    @C01F3
 00001595  FF 05 0000003E R			inc IsDimondP
					.endif
 0000159B		   *@C01F3:
					.if (cardp2.suit == 4)
 0000159B  80 3D 00000019 R
	   04		   *	    cmp    cardp2 . Suit, 004h
 000015A2  75 06	   *	    jne    @C01F5
 000015A4  FF 05 0000003E R			inc IsDimondP
					.endif
 000015AA		   *@C01F5:
					.if (cardp3.suit == 4)
 000015AA  80 3D 0000001B R
	   04		   *	    cmp    cardp3 . Suit, 004h
 000015B1  75 06	   *	    jne    @C01F7
 000015B3  FF 05 0000003E R			inc IsDimondP
					.endif
 000015B9		   *@C01F7:
					.if (cardp4.suit == 4)
 000015B9  80 3D 0000001D R
	   04		   *	    cmp    cardp4 . Suit, 004h
 000015C0  75 06	   *	    jne    @C01F9
 000015C2  FF 05 0000003E R			inc IsDimondP
					.endif
 000015C8		   *@C01F9:
					.if (cardp5.suit == 4)
 000015C8  80 3D 0000001F R
	   04		   *	    cmp    cardp5 . Suit, 004h
 000015CF  75 06	   *	    jne    @C01FB
 000015D1  FF 05 0000003E R			inc IsDimondP
					.endif
 000015D7		   *@C01FB:
					.if (cardp6.suit == 4)
 000015D7  80 3D 00000021 R
	   04		   *	    cmp    cardp6 . Suit, 004h
 000015DE  75 06	   *	    jne    @C01FD
 000015E0  FF 05 0000003E R			inc IsDimondP
					.endif
 000015E6		   *@C01FD:
					.if (cardp7.suit == 4)
 000015E6  80 3D 00000023 R
	   04		   *	    cmp    cardp7 . Suit, 004h
 000015ED  75 06	   *	    jne    @C01FF
 000015EF  FF 05 0000003E R			inc IsDimondP
					.endif
 000015F5		   *@C01FF:

					.if(IsSpadeP>4)
 000015F5  83 3D 00000032 R
	   04		   *	    cmp    isSpadeP, 004h
 000015FC  76 0A	   *	    jbe    @C0201
 000015FE  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 00001608		   *@C0201:
					.if(IsHeartP>4)
 00001608  83 3D 00000036 R
	   04		   *	    cmp    isHeartP, 004h
 0000160F  76 0A	   *	    jbe    @C0203
 00001611  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 0000161B		   *@C0203:
					.if(IsClubP>4)
 0000161B  83 3D 0000003A R
	   04		   *	    cmp    isClubP, 004h
 00001622  76 0A	   *	    jbe    @C0205
 00001624  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 0000162E		   *@C0205:
					.if(IsDimondP>4)
 0000162E  83 3D 0000003E R
	   04		   *	    cmp    isDimondP, 004h
 00001635  76 0A	   *	    jbe    @C0207
 00001637  C7 05 00000042 R			mov isFlushP, 1
	   00000001
					.endif
 00001641		   *@C0207:

					.if(isFlushP>0)
 00001641  83 3D 00000042 R
	   00		   *	    cmp    isFlushP, 000h
 00001648  76 0A	   *	    jbe    @C0209
 0000164A  C7 05 0000008A R			mov PlayerFlush, 1
	   00000001
					.endif
 00001654		   *@C0209:

 00001654  C3			ret
 00001655			IsAFlush ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001655			IsAStraight Proc

				;Spock Straight

 00001655  A0 00000008 R	mov al, cards1.value
				.if (al == 1||al==14||al==27||al==40)
 0000165A  3C 01	   *	    cmp    al, 001h
 0000165C  74 0C	   *	    je	@C020C
 0000165E  3C 0E	   *	    cmp    al, 00Eh
 00001660  74 08	   *	    je	@C020C
 00001662  3C 1B	   *	    cmp    al, 01Bh
 00001664  74 04	   *	    je	@C020C
 00001666  3C 28	   *	    cmp    al, 028h
 00001668  75 07	   *	    jne    @C020B
 0000166A		   *@C020C:
 0000166A  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000166C  E9 000000FD	   *	    jmp    @C0210
 00001671		   *@C020B:
 00001671  3C 02	   *	    cmp    al, 002h
 00001673  74 0C	   *	    je	@C0212
 00001675  3C 0F	   *	    cmp    al, 00Fh
 00001677  74 08	   *	    je	@C0212
 00001679  3C 1C	   *	    cmp    al, 01Ch
 0000167B  74 04	   *	    je	@C0212
 0000167D  3C 29	   *	    cmp    al, 029h
 0000167F  75 07	   *	    jne    @C0211
 00001681		   *@C0212:
 00001681  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001683  E9 000000E6	   *	    jmp    @C0216
 00001688		   *@C0211:
 00001688  3C 03	   *	    cmp    al, 003h
 0000168A  74 0C	   *	    je	@C0218
 0000168C  3C 10	   *	    cmp    al, 010h
 0000168E  74 08	   *	    je	@C0218
 00001690  3C 1D	   *	    cmp    al, 01Dh
 00001692  74 04	   *	    je	@C0218
 00001694  3C 2A	   *	    cmp    al, 02Ah
 00001696  75 07	   *	    jne    @C0217
 00001698		   *@C0218:
 00001698  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000169A  E9 000000CF	   *	    jmp    @C021C
 0000169F		   *@C0217:
 0000169F  3C 04	   *	    cmp    al, 004h
 000016A1  74 0C	   *	    je	@C021E
 000016A3  3C 11	   *	    cmp    al, 011h
 000016A5  74 08	   *	    je	@C021E
 000016A7  3C 1E	   *	    cmp    al, 01Eh
 000016A9  74 04	   *	    je	@C021E
 000016AB  3C 2B	   *	    cmp    al, 02Bh
 000016AD  75 07	   *	    jne    @C021D
 000016AF		   *@C021E:
 000016AF  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000016B1  E9 000000B8	   *	    jmp    @C0222
 000016B6		   *@C021D:
 000016B6  3C 05	   *	    cmp    al, 005h
 000016B8  74 0C	   *	    je	@C0224
 000016BA  3C 12	   *	    cmp    al, 012h
 000016BC  74 08	   *	    je	@C0224
 000016BE  3C 1F	   *	    cmp    al, 01Fh
 000016C0  74 04	   *	    je	@C0224
 000016C2  3C 2C	   *	    cmp    al, 02Ch
 000016C4  75 07	   *	    jne    @C0223
 000016C6		   *@C0224:
 000016C6  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000016C8  E9 000000A1	   *	    jmp    @C0228
 000016CD		   *@C0223:
 000016CD  3C 06	   *	    cmp    al, 006h
 000016CF  74 0C	   *	    je	@C022A
 000016D1  3C 13	   *	    cmp    al, 013h
 000016D3  74 08	   *	    je	@C022A
 000016D5  3C 20	   *	    cmp    al, 020h
 000016D7  74 04	   *	    je	@C022A
 000016D9  3C 2D	   *	    cmp    al, 02Dh
 000016DB  75 07	   *	    jne    @C0229
 000016DD		   *@C022A:
 000016DD  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000016DF  E9 0000008A	   *	    jmp    @C022E
 000016E4		   *@C0229:
 000016E4  3C 07	   *	    cmp    al, 007h
 000016E6  74 0C	   *	    je	@C0230
 000016E8  3C 14	   *	    cmp    al, 014h
 000016EA  74 08	   *	    je	@C0230
 000016EC  3C 21	   *	    cmp    al, 021h
 000016EE  74 04	   *	    je	@C0230
 000016F0  3C 2E	   *	    cmp    al, 02Eh
 000016F2  75 04	   *	    jne    @C022F
 000016F4		   *@C0230:
 000016F4  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000016F6  EB 76	   *	    jmp    @C0234
 000016F8		   *@C022F:
 000016F8  3C 08	   *	    cmp    al, 008h
 000016FA  74 0C	   *	    je	@C0236
 000016FC  3C 15	   *	    cmp    al, 015h
 000016FE  74 08	   *	    je	@C0236
 00001700  3C 22	   *	    cmp    al, 022h
 00001702  74 04	   *	    je	@C0236
 00001704  3C 2F	   *	    cmp    al, 02Fh
 00001706  75 04	   *	    jne    @C0235
 00001708		   *@C0236:
 00001708  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000170A  EB 62	   *	    jmp    @C023A
 0000170C		   *@C0235:
 0000170C  3C 09	   *	    cmp    al, 009h
 0000170E  74 0C	   *	    je	@C023C
 00001710  3C 16	   *	    cmp    al, 016h
 00001712  74 08	   *	    je	@C023C
 00001714  3C 23	   *	    cmp    al, 023h
 00001716  74 04	   *	    je	@C023C
 00001718  3C 30	   *	    cmp    al, 030h
 0000171A  75 04	   *	    jne    @C023B
 0000171C		   *@C023C:
 0000171C  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 0000171E  EB 4E	   *	    jmp    @C0240
 00001720		   *@C023B:
 00001720  3C 0A	   *	    cmp    al, 00Ah
 00001722  74 0C	   *	    je	@C0242
 00001724  3C 17	   *	    cmp    al, 017h
 00001726  74 08	   *	    je	@C0242
 00001728  3C 24	   *	    cmp    al, 024h
 0000172A  74 04	   *	    je	@C0242
 0000172C  3C 31	   *	    cmp    al, 031h
 0000172E  75 04	   *	    jne    @C0241
 00001730		   *@C0242:
 00001730  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001732  EB 3A	   *	    jmp    @C0246
 00001734		   *@C0241:
 00001734  3C 0B	   *	    cmp    al, 00Bh
 00001736  74 0C	   *	    je	@C0248
 00001738  3C 18	   *	    cmp    al, 018h
 0000173A  74 08	   *	    je	@C0248
 0000173C  3C 25	   *	    cmp    al, 025h
 0000173E  74 04	   *	    je	@C0248
 00001740  3C 32	   *	    cmp    al, 032h
 00001742  75 04	   *	    jne    @C0247
 00001744		   *@C0248:
 00001744  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001746  EB 26	   *	    jmp    @C024C
 00001748		   *@C0247:
 00001748  3C 0C	   *	    cmp    al, 00Ch
 0000174A  74 0C	   *	    je	@C024E
 0000174C  3C 19	   *	    cmp    al, 019h
 0000174E  74 08	   *	    je	@C024E
 00001750  3C 26	   *	    cmp    al, 026h
 00001752  74 04	   *	    je	@C024E
 00001754  3C 33	   *	    cmp    al, 033h
 00001756  75 04	   *	    jne    @C024D
 00001758		   *@C024E:
 00001758  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000175A  EB 12	   *	    jmp    @C0252
 0000175C		   *@C024D:
 0000175C  3C 0D	   *	    cmp    al, 00Dh
 0000175E  74 0C	   *	    je	@C0254
 00001760  3C 1A	   *	    cmp    al, 01Ah
 00001762  74 08	   *	    je	@C0254
 00001764  3C 27	   *	    cmp    al, 027h
 00001766  74 04	   *	    je	@C0254
 00001768  3C 34	   *	    cmp    al, 034h
 0000176A  75 02	   *	    jne    @C0253
 0000176C		   *@C0254:
 0000176C  B0 0D			mov al,13
				.endif
 0000176E		   *@C0253:
 0000176E		   *@C0252:
 0000176E		   *@C024C:
 0000176E		   *@C0246:
 0000176E		   *@C0240:
 0000176E		   *@C023A:
 0000176E		   *@C0234:
 0000176E		   *@C022E:
 0000176E		   *@C0228:
 0000176E		   *@C0222:
 0000176E		   *@C021C:
 0000176E		   *@C0216:
 0000176E		   *@C0210:
 0000176E  A2 00000024 R	mov straights[0], al

 00001773  A0 0000000A R	mov al, cards2.value
				.if (al == 1||al==14||al==27||al==40)
 00001778  3C 01	   *	    cmp    al, 001h
 0000177A  74 0C	   *	    je	@C0259
 0000177C  3C 0E	   *	    cmp    al, 00Eh
 0000177E  74 08	   *	    je	@C0259
 00001780  3C 1B	   *	    cmp    al, 01Bh
 00001782  74 04	   *	    je	@C0259
 00001784  3C 28	   *	    cmp    al, 028h
 00001786  75 07	   *	    jne    @C0258
 00001788		   *@C0259:
 00001788  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000178A  E9 000000FD	   *	    jmp    @C025D
 0000178F		   *@C0258:
 0000178F  3C 02	   *	    cmp    al, 002h
 00001791  74 0C	   *	    je	@C025F
 00001793  3C 0F	   *	    cmp    al, 00Fh
 00001795  74 08	   *	    je	@C025F
 00001797  3C 1C	   *	    cmp    al, 01Ch
 00001799  74 04	   *	    je	@C025F
 0000179B  3C 29	   *	    cmp    al, 029h
 0000179D  75 07	   *	    jne    @C025E
 0000179F		   *@C025F:
 0000179F  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000017A1  E9 000000E6	   *	    jmp    @C0263
 000017A6		   *@C025E:
 000017A6  3C 03	   *	    cmp    al, 003h
 000017A8  74 0C	   *	    je	@C0265
 000017AA  3C 10	   *	    cmp    al, 010h
 000017AC  74 08	   *	    je	@C0265
 000017AE  3C 1D	   *	    cmp    al, 01Dh
 000017B0  74 04	   *	    je	@C0265
 000017B2  3C 2A	   *	    cmp    al, 02Ah
 000017B4  75 07	   *	    jne    @C0264
 000017B6		   *@C0265:
 000017B6  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000017B8  E9 000000CF	   *	    jmp    @C0269
 000017BD		   *@C0264:
 000017BD  3C 04	   *	    cmp    al, 004h
 000017BF  74 0C	   *	    je	@C026B
 000017C1  3C 11	   *	    cmp    al, 011h
 000017C3  74 08	   *	    je	@C026B
 000017C5  3C 1E	   *	    cmp    al, 01Eh
 000017C7  74 04	   *	    je	@C026B
 000017C9  3C 2B	   *	    cmp    al, 02Bh
 000017CB  75 07	   *	    jne    @C026A
 000017CD		   *@C026B:
 000017CD  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000017CF  E9 000000B8	   *	    jmp    @C026F
 000017D4		   *@C026A:
 000017D4  3C 05	   *	    cmp    al, 005h
 000017D6  74 0C	   *	    je	@C0271
 000017D8  3C 12	   *	    cmp    al, 012h
 000017DA  74 08	   *	    je	@C0271
 000017DC  3C 1F	   *	    cmp    al, 01Fh
 000017DE  74 04	   *	    je	@C0271
 000017E0  3C 2C	   *	    cmp    al, 02Ch
 000017E2  75 07	   *	    jne    @C0270
 000017E4		   *@C0271:
 000017E4  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000017E6  E9 000000A1	   *	    jmp    @C0275
 000017EB		   *@C0270:
 000017EB  3C 06	   *	    cmp    al, 006h
 000017ED  74 0C	   *	    je	@C0277
 000017EF  3C 13	   *	    cmp    al, 013h
 000017F1  74 08	   *	    je	@C0277
 000017F3  3C 20	   *	    cmp    al, 020h
 000017F5  74 04	   *	    je	@C0277
 000017F7  3C 2D	   *	    cmp    al, 02Dh
 000017F9  75 07	   *	    jne    @C0276
 000017FB		   *@C0277:
 000017FB  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000017FD  E9 0000008A	   *	    jmp    @C027B
 00001802		   *@C0276:
 00001802  3C 07	   *	    cmp    al, 007h
 00001804  74 0C	   *	    je	@C027D
 00001806  3C 14	   *	    cmp    al, 014h
 00001808  74 08	   *	    je	@C027D
 0000180A  3C 21	   *	    cmp    al, 021h
 0000180C  74 04	   *	    je	@C027D
 0000180E  3C 2E	   *	    cmp    al, 02Eh
 00001810  75 04	   *	    jne    @C027C
 00001812		   *@C027D:
 00001812  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001814  EB 76	   *	    jmp    @C0281
 00001816		   *@C027C:
 00001816  3C 08	   *	    cmp    al, 008h
 00001818  74 0C	   *	    je	@C0283
 0000181A  3C 15	   *	    cmp    al, 015h
 0000181C  74 08	   *	    je	@C0283
 0000181E  3C 22	   *	    cmp    al, 022h
 00001820  74 04	   *	    je	@C0283
 00001822  3C 2F	   *	    cmp    al, 02Fh
 00001824  75 04	   *	    jne    @C0282
 00001826		   *@C0283:
 00001826  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001828  EB 62	   *	    jmp    @C0287
 0000182A		   *@C0282:
 0000182A  3C 09	   *	    cmp    al, 009h
 0000182C  74 0C	   *	    je	@C0289
 0000182E  3C 16	   *	    cmp    al, 016h
 00001830  74 08	   *	    je	@C0289
 00001832  3C 23	   *	    cmp    al, 023h
 00001834  74 04	   *	    je	@C0289
 00001836  3C 30	   *	    cmp    al, 030h
 00001838  75 04	   *	    jne    @C0288
 0000183A		   *@C0289:
 0000183A  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 0000183C  EB 4E	   *	    jmp    @C028D
 0000183E		   *@C0288:
 0000183E  3C 0A	   *	    cmp    al, 00Ah
 00001840  74 0C	   *	    je	@C028F
 00001842  3C 17	   *	    cmp    al, 017h
 00001844  74 08	   *	    je	@C028F
 00001846  3C 24	   *	    cmp    al, 024h
 00001848  74 04	   *	    je	@C028F
 0000184A  3C 31	   *	    cmp    al, 031h
 0000184C  75 04	   *	    jne    @C028E
 0000184E		   *@C028F:
 0000184E  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001850  EB 3A	   *	    jmp    @C0293
 00001852		   *@C028E:
 00001852  3C 0B	   *	    cmp    al, 00Bh
 00001854  74 0C	   *	    je	@C0295
 00001856  3C 18	   *	    cmp    al, 018h
 00001858  74 08	   *	    je	@C0295
 0000185A  3C 25	   *	    cmp    al, 025h
 0000185C  74 04	   *	    je	@C0295
 0000185E  3C 32	   *	    cmp    al, 032h
 00001860  75 04	   *	    jne    @C0294
 00001862		   *@C0295:
 00001862  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001864  EB 26	   *	    jmp    @C0299
 00001866		   *@C0294:
 00001866  3C 0C	   *	    cmp    al, 00Ch
 00001868  74 0C	   *	    je	@C029B
 0000186A  3C 19	   *	    cmp    al, 019h
 0000186C  74 08	   *	    je	@C029B
 0000186E  3C 26	   *	    cmp    al, 026h
 00001870  74 04	   *	    je	@C029B
 00001872  3C 33	   *	    cmp    al, 033h
 00001874  75 04	   *	    jne    @C029A
 00001876		   *@C029B:
 00001876  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001878  EB 12	   *	    jmp    @C029F
 0000187A		   *@C029A:
 0000187A  3C 0D	   *	    cmp    al, 00Dh
 0000187C  74 0C	   *	    je	@C02A1
 0000187E  3C 1A	   *	    cmp    al, 01Ah
 00001880  74 08	   *	    je	@C02A1
 00001882  3C 27	   *	    cmp    al, 027h
 00001884  74 04	   *	    je	@C02A1
 00001886  3C 34	   *	    cmp    al, 034h
 00001888  75 02	   *	    jne    @C02A0
 0000188A		   *@C02A1:
 0000188A  B0 0D			mov al,13
				.endif
 0000188C		   *@C02A0:
 0000188C		   *@C029F:
 0000188C		   *@C0299:
 0000188C		   *@C0293:
 0000188C		   *@C028D:
 0000188C		   *@C0287:
 0000188C		   *@C0281:
 0000188C		   *@C027B:
 0000188C		   *@C0275:
 0000188C		   *@C026F:
 0000188C		   *@C0269:
 0000188C		   *@C0263:
 0000188C		   *@C025D:
 0000188C  A2 00000025 R	mov straights[1], al

 00001891  A0 0000000C R	mov al, cards3.value
				.if (al == 1||al==14||al==27||al==40)
 00001896  3C 01	   *	    cmp    al, 001h
 00001898  74 0C	   *	    je	@C02A6
 0000189A  3C 0E	   *	    cmp    al, 00Eh
 0000189C  74 08	   *	    je	@C02A6
 0000189E  3C 1B	   *	    cmp    al, 01Bh
 000018A0  74 04	   *	    je	@C02A6
 000018A2  3C 28	   *	    cmp    al, 028h
 000018A4  75 07	   *	    jne    @C02A5
 000018A6		   *@C02A6:
 000018A6  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000018A8  E9 000000FD	   *	    jmp    @C02AA
 000018AD		   *@C02A5:
 000018AD  3C 02	   *	    cmp    al, 002h
 000018AF  74 0C	   *	    je	@C02AC
 000018B1  3C 0F	   *	    cmp    al, 00Fh
 000018B3  74 08	   *	    je	@C02AC
 000018B5  3C 1C	   *	    cmp    al, 01Ch
 000018B7  74 04	   *	    je	@C02AC
 000018B9  3C 29	   *	    cmp    al, 029h
 000018BB  75 07	   *	    jne    @C02AB
 000018BD		   *@C02AC:
 000018BD  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000018BF  E9 000000E6	   *	    jmp    @C02B0
 000018C4		   *@C02AB:
 000018C4  3C 03	   *	    cmp    al, 003h
 000018C6  74 0C	   *	    je	@C02B2
 000018C8  3C 10	   *	    cmp    al, 010h
 000018CA  74 08	   *	    je	@C02B2
 000018CC  3C 1D	   *	    cmp    al, 01Dh
 000018CE  74 04	   *	    je	@C02B2
 000018D0  3C 2A	   *	    cmp    al, 02Ah
 000018D2  75 07	   *	    jne    @C02B1
 000018D4		   *@C02B2:
 000018D4  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000018D6  E9 000000CF	   *	    jmp    @C02B6
 000018DB		   *@C02B1:
 000018DB  3C 04	   *	    cmp    al, 004h
 000018DD  74 0C	   *	    je	@C02B8
 000018DF  3C 11	   *	    cmp    al, 011h
 000018E1  74 08	   *	    je	@C02B8
 000018E3  3C 1E	   *	    cmp    al, 01Eh
 000018E5  74 04	   *	    je	@C02B8
 000018E7  3C 2B	   *	    cmp    al, 02Bh
 000018E9  75 07	   *	    jne    @C02B7
 000018EB		   *@C02B8:
 000018EB  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000018ED  E9 000000B8	   *	    jmp    @C02BC
 000018F2		   *@C02B7:
 000018F2  3C 05	   *	    cmp    al, 005h
 000018F4  74 0C	   *	    je	@C02BE
 000018F6  3C 12	   *	    cmp    al, 012h
 000018F8  74 08	   *	    je	@C02BE
 000018FA  3C 1F	   *	    cmp    al, 01Fh
 000018FC  74 04	   *	    je	@C02BE
 000018FE  3C 2C	   *	    cmp    al, 02Ch
 00001900  75 07	   *	    jne    @C02BD
 00001902		   *@C02BE:
 00001902  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001904  E9 000000A1	   *	    jmp    @C02C2
 00001909		   *@C02BD:
 00001909  3C 06	   *	    cmp    al, 006h
 0000190B  74 0C	   *	    je	@C02C4
 0000190D  3C 13	   *	    cmp    al, 013h
 0000190F  74 08	   *	    je	@C02C4
 00001911  3C 20	   *	    cmp    al, 020h
 00001913  74 04	   *	    je	@C02C4
 00001915  3C 2D	   *	    cmp    al, 02Dh
 00001917  75 07	   *	    jne    @C02C3
 00001919		   *@C02C4:
 00001919  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 0000191B  E9 0000008A	   *	    jmp    @C02C8
 00001920		   *@C02C3:
 00001920  3C 07	   *	    cmp    al, 007h
 00001922  74 0C	   *	    je	@C02CA
 00001924  3C 14	   *	    cmp    al, 014h
 00001926  74 08	   *	    je	@C02CA
 00001928  3C 21	   *	    cmp    al, 021h
 0000192A  74 04	   *	    je	@C02CA
 0000192C  3C 2E	   *	    cmp    al, 02Eh
 0000192E  75 04	   *	    jne    @C02C9
 00001930		   *@C02CA:
 00001930  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001932  EB 76	   *	    jmp    @C02CE
 00001934		   *@C02C9:
 00001934  3C 08	   *	    cmp    al, 008h
 00001936  74 0C	   *	    je	@C02D0
 00001938  3C 15	   *	    cmp    al, 015h
 0000193A  74 08	   *	    je	@C02D0
 0000193C  3C 22	   *	    cmp    al, 022h
 0000193E  74 04	   *	    je	@C02D0
 00001940  3C 2F	   *	    cmp    al, 02Fh
 00001942  75 04	   *	    jne    @C02CF
 00001944		   *@C02D0:
 00001944  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001946  EB 62	   *	    jmp    @C02D4
 00001948		   *@C02CF:
 00001948  3C 09	   *	    cmp    al, 009h
 0000194A  74 0C	   *	    je	@C02D6
 0000194C  3C 16	   *	    cmp    al, 016h
 0000194E  74 08	   *	    je	@C02D6
 00001950  3C 23	   *	    cmp    al, 023h
 00001952  74 04	   *	    je	@C02D6
 00001954  3C 30	   *	    cmp    al, 030h
 00001956  75 04	   *	    jne    @C02D5
 00001958		   *@C02D6:
 00001958  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 0000195A  EB 4E	   *	    jmp    @C02DA
 0000195C		   *@C02D5:
 0000195C  3C 0A	   *	    cmp    al, 00Ah
 0000195E  74 0C	   *	    je	@C02DC
 00001960  3C 17	   *	    cmp    al, 017h
 00001962  74 08	   *	    je	@C02DC
 00001964  3C 24	   *	    cmp    al, 024h
 00001966  74 04	   *	    je	@C02DC
 00001968  3C 31	   *	    cmp    al, 031h
 0000196A  75 04	   *	    jne    @C02DB
 0000196C		   *@C02DC:
 0000196C  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000196E  EB 3A	   *	    jmp    @C02E0
 00001970		   *@C02DB:
 00001970  3C 0B	   *	    cmp    al, 00Bh
 00001972  74 0C	   *	    je	@C02E2
 00001974  3C 18	   *	    cmp    al, 018h
 00001976  74 08	   *	    je	@C02E2
 00001978  3C 25	   *	    cmp    al, 025h
 0000197A  74 04	   *	    je	@C02E2
 0000197C  3C 32	   *	    cmp    al, 032h
 0000197E  75 04	   *	    jne    @C02E1
 00001980		   *@C02E2:
 00001980  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001982  EB 26	   *	    jmp    @C02E6
 00001984		   *@C02E1:
 00001984  3C 0C	   *	    cmp    al, 00Ch
 00001986  74 0C	   *	    je	@C02E8
 00001988  3C 19	   *	    cmp    al, 019h
 0000198A  74 08	   *	    je	@C02E8
 0000198C  3C 26	   *	    cmp    al, 026h
 0000198E  74 04	   *	    je	@C02E8
 00001990  3C 33	   *	    cmp    al, 033h
 00001992  75 04	   *	    jne    @C02E7
 00001994		   *@C02E8:
 00001994  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001996  EB 12	   *	    jmp    @C02EC
 00001998		   *@C02E7:
 00001998  3C 0D	   *	    cmp    al, 00Dh
 0000199A  74 0C	   *	    je	@C02EE
 0000199C  3C 1A	   *	    cmp    al, 01Ah
 0000199E  74 08	   *	    je	@C02EE
 000019A0  3C 27	   *	    cmp    al, 027h
 000019A2  74 04	   *	    je	@C02EE
 000019A4  3C 34	   *	    cmp    al, 034h
 000019A6  75 02	   *	    jne    @C02ED
 000019A8		   *@C02EE:
 000019A8  B0 0D			mov al,13
				.endif
 000019AA		   *@C02ED:
 000019AA		   *@C02EC:
 000019AA		   *@C02E6:
 000019AA		   *@C02E0:
 000019AA		   *@C02DA:
 000019AA		   *@C02D4:
 000019AA		   *@C02CE:
 000019AA		   *@C02C8:
 000019AA		   *@C02C2:
 000019AA		   *@C02BC:
 000019AA		   *@C02B6:
 000019AA		   *@C02B0:
 000019AA		   *@C02AA:
 000019AA  A2 00000026 R	mov straights[2], al

 000019AF  A0 0000000E R	mov al, cards4.value
				.if (al == 1||al==14||al==27||al==40)
 000019B4  3C 01	   *	    cmp    al, 001h
 000019B6  74 0C	   *	    je	@C02F3
 000019B8  3C 0E	   *	    cmp    al, 00Eh
 000019BA  74 08	   *	    je	@C02F3
 000019BC  3C 1B	   *	    cmp    al, 01Bh
 000019BE  74 04	   *	    je	@C02F3
 000019C0  3C 28	   *	    cmp    al, 028h
 000019C2  75 07	   *	    jne    @C02F2
 000019C4		   *@C02F3:
 000019C4  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000019C6  E9 000000FD	   *	    jmp    @C02F7
 000019CB		   *@C02F2:
 000019CB  3C 02	   *	    cmp    al, 002h
 000019CD  74 0C	   *	    je	@C02F9
 000019CF  3C 0F	   *	    cmp    al, 00Fh
 000019D1  74 08	   *	    je	@C02F9
 000019D3  3C 1C	   *	    cmp    al, 01Ch
 000019D5  74 04	   *	    je	@C02F9
 000019D7  3C 29	   *	    cmp    al, 029h
 000019D9  75 07	   *	    jne    @C02F8
 000019DB		   *@C02F9:
 000019DB  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000019DD  E9 000000E6	   *	    jmp    @C02FD
 000019E2		   *@C02F8:
 000019E2  3C 03	   *	    cmp    al, 003h
 000019E4  74 0C	   *	    je	@C02FF
 000019E6  3C 10	   *	    cmp    al, 010h
 000019E8  74 08	   *	    je	@C02FF
 000019EA  3C 1D	   *	    cmp    al, 01Dh
 000019EC  74 04	   *	    je	@C02FF
 000019EE  3C 2A	   *	    cmp    al, 02Ah
 000019F0  75 07	   *	    jne    @C02FE
 000019F2		   *@C02FF:
 000019F2  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000019F4  E9 000000CF	   *	    jmp    @C0303
 000019F9		   *@C02FE:
 000019F9  3C 04	   *	    cmp    al, 004h
 000019FB  74 0C	   *	    je	@C0305
 000019FD  3C 11	   *	    cmp    al, 011h
 000019FF  74 08	   *	    je	@C0305
 00001A01  3C 1E	   *	    cmp    al, 01Eh
 00001A03  74 04	   *	    je	@C0305
 00001A05  3C 2B	   *	    cmp    al, 02Bh
 00001A07  75 07	   *	    jne    @C0304
 00001A09		   *@C0305:
 00001A09  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001A0B  E9 000000B8	   *	    jmp    @C0309
 00001A10		   *@C0304:
 00001A10  3C 05	   *	    cmp    al, 005h
 00001A12  74 0C	   *	    je	@C030B
 00001A14  3C 12	   *	    cmp    al, 012h
 00001A16  74 08	   *	    je	@C030B
 00001A18  3C 1F	   *	    cmp    al, 01Fh
 00001A1A  74 04	   *	    je	@C030B
 00001A1C  3C 2C	   *	    cmp    al, 02Ch
 00001A1E  75 07	   *	    jne    @C030A
 00001A20		   *@C030B:
 00001A20  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001A22  E9 000000A1	   *	    jmp    @C030F
 00001A27		   *@C030A:
 00001A27  3C 06	   *	    cmp    al, 006h
 00001A29  74 0C	   *	    je	@C0311
 00001A2B  3C 13	   *	    cmp    al, 013h
 00001A2D  74 08	   *	    je	@C0311
 00001A2F  3C 20	   *	    cmp    al, 020h
 00001A31  74 04	   *	    je	@C0311
 00001A33  3C 2D	   *	    cmp    al, 02Dh
 00001A35  75 07	   *	    jne    @C0310
 00001A37		   *@C0311:
 00001A37  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001A39  E9 0000008A	   *	    jmp    @C0315
 00001A3E		   *@C0310:
 00001A3E  3C 07	   *	    cmp    al, 007h
 00001A40  74 0C	   *	    je	@C0317
 00001A42  3C 14	   *	    cmp    al, 014h
 00001A44  74 08	   *	    je	@C0317
 00001A46  3C 21	   *	    cmp    al, 021h
 00001A48  74 04	   *	    je	@C0317
 00001A4A  3C 2E	   *	    cmp    al, 02Eh
 00001A4C  75 04	   *	    jne    @C0316
 00001A4E		   *@C0317:
 00001A4E  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001A50  EB 76	   *	    jmp    @C031B
 00001A52		   *@C0316:
 00001A52  3C 08	   *	    cmp    al, 008h
 00001A54  74 0C	   *	    je	@C031D
 00001A56  3C 15	   *	    cmp    al, 015h
 00001A58  74 08	   *	    je	@C031D
 00001A5A  3C 22	   *	    cmp    al, 022h
 00001A5C  74 04	   *	    je	@C031D
 00001A5E  3C 2F	   *	    cmp    al, 02Fh
 00001A60  75 04	   *	    jne    @C031C
 00001A62		   *@C031D:
 00001A62  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001A64  EB 62	   *	    jmp    @C0321
 00001A66		   *@C031C:
 00001A66  3C 09	   *	    cmp    al, 009h
 00001A68  74 0C	   *	    je	@C0323
 00001A6A  3C 16	   *	    cmp    al, 016h
 00001A6C  74 08	   *	    je	@C0323
 00001A6E  3C 23	   *	    cmp    al, 023h
 00001A70  74 04	   *	    je	@C0323
 00001A72  3C 30	   *	    cmp    al, 030h
 00001A74  75 04	   *	    jne    @C0322
 00001A76		   *@C0323:
 00001A76  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001A78  EB 4E	   *	    jmp    @C0327
 00001A7A		   *@C0322:
 00001A7A  3C 0A	   *	    cmp    al, 00Ah
 00001A7C  74 0C	   *	    je	@C0329
 00001A7E  3C 17	   *	    cmp    al, 017h
 00001A80  74 08	   *	    je	@C0329
 00001A82  3C 24	   *	    cmp    al, 024h
 00001A84  74 04	   *	    je	@C0329
 00001A86  3C 31	   *	    cmp    al, 031h
 00001A88  75 04	   *	    jne    @C0328
 00001A8A		   *@C0329:
 00001A8A  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001A8C  EB 3A	   *	    jmp    @C032D
 00001A8E		   *@C0328:
 00001A8E  3C 0B	   *	    cmp    al, 00Bh
 00001A90  74 0C	   *	    je	@C032F
 00001A92  3C 18	   *	    cmp    al, 018h
 00001A94  74 08	   *	    je	@C032F
 00001A96  3C 25	   *	    cmp    al, 025h
 00001A98  74 04	   *	    je	@C032F
 00001A9A  3C 32	   *	    cmp    al, 032h
 00001A9C  75 04	   *	    jne    @C032E
 00001A9E		   *@C032F:
 00001A9E  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001AA0  EB 26	   *	    jmp    @C0333
 00001AA2		   *@C032E:
 00001AA2  3C 0C	   *	    cmp    al, 00Ch
 00001AA4  74 0C	   *	    je	@C0335
 00001AA6  3C 19	   *	    cmp    al, 019h
 00001AA8  74 08	   *	    je	@C0335
 00001AAA  3C 26	   *	    cmp    al, 026h
 00001AAC  74 04	   *	    je	@C0335
 00001AAE  3C 33	   *	    cmp    al, 033h
 00001AB0  75 04	   *	    jne    @C0334
 00001AB2		   *@C0335:
 00001AB2  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001AB4  EB 12	   *	    jmp    @C0339
 00001AB6		   *@C0334:
 00001AB6  3C 0D	   *	    cmp    al, 00Dh
 00001AB8  74 0C	   *	    je	@C033B
 00001ABA  3C 1A	   *	    cmp    al, 01Ah
 00001ABC  74 08	   *	    je	@C033B
 00001ABE  3C 27	   *	    cmp    al, 027h
 00001AC0  74 04	   *	    je	@C033B
 00001AC2  3C 34	   *	    cmp    al, 034h
 00001AC4  75 02	   *	    jne    @C033A
 00001AC6		   *@C033B:
 00001AC6  B0 0D			mov al,13
				.endif
 00001AC8		   *@C033A:
 00001AC8		   *@C0339:
 00001AC8		   *@C0333:
 00001AC8		   *@C032D:
 00001AC8		   *@C0327:
 00001AC8		   *@C0321:
 00001AC8		   *@C031B:
 00001AC8		   *@C0315:
 00001AC8		   *@C030F:
 00001AC8		   *@C0309:
 00001AC8		   *@C0303:
 00001AC8		   *@C02FD:
 00001AC8		   *@C02F7:
 00001AC8  A2 00000027 R	mov straights[3], al

 00001ACD  A0 00000010 R	mov al, cards5.value
				.if (al == 1||al==14||al==27||al==40)
 00001AD2  3C 01	   *	    cmp    al, 001h
 00001AD4  74 0C	   *	    je	@C0340
 00001AD6  3C 0E	   *	    cmp    al, 00Eh
 00001AD8  74 08	   *	    je	@C0340
 00001ADA  3C 1B	   *	    cmp    al, 01Bh
 00001ADC  74 04	   *	    je	@C0340
 00001ADE  3C 28	   *	    cmp    al, 028h
 00001AE0  75 07	   *	    jne    @C033F
 00001AE2		   *@C0340:
 00001AE2  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001AE4  E9 000000FD	   *	    jmp    @C0344
 00001AE9		   *@C033F:
 00001AE9  3C 02	   *	    cmp    al, 002h
 00001AEB  74 0C	   *	    je	@C0346
 00001AED  3C 0F	   *	    cmp    al, 00Fh
 00001AEF  74 08	   *	    je	@C0346
 00001AF1  3C 1C	   *	    cmp    al, 01Ch
 00001AF3  74 04	   *	    je	@C0346
 00001AF5  3C 29	   *	    cmp    al, 029h
 00001AF7  75 07	   *	    jne    @C0345
 00001AF9		   *@C0346:
 00001AF9  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001AFB  E9 000000E6	   *	    jmp    @C034A
 00001B00		   *@C0345:
 00001B00  3C 03	   *	    cmp    al, 003h
 00001B02  74 0C	   *	    je	@C034C
 00001B04  3C 10	   *	    cmp    al, 010h
 00001B06  74 08	   *	    je	@C034C
 00001B08  3C 1D	   *	    cmp    al, 01Dh
 00001B0A  74 04	   *	    je	@C034C
 00001B0C  3C 2A	   *	    cmp    al, 02Ah
 00001B0E  75 07	   *	    jne    @C034B
 00001B10		   *@C034C:
 00001B10  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001B12  E9 000000CF	   *	    jmp    @C0350
 00001B17		   *@C034B:
 00001B17  3C 04	   *	    cmp    al, 004h
 00001B19  74 0C	   *	    je	@C0352
 00001B1B  3C 11	   *	    cmp    al, 011h
 00001B1D  74 08	   *	    je	@C0352
 00001B1F  3C 1E	   *	    cmp    al, 01Eh
 00001B21  74 04	   *	    je	@C0352
 00001B23  3C 2B	   *	    cmp    al, 02Bh
 00001B25  75 07	   *	    jne    @C0351
 00001B27		   *@C0352:
 00001B27  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001B29  E9 000000B8	   *	    jmp    @C0356
 00001B2E		   *@C0351:
 00001B2E  3C 05	   *	    cmp    al, 005h
 00001B30  74 0C	   *	    je	@C0358
 00001B32  3C 12	   *	    cmp    al, 012h
 00001B34  74 08	   *	    je	@C0358
 00001B36  3C 1F	   *	    cmp    al, 01Fh
 00001B38  74 04	   *	    je	@C0358
 00001B3A  3C 2C	   *	    cmp    al, 02Ch
 00001B3C  75 07	   *	    jne    @C0357
 00001B3E		   *@C0358:
 00001B3E  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001B40  E9 000000A1	   *	    jmp    @C035C
 00001B45		   *@C0357:
 00001B45  3C 06	   *	    cmp    al, 006h
 00001B47  74 0C	   *	    je	@C035E
 00001B49  3C 13	   *	    cmp    al, 013h
 00001B4B  74 08	   *	    je	@C035E
 00001B4D  3C 20	   *	    cmp    al, 020h
 00001B4F  74 04	   *	    je	@C035E
 00001B51  3C 2D	   *	    cmp    al, 02Dh
 00001B53  75 07	   *	    jne    @C035D
 00001B55		   *@C035E:
 00001B55  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001B57  E9 0000008A	   *	    jmp    @C0362
 00001B5C		   *@C035D:
 00001B5C  3C 07	   *	    cmp    al, 007h
 00001B5E  74 0C	   *	    je	@C0364
 00001B60  3C 14	   *	    cmp    al, 014h
 00001B62  74 08	   *	    je	@C0364
 00001B64  3C 21	   *	    cmp    al, 021h
 00001B66  74 04	   *	    je	@C0364
 00001B68  3C 2E	   *	    cmp    al, 02Eh
 00001B6A  75 04	   *	    jne    @C0363
 00001B6C		   *@C0364:
 00001B6C  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001B6E  EB 76	   *	    jmp    @C0368
 00001B70		   *@C0363:
 00001B70  3C 08	   *	    cmp    al, 008h
 00001B72  74 0C	   *	    je	@C036A
 00001B74  3C 15	   *	    cmp    al, 015h
 00001B76  74 08	   *	    je	@C036A
 00001B78  3C 22	   *	    cmp    al, 022h
 00001B7A  74 04	   *	    je	@C036A
 00001B7C  3C 2F	   *	    cmp    al, 02Fh
 00001B7E  75 04	   *	    jne    @C0369
 00001B80		   *@C036A:
 00001B80  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001B82  EB 62	   *	    jmp    @C036E
 00001B84		   *@C0369:
 00001B84  3C 09	   *	    cmp    al, 009h
 00001B86  74 0C	   *	    je	@C0370
 00001B88  3C 16	   *	    cmp    al, 016h
 00001B8A  74 08	   *	    je	@C0370
 00001B8C  3C 23	   *	    cmp    al, 023h
 00001B8E  74 04	   *	    je	@C0370
 00001B90  3C 30	   *	    cmp    al, 030h
 00001B92  75 04	   *	    jne    @C036F
 00001B94		   *@C0370:
 00001B94  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001B96  EB 4E	   *	    jmp    @C0374
 00001B98		   *@C036F:
 00001B98  3C 0A	   *	    cmp    al, 00Ah
 00001B9A  74 0C	   *	    je	@C0376
 00001B9C  3C 17	   *	    cmp    al, 017h
 00001B9E  74 08	   *	    je	@C0376
 00001BA0  3C 24	   *	    cmp    al, 024h
 00001BA2  74 04	   *	    je	@C0376
 00001BA4  3C 31	   *	    cmp    al, 031h
 00001BA6  75 04	   *	    jne    @C0375
 00001BA8		   *@C0376:
 00001BA8  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001BAA  EB 3A	   *	    jmp    @C037A
 00001BAC		   *@C0375:
 00001BAC  3C 0B	   *	    cmp    al, 00Bh
 00001BAE  74 0C	   *	    je	@C037C
 00001BB0  3C 18	   *	    cmp    al, 018h
 00001BB2  74 08	   *	    je	@C037C
 00001BB4  3C 25	   *	    cmp    al, 025h
 00001BB6  74 04	   *	    je	@C037C
 00001BB8  3C 32	   *	    cmp    al, 032h
 00001BBA  75 04	   *	    jne    @C037B
 00001BBC		   *@C037C:
 00001BBC  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001BBE  EB 26	   *	    jmp    @C0380
 00001BC0		   *@C037B:
 00001BC0  3C 0C	   *	    cmp    al, 00Ch
 00001BC2  74 0C	   *	    je	@C0382
 00001BC4  3C 19	   *	    cmp    al, 019h
 00001BC6  74 08	   *	    je	@C0382
 00001BC8  3C 26	   *	    cmp    al, 026h
 00001BCA  74 04	   *	    je	@C0382
 00001BCC  3C 33	   *	    cmp    al, 033h
 00001BCE  75 04	   *	    jne    @C0381
 00001BD0		   *@C0382:
 00001BD0  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001BD2  EB 12	   *	    jmp    @C0386
 00001BD4		   *@C0381:
 00001BD4  3C 0D	   *	    cmp    al, 00Dh
 00001BD6  74 0C	   *	    je	@C0388
 00001BD8  3C 1A	   *	    cmp    al, 01Ah
 00001BDA  74 08	   *	    je	@C0388
 00001BDC  3C 27	   *	    cmp    al, 027h
 00001BDE  74 04	   *	    je	@C0388
 00001BE0  3C 34	   *	    cmp    al, 034h
 00001BE2  75 02	   *	    jne    @C0387
 00001BE4		   *@C0388:
 00001BE4  B0 0D			mov al,13
				.endif
 00001BE6		   *@C0387:
 00001BE6		   *@C0386:
 00001BE6		   *@C0380:
 00001BE6		   *@C037A:
 00001BE6		   *@C0374:
 00001BE6		   *@C036E:
 00001BE6		   *@C0368:
 00001BE6		   *@C0362:
 00001BE6		   *@C035C:
 00001BE6		   *@C0356:
 00001BE6		   *@C0350:
 00001BE6		   *@C034A:
 00001BE6		   *@C0344:
 00001BE6  A2 00000028 R	mov straights[4], al

 00001BEB  A0 00000012 R	mov al, cards6.value
				.if (al == 1||al==14||al==27||al==40)
 00001BF0  3C 01	   *	    cmp    al, 001h
 00001BF2  74 0C	   *	    je	@C038D
 00001BF4  3C 0E	   *	    cmp    al, 00Eh
 00001BF6  74 08	   *	    je	@C038D
 00001BF8  3C 1B	   *	    cmp    al, 01Bh
 00001BFA  74 04	   *	    je	@C038D
 00001BFC  3C 28	   *	    cmp    al, 028h
 00001BFE  75 07	   *	    jne    @C038C
 00001C00		   *@C038D:
 00001C00  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001C02  E9 000000FD	   *	    jmp    @C0391
 00001C07		   *@C038C:
 00001C07  3C 02	   *	    cmp    al, 002h
 00001C09  74 0C	   *	    je	@C0393
 00001C0B  3C 0F	   *	    cmp    al, 00Fh
 00001C0D  74 08	   *	    je	@C0393
 00001C0F  3C 1C	   *	    cmp    al, 01Ch
 00001C11  74 04	   *	    je	@C0393
 00001C13  3C 29	   *	    cmp    al, 029h
 00001C15  75 07	   *	    jne    @C0392
 00001C17		   *@C0393:
 00001C17  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001C19  E9 000000E6	   *	    jmp    @C0397
 00001C1E		   *@C0392:
 00001C1E  3C 03	   *	    cmp    al, 003h
 00001C20  74 0C	   *	    je	@C0399
 00001C22  3C 10	   *	    cmp    al, 010h
 00001C24  74 08	   *	    je	@C0399
 00001C26  3C 1D	   *	    cmp    al, 01Dh
 00001C28  74 04	   *	    je	@C0399
 00001C2A  3C 2A	   *	    cmp    al, 02Ah
 00001C2C  75 07	   *	    jne    @C0398
 00001C2E		   *@C0399:
 00001C2E  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001C30  E9 000000CF	   *	    jmp    @C039D
 00001C35		   *@C0398:
 00001C35  3C 04	   *	    cmp    al, 004h
 00001C37  74 0C	   *	    je	@C039F
 00001C39  3C 11	   *	    cmp    al, 011h
 00001C3B  74 08	   *	    je	@C039F
 00001C3D  3C 1E	   *	    cmp    al, 01Eh
 00001C3F  74 04	   *	    je	@C039F
 00001C41  3C 2B	   *	    cmp    al, 02Bh
 00001C43  75 07	   *	    jne    @C039E
 00001C45		   *@C039F:
 00001C45  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001C47  E9 000000B8	   *	    jmp    @C03A3
 00001C4C		   *@C039E:
 00001C4C  3C 05	   *	    cmp    al, 005h
 00001C4E  74 0C	   *	    je	@C03A5
 00001C50  3C 12	   *	    cmp    al, 012h
 00001C52  74 08	   *	    je	@C03A5
 00001C54  3C 1F	   *	    cmp    al, 01Fh
 00001C56  74 04	   *	    je	@C03A5
 00001C58  3C 2C	   *	    cmp    al, 02Ch
 00001C5A  75 07	   *	    jne    @C03A4
 00001C5C		   *@C03A5:
 00001C5C  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001C5E  E9 000000A1	   *	    jmp    @C03A9
 00001C63		   *@C03A4:
 00001C63  3C 06	   *	    cmp    al, 006h
 00001C65  74 0C	   *	    je	@C03AB
 00001C67  3C 13	   *	    cmp    al, 013h
 00001C69  74 08	   *	    je	@C03AB
 00001C6B  3C 20	   *	    cmp    al, 020h
 00001C6D  74 04	   *	    je	@C03AB
 00001C6F  3C 2D	   *	    cmp    al, 02Dh
 00001C71  75 07	   *	    jne    @C03AA
 00001C73		   *@C03AB:
 00001C73  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001C75  E9 0000008A	   *	    jmp    @C03AF
 00001C7A		   *@C03AA:
 00001C7A  3C 07	   *	    cmp    al, 007h
 00001C7C  74 0C	   *	    je	@C03B1
 00001C7E  3C 14	   *	    cmp    al, 014h
 00001C80  74 08	   *	    je	@C03B1
 00001C82  3C 21	   *	    cmp    al, 021h
 00001C84  74 04	   *	    je	@C03B1
 00001C86  3C 2E	   *	    cmp    al, 02Eh
 00001C88  75 04	   *	    jne    @C03B0
 00001C8A		   *@C03B1:
 00001C8A  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001C8C  EB 76	   *	    jmp    @C03B5
 00001C8E		   *@C03B0:
 00001C8E  3C 08	   *	    cmp    al, 008h
 00001C90  74 0C	   *	    je	@C03B7
 00001C92  3C 15	   *	    cmp    al, 015h
 00001C94  74 08	   *	    je	@C03B7
 00001C96  3C 22	   *	    cmp    al, 022h
 00001C98  74 04	   *	    je	@C03B7
 00001C9A  3C 2F	   *	    cmp    al, 02Fh
 00001C9C  75 04	   *	    jne    @C03B6
 00001C9E		   *@C03B7:
 00001C9E  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001CA0  EB 62	   *	    jmp    @C03BB
 00001CA2		   *@C03B6:
 00001CA2  3C 09	   *	    cmp    al, 009h
 00001CA4  74 0C	   *	    je	@C03BD
 00001CA6  3C 16	   *	    cmp    al, 016h
 00001CA8  74 08	   *	    je	@C03BD
 00001CAA  3C 23	   *	    cmp    al, 023h
 00001CAC  74 04	   *	    je	@C03BD
 00001CAE  3C 30	   *	    cmp    al, 030h
 00001CB0  75 04	   *	    jne    @C03BC
 00001CB2		   *@C03BD:
 00001CB2  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001CB4  EB 4E	   *	    jmp    @C03C1
 00001CB6		   *@C03BC:
 00001CB6  3C 0A	   *	    cmp    al, 00Ah
 00001CB8  74 0C	   *	    je	@C03C3
 00001CBA  3C 17	   *	    cmp    al, 017h
 00001CBC  74 08	   *	    je	@C03C3
 00001CBE  3C 24	   *	    cmp    al, 024h
 00001CC0  74 04	   *	    je	@C03C3
 00001CC2  3C 31	   *	    cmp    al, 031h
 00001CC4  75 04	   *	    jne    @C03C2
 00001CC6		   *@C03C3:
 00001CC6  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001CC8  EB 3A	   *	    jmp    @C03C7
 00001CCA		   *@C03C2:
 00001CCA  3C 0B	   *	    cmp    al, 00Bh
 00001CCC  74 0C	   *	    je	@C03C9
 00001CCE  3C 18	   *	    cmp    al, 018h
 00001CD0  74 08	   *	    je	@C03C9
 00001CD2  3C 25	   *	    cmp    al, 025h
 00001CD4  74 04	   *	    je	@C03C9
 00001CD6  3C 32	   *	    cmp    al, 032h
 00001CD8  75 04	   *	    jne    @C03C8
 00001CDA		   *@C03C9:
 00001CDA  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001CDC  EB 26	   *	    jmp    @C03CD
 00001CDE		   *@C03C8:
 00001CDE  3C 0C	   *	    cmp    al, 00Ch
 00001CE0  74 0C	   *	    je	@C03CF
 00001CE2  3C 19	   *	    cmp    al, 019h
 00001CE4  74 08	   *	    je	@C03CF
 00001CE6  3C 26	   *	    cmp    al, 026h
 00001CE8  74 04	   *	    je	@C03CF
 00001CEA  3C 33	   *	    cmp    al, 033h
 00001CEC  75 04	   *	    jne    @C03CE
 00001CEE		   *@C03CF:
 00001CEE  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001CF0  EB 12	   *	    jmp    @C03D3
 00001CF2		   *@C03CE:
 00001CF2  3C 0D	   *	    cmp    al, 00Dh
 00001CF4  74 0C	   *	    je	@C03D5
 00001CF6  3C 1A	   *	    cmp    al, 01Ah
 00001CF8  74 08	   *	    je	@C03D5
 00001CFA  3C 27	   *	    cmp    al, 027h
 00001CFC  74 04	   *	    je	@C03D5
 00001CFE  3C 34	   *	    cmp    al, 034h
 00001D00  75 02	   *	    jne    @C03D4
 00001D02		   *@C03D5:
 00001D02  B0 0D			mov al,13
				.endif
 00001D04		   *@C03D4:
 00001D04		   *@C03D3:
 00001D04		   *@C03CD:
 00001D04		   *@C03C7:
 00001D04		   *@C03C1:
 00001D04		   *@C03BB:
 00001D04		   *@C03B5:
 00001D04		   *@C03AF:
 00001D04		   *@C03A9:
 00001D04		   *@C03A3:
 00001D04		   *@C039D:
 00001D04		   *@C0397:
 00001D04		   *@C0391:
 00001D04  A2 00000029 R	mov straights[5], al

 00001D09  A0 00000014 R	mov al, cards7.value
				.if (al == 1||al==14||al==27||al==40)
 00001D0E  3C 01	   *	    cmp    al, 001h
 00001D10  74 0C	   *	    je	@C03DA
 00001D12  3C 0E	   *	    cmp    al, 00Eh
 00001D14  74 08	   *	    je	@C03DA
 00001D16  3C 1B	   *	    cmp    al, 01Bh
 00001D18  74 04	   *	    je	@C03DA
 00001D1A  3C 28	   *	    cmp    al, 028h
 00001D1C  75 07	   *	    jne    @C03D9
 00001D1E		   *@C03DA:
 00001D1E  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001D20  E9 000000FD	   *	    jmp    @C03DE
 00001D25		   *@C03D9:
 00001D25  3C 02	   *	    cmp    al, 002h
 00001D27  74 0C	   *	    je	@C03E0
 00001D29  3C 0F	   *	    cmp    al, 00Fh
 00001D2B  74 08	   *	    je	@C03E0
 00001D2D  3C 1C	   *	    cmp    al, 01Ch
 00001D2F  74 04	   *	    je	@C03E0
 00001D31  3C 29	   *	    cmp    al, 029h
 00001D33  75 07	   *	    jne    @C03DF
 00001D35		   *@C03E0:
 00001D35  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001D37  E9 000000E6	   *	    jmp    @C03E4
 00001D3C		   *@C03DF:
 00001D3C  3C 03	   *	    cmp    al, 003h
 00001D3E  74 0C	   *	    je	@C03E6
 00001D40  3C 10	   *	    cmp    al, 010h
 00001D42  74 08	   *	    je	@C03E6
 00001D44  3C 1D	   *	    cmp    al, 01Dh
 00001D46  74 04	   *	    je	@C03E6
 00001D48  3C 2A	   *	    cmp    al, 02Ah
 00001D4A  75 07	   *	    jne    @C03E5
 00001D4C		   *@C03E6:
 00001D4C  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001D4E  E9 000000CF	   *	    jmp    @C03EA
 00001D53		   *@C03E5:
 00001D53  3C 04	   *	    cmp    al, 004h
 00001D55  74 0C	   *	    je	@C03EC
 00001D57  3C 11	   *	    cmp    al, 011h
 00001D59  74 08	   *	    je	@C03EC
 00001D5B  3C 1E	   *	    cmp    al, 01Eh
 00001D5D  74 04	   *	    je	@C03EC
 00001D5F  3C 2B	   *	    cmp    al, 02Bh
 00001D61  75 07	   *	    jne    @C03EB
 00001D63		   *@C03EC:
 00001D63  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001D65  E9 000000B8	   *	    jmp    @C03F0
 00001D6A		   *@C03EB:
 00001D6A  3C 05	   *	    cmp    al, 005h
 00001D6C  74 0C	   *	    je	@C03F2
 00001D6E  3C 12	   *	    cmp    al, 012h
 00001D70  74 08	   *	    je	@C03F2
 00001D72  3C 1F	   *	    cmp    al, 01Fh
 00001D74  74 04	   *	    je	@C03F2
 00001D76  3C 2C	   *	    cmp    al, 02Ch
 00001D78  75 07	   *	    jne    @C03F1
 00001D7A		   *@C03F2:
 00001D7A  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001D7C  E9 000000A1	   *	    jmp    @C03F6
 00001D81		   *@C03F1:
 00001D81  3C 06	   *	    cmp    al, 006h
 00001D83  74 0C	   *	    je	@C03F8
 00001D85  3C 13	   *	    cmp    al, 013h
 00001D87  74 08	   *	    je	@C03F8
 00001D89  3C 20	   *	    cmp    al, 020h
 00001D8B  74 04	   *	    je	@C03F8
 00001D8D  3C 2D	   *	    cmp    al, 02Dh
 00001D8F  75 07	   *	    jne    @C03F7
 00001D91		   *@C03F8:
 00001D91  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001D93  E9 0000008A	   *	    jmp    @C03FC
 00001D98		   *@C03F7:
 00001D98  3C 07	   *	    cmp    al, 007h
 00001D9A  74 0C	   *	    je	@C03FE
 00001D9C  3C 14	   *	    cmp    al, 014h
 00001D9E  74 08	   *	    je	@C03FE
 00001DA0  3C 21	   *	    cmp    al, 021h
 00001DA2  74 04	   *	    je	@C03FE
 00001DA4  3C 2E	   *	    cmp    al, 02Eh
 00001DA6  75 04	   *	    jne    @C03FD
 00001DA8		   *@C03FE:
 00001DA8  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001DAA  EB 76	   *	    jmp    @C0402
 00001DAC		   *@C03FD:
 00001DAC  3C 08	   *	    cmp    al, 008h
 00001DAE  74 0C	   *	    je	@C0404
 00001DB0  3C 15	   *	    cmp    al, 015h
 00001DB2  74 08	   *	    je	@C0404
 00001DB4  3C 22	   *	    cmp    al, 022h
 00001DB6  74 04	   *	    je	@C0404
 00001DB8  3C 2F	   *	    cmp    al, 02Fh
 00001DBA  75 04	   *	    jne    @C0403
 00001DBC		   *@C0404:
 00001DBC  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001DBE  EB 62	   *	    jmp    @C0408
 00001DC0		   *@C0403:
 00001DC0  3C 09	   *	    cmp    al, 009h
 00001DC2  74 0C	   *	    je	@C040A
 00001DC4  3C 16	   *	    cmp    al, 016h
 00001DC6  74 08	   *	    je	@C040A
 00001DC8  3C 23	   *	    cmp    al, 023h
 00001DCA  74 04	   *	    je	@C040A
 00001DCC  3C 30	   *	    cmp    al, 030h
 00001DCE  75 04	   *	    jne    @C0409
 00001DD0		   *@C040A:
 00001DD0  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001DD2  EB 4E	   *	    jmp    @C040E
 00001DD4		   *@C0409:
 00001DD4  3C 0A	   *	    cmp    al, 00Ah
 00001DD6  74 0C	   *	    je	@C0410
 00001DD8  3C 17	   *	    cmp    al, 017h
 00001DDA  74 08	   *	    je	@C0410
 00001DDC  3C 24	   *	    cmp    al, 024h
 00001DDE  74 04	   *	    je	@C0410
 00001DE0  3C 31	   *	    cmp    al, 031h
 00001DE2  75 04	   *	    jne    @C040F
 00001DE4		   *@C0410:
 00001DE4  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001DE6  EB 3A	   *	    jmp    @C0414
 00001DE8		   *@C040F:
 00001DE8  3C 0B	   *	    cmp    al, 00Bh
 00001DEA  74 0C	   *	    je	@C0416
 00001DEC  3C 18	   *	    cmp    al, 018h
 00001DEE  74 08	   *	    je	@C0416
 00001DF0  3C 25	   *	    cmp    al, 025h
 00001DF2  74 04	   *	    je	@C0416
 00001DF4  3C 32	   *	    cmp    al, 032h
 00001DF6  75 04	   *	    jne    @C0415
 00001DF8		   *@C0416:
 00001DF8  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001DFA  EB 26	   *	    jmp    @C041A
 00001DFC		   *@C0415:
 00001DFC  3C 0C	   *	    cmp    al, 00Ch
 00001DFE  74 0C	   *	    je	@C041C
 00001E00  3C 19	   *	    cmp    al, 019h
 00001E02  74 08	   *	    je	@C041C
 00001E04  3C 26	   *	    cmp    al, 026h
 00001E06  74 04	   *	    je	@C041C
 00001E08  3C 33	   *	    cmp    al, 033h
 00001E0A  75 04	   *	    jne    @C041B
 00001E0C		   *@C041C:
 00001E0C  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001E0E  EB 12	   *	    jmp    @C0420
 00001E10		   *@C041B:
 00001E10  3C 0D	   *	    cmp    al, 00Dh
 00001E12  74 0C	   *	    je	@C0422
 00001E14  3C 1A	   *	    cmp    al, 01Ah
 00001E16  74 08	   *	    je	@C0422
 00001E18  3C 27	   *	    cmp    al, 027h
 00001E1A  74 04	   *	    je	@C0422
 00001E1C  3C 34	   *	    cmp    al, 034h
 00001E1E  75 02	   *	    jne    @C0421
 00001E20		   *@C0422:
 00001E20  B0 0D			mov al,13
				.endif
 00001E22		   *@C0421:
 00001E22		   *@C0420:
 00001E22		   *@C041A:
 00001E22		   *@C0414:
 00001E22		   *@C040E:
 00001E22		   *@C0408:
 00001E22		   *@C0402:
 00001E22		   *@C03FC:
 00001E22		   *@C03F6:
 00001E22		   *@C03F0:
 00001E22		   *@C03EA:
 00001E22		   *@C03E4:
 00001E22		   *@C03DE:
 00001E22  A2 0000002A R	mov straights[6], al

 00001E27  B9 00000006		mov ecx,6 
 00001E2C  BF 00000006		 mov edi,6 
 00001E31  BE 00000000		 mov esi,0 
				 	 
 00001E36			 	SS1: 
 00001E36  8B D6		 		mov edx,esi 
 00001E38  42			 		inc edx 
 00001E39  51			 		push ecx 
 00001E3A  8B CF		 		mov ecx, edi 
 00001E3C			 			SS2: 
 00001E3C  8A 86 00000024 R	 				mov al, straights[esi] 
 00001E42  8A 9A 00000024 R	 				mov bl, straights[edx] 
				 					.if (al < bl) 
 00001E48  3A C3	   *	    cmp    al, bl
 00001E4A  73 0E	   *	    jae    @C0426
 00001E4C  86 C3		 						xchg al, bl 
 00001E4E  88 86 00000024 R	 						mov straights[esi],al 
 00001E54  88 9A 00000024 R	 						mov straights[edx],bl 
				 					.endif  
 00001E5A		   *@C0426:
 00001E5A  42			 				inc edx 
 00001E5B  E2 DF		 			Loop SS2 
 00001E5D  59			 		pop ecx 
 00001E5E  46			 		inc esi		 
 00001E5F  4F			 		dec edi 
 00001E60  E2 D4		 	Loop SS1 

 00001E62  BE 00000000		mov esi,0
 00001E67  BF 00000001		mov edi,1
 00001E6C  8A 86 00000024 R		mov al, straights[esi]
 00001E72  8A 9F 00000024 R		mov bl, straights[edi]
 00001E78  89 35 00000000 R		mov var1, esi
 00001E7E  89 3D 00000004 R		mov var2, edi
					.if(al==bl)
 00001E84  3A C3	   *	    cmp    al, bl
 00001E86  75 07	   *	    jne    @C0428
 00001E88  47					inc edi
 00001E89  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001E8F		   *@C0428:
					.if(al==bl)
 00001E8F  3A C3	   *	    cmp    al, bl
 00001E91  75 07	   *	    jne    @C042A
 00001E93  47					inc edi
 00001E94  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001E9A		   *@C042A:
 00001E9A  2A C3			sub al,bl
 00001E9C  46				inc esi
 00001E9D  47				inc edi
						.if(al==bl)
 00001E9E  3A C3	   *	    cmp    al, bl
 00001EA0  0F 85 000000CB  *	    jne    @C042C
 00001EA6  8A 86 00000024 R				mov al, straights[esi]
 00001EAC  8A 9F 00000024 R				mov bl, straights[edi]
							.if(al==bl)
 00001EB2  3A C3	   *	    cmp    al, bl
 00001EB4  75 07	   *	    jne    @C042E
 00001EB6  47							inc edi
 00001EB7  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 00001EBD		   *@C042E:
 00001EBD  3A C3	   *	    cmp    al, bl
 00001EBF  75 07	   *	    jne    @C0430
 00001EC1  47							inc edi
 00001EC2  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
 00001EC8		   *@C0430:
 00001EC8  2A C3					sub al,bl
 00001ECA  46						inc esi
 00001ECB  47						inc edi
								.if(al==bl)
 00001ECC  3A C3	   *	    cmp    al, bl
 00001ECE  0F 85 0000009D  *	    jne    @C0432
 00001ED4  8A 86 00000024 R						mov al, straights[esi]
 00001EDA  8A 9F 00000024 R						mov bl, straights[edi]
									.if(al==bl)
 00001EE0  3A C3	   *	    cmp    al, bl
 00001EE2  75 07	   *	    jne    @C0434
 00001EE4  47									inc edi
 00001EE5  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 00001EEB		   *@C0434:
 00001EEB  3A C3	   *	    cmp    al, bl
 00001EED  75 07	   *	    jne    @C0436
 00001EEF  47									inc edi
 00001EF0  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
 00001EF6		   *@C0436:
 00001EF6  2A C3							sub al,bl
 00001EF8  46								inc esi
 00001EF9  47								inc edi
										.if(al==bl)
 00001EFA  3A C3	   *	    cmp    al, bl
 00001EFC  75 73	   *	    jne    @C0438
 00001EFE  8A 86 00000024 R								mov al, straights[esi]
 00001F04  8A 9F 00000024 R									mov bl, straights[edi]
												.if(al==bl)
 00001F0A  3A C3	   *	    cmp    al, bl
 00001F0C  75 07	   *	    jne    @C043A
 00001F0E  47												inc edi
 00001F0F  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 00001F15		   *@C043A:
 00001F15  3A C3	   *	    cmp    al, bl
 00001F17  75 07	   *	    jne    @C043C
 00001F19  47												inc edi
 00001F1A  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
 00001F20		   *@C043C:
 00001F20  2A C3										sub al,bl
 00001F22  46											inc esi
 00001F23  47											inc edi
													.if(al==bl)
 00001F24  3A C3	   *	    cmp    al, bl
 00001F26  75 49	   *	    jne    @C043E
 00001F28  8A 86 00000024 R											mov al, straights[esi]
 00001F2E  8A 9F 00000024 R											mov bl, straights[edi]
														.if(al==bl)
 00001F34  3A C3	   *	    cmp    al, bl
 00001F36  75 07	   *	    jne    @C0440
 00001F38  47														inc edi
 00001F39  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 00001F3F		   *@C0440:
 00001F3F  3A C3	   *	    cmp    al, bl
 00001F41  75 07	   *	    jne    @C0442
 00001F43  47														inc edi
 00001F44  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
 00001F4A		   *@C0442:
 00001F4A  2A C3												sub al,bl
 00001F4C  46													inc esi
 00001F4D  47													inc edi
															.if(al==bl)
 00001F4E  3A C3	   *	    cmp    al, bl
 00001F50  75 1F	   *	    jne    @C0444
 00001F52  FF 05 0000005A R													inc isstraights
 00001F58  8B 35 00000000 R													mov esi, var1
 00001F5E  8A 86 00000024 R													mov al, straights[esi]
																	.if(HighSts < al)
 00001F64  38 05 00000076 R *	    cmp    HighSts, al
 00001F6A  73 05	   *	    jae    @C0446
 00001F6C  A2 00000076 R															mov HighSts, al
																	.endif

													.endif
 00001F71		   *@C0446:
											.endif
 00001F71		   *@C0444:
									.endif
 00001F71		   *@C043E:
							.endif
 00001F71		   *@C0438:
					.endif
 00001F71		   *@C0432:
 00001F71		   *@C042C:
 00001F71  8B 35 00000000 R	mov esi, var1
 00001F77  8B 3D 00000004 R	mov edi, var2
 00001F7D  46			inc esi
 00001F7E  47			inc edi

 00001F7F  8A 86 00000024 R		mov al, straights[esi]
 00001F85  8A 9F 00000024 R		mov bl, straights[edi]
 00001F8B  8B 35 00000000 R		mov esi, var1
 00001F91  8B 3D 00000004 R		mov edi, var2
					.if(al==bl)
 00001F97  3A C3	   *	    cmp    al, bl
 00001F99  75 07	   *	    jne    @C0448
 00001F9B  47					inc edi
 00001F9C  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001FA2		   *@C0448:
					.if(al==bl)
 00001FA2  3A C3	   *	    cmp    al, bl
 00001FA4  75 07	   *	    jne    @C044A
 00001FA6  47					inc edi
 00001FA7  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 00001FAD		   *@C044A:
 00001FAD  2A C3			sub al,bl
 00001FAF  46				inc esi
 00001FB0  47				inc edi
						.if(al==bl)
 00001FB1  3A C3	   *	    cmp    al, bl
 00001FB3  0F 85 000000CB  *	    jne    @C044C
 00001FB9  8A 86 00000024 R				mov al, straights[esi]
 00001FBF  8A 9F 00000024 R				mov bl, straights[edi]
							.if(al==bl)
 00001FC5  3A C3	   *	    cmp    al, bl
 00001FC7  75 07	   *	    jne    @C044E
 00001FC9  47							inc edi
 00001FCA  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 00001FD0		   *@C044E:
 00001FD0  3A C3	   *	    cmp    al, bl
 00001FD2  75 07	   *	    jne    @C0450
 00001FD4  47							inc edi
 00001FD5  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
 00001FDB		   *@C0450:
 00001FDB  2A C3					sub al,bl
 00001FDD  46						inc esi
 00001FDE  47						inc edi
								.if(al==bl)
 00001FDF  3A C3	   *	    cmp    al, bl
 00001FE1  0F 85 0000009D  *	    jne    @C0452
 00001FE7  8A 86 00000024 R						mov al, straights[esi]
 00001FED  8A 9F 00000024 R						mov bl, straights[edi]
									.if(al==bl)
 00001FF3  3A C3	   *	    cmp    al, bl
 00001FF5  75 07	   *	    jne    @C0454
 00001FF7  47									inc edi
 00001FF8  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 00001FFE		   *@C0454:
 00001FFE  3A C3	   *	    cmp    al, bl
 00002000  75 07	   *	    jne    @C0456
 00002002  47									inc edi
 00002003  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
 00002009		   *@C0456:
 00002009  2A C3							sub al,bl
 0000200B  46								inc esi
 0000200C  47								inc edi
										.if(al==bl)
 0000200D  3A C3	   *	    cmp    al, bl
 0000200F  75 73	   *	    jne    @C0458
 00002011  8A 86 00000024 R								mov al, straights[esi]
 00002017  8A 9F 00000024 R									mov bl, straights[edi]
												.if(al==bl)
 0000201D  3A C3	   *	    cmp    al, bl
 0000201F  75 07	   *	    jne    @C045A
 00002021  47												inc edi
 00002022  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 00002028		   *@C045A:
 00002028  3A C3	   *	    cmp    al, bl
 0000202A  75 07	   *	    jne    @C045C
 0000202C  47												inc edi
 0000202D  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
 00002033		   *@C045C:
 00002033  2A C3										sub al,bl
 00002035  46											inc esi
 00002036  47											inc edi
													.if(al==bl)
 00002037  3A C3	   *	    cmp    al, bl
 00002039  75 49	   *	    jne    @C045E
 0000203B  8A 86 00000024 R											mov al, straights[esi]
 00002041  8A 9F 00000024 R											mov bl, straights[edi]
														.if(al==bl)
 00002047  3A C3	   *	    cmp    al, bl
 00002049  75 07	   *	    jne    @C0460
 0000204B  47														inc edi
 0000204C  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 00002052		   *@C0460:
 00002052  3A C3	   *	    cmp    al, bl
 00002054  75 07	   *	    jne    @C0462
 00002056  47														inc edi
 00002057  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
 0000205D		   *@C0462:
 0000205D  2A C3												sub al,bl
 0000205F  46													inc esi
 00002060  47													inc edi
															.if(al==bl)
 00002061  3A C3	   *	    cmp    al, bl
 00002063  75 1F	   *	    jne    @C0464
 00002065  FF 05 0000005A R													inc isstraights
 0000206B  8B 35 00000000 R													mov esi, var1
 00002071  8A 86 00000024 R													mov al, straights[esi]
																	.if(HighSts < al)
 00002077  38 05 00000076 R *	    cmp    HighSts, al
 0000207D  73 05	   *	    jae    @C0466
 0000207F  A2 00000076 R															mov HighSts, al
																	.endif
													.endif
 00002084		   *@C0466:
											.endif
 00002084		   *@C0464:
									.endif
 00002084		   *@C045E:
							.endif
 00002084		   *@C0458:
					.endif
 00002084		   *@C0452:
 00002084		   *@C044C:
 00002084  8B 35 00000000 R	mov esi,var1
 0000208A  8B 3D 00000004 R	mov edi,var2
 00002090  46			inc esi
 00002091  47			inc edi

 00002092  8A 86 00000024 R		mov al, straights[esi]
 00002098  8A 9F 00000024 R		mov bl, straights[edi]
					.if(al==bl)
 0000209E  3A C3	   *	    cmp    al, bl
 000020A0  75 07	   *	    jne    @C0468
 000020A2  47					inc edi
 000020A3  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 000020A9		   *@C0468:
					.if(al==bl)
 000020A9  3A C3	   *	    cmp    al, bl
 000020AB  75 07	   *	    jne    @C046A
 000020AD  47					inc edi
 000020AE  8A 9F 00000024 R			mov bl, straights[edi]
					.endif
 000020B4		   *@C046A:
 000020B4  2A C3			sub al,bl
 000020B6  46				inc esi
 000020B7  47				inc edi
						.if(al==bl)
 000020B8  3A C3	   *	    cmp    al, bl
 000020BA  0F 85 000000CB  *	    jne    @C046C
 000020C0  8A 86 00000024 R				mov al, straights[esi]
 000020C6  8A 9F 00000024 R				mov bl, straights[edi]
							.if(al==bl)
 000020CC  3A C3	   *	    cmp    al, bl
 000020CE  75 07	   *	    jne    @C046E
 000020D0  47							inc edi
 000020D1  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 000020D7		   *@C046E:
 000020D7  3A C3	   *	    cmp    al, bl
 000020D9  75 07	   *	    jne    @C0470
 000020DB  47							inc edi
 000020DC  8A 9F 00000024 R					mov bl, straights[edi]
							.endif
 000020E2		   *@C0470:
 000020E2  2A C3					sub al,bl
 000020E4  46						inc esi
 000020E5  47						inc edi
								.if(al==bl)
 000020E6  3A C3	   *	    cmp    al, bl
 000020E8  0F 85 0000009D  *	    jne    @C0472
 000020EE  8A 86 00000024 R						mov al, straights[esi]
 000020F4  8A 9F 00000024 R						mov bl, straights[edi]
									.if(al==bl)
 000020FA  3A C3	   *	    cmp    al, bl
 000020FC  75 07	   *	    jne    @C0474
 000020FE  47									inc edi
 000020FF  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 00002105		   *@C0474:
 00002105  3A C3	   *	    cmp    al, bl
 00002107  75 07	   *	    jne    @C0476
 00002109  47									inc edi
 0000210A  8A 9F 00000024 R							mov bl, straights[edi]
									.endif
 00002110		   *@C0476:
 00002110  2A C3							sub al,bl
 00002112  46								inc esi
 00002113  47								inc edi
										.if(al==bl)
 00002114  3A C3	   *	    cmp    al, bl
 00002116  75 73	   *	    jne    @C0478
 00002118  8A 86 00000024 R								mov al, straights[esi]
 0000211E  8A 9F 00000024 R									mov bl, straights[edi]
												.if(al==bl)
 00002124  3A C3	   *	    cmp    al, bl
 00002126  75 07	   *	    jne    @C047A
 00002128  47												inc edi
 00002129  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 0000212F		   *@C047A:
 0000212F  3A C3	   *	    cmp    al, bl
 00002131  75 07	   *	    jne    @C047C
 00002133  47												inc edi
 00002134  8A 9F 00000024 R										mov bl, straights[edi]
												.endif
 0000213A		   *@C047C:
 0000213A  2A C3										sub al,bl
 0000213C  46											inc esi
 0000213D  47											inc edi
													.if(al==bl)
 0000213E  3A C3	   *	    cmp    al, bl
 00002140  75 49	   *	    jne    @C047E
 00002142  8A 86 00000024 R											mov al, straights[esi]
 00002148  8A 9F 00000024 R											mov bl, straights[edi]
														.if(al==bl)
 0000214E  3A C3	   *	    cmp    al, bl
 00002150  75 07	   *	    jne    @C0480
 00002152  47														inc edi
 00002153  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 00002159		   *@C0480:
 00002159  3A C3	   *	    cmp    al, bl
 0000215B  75 07	   *	    jne    @C0482
 0000215D  47														inc edi
 0000215E  8A 9F 00000024 R												mov bl, straights[edi]
														.endif
 00002164		   *@C0482:
 00002164  2A C3												sub al,bl
 00002166  46													inc esi
 00002167  47													inc edi
															.if(al==bl)
 00002168  3A C3	   *	    cmp    al, bl
 0000216A  75 1F	   *	    jne    @C0484
 0000216C  FF 05 0000005A R													inc isstraights
 00002172  8B 35 00000000 R													mov esi, var1
 00002178  8A 86 00000024 R													mov al, straights[esi]
																	.if(HighSts < al)
 0000217E  38 05 00000076 R *	    cmp    HighSts, al
 00002184  73 05	   *	    jae    @C0486
 00002186  A2 00000076 R															mov HighSts, al
																	.endif
													.endif
 0000218B		   *@C0486:
											.endif
 0000218B		   *@C0484:
									.endif
 0000218B		   *@C047E:
							.endif
 0000218B		   *@C0478:
					.endif
 0000218B		   *@C0472:
 0000218B		   *@C046C:

					.if(HighSts==13)
 0000218B  80 3D 00000076 R
	   0D		   *	    cmp    HighSts, 00Dh
 00002192  75 13	   *	    jne    @C0488
						.if(SpockFlush > 0)
 00002194  83 3D 000000CA R
	   00		   *	    cmp    SpockFlush, 000h
 0000219B  76 0A	   *	    jbe    @C048A
 0000219D  C7 05 000000BA R				mov SpockRoyal, 1
	   00000001
						.endif
					.endif
 000021A7		   *@C048A:
 000021A7		   *@C0488:

					.if (HighStS > 0)
 000021A7  80 3D 00000076 R
	   00		   *	    cmp    HighSts, 000h
 000021AE  76 0A	   *	    jbe    @C048C
 000021B0  C7 05 000000CE R			mov SpockStraight,1
	   00000001
					.endif
 000021BA		   *@C048C:

				;Player Straight
 000021BA  A0 00000016 R	mov al, cardp1.value
				.if (al == 1||al==14||al==27||al==40)
 000021BF  3C 01	   *	    cmp    al, 001h
 000021C1  74 0C	   *	    je	@C048F
 000021C3  3C 0E	   *	    cmp    al, 00Eh
 000021C5  74 08	   *	    je	@C048F
 000021C7  3C 1B	   *	    cmp    al, 01Bh
 000021C9  74 04	   *	    je	@C048F
 000021CB  3C 28	   *	    cmp    al, 028h
 000021CD  75 07	   *	    jne    @C048E
 000021CF		   *@C048F:
 000021CF  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000021D1  E9 000000FD	   *	    jmp    @C0493
 000021D6		   *@C048E:
 000021D6  3C 02	   *	    cmp    al, 002h
 000021D8  74 0C	   *	    je	@C0495
 000021DA  3C 0F	   *	    cmp    al, 00Fh
 000021DC  74 08	   *	    je	@C0495
 000021DE  3C 1C	   *	    cmp    al, 01Ch
 000021E0  74 04	   *	    je	@C0495
 000021E2  3C 29	   *	    cmp    al, 029h
 000021E4  75 07	   *	    jne    @C0494
 000021E6		   *@C0495:
 000021E6  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000021E8  E9 000000E6	   *	    jmp    @C0499
 000021ED		   *@C0494:
 000021ED  3C 03	   *	    cmp    al, 003h
 000021EF  74 0C	   *	    je	@C049B
 000021F1  3C 10	   *	    cmp    al, 010h
 000021F3  74 08	   *	    je	@C049B
 000021F5  3C 1D	   *	    cmp    al, 01Dh
 000021F7  74 04	   *	    je	@C049B
 000021F9  3C 2A	   *	    cmp    al, 02Ah
 000021FB  75 07	   *	    jne    @C049A
 000021FD		   *@C049B:
 000021FD  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000021FF  E9 000000CF	   *	    jmp    @C049F
 00002204		   *@C049A:
 00002204  3C 04	   *	    cmp    al, 004h
 00002206  74 0C	   *	    je	@C04A1
 00002208  3C 11	   *	    cmp    al, 011h
 0000220A  74 08	   *	    je	@C04A1
 0000220C  3C 1E	   *	    cmp    al, 01Eh
 0000220E  74 04	   *	    je	@C04A1
 00002210  3C 2B	   *	    cmp    al, 02Bh
 00002212  75 07	   *	    jne    @C04A0
 00002214		   *@C04A1:
 00002214  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002216  E9 000000B8	   *	    jmp    @C04A5
 0000221B		   *@C04A0:
 0000221B  3C 05	   *	    cmp    al, 005h
 0000221D  74 0C	   *	    je	@C04A7
 0000221F  3C 12	   *	    cmp    al, 012h
 00002221  74 08	   *	    je	@C04A7
 00002223  3C 1F	   *	    cmp    al, 01Fh
 00002225  74 04	   *	    je	@C04A7
 00002227  3C 2C	   *	    cmp    al, 02Ch
 00002229  75 07	   *	    jne    @C04A6
 0000222B		   *@C04A7:
 0000222B  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000222D  E9 000000A1	   *	    jmp    @C04AB
 00002232		   *@C04A6:
 00002232  3C 06	   *	    cmp    al, 006h
 00002234  74 0C	   *	    je	@C04AD
 00002236  3C 13	   *	    cmp    al, 013h
 00002238  74 08	   *	    je	@C04AD
 0000223A  3C 20	   *	    cmp    al, 020h
 0000223C  74 04	   *	    je	@C04AD
 0000223E  3C 2D	   *	    cmp    al, 02Dh
 00002240  75 07	   *	    jne    @C04AC
 00002242		   *@C04AD:
 00002242  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002244  E9 0000008A	   *	    jmp    @C04B1
 00002249		   *@C04AC:
 00002249  3C 07	   *	    cmp    al, 007h
 0000224B  74 0C	   *	    je	@C04B3
 0000224D  3C 14	   *	    cmp    al, 014h
 0000224F  74 08	   *	    je	@C04B3
 00002251  3C 21	   *	    cmp    al, 021h
 00002253  74 04	   *	    je	@C04B3
 00002255  3C 2E	   *	    cmp    al, 02Eh
 00002257  75 04	   *	    jne    @C04B2
 00002259		   *@C04B3:
 00002259  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000225B  EB 76	   *	    jmp    @C04B7
 0000225D		   *@C04B2:
 0000225D  3C 08	   *	    cmp    al, 008h
 0000225F  74 0C	   *	    je	@C04B9
 00002261  3C 15	   *	    cmp    al, 015h
 00002263  74 08	   *	    je	@C04B9
 00002265  3C 22	   *	    cmp    al, 022h
 00002267  74 04	   *	    je	@C04B9
 00002269  3C 2F	   *	    cmp    al, 02Fh
 0000226B  75 04	   *	    jne    @C04B8
 0000226D		   *@C04B9:
 0000226D  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000226F  EB 62	   *	    jmp    @C04BD
 00002271		   *@C04B8:
 00002271  3C 09	   *	    cmp    al, 009h
 00002273  74 0C	   *	    je	@C04BF
 00002275  3C 16	   *	    cmp    al, 016h
 00002277  74 08	   *	    je	@C04BF
 00002279  3C 23	   *	    cmp    al, 023h
 0000227B  74 04	   *	    je	@C04BF
 0000227D  3C 30	   *	    cmp    al, 030h
 0000227F  75 04	   *	    jne    @C04BE
 00002281		   *@C04BF:
 00002281  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002283  EB 4E	   *	    jmp    @C04C3
 00002285		   *@C04BE:
 00002285  3C 0A	   *	    cmp    al, 00Ah
 00002287  74 0C	   *	    je	@C04C5
 00002289  3C 17	   *	    cmp    al, 017h
 0000228B  74 08	   *	    je	@C04C5
 0000228D  3C 24	   *	    cmp    al, 024h
 0000228F  74 04	   *	    je	@C04C5
 00002291  3C 31	   *	    cmp    al, 031h
 00002293  75 04	   *	    jne    @C04C4
 00002295		   *@C04C5:
 00002295  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002297  EB 3A	   *	    jmp    @C04C9
 00002299		   *@C04C4:
 00002299  3C 0B	   *	    cmp    al, 00Bh
 0000229B  74 0C	   *	    je	@C04CB
 0000229D  3C 18	   *	    cmp    al, 018h
 0000229F  74 08	   *	    je	@C04CB
 000022A1  3C 25	   *	    cmp    al, 025h
 000022A3  74 04	   *	    je	@C04CB
 000022A5  3C 32	   *	    cmp    al, 032h
 000022A7  75 04	   *	    jne    @C04CA
 000022A9		   *@C04CB:
 000022A9  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000022AB  EB 26	   *	    jmp    @C04CF
 000022AD		   *@C04CA:
 000022AD  3C 0C	   *	    cmp    al, 00Ch
 000022AF  74 0C	   *	    je	@C04D1
 000022B1  3C 19	   *	    cmp    al, 019h
 000022B3  74 08	   *	    je	@C04D1
 000022B5  3C 26	   *	    cmp    al, 026h
 000022B7  74 04	   *	    je	@C04D1
 000022B9  3C 33	   *	    cmp    al, 033h
 000022BB  75 04	   *	    jne    @C04D0
 000022BD		   *@C04D1:
 000022BD  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000022BF  EB 12	   *	    jmp    @C04D5
 000022C1		   *@C04D0:
 000022C1  3C 0D	   *	    cmp    al, 00Dh
 000022C3  74 0C	   *	    je	@C04D7
 000022C5  3C 1A	   *	    cmp    al, 01Ah
 000022C7  74 08	   *	    je	@C04D7
 000022C9  3C 27	   *	    cmp    al, 027h
 000022CB  74 04	   *	    je	@C04D7
 000022CD  3C 34	   *	    cmp    al, 034h
 000022CF  75 02	   *	    jne    @C04D6
 000022D1		   *@C04D7:
 000022D1  B0 0D			mov al,13
				.endif
 000022D3		   *@C04D6:
 000022D3		   *@C04D5:
 000022D3		   *@C04CF:
 000022D3		   *@C04C9:
 000022D3		   *@C04C3:
 000022D3		   *@C04BD:
 000022D3		   *@C04B7:
 000022D3		   *@C04B1:
 000022D3		   *@C04AB:
 000022D3		   *@C04A5:
 000022D3		   *@C049F:
 000022D3		   *@C0499:
 000022D3		   *@C0493:
 000022D3  A2 0000002B R	mov straightp[0], al


 000022D8  A0 00000018 R	mov al, cardp2.value
				.if (al == 1||al==14||al==27||al==40)
 000022DD  3C 01	   *	    cmp    al, 001h
 000022DF  74 0C	   *	    je	@C04DC
 000022E1  3C 0E	   *	    cmp    al, 00Eh
 000022E3  74 08	   *	    je	@C04DC
 000022E5  3C 1B	   *	    cmp    al, 01Bh
 000022E7  74 04	   *	    je	@C04DC
 000022E9  3C 28	   *	    cmp    al, 028h
 000022EB  75 07	   *	    jne    @C04DB
 000022ED		   *@C04DC:
 000022ED  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000022EF  E9 000000FD	   *	    jmp    @C04E0
 000022F4		   *@C04DB:
 000022F4  3C 02	   *	    cmp    al, 002h
 000022F6  74 0C	   *	    je	@C04E2
 000022F8  3C 0F	   *	    cmp    al, 00Fh
 000022FA  74 08	   *	    je	@C04E2
 000022FC  3C 1C	   *	    cmp    al, 01Ch
 000022FE  74 04	   *	    je	@C04E2
 00002300  3C 29	   *	    cmp    al, 029h
 00002302  75 07	   *	    jne    @C04E1
 00002304		   *@C04E2:
 00002304  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002306  E9 000000E6	   *	    jmp    @C04E6
 0000230B		   *@C04E1:
 0000230B  3C 03	   *	    cmp    al, 003h
 0000230D  74 0C	   *	    je	@C04E8
 0000230F  3C 10	   *	    cmp    al, 010h
 00002311  74 08	   *	    je	@C04E8
 00002313  3C 1D	   *	    cmp    al, 01Dh
 00002315  74 04	   *	    je	@C04E8
 00002317  3C 2A	   *	    cmp    al, 02Ah
 00002319  75 07	   *	    jne    @C04E7
 0000231B		   *@C04E8:
 0000231B  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000231D  E9 000000CF	   *	    jmp    @C04EC
 00002322		   *@C04E7:
 00002322  3C 04	   *	    cmp    al, 004h
 00002324  74 0C	   *	    je	@C04EE
 00002326  3C 11	   *	    cmp    al, 011h
 00002328  74 08	   *	    je	@C04EE
 0000232A  3C 1E	   *	    cmp    al, 01Eh
 0000232C  74 04	   *	    je	@C04EE
 0000232E  3C 2B	   *	    cmp    al, 02Bh
 00002330  75 07	   *	    jne    @C04ED
 00002332		   *@C04EE:
 00002332  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002334  E9 000000B8	   *	    jmp    @C04F2
 00002339		   *@C04ED:
 00002339  3C 05	   *	    cmp    al, 005h
 0000233B  74 0C	   *	    je	@C04F4
 0000233D  3C 12	   *	    cmp    al, 012h
 0000233F  74 08	   *	    je	@C04F4
 00002341  3C 1F	   *	    cmp    al, 01Fh
 00002343  74 04	   *	    je	@C04F4
 00002345  3C 2C	   *	    cmp    al, 02Ch
 00002347  75 07	   *	    jne    @C04F3
 00002349		   *@C04F4:
 00002349  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000234B  E9 000000A1	   *	    jmp    @C04F8
 00002350		   *@C04F3:
 00002350  3C 06	   *	    cmp    al, 006h
 00002352  74 0C	   *	    je	@C04FA
 00002354  3C 13	   *	    cmp    al, 013h
 00002356  74 08	   *	    je	@C04FA
 00002358  3C 20	   *	    cmp    al, 020h
 0000235A  74 04	   *	    je	@C04FA
 0000235C  3C 2D	   *	    cmp    al, 02Dh
 0000235E  75 07	   *	    jne    @C04F9
 00002360		   *@C04FA:
 00002360  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002362  E9 0000008A	   *	    jmp    @C04FE
 00002367		   *@C04F9:
 00002367  3C 07	   *	    cmp    al, 007h
 00002369  74 0C	   *	    je	@C0500
 0000236B  3C 14	   *	    cmp    al, 014h
 0000236D  74 08	   *	    je	@C0500
 0000236F  3C 21	   *	    cmp    al, 021h
 00002371  74 04	   *	    je	@C0500
 00002373  3C 2E	   *	    cmp    al, 02Eh
 00002375  75 04	   *	    jne    @C04FF
 00002377		   *@C0500:
 00002377  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002379  EB 76	   *	    jmp    @C0504
 0000237B		   *@C04FF:
 0000237B  3C 08	   *	    cmp    al, 008h
 0000237D  74 0C	   *	    je	@C0506
 0000237F  3C 15	   *	    cmp    al, 015h
 00002381  74 08	   *	    je	@C0506
 00002383  3C 22	   *	    cmp    al, 022h
 00002385  74 04	   *	    je	@C0506
 00002387  3C 2F	   *	    cmp    al, 02Fh
 00002389  75 04	   *	    jne    @C0505
 0000238B		   *@C0506:
 0000238B  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000238D  EB 62	   *	    jmp    @C050A
 0000238F		   *@C0505:
 0000238F  3C 09	   *	    cmp    al, 009h
 00002391  74 0C	   *	    je	@C050C
 00002393  3C 16	   *	    cmp    al, 016h
 00002395  74 08	   *	    je	@C050C
 00002397  3C 23	   *	    cmp    al, 023h
 00002399  74 04	   *	    je	@C050C
 0000239B  3C 30	   *	    cmp    al, 030h
 0000239D  75 04	   *	    jne    @C050B
 0000239F		   *@C050C:
 0000239F  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000023A1  EB 4E	   *	    jmp    @C0510
 000023A3		   *@C050B:
 000023A3  3C 0A	   *	    cmp    al, 00Ah
 000023A5  74 0C	   *	    je	@C0512
 000023A7  3C 17	   *	    cmp    al, 017h
 000023A9  74 08	   *	    je	@C0512
 000023AB  3C 24	   *	    cmp    al, 024h
 000023AD  74 04	   *	    je	@C0512
 000023AF  3C 31	   *	    cmp    al, 031h
 000023B1  75 04	   *	    jne    @C0511
 000023B3		   *@C0512:
 000023B3  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000023B5  EB 3A	   *	    jmp    @C0516
 000023B7		   *@C0511:
 000023B7  3C 0B	   *	    cmp    al, 00Bh
 000023B9  74 0C	   *	    je	@C0518
 000023BB  3C 18	   *	    cmp    al, 018h
 000023BD  74 08	   *	    je	@C0518
 000023BF  3C 25	   *	    cmp    al, 025h
 000023C1  74 04	   *	    je	@C0518
 000023C3  3C 32	   *	    cmp    al, 032h
 000023C5  75 04	   *	    jne    @C0517
 000023C7		   *@C0518:
 000023C7  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000023C9  EB 26	   *	    jmp    @C051C
 000023CB		   *@C0517:
 000023CB  3C 0C	   *	    cmp    al, 00Ch
 000023CD  74 0C	   *	    je	@C051E
 000023CF  3C 19	   *	    cmp    al, 019h
 000023D1  74 08	   *	    je	@C051E
 000023D3  3C 26	   *	    cmp    al, 026h
 000023D5  74 04	   *	    je	@C051E
 000023D7  3C 33	   *	    cmp    al, 033h
 000023D9  75 04	   *	    jne    @C051D
 000023DB		   *@C051E:
 000023DB  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000023DD  EB 12	   *	    jmp    @C0522
 000023DF		   *@C051D:
 000023DF  3C 0D	   *	    cmp    al, 00Dh
 000023E1  74 0C	   *	    je	@C0524
 000023E3  3C 1A	   *	    cmp    al, 01Ah
 000023E5  74 08	   *	    je	@C0524
 000023E7  3C 27	   *	    cmp    al, 027h
 000023E9  74 04	   *	    je	@C0524
 000023EB  3C 34	   *	    cmp    al, 034h
 000023ED  75 02	   *	    jne    @C0523
 000023EF		   *@C0524:
 000023EF  B0 0D			mov al,13
				.endif
 000023F1		   *@C0523:
 000023F1		   *@C0522:
 000023F1		   *@C051C:
 000023F1		   *@C0516:
 000023F1		   *@C0510:
 000023F1		   *@C050A:
 000023F1		   *@C0504:
 000023F1		   *@C04FE:
 000023F1		   *@C04F8:
 000023F1		   *@C04F2:
 000023F1		   *@C04EC:
 000023F1		   *@C04E6:
 000023F1		   *@C04E0:
 000023F1  A2 0000002C R	mov straightp[1], al


 000023F6  A0 0000001A R	mov al, cardp3.value
				.if (al == 1||al==14||al==27||al==40)
 000023FB  3C 01	   *	    cmp    al, 001h
 000023FD  74 0C	   *	    je	@C0529
 000023FF  3C 0E	   *	    cmp    al, 00Eh
 00002401  74 08	   *	    je	@C0529
 00002403  3C 1B	   *	    cmp    al, 01Bh
 00002405  74 04	   *	    je	@C0529
 00002407  3C 28	   *	    cmp    al, 028h
 00002409  75 07	   *	    jne    @C0528
 0000240B		   *@C0529:
 0000240B  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000240D  E9 000000FD	   *	    jmp    @C052D
 00002412		   *@C0528:
 00002412  3C 02	   *	    cmp    al, 002h
 00002414  74 0C	   *	    je	@C052F
 00002416  3C 0F	   *	    cmp    al, 00Fh
 00002418  74 08	   *	    je	@C052F
 0000241A  3C 1C	   *	    cmp    al, 01Ch
 0000241C  74 04	   *	    je	@C052F
 0000241E  3C 29	   *	    cmp    al, 029h
 00002420  75 07	   *	    jne    @C052E
 00002422		   *@C052F:
 00002422  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002424  E9 000000E6	   *	    jmp    @C0533
 00002429		   *@C052E:
 00002429  3C 03	   *	    cmp    al, 003h
 0000242B  74 0C	   *	    je	@C0535
 0000242D  3C 10	   *	    cmp    al, 010h
 0000242F  74 08	   *	    je	@C0535
 00002431  3C 1D	   *	    cmp    al, 01Dh
 00002433  74 04	   *	    je	@C0535
 00002435  3C 2A	   *	    cmp    al, 02Ah
 00002437  75 07	   *	    jne    @C0534
 00002439		   *@C0535:
 00002439  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000243B  E9 000000CF	   *	    jmp    @C0539
 00002440		   *@C0534:
 00002440  3C 04	   *	    cmp    al, 004h
 00002442  74 0C	   *	    je	@C053B
 00002444  3C 11	   *	    cmp    al, 011h
 00002446  74 08	   *	    je	@C053B
 00002448  3C 1E	   *	    cmp    al, 01Eh
 0000244A  74 04	   *	    je	@C053B
 0000244C  3C 2B	   *	    cmp    al, 02Bh
 0000244E  75 07	   *	    jne    @C053A
 00002450		   *@C053B:
 00002450  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002452  E9 000000B8	   *	    jmp    @C053F
 00002457		   *@C053A:
 00002457  3C 05	   *	    cmp    al, 005h
 00002459  74 0C	   *	    je	@C0541
 0000245B  3C 12	   *	    cmp    al, 012h
 0000245D  74 08	   *	    je	@C0541
 0000245F  3C 1F	   *	    cmp    al, 01Fh
 00002461  74 04	   *	    je	@C0541
 00002463  3C 2C	   *	    cmp    al, 02Ch
 00002465  75 07	   *	    jne    @C0540
 00002467		   *@C0541:
 00002467  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002469  E9 000000A1	   *	    jmp    @C0545
 0000246E		   *@C0540:
 0000246E  3C 06	   *	    cmp    al, 006h
 00002470  74 0C	   *	    je	@C0547
 00002472  3C 13	   *	    cmp    al, 013h
 00002474  74 08	   *	    je	@C0547
 00002476  3C 20	   *	    cmp    al, 020h
 00002478  74 04	   *	    je	@C0547
 0000247A  3C 2D	   *	    cmp    al, 02Dh
 0000247C  75 07	   *	    jne    @C0546
 0000247E		   *@C0547:
 0000247E  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002480  E9 0000008A	   *	    jmp    @C054B
 00002485		   *@C0546:
 00002485  3C 07	   *	    cmp    al, 007h
 00002487  74 0C	   *	    je	@C054D
 00002489  3C 14	   *	    cmp    al, 014h
 0000248B  74 08	   *	    je	@C054D
 0000248D  3C 21	   *	    cmp    al, 021h
 0000248F  74 04	   *	    je	@C054D
 00002491  3C 2E	   *	    cmp    al, 02Eh
 00002493  75 04	   *	    jne    @C054C
 00002495		   *@C054D:
 00002495  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002497  EB 76	   *	    jmp    @C0551
 00002499		   *@C054C:
 00002499  3C 08	   *	    cmp    al, 008h
 0000249B  74 0C	   *	    je	@C0553
 0000249D  3C 15	   *	    cmp    al, 015h
 0000249F  74 08	   *	    je	@C0553
 000024A1  3C 22	   *	    cmp    al, 022h
 000024A3  74 04	   *	    je	@C0553
 000024A5  3C 2F	   *	    cmp    al, 02Fh
 000024A7  75 04	   *	    jne    @C0552
 000024A9		   *@C0553:
 000024A9  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000024AB  EB 62	   *	    jmp    @C0557
 000024AD		   *@C0552:
 000024AD  3C 09	   *	    cmp    al, 009h
 000024AF  74 0C	   *	    je	@C0559
 000024B1  3C 16	   *	    cmp    al, 016h
 000024B3  74 08	   *	    je	@C0559
 000024B5  3C 23	   *	    cmp    al, 023h
 000024B7  74 04	   *	    je	@C0559
 000024B9  3C 30	   *	    cmp    al, 030h
 000024BB  75 04	   *	    jne    @C0558
 000024BD		   *@C0559:
 000024BD  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000024BF  EB 4E	   *	    jmp    @C055D
 000024C1		   *@C0558:
 000024C1  3C 0A	   *	    cmp    al, 00Ah
 000024C3  74 0C	   *	    je	@C055F
 000024C5  3C 17	   *	    cmp    al, 017h
 000024C7  74 08	   *	    je	@C055F
 000024C9  3C 24	   *	    cmp    al, 024h
 000024CB  74 04	   *	    je	@C055F
 000024CD  3C 31	   *	    cmp    al, 031h
 000024CF  75 04	   *	    jne    @C055E
 000024D1		   *@C055F:
 000024D1  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000024D3  EB 3A	   *	    jmp    @C0563
 000024D5		   *@C055E:
 000024D5  3C 0B	   *	    cmp    al, 00Bh
 000024D7  74 0C	   *	    je	@C0565
 000024D9  3C 18	   *	    cmp    al, 018h
 000024DB  74 08	   *	    je	@C0565
 000024DD  3C 25	   *	    cmp    al, 025h
 000024DF  74 04	   *	    je	@C0565
 000024E1  3C 32	   *	    cmp    al, 032h
 000024E3  75 04	   *	    jne    @C0564
 000024E5		   *@C0565:
 000024E5  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000024E7  EB 26	   *	    jmp    @C0569
 000024E9		   *@C0564:
 000024E9  3C 0C	   *	    cmp    al, 00Ch
 000024EB  74 0C	   *	    je	@C056B
 000024ED  3C 19	   *	    cmp    al, 019h
 000024EF  74 08	   *	    je	@C056B
 000024F1  3C 26	   *	    cmp    al, 026h
 000024F3  74 04	   *	    je	@C056B
 000024F5  3C 33	   *	    cmp    al, 033h
 000024F7  75 04	   *	    jne    @C056A
 000024F9		   *@C056B:
 000024F9  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000024FB  EB 12	   *	    jmp    @C056F
 000024FD		   *@C056A:
 000024FD  3C 0D	   *	    cmp    al, 00Dh
 000024FF  74 0C	   *	    je	@C0571
 00002501  3C 1A	   *	    cmp    al, 01Ah
 00002503  74 08	   *	    je	@C0571
 00002505  3C 27	   *	    cmp    al, 027h
 00002507  74 04	   *	    je	@C0571
 00002509  3C 34	   *	    cmp    al, 034h
 0000250B  75 02	   *	    jne    @C0570
 0000250D		   *@C0571:
 0000250D  B0 0D			mov al,13
				.endif
 0000250F		   *@C0570:
 0000250F		   *@C056F:
 0000250F		   *@C0569:
 0000250F		   *@C0563:
 0000250F		   *@C055D:
 0000250F		   *@C0557:
 0000250F		   *@C0551:
 0000250F		   *@C054B:
 0000250F		   *@C0545:
 0000250F		   *@C053F:
 0000250F		   *@C0539:
 0000250F		   *@C0533:
 0000250F		   *@C052D:
 0000250F  A2 0000002D R	mov straightp[2], al


 00002514  A0 0000001C R	mov al, cardp4.value
				.if (al == 1||al==14||al==27||al==40)
 00002519  3C 01	   *	    cmp    al, 001h
 0000251B  74 0C	   *	    je	@C0576
 0000251D  3C 0E	   *	    cmp    al, 00Eh
 0000251F  74 08	   *	    je	@C0576
 00002521  3C 1B	   *	    cmp    al, 01Bh
 00002523  74 04	   *	    je	@C0576
 00002525  3C 28	   *	    cmp    al, 028h
 00002527  75 07	   *	    jne    @C0575
 00002529		   *@C0576:
 00002529  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 0000252B  E9 000000FD	   *	    jmp    @C057A
 00002530		   *@C0575:
 00002530  3C 02	   *	    cmp    al, 002h
 00002532  74 0C	   *	    je	@C057C
 00002534  3C 0F	   *	    cmp    al, 00Fh
 00002536  74 08	   *	    je	@C057C
 00002538  3C 1C	   *	    cmp    al, 01Ch
 0000253A  74 04	   *	    je	@C057C
 0000253C  3C 29	   *	    cmp    al, 029h
 0000253E  75 07	   *	    jne    @C057B
 00002540		   *@C057C:
 00002540  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002542  E9 000000E6	   *	    jmp    @C0580
 00002547		   *@C057B:
 00002547  3C 03	   *	    cmp    al, 003h
 00002549  74 0C	   *	    je	@C0582
 0000254B  3C 10	   *	    cmp    al, 010h
 0000254D  74 08	   *	    je	@C0582
 0000254F  3C 1D	   *	    cmp    al, 01Dh
 00002551  74 04	   *	    je	@C0582
 00002553  3C 2A	   *	    cmp    al, 02Ah
 00002555  75 07	   *	    jne    @C0581
 00002557		   *@C0582:
 00002557  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002559  E9 000000CF	   *	    jmp    @C0586
 0000255E		   *@C0581:
 0000255E  3C 04	   *	    cmp    al, 004h
 00002560  74 0C	   *	    je	@C0588
 00002562  3C 11	   *	    cmp    al, 011h
 00002564  74 08	   *	    je	@C0588
 00002566  3C 1E	   *	    cmp    al, 01Eh
 00002568  74 04	   *	    je	@C0588
 0000256A  3C 2B	   *	    cmp    al, 02Bh
 0000256C  75 07	   *	    jne    @C0587
 0000256E		   *@C0588:
 0000256E  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002570  E9 000000B8	   *	    jmp    @C058C
 00002575		   *@C0587:
 00002575  3C 05	   *	    cmp    al, 005h
 00002577  74 0C	   *	    je	@C058E
 00002579  3C 12	   *	    cmp    al, 012h
 0000257B  74 08	   *	    je	@C058E
 0000257D  3C 1F	   *	    cmp    al, 01Fh
 0000257F  74 04	   *	    je	@C058E
 00002581  3C 2C	   *	    cmp    al, 02Ch
 00002583  75 07	   *	    jne    @C058D
 00002585		   *@C058E:
 00002585  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002587  E9 000000A1	   *	    jmp    @C0592
 0000258C		   *@C058D:
 0000258C  3C 06	   *	    cmp    al, 006h
 0000258E  74 0C	   *	    je	@C0594
 00002590  3C 13	   *	    cmp    al, 013h
 00002592  74 08	   *	    je	@C0594
 00002594  3C 20	   *	    cmp    al, 020h
 00002596  74 04	   *	    je	@C0594
 00002598  3C 2D	   *	    cmp    al, 02Dh
 0000259A  75 07	   *	    jne    @C0593
 0000259C		   *@C0594:
 0000259C  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 0000259E  E9 0000008A	   *	    jmp    @C0598
 000025A3		   *@C0593:
 000025A3  3C 07	   *	    cmp    al, 007h
 000025A5  74 0C	   *	    je	@C059A
 000025A7  3C 14	   *	    cmp    al, 014h
 000025A9  74 08	   *	    je	@C059A
 000025AB  3C 21	   *	    cmp    al, 021h
 000025AD  74 04	   *	    je	@C059A
 000025AF  3C 2E	   *	    cmp    al, 02Eh
 000025B1  75 04	   *	    jne    @C0599
 000025B3		   *@C059A:
 000025B3  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000025B5  EB 76	   *	    jmp    @C059E
 000025B7		   *@C0599:
 000025B7  3C 08	   *	    cmp    al, 008h
 000025B9  74 0C	   *	    je	@C05A0
 000025BB  3C 15	   *	    cmp    al, 015h
 000025BD  74 08	   *	    je	@C05A0
 000025BF  3C 22	   *	    cmp    al, 022h
 000025C1  74 04	   *	    je	@C05A0
 000025C3  3C 2F	   *	    cmp    al, 02Fh
 000025C5  75 04	   *	    jne    @C059F
 000025C7		   *@C05A0:
 000025C7  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000025C9  EB 62	   *	    jmp    @C05A4
 000025CB		   *@C059F:
 000025CB  3C 09	   *	    cmp    al, 009h
 000025CD  74 0C	   *	    je	@C05A6
 000025CF  3C 16	   *	    cmp    al, 016h
 000025D1  74 08	   *	    je	@C05A6
 000025D3  3C 23	   *	    cmp    al, 023h
 000025D5  74 04	   *	    je	@C05A6
 000025D7  3C 30	   *	    cmp    al, 030h
 000025D9  75 04	   *	    jne    @C05A5
 000025DB		   *@C05A6:
 000025DB  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000025DD  EB 4E	   *	    jmp    @C05AA
 000025DF		   *@C05A5:
 000025DF  3C 0A	   *	    cmp    al, 00Ah
 000025E1  74 0C	   *	    je	@C05AC
 000025E3  3C 17	   *	    cmp    al, 017h
 000025E5  74 08	   *	    je	@C05AC
 000025E7  3C 24	   *	    cmp    al, 024h
 000025E9  74 04	   *	    je	@C05AC
 000025EB  3C 31	   *	    cmp    al, 031h
 000025ED  75 04	   *	    jne    @C05AB
 000025EF		   *@C05AC:
 000025EF  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000025F1  EB 3A	   *	    jmp    @C05B0
 000025F3		   *@C05AB:
 000025F3  3C 0B	   *	    cmp    al, 00Bh
 000025F5  74 0C	   *	    je	@C05B2
 000025F7  3C 18	   *	    cmp    al, 018h
 000025F9  74 08	   *	    je	@C05B2
 000025FB  3C 25	   *	    cmp    al, 025h
 000025FD  74 04	   *	    je	@C05B2
 000025FF  3C 32	   *	    cmp    al, 032h
 00002601  75 04	   *	    jne    @C05B1
 00002603		   *@C05B2:
 00002603  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002605  EB 26	   *	    jmp    @C05B6
 00002607		   *@C05B1:
 00002607  3C 0C	   *	    cmp    al, 00Ch
 00002609  74 0C	   *	    je	@C05B8
 0000260B  3C 19	   *	    cmp    al, 019h
 0000260D  74 08	   *	    je	@C05B8
 0000260F  3C 26	   *	    cmp    al, 026h
 00002611  74 04	   *	    je	@C05B8
 00002613  3C 33	   *	    cmp    al, 033h
 00002615  75 04	   *	    jne    @C05B7
 00002617		   *@C05B8:
 00002617  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002619  EB 12	   *	    jmp    @C05BC
 0000261B		   *@C05B7:
 0000261B  3C 0D	   *	    cmp    al, 00Dh
 0000261D  74 0C	   *	    je	@C05BE
 0000261F  3C 1A	   *	    cmp    al, 01Ah
 00002621  74 08	   *	    je	@C05BE
 00002623  3C 27	   *	    cmp    al, 027h
 00002625  74 04	   *	    je	@C05BE
 00002627  3C 34	   *	    cmp    al, 034h
 00002629  75 02	   *	    jne    @C05BD
 0000262B		   *@C05BE:
 0000262B  B0 0D			mov al,13
				.endif
 0000262D		   *@C05BD:
 0000262D		   *@C05BC:
 0000262D		   *@C05B6:
 0000262D		   *@C05B0:
 0000262D		   *@C05AA:
 0000262D		   *@C05A4:
 0000262D		   *@C059E:
 0000262D		   *@C0598:
 0000262D		   *@C0592:
 0000262D		   *@C058C:
 0000262D		   *@C0586:
 0000262D		   *@C0580:
 0000262D		   *@C057A:
 0000262D  A2 0000002E R	mov straightp[3], al


 00002632  A0 0000001E R	mov al, cardp5.value
				.if (al == 1||al==14||al==27||al==40)
 00002637  3C 01	   *	    cmp    al, 001h
 00002639  74 0C	   *	    je	@C05C3
 0000263B  3C 0E	   *	    cmp    al, 00Eh
 0000263D  74 08	   *	    je	@C05C3
 0000263F  3C 1B	   *	    cmp    al, 01Bh
 00002641  74 04	   *	    je	@C05C3
 00002643  3C 28	   *	    cmp    al, 028h
 00002645  75 07	   *	    jne    @C05C2
 00002647		   *@C05C3:
 00002647  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002649  E9 000000FD	   *	    jmp    @C05C7
 0000264E		   *@C05C2:
 0000264E  3C 02	   *	    cmp    al, 002h
 00002650  74 0C	   *	    je	@C05C9
 00002652  3C 0F	   *	    cmp    al, 00Fh
 00002654  74 08	   *	    je	@C05C9
 00002656  3C 1C	   *	    cmp    al, 01Ch
 00002658  74 04	   *	    je	@C05C9
 0000265A  3C 29	   *	    cmp    al, 029h
 0000265C  75 07	   *	    jne    @C05C8
 0000265E		   *@C05C9:
 0000265E  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002660  E9 000000E6	   *	    jmp    @C05CD
 00002665		   *@C05C8:
 00002665  3C 03	   *	    cmp    al, 003h
 00002667  74 0C	   *	    je	@C05CF
 00002669  3C 10	   *	    cmp    al, 010h
 0000266B  74 08	   *	    je	@C05CF
 0000266D  3C 1D	   *	    cmp    al, 01Dh
 0000266F  74 04	   *	    je	@C05CF
 00002671  3C 2A	   *	    cmp    al, 02Ah
 00002673  75 07	   *	    jne    @C05CE
 00002675		   *@C05CF:
 00002675  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002677  E9 000000CF	   *	    jmp    @C05D3
 0000267C		   *@C05CE:
 0000267C  3C 04	   *	    cmp    al, 004h
 0000267E  74 0C	   *	    je	@C05D5
 00002680  3C 11	   *	    cmp    al, 011h
 00002682  74 08	   *	    je	@C05D5
 00002684  3C 1E	   *	    cmp    al, 01Eh
 00002686  74 04	   *	    je	@C05D5
 00002688  3C 2B	   *	    cmp    al, 02Bh
 0000268A  75 07	   *	    jne    @C05D4
 0000268C		   *@C05D5:
 0000268C  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 0000268E  E9 000000B8	   *	    jmp    @C05D9
 00002693		   *@C05D4:
 00002693  3C 05	   *	    cmp    al, 005h
 00002695  74 0C	   *	    je	@C05DB
 00002697  3C 12	   *	    cmp    al, 012h
 00002699  74 08	   *	    je	@C05DB
 0000269B  3C 1F	   *	    cmp    al, 01Fh
 0000269D  74 04	   *	    je	@C05DB
 0000269F  3C 2C	   *	    cmp    al, 02Ch
 000026A1  75 07	   *	    jne    @C05DA
 000026A3		   *@C05DB:
 000026A3  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000026A5  E9 000000A1	   *	    jmp    @C05DF
 000026AA		   *@C05DA:
 000026AA  3C 06	   *	    cmp    al, 006h
 000026AC  74 0C	   *	    je	@C05E1
 000026AE  3C 13	   *	    cmp    al, 013h
 000026B0  74 08	   *	    je	@C05E1
 000026B2  3C 20	   *	    cmp    al, 020h
 000026B4  74 04	   *	    je	@C05E1
 000026B6  3C 2D	   *	    cmp    al, 02Dh
 000026B8  75 07	   *	    jne    @C05E0
 000026BA		   *@C05E1:
 000026BA  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000026BC  E9 0000008A	   *	    jmp    @C05E5
 000026C1		   *@C05E0:
 000026C1  3C 07	   *	    cmp    al, 007h
 000026C3  74 0C	   *	    je	@C05E7
 000026C5  3C 14	   *	    cmp    al, 014h
 000026C7  74 08	   *	    je	@C05E7
 000026C9  3C 21	   *	    cmp    al, 021h
 000026CB  74 04	   *	    je	@C05E7
 000026CD  3C 2E	   *	    cmp    al, 02Eh
 000026CF  75 04	   *	    jne    @C05E6
 000026D1		   *@C05E7:
 000026D1  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000026D3  EB 76	   *	    jmp    @C05EB
 000026D5		   *@C05E6:
 000026D5  3C 08	   *	    cmp    al, 008h
 000026D7  74 0C	   *	    je	@C05ED
 000026D9  3C 15	   *	    cmp    al, 015h
 000026DB  74 08	   *	    je	@C05ED
 000026DD  3C 22	   *	    cmp    al, 022h
 000026DF  74 04	   *	    je	@C05ED
 000026E1  3C 2F	   *	    cmp    al, 02Fh
 000026E3  75 04	   *	    jne    @C05EC
 000026E5		   *@C05ED:
 000026E5  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000026E7  EB 62	   *	    jmp    @C05F1
 000026E9		   *@C05EC:
 000026E9  3C 09	   *	    cmp    al, 009h
 000026EB  74 0C	   *	    je	@C05F3
 000026ED  3C 16	   *	    cmp    al, 016h
 000026EF  74 08	   *	    je	@C05F3
 000026F1  3C 23	   *	    cmp    al, 023h
 000026F3  74 04	   *	    je	@C05F3
 000026F5  3C 30	   *	    cmp    al, 030h
 000026F7  75 04	   *	    jne    @C05F2
 000026F9		   *@C05F3:
 000026F9  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000026FB  EB 4E	   *	    jmp    @C05F7
 000026FD		   *@C05F2:
 000026FD  3C 0A	   *	    cmp    al, 00Ah
 000026FF  74 0C	   *	    je	@C05F9
 00002701  3C 17	   *	    cmp    al, 017h
 00002703  74 08	   *	    je	@C05F9
 00002705  3C 24	   *	    cmp    al, 024h
 00002707  74 04	   *	    je	@C05F9
 00002709  3C 31	   *	    cmp    al, 031h
 0000270B  75 04	   *	    jne    @C05F8
 0000270D		   *@C05F9:
 0000270D  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000270F  EB 3A	   *	    jmp    @C05FD
 00002711		   *@C05F8:
 00002711  3C 0B	   *	    cmp    al, 00Bh
 00002713  74 0C	   *	    je	@C05FF
 00002715  3C 18	   *	    cmp    al, 018h
 00002717  74 08	   *	    je	@C05FF
 00002719  3C 25	   *	    cmp    al, 025h
 0000271B  74 04	   *	    je	@C05FF
 0000271D  3C 32	   *	    cmp    al, 032h
 0000271F  75 04	   *	    jne    @C05FE
 00002721		   *@C05FF:
 00002721  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002723  EB 26	   *	    jmp    @C0603
 00002725		   *@C05FE:
 00002725  3C 0C	   *	    cmp    al, 00Ch
 00002727  74 0C	   *	    je	@C0605
 00002729  3C 19	   *	    cmp    al, 019h
 0000272B  74 08	   *	    je	@C0605
 0000272D  3C 26	   *	    cmp    al, 026h
 0000272F  74 04	   *	    je	@C0605
 00002731  3C 33	   *	    cmp    al, 033h
 00002733  75 04	   *	    jne    @C0604
 00002735		   *@C0605:
 00002735  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002737  EB 12	   *	    jmp    @C0609
 00002739		   *@C0604:
 00002739  3C 0D	   *	    cmp    al, 00Dh
 0000273B  74 0C	   *	    je	@C060B
 0000273D  3C 1A	   *	    cmp    al, 01Ah
 0000273F  74 08	   *	    je	@C060B
 00002741  3C 27	   *	    cmp    al, 027h
 00002743  74 04	   *	    je	@C060B
 00002745  3C 34	   *	    cmp    al, 034h
 00002747  75 02	   *	    jne    @C060A
 00002749		   *@C060B:
 00002749  B0 0D			mov al,13
				.endif
 0000274B		   *@C060A:
 0000274B		   *@C0609:
 0000274B		   *@C0603:
 0000274B		   *@C05FD:
 0000274B		   *@C05F7:
 0000274B		   *@C05F1:
 0000274B		   *@C05EB:
 0000274B		   *@C05E5:
 0000274B		   *@C05DF:
 0000274B		   *@C05D9:
 0000274B		   *@C05D3:
 0000274B		   *@C05CD:
 0000274B		   *@C05C7:
 0000274B  A2 0000002F R	mov straightp[4], al


 00002750  A0 00000020 R	mov al, cardp6.value
				.if (al == 1||al==14||al==27||al==40)
 00002755  3C 01	   *	    cmp    al, 001h
 00002757  74 0C	   *	    je	@C0610
 00002759  3C 0E	   *	    cmp    al, 00Eh
 0000275B  74 08	   *	    je	@C0610
 0000275D  3C 1B	   *	    cmp    al, 01Bh
 0000275F  74 04	   *	    je	@C0610
 00002761  3C 28	   *	    cmp    al, 028h
 00002763  75 07	   *	    jne    @C060F
 00002765		   *@C0610:
 00002765  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002767  E9 000000FD	   *	    jmp    @C0614
 0000276C		   *@C060F:
 0000276C  3C 02	   *	    cmp    al, 002h
 0000276E  74 0C	   *	    je	@C0616
 00002770  3C 0F	   *	    cmp    al, 00Fh
 00002772  74 08	   *	    je	@C0616
 00002774  3C 1C	   *	    cmp    al, 01Ch
 00002776  74 04	   *	    je	@C0616
 00002778  3C 29	   *	    cmp    al, 029h
 0000277A  75 07	   *	    jne    @C0615
 0000277C		   *@C0616:
 0000277C  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 0000277E  E9 000000E6	   *	    jmp    @C061A
 00002783		   *@C0615:
 00002783  3C 03	   *	    cmp    al, 003h
 00002785  74 0C	   *	    je	@C061C
 00002787  3C 10	   *	    cmp    al, 010h
 00002789  74 08	   *	    je	@C061C
 0000278B  3C 1D	   *	    cmp    al, 01Dh
 0000278D  74 04	   *	    je	@C061C
 0000278F  3C 2A	   *	    cmp    al, 02Ah
 00002791  75 07	   *	    jne    @C061B
 00002793		   *@C061C:
 00002793  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002795  E9 000000CF	   *	    jmp    @C0620
 0000279A		   *@C061B:
 0000279A  3C 04	   *	    cmp    al, 004h
 0000279C  74 0C	   *	    je	@C0622
 0000279E  3C 11	   *	    cmp    al, 011h
 000027A0  74 08	   *	    je	@C0622
 000027A2  3C 1E	   *	    cmp    al, 01Eh
 000027A4  74 04	   *	    je	@C0622
 000027A6  3C 2B	   *	    cmp    al, 02Bh
 000027A8  75 07	   *	    jne    @C0621
 000027AA		   *@C0622:
 000027AA  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000027AC  E9 000000B8	   *	    jmp    @C0626
 000027B1		   *@C0621:
 000027B1  3C 05	   *	    cmp    al, 005h
 000027B3  74 0C	   *	    je	@C0628
 000027B5  3C 12	   *	    cmp    al, 012h
 000027B7  74 08	   *	    je	@C0628
 000027B9  3C 1F	   *	    cmp    al, 01Fh
 000027BB  74 04	   *	    je	@C0628
 000027BD  3C 2C	   *	    cmp    al, 02Ch
 000027BF  75 07	   *	    jne    @C0627
 000027C1		   *@C0628:
 000027C1  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000027C3  E9 000000A1	   *	    jmp    @C062C
 000027C8		   *@C0627:
 000027C8  3C 06	   *	    cmp    al, 006h
 000027CA  74 0C	   *	    je	@C062E
 000027CC  3C 13	   *	    cmp    al, 013h
 000027CE  74 08	   *	    je	@C062E
 000027D0  3C 20	   *	    cmp    al, 020h
 000027D2  74 04	   *	    je	@C062E
 000027D4  3C 2D	   *	    cmp    al, 02Dh
 000027D6  75 07	   *	    jne    @C062D
 000027D8		   *@C062E:
 000027D8  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000027DA  E9 0000008A	   *	    jmp    @C0632
 000027DF		   *@C062D:
 000027DF  3C 07	   *	    cmp    al, 007h
 000027E1  74 0C	   *	    je	@C0634
 000027E3  3C 14	   *	    cmp    al, 014h
 000027E5  74 08	   *	    je	@C0634
 000027E7  3C 21	   *	    cmp    al, 021h
 000027E9  74 04	   *	    je	@C0634
 000027EB  3C 2E	   *	    cmp    al, 02Eh
 000027ED  75 04	   *	    jne    @C0633
 000027EF		   *@C0634:
 000027EF  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000027F1  EB 76	   *	    jmp    @C0638
 000027F3		   *@C0633:
 000027F3  3C 08	   *	    cmp    al, 008h
 000027F5  74 0C	   *	    je	@C063A
 000027F7  3C 15	   *	    cmp    al, 015h
 000027F9  74 08	   *	    je	@C063A
 000027FB  3C 22	   *	    cmp    al, 022h
 000027FD  74 04	   *	    je	@C063A
 000027FF  3C 2F	   *	    cmp    al, 02Fh
 00002801  75 04	   *	    jne    @C0639
 00002803		   *@C063A:
 00002803  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002805  EB 62	   *	    jmp    @C063E
 00002807		   *@C0639:
 00002807  3C 09	   *	    cmp    al, 009h
 00002809  74 0C	   *	    je	@C0640
 0000280B  3C 16	   *	    cmp    al, 016h
 0000280D  74 08	   *	    je	@C0640
 0000280F  3C 23	   *	    cmp    al, 023h
 00002811  74 04	   *	    je	@C0640
 00002813  3C 30	   *	    cmp    al, 030h
 00002815  75 04	   *	    jne    @C063F
 00002817		   *@C0640:
 00002817  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002819  EB 4E	   *	    jmp    @C0644
 0000281B		   *@C063F:
 0000281B  3C 0A	   *	    cmp    al, 00Ah
 0000281D  74 0C	   *	    je	@C0646
 0000281F  3C 17	   *	    cmp    al, 017h
 00002821  74 08	   *	    je	@C0646
 00002823  3C 24	   *	    cmp    al, 024h
 00002825  74 04	   *	    je	@C0646
 00002827  3C 31	   *	    cmp    al, 031h
 00002829  75 04	   *	    jne    @C0645
 0000282B		   *@C0646:
 0000282B  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000282D  EB 3A	   *	    jmp    @C064A
 0000282F		   *@C0645:
 0000282F  3C 0B	   *	    cmp    al, 00Bh
 00002831  74 0C	   *	    je	@C064C
 00002833  3C 18	   *	    cmp    al, 018h
 00002835  74 08	   *	    je	@C064C
 00002837  3C 25	   *	    cmp    al, 025h
 00002839  74 04	   *	    je	@C064C
 0000283B  3C 32	   *	    cmp    al, 032h
 0000283D  75 04	   *	    jne    @C064B
 0000283F		   *@C064C:
 0000283F  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002841  EB 26	   *	    jmp    @C0650
 00002843		   *@C064B:
 00002843  3C 0C	   *	    cmp    al, 00Ch
 00002845  74 0C	   *	    je	@C0652
 00002847  3C 19	   *	    cmp    al, 019h
 00002849  74 08	   *	    je	@C0652
 0000284B  3C 26	   *	    cmp    al, 026h
 0000284D  74 04	   *	    je	@C0652
 0000284F  3C 33	   *	    cmp    al, 033h
 00002851  75 04	   *	    jne    @C0651
 00002853		   *@C0652:
 00002853  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002855  EB 12	   *	    jmp    @C0656
 00002857		   *@C0651:
 00002857  3C 0D	   *	    cmp    al, 00Dh
 00002859  74 0C	   *	    je	@C0658
 0000285B  3C 1A	   *	    cmp    al, 01Ah
 0000285D  74 08	   *	    je	@C0658
 0000285F  3C 27	   *	    cmp    al, 027h
 00002861  74 04	   *	    je	@C0658
 00002863  3C 34	   *	    cmp    al, 034h
 00002865  75 02	   *	    jne    @C0657
 00002867		   *@C0658:
 00002867  B0 0D			mov al,13
				.endif
 00002869		   *@C0657:
 00002869		   *@C0656:
 00002869		   *@C0650:
 00002869		   *@C064A:
 00002869		   *@C0644:
 00002869		   *@C063E:
 00002869		   *@C0638:
 00002869		   *@C0632:
 00002869		   *@C062C:
 00002869		   *@C0626:
 00002869		   *@C0620:
 00002869		   *@C061A:
 00002869		   *@C0614:
 00002869  A2 00000030 R	mov straightp[5], al


 0000286E  A0 00000022 R	mov al, cardp7.value
				.if (al == 1||al==14||al==27||al==40)
 00002873  3C 01	   *	    cmp    al, 001h
 00002875  74 0C	   *	    je	@C065D
 00002877  3C 0E	   *	    cmp    al, 00Eh
 00002879  74 08	   *	    je	@C065D
 0000287B  3C 1B	   *	    cmp    al, 01Bh
 0000287D  74 04	   *	    je	@C065D
 0000287F  3C 28	   *	    cmp    al, 028h
 00002881  75 07	   *	    jne    @C065C
 00002883		   *@C065D:
 00002883  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002885  E9 000000FD	   *	    jmp    @C0661
 0000288A		   *@C065C:
 0000288A  3C 02	   *	    cmp    al, 002h
 0000288C  74 0C	   *	    je	@C0663
 0000288E  3C 0F	   *	    cmp    al, 00Fh
 00002890  74 08	   *	    je	@C0663
 00002892  3C 1C	   *	    cmp    al, 01Ch
 00002894  74 04	   *	    je	@C0663
 00002896  3C 29	   *	    cmp    al, 029h
 00002898  75 07	   *	    jne    @C0662
 0000289A		   *@C0663:
 0000289A  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 0000289C  E9 000000E6	   *	    jmp    @C0667
 000028A1		   *@C0662:
 000028A1  3C 03	   *	    cmp    al, 003h
 000028A3  74 0C	   *	    je	@C0669
 000028A5  3C 10	   *	    cmp    al, 010h
 000028A7  74 08	   *	    je	@C0669
 000028A9  3C 1D	   *	    cmp    al, 01Dh
 000028AB  74 04	   *	    je	@C0669
 000028AD  3C 2A	   *	    cmp    al, 02Ah
 000028AF  75 07	   *	    jne    @C0668
 000028B1		   *@C0669:
 000028B1  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000028B3  E9 000000CF	   *	    jmp    @C066D
 000028B8		   *@C0668:
 000028B8  3C 04	   *	    cmp    al, 004h
 000028BA  74 0C	   *	    je	@C066F
 000028BC  3C 11	   *	    cmp    al, 011h
 000028BE  74 08	   *	    je	@C066F
 000028C0  3C 1E	   *	    cmp    al, 01Eh
 000028C2  74 04	   *	    je	@C066F
 000028C4  3C 2B	   *	    cmp    al, 02Bh
 000028C6  75 07	   *	    jne    @C066E
 000028C8		   *@C066F:
 000028C8  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000028CA  E9 000000B8	   *	    jmp    @C0673
 000028CF		   *@C066E:
 000028CF  3C 05	   *	    cmp    al, 005h
 000028D1  74 0C	   *	    je	@C0675
 000028D3  3C 12	   *	    cmp    al, 012h
 000028D5  74 08	   *	    je	@C0675
 000028D7  3C 1F	   *	    cmp    al, 01Fh
 000028D9  74 04	   *	    je	@C0675
 000028DB  3C 2C	   *	    cmp    al, 02Ch
 000028DD  75 07	   *	    jne    @C0674
 000028DF		   *@C0675:
 000028DF  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000028E1  E9 000000A1	   *	    jmp    @C0679
 000028E6		   *@C0674:
 000028E6  3C 06	   *	    cmp    al, 006h
 000028E8  74 0C	   *	    je	@C067B
 000028EA  3C 13	   *	    cmp    al, 013h
 000028EC  74 08	   *	    je	@C067B
 000028EE  3C 20	   *	    cmp    al, 020h
 000028F0  74 04	   *	    je	@C067B
 000028F2  3C 2D	   *	    cmp    al, 02Dh
 000028F4  75 07	   *	    jne    @C067A
 000028F6		   *@C067B:
 000028F6  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000028F8  E9 0000008A	   *	    jmp    @C067F
 000028FD		   *@C067A:
 000028FD  3C 07	   *	    cmp    al, 007h
 000028FF  74 0C	   *	    je	@C0681
 00002901  3C 14	   *	    cmp    al, 014h
 00002903  74 08	   *	    je	@C0681
 00002905  3C 21	   *	    cmp    al, 021h
 00002907  74 04	   *	    je	@C0681
 00002909  3C 2E	   *	    cmp    al, 02Eh
 0000290B  75 04	   *	    jne    @C0680
 0000290D		   *@C0681:
 0000290D  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000290F  EB 76	   *	    jmp    @C0685
 00002911		   *@C0680:
 00002911  3C 08	   *	    cmp    al, 008h
 00002913  74 0C	   *	    je	@C0687
 00002915  3C 15	   *	    cmp    al, 015h
 00002917  74 08	   *	    je	@C0687
 00002919  3C 22	   *	    cmp    al, 022h
 0000291B  74 04	   *	    je	@C0687
 0000291D  3C 2F	   *	    cmp    al, 02Fh
 0000291F  75 04	   *	    jne    @C0686
 00002921		   *@C0687:
 00002921  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002923  EB 62	   *	    jmp    @C068B
 00002925		   *@C0686:
 00002925  3C 09	   *	    cmp    al, 009h
 00002927  74 0C	   *	    je	@C068D
 00002929  3C 16	   *	    cmp    al, 016h
 0000292B  74 08	   *	    je	@C068D
 0000292D  3C 23	   *	    cmp    al, 023h
 0000292F  74 04	   *	    je	@C068D
 00002931  3C 30	   *	    cmp    al, 030h
 00002933  75 04	   *	    jne    @C068C
 00002935		   *@C068D:
 00002935  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002937  EB 4E	   *	    jmp    @C0691
 00002939		   *@C068C:
 00002939  3C 0A	   *	    cmp    al, 00Ah
 0000293B  74 0C	   *	    je	@C0693
 0000293D  3C 17	   *	    cmp    al, 017h
 0000293F  74 08	   *	    je	@C0693
 00002941  3C 24	   *	    cmp    al, 024h
 00002943  74 04	   *	    je	@C0693
 00002945  3C 31	   *	    cmp    al, 031h
 00002947  75 04	   *	    jne    @C0692
 00002949		   *@C0693:
 00002949  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000294B  EB 3A	   *	    jmp    @C0697
 0000294D		   *@C0692:
 0000294D  3C 0B	   *	    cmp    al, 00Bh
 0000294F  74 0C	   *	    je	@C0699
 00002951  3C 18	   *	    cmp    al, 018h
 00002953  74 08	   *	    je	@C0699
 00002955  3C 25	   *	    cmp    al, 025h
 00002957  74 04	   *	    je	@C0699
 00002959  3C 32	   *	    cmp    al, 032h
 0000295B  75 04	   *	    jne    @C0698
 0000295D		   *@C0699:
 0000295D  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000295F  EB 26	   *	    jmp    @C069D
 00002961		   *@C0698:
 00002961  3C 0C	   *	    cmp    al, 00Ch
 00002963  74 0C	   *	    je	@C069F
 00002965  3C 19	   *	    cmp    al, 019h
 00002967  74 08	   *	    je	@C069F
 00002969  3C 26	   *	    cmp    al, 026h
 0000296B  74 04	   *	    je	@C069F
 0000296D  3C 33	   *	    cmp    al, 033h
 0000296F  75 04	   *	    jne    @C069E
 00002971		   *@C069F:
 00002971  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002973  EB 12	   *	    jmp    @C06A3
 00002975		   *@C069E:
 00002975  3C 0D	   *	    cmp    al, 00Dh
 00002977  74 0C	   *	    je	@C06A5
 00002979  3C 1A	   *	    cmp    al, 01Ah
 0000297B  74 08	   *	    je	@C06A5
 0000297D  3C 27	   *	    cmp    al, 027h
 0000297F  74 04	   *	    je	@C06A5
 00002981  3C 34	   *	    cmp    al, 034h
 00002983  75 02	   *	    jne    @C06A4
 00002985		   *@C06A5:
 00002985  B0 0D			mov al,13
				.endif
 00002987		   *@C06A4:
 00002987		   *@C06A3:
 00002987		   *@C069D:
 00002987		   *@C0697:
 00002987		   *@C0691:
 00002987		   *@C068B:
 00002987		   *@C0685:
 00002987		   *@C067F:
 00002987		   *@C0679:
 00002987		   *@C0673:
 00002987		   *@C066D:
 00002987		   *@C0667:
 00002987		   *@C0661:
 00002987  A2 00000031 R	mov straightp[6], al

 0000298C  B9 00000006		mov ecx,6 
 00002991  BF 00000006		 mov edi,6 
 00002996  BE 00000000		 mov esi,0 
				 	 
 0000299B			 	PS1: 
 0000299B  8B D6		 		mov edx,esi 
 0000299D  42			 		inc edx 
 0000299E  51			 		push ecx 
 0000299F  8B CF		 		mov ecx, edi 
 000029A1			 			PS2: 
 000029A1  8A 86 0000002B R	 				mov al, straightp[esi] 
 000029A7  8A 9A 0000002B R	 				mov bl, straightp[edx] 
				 					.if (al < bl) 
 000029AD  3A C3	   *	    cmp    al, bl
 000029AF  73 0E	   *	    jae    @C06A9
 000029B1  86 C3		 						xchg al, bl 
 000029B3  88 86 0000002B R	 						mov straightp[esi],al 
 000029B9  88 9A 0000002B R	 						mov straightp[edx],bl 
				 					.endif  
 000029BF		   *@C06A9:
 000029BF  42			 				inc edx 
 000029C0  E2 DF		 			Loop PS2 
 000029C2  59			 		pop ecx 
 000029C3  46			 		inc esi		 
 000029C4  4F			 		dec edi 
 000029C5  E2 D4		 	Loop PS1 

					
 000029C7  BE 00000000		mov esi,0
 000029CC  BF 00000001		mov edi,1
 000029D1  89 35 00000000 R		mov var1, esi
 000029D7  89 3D 00000004 R		mov var2, edi
 000029DD  8A 86 0000002B R		mov al, straightp[esi]
 000029E3  8A 9F 0000002B R		mov bl, straightp[edi]
					.if(al==bl)
 000029E9  3A C3	   *	    cmp    al, bl
 000029EB  75 07	   *	    jne    @C06AB
 000029ED  47					inc edi
 000029EE  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 000029F4		   *@C06AB:
					.if(al==bl)
 000029F4  3A C3	   *	    cmp    al, bl
 000029F6  75 07	   *	    jne    @C06AD
 000029F8  47					inc edi
 000029F9  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 000029FF		   *@C06AD:
 000029FF  2A C3			sub al,bl
 00002A01  46				inc esi
 00002A02  47				inc edi
						.if(al==bl)
 00002A03  3A C3	   *	    cmp    al, bl
 00002A05  0F 85 000000CB  *	    jne    @C06AF
 00002A0B  8A 86 0000002B R				mov al, straightp[esi]
 00002A11  8A 9F 0000002B R				mov bl, straightp[edi]
							.if(al==bl)
 00002A17  3A C3	   *	    cmp    al, bl
 00002A19  75 07	   *	    jne    @C06B1
 00002A1B  47							inc edi
 00002A1C  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00002A22		   *@C06B1:
 00002A22  3A C3	   *	    cmp    al, bl
 00002A24  75 07	   *	    jne    @C06B3
 00002A26  47							inc edi
 00002A27  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
 00002A2D		   *@C06B3:
 00002A2D  2A C3					sub al,bl
 00002A2F  46						inc esi
 00002A30  47						inc edi
								.if(al==bl)
 00002A31  3A C3	   *	    cmp    al, bl
 00002A33  0F 85 0000009D  *	    jne    @C06B5
 00002A39  8A 86 0000002B R						mov al, straightp[esi]
 00002A3F  8A 9F 0000002B R						mov bl, straightp[edi]
									.if(al==bl)
 00002A45  3A C3	   *	    cmp    al, bl
 00002A47  75 07	   *	    jne    @C06B7
 00002A49  47									inc edi
 00002A4A  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00002A50		   *@C06B7:
 00002A50  3A C3	   *	    cmp    al, bl
 00002A52  75 07	   *	    jne    @C06B9
 00002A54  47									inc edi
 00002A55  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
 00002A5B		   *@C06B9:
 00002A5B  2A C3							sub al,bl
 00002A5D  46								inc esi
 00002A5E  47								inc edi
										.if(al==bl)
 00002A5F  3A C3	   *	    cmp    al, bl
 00002A61  75 73	   *	    jne    @C06BB
 00002A63  8A 86 0000002B R								mov al, straightp[esi]
 00002A69  8A 9F 0000002B R									mov bl, straightp[edi]
												.if(al==bl)
 00002A6F  3A C3	   *	    cmp    al, bl
 00002A71  75 07	   *	    jne    @C06BD
 00002A73  47												inc edi
 00002A74  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00002A7A		   *@C06BD:
 00002A7A  3A C3	   *	    cmp    al, bl
 00002A7C  75 07	   *	    jne    @C06BF
 00002A7E  47												inc edi
 00002A7F  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
 00002A85		   *@C06BF:
 00002A85  2A C3										sub al,bl
 00002A87  46											inc esi
 00002A88  47											inc edi
													.if(al==bl)
 00002A89  3A C3	   *	    cmp    al, bl
 00002A8B  75 49	   *	    jne    @C06C1
 00002A8D  8A 86 0000002B R											mov al, straightp[esi]
 00002A93  8A 9F 0000002B R											mov bl, straightp[edi]
														.if(al==bl)
 00002A99  3A C3	   *	    cmp    al, bl
 00002A9B  75 07	   *	    jne    @C06C3
 00002A9D  47														inc edi
 00002A9E  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 00002AA4		   *@C06C3:
 00002AA4  3A C3	   *	    cmp    al, bl
 00002AA6  75 07	   *	    jne    @C06C5
 00002AA8  47														inc edi
 00002AA9  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
 00002AAF		   *@C06C5:
 00002AAF  2A C3												sub al,bl
 00002AB1  46													inc esi
 00002AB2  47													inc edi
															.if(al==bl)
 00002AB3  3A C3	   *	    cmp    al, bl
 00002AB5  75 1F	   *	    jne    @C06C7
 00002AB7  FF 05 0000005E R													inc isstraightp
 00002ABD  8B 35 00000000 R													mov esi, var1
 00002AC3  8A 86 0000002B R													mov al, straightP[esi]
																	.if(HighStP < al)
 00002AC9  38 05 00000077 R *	    cmp    HighStp, al
 00002ACF  73 05	   *	    jae    @C06C9
 00002AD1  A2 00000077 R															mov HighStP, al
																	.endif
													.endif
 00002AD6		   *@C06C9:
											.endif
 00002AD6		   *@C06C7:
									.endif
 00002AD6		   *@C06C1:
							.endif
 00002AD6		   *@C06BB:
					.endif
 00002AD6		   *@C06B5:
 00002AD6		   *@C06AF:
 00002AD6  8B 35 00000000 R		mov esi, var1
 00002ADC  8B 3D 00000004 R		mov edi, var2
 00002AE2  46				inc esi
 00002AE3  47				inc edi

 00002AE4  89 35 00000000 R		mov var1, esi
 00002AEA  89 3D 00000004 R		mov var2, edi
 00002AF0  8A 86 0000002B R		mov al, straightp[esi]
 00002AF6  8A 9F 0000002B R		mov bl, straightp[edi]
					.if(al==bl)
 00002AFC  3A C3	   *	    cmp    al, bl
 00002AFE  75 07	   *	    jne    @C06CB
 00002B00  47					inc edi
 00002B01  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002B07		   *@C06CB:
					.if(al==bl)
 00002B07  3A C3	   *	    cmp    al, bl
 00002B09  75 07	   *	    jne    @C06CD
 00002B0B  47					inc edi
 00002B0C  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002B12		   *@C06CD:
 00002B12  2A C3			sub al,bl
 00002B14  46				inc esi
 00002B15  47				inc edi
						.if(al==bl)
 00002B16  3A C3	   *	    cmp    al, bl
 00002B18  0F 85 000000CB  *	    jne    @C06CF
 00002B1E  8A 86 0000002B R				mov al, straightp[esi]
 00002B24  8A 9F 0000002B R				mov bl, straightp[edi]
							.if(al==bl)
 00002B2A  3A C3	   *	    cmp    al, bl
 00002B2C  75 07	   *	    jne    @C06D1
 00002B2E  47							inc edi
 00002B2F  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00002B35		   *@C06D1:
 00002B35  3A C3	   *	    cmp    al, bl
 00002B37  75 07	   *	    jne    @C06D3
 00002B39  47							inc edi
 00002B3A  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
 00002B40		   *@C06D3:
 00002B40  2A C3					sub al,bl
 00002B42  46						inc esi
 00002B43  47						inc edi
								.if(al==bl)
 00002B44  3A C3	   *	    cmp    al, bl
 00002B46  0F 85 0000009D  *	    jne    @C06D5
 00002B4C  8A 86 0000002B R						mov al, straightp[esi]
 00002B52  8A 9F 0000002B R						mov bl, straightp[edi]
									.if(al==bl)
 00002B58  3A C3	   *	    cmp    al, bl
 00002B5A  75 07	   *	    jne    @C06D7
 00002B5C  47									inc edi
 00002B5D  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00002B63		   *@C06D7:
 00002B63  3A C3	   *	    cmp    al, bl
 00002B65  75 07	   *	    jne    @C06D9
 00002B67  47									inc edi
 00002B68  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
 00002B6E		   *@C06D9:
 00002B6E  2A C3							sub al,bl
 00002B70  46								inc esi
 00002B71  47								inc edi
										.if(al==bl)
 00002B72  3A C3	   *	    cmp    al, bl
 00002B74  75 73	   *	    jne    @C06DB
 00002B76  8A 86 0000002B R								mov al, straightp[esi]
 00002B7C  8A 9F 0000002B R									mov bl, straightp[edi]
												.if(al==bl)
 00002B82  3A C3	   *	    cmp    al, bl
 00002B84  75 07	   *	    jne    @C06DD
 00002B86  47												inc edi
 00002B87  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00002B8D		   *@C06DD:
 00002B8D  3A C3	   *	    cmp    al, bl
 00002B8F  75 07	   *	    jne    @C06DF
 00002B91  47												inc edi
 00002B92  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
 00002B98		   *@C06DF:
 00002B98  2A C3										sub al,bl
 00002B9A  46											inc esi
 00002B9B  47											inc edi
													.if(al==bl)
 00002B9C  3A C3	   *	    cmp    al, bl
 00002B9E  75 49	   *	    jne    @C06E1
 00002BA0  8A 86 0000002B R											mov al, straightp[esi]
 00002BA6  8A 9F 0000002B R											mov bl, straightp[edi]
														.if(al==bl)
 00002BAC  3A C3	   *	    cmp    al, bl
 00002BAE  75 07	   *	    jne    @C06E3
 00002BB0  47														inc edi
 00002BB1  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 00002BB7		   *@C06E3:
 00002BB7  3A C3	   *	    cmp    al, bl
 00002BB9  75 07	   *	    jne    @C06E5
 00002BBB  47														inc edi
 00002BBC  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
 00002BC2		   *@C06E5:
 00002BC2  2A C3												sub al,bl
 00002BC4  46													inc esi
 00002BC5  47													inc edi
															.if(al==bl)
 00002BC6  3A C3	   *	    cmp    al, bl
 00002BC8  75 1F	   *	    jne    @C06E7
 00002BCA  FF 05 0000005E R													inc isstraightp
 00002BD0  8B 35 00000000 R													mov esi, var1
 00002BD6  8A 86 0000002B R													mov al, straightp[esi]
																	.if(HighStp < al)
 00002BDC  38 05 00000077 R *	    cmp    HighStp, al
 00002BE2  73 05	   *	    jae    @C06E9
 00002BE4  A2 00000077 R															mov HighStp, al
																	.endif
													.endif
 00002BE9		   *@C06E9:
											.endif
 00002BE9		   *@C06E7:
									.endif
 00002BE9		   *@C06E1:
							.endif
 00002BE9		   *@C06DB:
					.endif
 00002BE9		   *@C06D5:
 00002BE9		   *@C06CF:
 00002BE9  8B 35 00000000 R		mov esi, var1
 00002BEF  8B 3D 00000004 R		mov edi,var2
 00002BF5  46				inc esi
 00002BF6  47				inc edi

 00002BF7  89 35 00000000 R		mov var1,esi
 00002BFD  89 3D 00000004 R		mov var2, edi
 00002C03  8A 86 0000002B R		mov al, straightp[esi]
 00002C09  8A 9F 0000002B R		mov bl, straightp[edi]
					.if(al==bl)
 00002C0F  3A C3	   *	    cmp    al, bl
 00002C11  75 07	   *	    jne    @C06EB
 00002C13  47					inc edi
 00002C14  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002C1A		   *@C06EB:
					.if(al==bl)
 00002C1A  3A C3	   *	    cmp    al, bl
 00002C1C  75 07	   *	    jne    @C06ED
 00002C1E  47					inc edi
 00002C1F  8A 9F 0000002B R			mov bl, straightp[edi]
					.endif
 00002C25		   *@C06ED:
 00002C25  2A C3			sub al,bl
 00002C27  46				inc esi
 00002C28  47				inc edi
						.if(al==bl)
 00002C29  3A C3	   *	    cmp    al, bl
 00002C2B  0F 85 000000CB  *	    jne    @C06EF
 00002C31  8A 86 0000002B R				mov al, straightp[esi]
 00002C37  8A 9F 0000002B R				mov bl, straightp[edi]
							.if(al==bl)
 00002C3D  3A C3	   *	    cmp    al, bl
 00002C3F  75 07	   *	    jne    @C06F1
 00002C41  47							inc edi
 00002C42  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00002C48		   *@C06F1:
 00002C48  3A C3	   *	    cmp    al, bl
 00002C4A  75 07	   *	    jne    @C06F3
 00002C4C  47							inc edi
 00002C4D  8A 9F 0000002B R					mov bl, straightp[edi]
							.endif
 00002C53		   *@C06F3:
 00002C53  2A C3					sub al,bl
 00002C55  46						inc esi
 00002C56  47						inc edi
								.if(al==bl)
 00002C57  3A C3	   *	    cmp    al, bl
 00002C59  0F 85 0000009D  *	    jne    @C06F5
 00002C5F  8A 86 0000002B R						mov al, straightp[esi]
 00002C65  8A 9F 0000002B R						mov bl, straightp[edi]
									.if(al==bl)
 00002C6B  3A C3	   *	    cmp    al, bl
 00002C6D  75 07	   *	    jne    @C06F7
 00002C6F  47									inc edi
 00002C70  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00002C76		   *@C06F7:
 00002C76  3A C3	   *	    cmp    al, bl
 00002C78  75 07	   *	    jne    @C06F9
 00002C7A  47									inc edi
 00002C7B  8A 9F 0000002B R							mov bl, straightp[edi]
									.endif
 00002C81		   *@C06F9:
 00002C81  2A C3							sub al,bl
 00002C83  46								inc esi
 00002C84  47								inc edi
										.if(al==bl)
 00002C85  3A C3	   *	    cmp    al, bl
 00002C87  75 73	   *	    jne    @C06FB
 00002C89  8A 86 0000002B R								mov al, straightp[esi]
 00002C8F  8A 9F 0000002B R									mov bl, straightp[edi]
												.if(al==bl)
 00002C95  3A C3	   *	    cmp    al, bl
 00002C97  75 07	   *	    jne    @C06FD
 00002C99  47												inc edi
 00002C9A  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00002CA0		   *@C06FD:
 00002CA0  3A C3	   *	    cmp    al, bl
 00002CA2  75 07	   *	    jne    @C06FF
 00002CA4  47												inc edi
 00002CA5  8A 9F 0000002B R										mov bl, straightp[edi]
												.endif
 00002CAB		   *@C06FF:
 00002CAB  2A C3										sub al,bl
 00002CAD  46											inc esi
 00002CAE  47											inc edi
													.if(al==bl)
 00002CAF  3A C3	   *	    cmp    al, bl
 00002CB1  75 49	   *	    jne    @C0701
 00002CB3  8A 86 0000002B R											mov al, straightp[esi]
 00002CB9  8A 9F 0000002B R											mov bl, straightp[edi]
														.if(al==bl)
 00002CBF  3A C3	   *	    cmp    al, bl
 00002CC1  75 07	   *	    jne    @C0703
 00002CC3  47														inc edi
 00002CC4  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 00002CCA		   *@C0703:
 00002CCA  3A C3	   *	    cmp    al, bl
 00002CCC  75 07	   *	    jne    @C0705
 00002CCE  47														inc edi
 00002CCF  8A 9F 0000002B R												mov bl, straightp[edi]
														.endif
 00002CD5		   *@C0705:
 00002CD5  2A C3												sub al,bl
 00002CD7  46													inc esi
 00002CD8  47													inc edi
															.if(al==bl)
 00002CD9  3A C3	   *	    cmp    al, bl
 00002CDB  75 1F	   *	    jne    @C0707
 00002CDD  FF 05 0000005E R													inc isstraightp
 00002CE3  8B 35 00000000 R													mov esi, var1
 00002CE9  8A 86 0000002B R													mov al, straightp[esi]
																	.if(HighStp < al)
 00002CEF  38 05 00000077 R *	    cmp    HighStp, al
 00002CF5  73 05	   *	    jae    @C0709
 00002CF7  A2 00000077 R															mov HighStp, al
																	.endif
													.endif
 00002CFC		   *@C0709:
											.endif
 00002CFC		   *@C0707:
									.endif
 00002CFC		   *@C0701:
							.endif
 00002CFC		   *@C06FB:
					.endif
 00002CFC		   *@C06F5:
 00002CFC		   *@C06EF:

					.if(HighStP==13)
 00002CFC  80 3D 00000077 R
	   0D		   *	    cmp    HighStp, 00Dh
 00002D03  75 13	   *	    jne    @C070B
						.if(PlayerFlush > 0)
 00002D05  83 3D 0000008A R
	   00		   *	    cmp    PlayerFlush, 000h
 00002D0C  76 0A	   *	    jbe    @C070D
 00002D0E  C7 05 0000007A R				mov PlayerRoyal, 1
	   00000001
						.endif
					.endif
 00002D18		   *@C070D:
 00002D18		   *@C070B:
					.if (HighStP > 0)
 00002D18  80 3D 00000077 R
	   00		   *	    cmp    HighStp, 000h
 00002D1F  76 0A	   *	    jbe    @C070F
 00002D21  C7 05 0000008E R			mov PlayerStraight, 1
	   00000001
					.endif
 00002D2B		   *@C070F:

 00002D2B  C3			ret
 00002D2C			IsAStraight ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002D2C			 FourKind PROC
 00002D2C  B9 00000004		mov ecx, 4
 00002D31  BE 00000000		mov esi,0
 00002D36  BF 00000001		mov edi,1
 00002D3B				FKs:
 00002D3B  8A 86 00000024 R			mov al, straights[esi]
 00002D41  8A 9F 00000024 R			mov bl, straights[edi]
 00002D47  89 35 00000000 R			mov var1, esi
 00002D4D  46					inc esi
 00002D4E  89 3D 00000004 R			mov var2, edi
 00002D54  47					inc edi
							.if(al==bl)
 00002D55  3A C3	   *	    cmp    al, bl
 00002D57  75 47	   *	    jne    @C0711
 00002D59  8A 86 00000024 R					mov al, straights[esi]
 00002D5F  8A 9F 00000024 R					mov bl, straights[edi]
 00002D65  46							inc esi
 00002D66  47							inc edi
									.if(al==bl)
 00002D67  3A C3	   *	    cmp    al, bl
 00002D69  75 35	   *	    jne    @C0713
 00002D6B  8A 86 00000024 R							mov al, straights[esi]
 00002D71  8A 9F 00000024 R							mov bl, straights[edi]
 00002D77  46									inc esi
 00002D78  47									inc edi
											.if(al==bl)
 00002D79  3A C3	   *	    cmp    al, bl
 00002D7B  75 23	   *	    jne    @C0715
 00002D7D  C7 05 000000C2 R									mov SpockFour,1
	   00000001
 00002D87  8A 86 00000024 R									mov al, straights[esi]
 00002D8D  A2 0000006A R									mov HighFourS, al
 00002D92  8B 3D 00000004 R									mov edi,var2
 00002D98  8B 35 00000000 R									mov esi,var1
 00002D9E  46											inc esi
 00002D9F  47											inc edi
											.endif
									.endif
 00002DA0		   *@C0715:
							.endif
 00002DA0		   *@C0713:
 00002DA0		   *@C0711:
 00002DA0  E2 99			Loop FKS

				;Player

 00002DA2  B9 00000004			mov ecx, 4
 00002DA7  BE 00000000		mov esi,0
 00002DAC  BF 00000001		mov edi,1
 00002DB1				FKp:
 00002DB1  8A 86 0000002B R			mov al, straightp[esi]
 00002DB7  8A 9F 0000002B R			mov bl, straightp[edi]
 00002DBD  89 35 00000000 R			mov var1, esi
 00002DC3  46					inc esi
 00002DC4  89 3D 00000004 R			mov var2, edi
 00002DCA  47					inc edi
							.if(al==bl)
 00002DCB  3A C3	   *	    cmp    al, bl
 00002DCD  75 47	   *	    jne    @C0717
 00002DCF  8A 86 0000002B R					mov al, straightp[esi]
 00002DD5  8A 9F 0000002B R					mov bl, straightp[edi]
 00002DDB  46							inc esi
 00002DDC  47							inc edi
									.if(al==bl)
 00002DDD  3A C3	   *	    cmp    al, bl
 00002DDF  75 35	   *	    jne    @C0719
 00002DE1  8A 86 0000002B R							mov al, straightp[esi]
 00002DE7  8A 9F 0000002B R							mov bl, straightp[edi]
 00002DED  46									inc esi
 00002DEE  47									inc edi
											.if(al==bl)
 00002DEF  3A C3	   *	    cmp    al, bl
 00002DF1  75 23	   *	    jne    @C071B
 00002DF3  C7 05 00000082 R									mov PlayerFour,1
	   00000001
 00002DFD  8A 86 0000002B R									mov al, straightp[esi]
 00002E03  A2 0000006B R									mov HighFourP, al
 00002E08  8B 3D 00000004 R									mov edi,var2
 00002E0E  8B 35 00000000 R									mov esi,var1
 00002E14  46											inc esi
 00002E15  47											inc edi
											.endif
									.endif
 00002E16		   *@C071B:
							.endif
 00002E16		   *@C0719:
 00002E16		   *@C0717:
 00002E16  E2 99			Loop FKp
 00002E18  C3			ret
 00002E19			FourKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002E19			FullHouse PROC

				.if(HighThrees > 0)
 00002E19  80 3D 0000006C R
	   00		   *	    cmp    HighThreeS, 000h
 00002E20  76 13	   *	    jbe    @C071D
					.if(High2Pairs > 0)
 00002E22  80 3D 0000006E R
	   00		   *	    cmp    High2PairS, 000h
 00002E29  76 0A	   *	    jbe    @C071F
 00002E2B  C7 05 000000C6 R			mov SpockFull, 1
	   00000001
					.endif
				.endif
 00002E35		   *@C071F:
 00002E35		   *@C071D:

				.if(HighThreep > 0)
 00002E35  80 3D 0000006D R
	   00		   *	    cmp    HighThreeP, 000h
 00002E3C  76 13	   *	    jbe    @C0721
					.if(High2Pairp > 0)
 00002E3E  80 3D 0000006F R
	   00		   *	    cmp    High2PairP, 000h
 00002E45  76 0A	   *	    jbe    @C0723
 00002E47  C7 05 00000086 R			mov PlayerFull, 1
	   00000001
					.endif
				.endif
 00002E51		   *@C0723:
 00002E51		   *@C0721:

 00002E51  C3			ret
 00002E52			FullHouse ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002E52			ThreeKind PROC

 00002E52  B9 00000005		mov ecx,5
 00002E57  BE 00000000		mov esi,0
 00002E5C  BF 00000001		mov edi,1

 00002E61				TKS:
 00002E61  89 35 00000000 R			mov var1, esi
 00002E67  89 3D 00000004 R			mov var2, edi
 00002E6D  8A 86 00000024 R			mov al, straights[esi]
 00002E73  8A 9F 00000024 R			mov bl, straights[edi]
							.if(al==bl)
 00002E79  3A C3	   *	    cmp    al, bl
 00002E7B  75 2B	   *	    jne    @C0725
 00002E7D  46							inc esi
 00002E7E  47							inc edi
 00002E7F  8A 86 00000024 R					mov al, straights[esi]
 00002E85  8A 9F 00000024 R					mov bl, straights[edi]
									.if(al==bl)
 00002E8B  3A C3	   *	    cmp    al, bl
 00002E8D  75 19	   *	    jne    @C0727
 00002E8F  8B 35 00000000 R									mov esi, var1
 00002E95  8A 86 00000024 R									mov al, straights[esi]
													.if(HighThreeS < al)
 00002E9B  38 05 0000006C R *	    cmp    HighThreeS, al
 00002EA1  73 05	   *	    jae    @C0729
 00002EA3  A2 0000006C R											mov HighThreeS,al
											.endif
									.endif
 00002EA8		   *@C0729:
							.endif
 00002EA8		   *@C0727:
 00002EA8		   *@C0725:
 00002EA8  8B 35 00000000 R			mov esi,var1
 00002EAE  8B 3D 00000004 R			mov edi, var2
 00002EB4  46					inc esi
 00002EB5  47					inc edi
 00002EB6  E2 A9			Loop TKS
					.if(HighThreeS > 0)
 00002EB8  80 3D 0000006C R
	   00		   *	    cmp    HighThreeS, 000h
 00002EBF  76 0A	   *	    jbe    @C072B
 00002EC1  C7 05 000000D2 R			mov SpockThree, 1
	   00000001
					.endif
 00002ECB		   *@C072B:

				;player

 00002ECB  B9 00000005		mov ecx,5
 00002ED0  BE 00000000		mov esi,0
 00002ED5  BF 00000001		mov edi,1

 00002EDA				TKP:
 00002EDA  89 35 00000000 R			mov var1, esi
 00002EE0  89 3D 00000004 R			mov var2, edi
 00002EE6  8A 86 0000002B R			mov al, straightP[esi]
 00002EEC  8A 9F 0000002B R			mov bl, straightP[edi]
							.if(al==bl)
 00002EF2  3A C3	   *	    cmp    al, bl
 00002EF4  75 2B	   *	    jne    @C072D
 00002EF6  46							inc esi
 00002EF7  47							inc edi
 00002EF8  8A 86 0000002B R					mov al, straightP[esi]
 00002EFE  8A 9F 0000002B R					mov bl, straightP[edi]
											.if(al==bl)
 00002F04  3A C3	   *	    cmp    al, bl
 00002F06  75 19	   *	    jne    @C072F
 00002F08  8B 35 00000000 R									mov esi, var1
 00002F0E  8A 86 0000002B R									mov al, straightP[esi]
													.if(HighThreeP < al)
 00002F14  38 05 0000006D R *	    cmp    HighThreeP, al
 00002F1A  73 05	   *	    jae    @C0731
 00002F1C  A2 0000006D R											mov HighThreeP,al
											.endif
									.endif
 00002F21		   *@C0731:
							.endif
 00002F21		   *@C072F:
 00002F21		   *@C072D:
 00002F21  8B 35 00000000 R			mov esi,var1
 00002F27  8B 3D 00000004 R			mov edi, var2
 00002F2D  46					inc esi
 00002F2E  47					inc edi
 00002F2F  E2 A9			Loop TKP
					.if(HighThreeP > 0)
 00002F31  80 3D 0000006D R
	   00		   *	    cmp    HighThreeP, 000h
 00002F38  76 0A	   *	    jbe    @C0733
 00002F3A  C7 05 00000092 R			mov PlayerThree,1
	   00000001
					.endif
 00002F44		   *@C0733:
 00002F44  C3			ret
 00002F45			ThreeKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00002F45			TwoPair PROC

 00002F45  B9 00000006		mov ecx,6
 00002F4A  BE 00000000		mov esi,0
 00002F4F  BF 00000001		mov edi,1
 00002F54			TPS:
 00002F54  8A 86 00000024 R		mov al, straights[esi]
 00002F5A  8A 9F 00000024 R		mov bl, straights[edi]
						.if(al==bl)
 00002F60  3A C3	   *	    cmp    al, bl
 00002F62  75 2D	   *	    jne    @C0735
							.if(al > High2Pairs)
 00002F64  3A 05 0000006E R *	    cmp    al, High2PairS
 00002F6A  76 11	   *	    jbe    @C0737
 00002F6C  A2 0000006E R					mov High2Pairs, al
 00002F71  C7 05 000000DA R					mov SpockOnePair,1
	   00000001
							.elseif (al > low2pairs)
 00002F7B  EB 14	   *	    jmp    @C0739
 00002F7D		   *@C0737:
 00002F7D  3A 05 00000070 R *	    cmp    al, Low2PairS
 00002F83  76 07	   *	    jbe    @C073A
 00002F85  A2 00000070 R					mov Low2Pairs, al
							.else	
 00002F8A  EB 05	   *	    jmp    @C073C
 00002F8C		   *@C073A:
 00002F8C  A2 00000072 R					mov Pairs, al
							.endif
						.endif
 00002F91		   *@C073C:
 00002F91		   *@C0739:
 00002F91		   *@C0735:
 00002F91  46				inc esi
 00002F92  47				inc edi
 00002F93  E2 BF		Loop TPS

					.if(High2pairs>0)
 00002F95  80 3D 0000006E R
	   00		   *	    cmp    High2PairS, 000h
 00002F9C  76 13	   *	    jbe    @C073D
						.if(Low2pairs>0)
 00002F9E  80 3D 00000070 R
	   00		   *	    cmp    Low2PairS, 000h
 00002FA5  76 0A	   *	    jbe    @C073F
 00002FA7  C7 05 000000D6 R				mov SpockTwoPair, 1
	   00000001
						.endif
					.endif
 00002FB1		   *@C073F:
 00002FB1		   *@C073D:

				;player

 00002FB1  B9 00000006		mov ecx,6
 00002FB6  BE 00000000		mov esi,0
 00002FBB  BF 00000001		mov edi,1
 00002FC0			TPP:
 00002FC0  8A 86 0000002B R		mov al, straightp[esi]
 00002FC6  8A 9F 0000002B R		mov bl, straightp[edi]
						.if(al==bl)
 00002FCC  3A C3	   *	    cmp    al, bl
 00002FCE  75 2D	   *	    jne    @C0741
							.if(al > High2Pairp)
 00002FD0  3A 05 0000006F R *	    cmp    al, High2PairP
 00002FD6  76 11	   *	    jbe    @C0743
 00002FD8  A2 0000006F R					mov High2Pairp, al
 00002FDD  C7 05 0000009A R					mov PlayerOnePair,1
	   00000001
							.elseif (al > low2pairp)
 00002FE7  EB 14	   *	    jmp    @C0745
 00002FE9		   *@C0743:
 00002FE9  3A 05 00000071 R *	    cmp    al, Low2PairP
 00002FEF  76 07	   *	    jbe    @C0746
 00002FF1  A2 00000071 R					mov Low2Pairp, al
							.else	
 00002FF6  EB 05	   *	    jmp    @C0748
 00002FF8		   *@C0746:
 00002FF8  A2 00000073 R					mov Pairp, al
							.endif
						.endif
 00002FFD		   *@C0748:
 00002FFD		   *@C0745:
 00002FFD		   *@C0741:
 00002FFD  46				inc esi
 00002FFE  47				inc edi
 00002FFF  E2 BF		Loop TPP

					.if(High2pairp>0)
 00003001  80 3D 0000006F R
	   00		   *	    cmp    High2PairP, 000h
 00003008  76 13	   *	    jbe    @C0749
						.if(Low2pairp>0)
 0000300A  80 3D 00000071 R
	   00		   *	    cmp    Low2PairP, 000h
 00003011  76 0A	   *	    jbe    @C074B
 00003013  C7 05 00000096 R				mov PlayerTwoPair, 1
	   00000001
						.endif
					.endif
 0000301D		   *@C074B:
 0000301D		   *@C0749:

 0000301D  C3			ret
 0000301E			TwoPair ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000301E			HighCard PROC
 0000301E  A0 00000024 R	mov al, straights[0]
 00003023  A2 00000078 R	mov HighCards,al

 00003028  A0 0000002B R	mov al, straightp[0]
 0000302D  A2 00000079 R	mov HighCardp, al
 00003032  C3			ret
 00003033			HighCard ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003033			Tie PROC

 00003033  C3			ret
 00003034			Tie ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/08/14 00:11:47
MASM Templat						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Card . . . . . . . . . . . . . .	 00000002
  value  . . . . . . . . . . . .	 00000000	 Byte
  Suit . . . . . . . . . . . . .	 00000001	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002E3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00003034 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Ante . . . . . . . . . . . . . .	P Near	 00000199 _TEXT	Length= 000000A4 Public STDCALL
Bid  . . . . . . . . . . . . . .	P Near	 00000768 _TEXT	Length= 00000662 Public STDCALL
  BadInput1  . . . . . . . . . .	L Near	 000009A7 _TEXT	
  BadInput . . . . . . . . . . .	L Near	 00000AC0 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CompareHand  . . . . . . . . . .	P Near	 00001152 _TEXT	Length= 000000FC Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DealFlop . . . . . . . . . . . .	P Near	 0000011E _TEXT	Length= 00000031 Public STDCALL
  T1 . . . . . . . . . . . . . .	L Near	 0000012E _TEXT	
DealHand . . . . . . . . . . . .	P Near	 000000E5 _TEXT	Length= 00000039 Public STDCALL
  H1 . . . . . . . . . . . . . .	L Near	 000000F4 _TEXT	
DealRiver  . . . . . . . . . . .	P Near	 0000017D _TEXT	Length= 0000001C Public STDCALL
DealTurn . . . . . . . . . . . .	P Near	 0000014F _TEXT	Length= 0000002E Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FourKind . . . . . . . . . . . .	P Near	 00002D2C _TEXT	Length= 000000ED Public STDCALL
  FKs  . . . . . . . . . . . . .	L Near	 00002D3B _TEXT	
  FKp  . . . . . . . . . . . . .	L Near	 00002DB1 _TEXT	
FullHouse  . . . . . . . . . . .	P Near	 00002E19 _TEXT	Length= 00000039 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandPlayer . . . . . . . . . . .	P Near	 00000518 _TEXT	Length= 00000250 Public STDCALL
  FPH1 . . . . . . . . . . . . .	L Near	 00000522 _TEXT	
  FPH2 . . . . . . . . . . . . .	L Near	 0000053D _TEXT	
HandSpock  . . . . . . . . . . .	P Near	 000002CA _TEXT	Length= 0000024E Public STDCALL
  FSH1 . . . . . . . . . . . . .	L Near	 000002D4 _TEXT	
  FSH2 . . . . . . . . . . . . .	L Near	 000002EF _TEXT	
HandValue  . . . . . . . . . . .	P Near	 00000DCA _TEXT	Length= 00000388 Public STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HighCard . . . . . . . . . . . .	P Near	 0000301E _TEXT	Length= 00000015 Public STDCALL
IsAFlush . . . . . . . . . . . .	P Near	 0000124E _TEXT	Length= 00000407 Public STDCALL
IsAStraight  . . . . . . . . . .	P Near	 00001655 _TEXT	Length= 000016D7 Public STDCALL
  SS1  . . . . . . . . . . . . .	L Near	 00001E36 _TEXT	
  SS2  . . . . . . . . . . . . .	L Near	 00001E3C _TEXT	
  PS1  . . . . . . . . . . . . .	L Near	 0000299B _TEXT	
  PS2  . . . . . . . . . . . . .	L Near	 000029A1 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Lose . . . . . . . . . . . . . .	P Near	 0000026A _TEXT	Length= 0000002D Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayAgain  . . . . . . . . . . .	P Near	 00000297 _TEXT	Length= 00000033 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Shuffel  . . . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 0000007D Public STDCALL
  EmptyHands . . . . . . . . . .	L Near	 00000074 _TEXT	
  EmptyTable . . . . . . . . . .	L Near	 00000091 _TEXT	
  L0 . . . . . . . . . . . . . .	L Near	 000000AA _TEXT	
  S1 . . . . . . . . . . . . . .	L Near	 000000BE _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ThreeKind  . . . . . . . . . . .	P Near	 00002E52 _TEXT	Length= 000000F3 Public STDCALL
  TKS  . . . . . . . . . . . . .	L Near	 00002E61 _TEXT	
  TKP  . . . . . . . . . . . . .	L Near	 00002EDA _TEXT	
Tie  . . . . . . . . . . . . . .	P Near	 00003033 _TEXT	Length= 00000001 Public STDCALL
TwoPair  . . . . . . . . . . . .	P Near	 00002F45 _TEXT	Length= 000000D9 Public STDCALL
  TPS  . . . . . . . . . . . . .	L Near	 00002F54 _TEXT	
  TPP  . . . . . . . . . . . . .	L Near	 00002FC0 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Win  . . . . . . . . . . . . . .	P Near	 0000023D _TEXT	Length= 0000002D Public STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000068 Public STDCALL
  G1 . . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BigBlind . . . . . . . . . . . .	DWord	 00000133 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ChipsCall  . . . . . . . . . . .	DWord	 000000A2 _DATA	
ChipsPlayer  . . . . . . . . . .	DWord	 00000127 _DATA	
ChipsRaise . . . . . . . . . . .	DWord	 000000A6 _DATA	
ChipsSpock . . . . . . . . . . .	DWord	 0000012B _DATA	
ChipsTable . . . . . . . . . . .	DWord	 0000012F _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DeckMark . . . . . . . . . . . .	DWord	 0000011F _DATA	
Deck . . . . . . . . . . . . . .	Byte	 000000E2 _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FoldP  . . . . . . . . . . . . .	DWord	 000000B6 _DATA	
FoldS  . . . . . . . . . . . . .	DWord	 000000B2 _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FullHandPlayer . . . . . . . . .	Byte	 0000013E _DATA	
FullHandSpock  . . . . . . . . .	Byte	 00000137 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
High2PairP . . . . . . . . . . .	Byte	 0000006F _DATA	
High2PairS . . . . . . . . . . .	Byte	 0000006E _DATA	
HighCardp  . . . . . . . . . . .	Byte	 00000079 _DATA	
HighCards  . . . . . . . . . . .	Byte	 00000078 _DATA	
HighFourP  . . . . . . . . . . .	Byte	 0000006B _DATA	
HighFourS  . . . . . . . . . . .	Byte	 0000006A _DATA	
HighPairP  . . . . . . . . . . .	Byte	 00000075 _DATA	
HighPairS  . . . . . . . . . . .	Byte	 00000074 _DATA	
HighStp  . . . . . . . . . . . .	Byte	 00000077 _DATA	
HighSts  . . . . . . . . . . . .	Byte	 00000076 _DATA	
HighThreeP . . . . . . . . . . .	Byte	 0000006D _DATA	
HighThreeS . . . . . . . . . . .	Byte	 0000006C _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Low2PairP  . . . . . . . . . . .	Byte	 00000071 _DATA	
Low2PairS  . . . . . . . . . . .	Byte	 00000070 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PairP  . . . . . . . . . . . . .	Byte	 00000073 _DATA	
PairS  . . . . . . . . . . . . .	Byte	 00000072 _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PlayerBet  . . . . . . . . . . .	DWord	 000000AE _DATA	
PlayerFlush  . . . . . . . . . .	DWord	 0000008A _DATA	
PlayerFour . . . . . . . . . . .	DWord	 00000082 _DATA	
PlayerFull . . . . . . . . . . .	DWord	 00000086 _DATA	
PlayerHandValue  . . . . . . . .	DWord	 0000009E _DATA	
PlayerHand . . . . . . . . . . .	Byte	 00000116 _DATA	
PlayerOnePair  . . . . . . . . .	DWord	 0000009A _DATA	
PlayerRoyal  . . . . . . . . . .	DWord	 0000007A _DATA	
PlayerStraightFlush  . . . . . .	DWord	 0000007E _DATA	
PlayerStraight . . . . . . . . .	DWord	 0000008E _DATA	
PlayerThree  . . . . . . . . . .	DWord	 00000092 _DATA	
PlayerTwoPair  . . . . . . . . .	DWord	 00000096 _DATA	
PromptBadInput . . . . . . . . .	Byte	 000001BE _DATA	
PromptChipsPlayer  . . . . . . .	Byte	 000001BA _DATA	
PromptChipsSpock . . . . . . . .	Byte	 000001BC _DATA	
PromptLoseImage  . . . . . . . .	Byte	 000001B8 _DATA	
PromptPlayAgain  . . . . . . . .	Byte	 00000180 _DATA	
PromptPlayerBet  . . . . . . . .	Byte	 00000232 _DATA	
PromptPlayerCall . . . . . . . .	Byte	 000002B3 _DATA	
PromptPlayerFold . . . . . . . .	Byte	 000002B8 _DATA	
PromptPlayerNotEnoughChips . . .	Byte	 000002BD _DATA	
PromptPlayerRaise  . . . . . . .	Byte	 000002A0 _DATA	
PromptPlayerSecond . . . . . . .	Byte	 00000260 _DATA	
PromptPlayerTurn . . . . . . . .	Byte	 00000290 _DATA	
PromptSpockBet . . . . . . . . .	Byte	 000001FE _DATA	
PromptSpockCall  . . . . . . . .	Byte	 0000021A _DATA	
PromptSpockFold  . . . . . . . .	Byte	 00000226 _DATA	
PromptSpockRaise . . . . . . . .	Byte	 0000020B _DATA	
PromptSpockTurn  . . . . . . . .	Byte	 000001EB _DATA	
PromptWinImage . . . . . . . . .	Byte	 000001B6 _DATA	
PromptYouLose  . . . . . . . . .	Byte	 00000161 _DATA	
PromptYouWin . . . . . . . . . .	Byte	 00000145 _DATA	
RFp  . . . . . . . . . . . . . .	DWord	 00000062 _DATA	
RFs  . . . . . . . . . . . . . .	DWord	 00000066 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SpockBet . . . . . . . . . . . .	DWord	 000000AA _DATA	
SpockFlush . . . . . . . . . . .	DWord	 000000CA _DATA	
SpockFour  . . . . . . . . . . .	DWord	 000000C2 _DATA	
SpockFull  . . . . . . . . . . .	DWord	 000000C6 _DATA	
SpockHandValue . . . . . . . . .	DWord	 000000DE _DATA	
SpockHand  . . . . . . . . . . .	Byte	 00000118 _DATA	
SpockOnePair . . . . . . . . . .	DWord	 000000DA _DATA	
SpockRoyal . . . . . . . . . . .	DWord	 000000BA _DATA	
SpockStraightFlush . . . . . . .	DWord	 000000BE _DATA	
SpockStraight  . . . . . . . . .	DWord	 000000CE _DATA	
SpockThree . . . . . . . . . . .	DWord	 000000D2 _DATA	
SpockTwoPair . . . . . . . . . .	DWord	 000000D6 _DATA	
StraightP  . . . . . . . . . . .	Byte	 0000002B _DATA	
StraightS  . . . . . . . . . . .	Byte	 00000024 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TableMark  . . . . . . . . . . .	DWord	 00000123 _DATA	
Table  . . . . . . . . . . . . .	Byte	 0000011A _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardp1 . . . . . . . . . . . . .	Card	 00000016 _DATA	
cardp2 . . . . . . . . . . . . .	Card	 00000018 _DATA	
cardp3 . . . . . . . . . . . . .	Card	 0000001A _DATA	
cardp4 . . . . . . . . . . . . .	Card	 0000001C _DATA	
cardp5 . . . . . . . . . . . . .	Card	 0000001E _DATA	
cardp6 . . . . . . . . . . . . .	Card	 00000020 _DATA	
cardp7 . . . . . . . . . . . . .	Card	 00000022 _DATA	
cards1 . . . . . . . . . . . . .	Card	 00000008 _DATA	
cards2 . . . . . . . . . . . . .	Card	 0000000A _DATA	
cards3 . . . . . . . . . . . . .	Card	 0000000C _DATA	
cards4 . . . . . . . . . . . . .	Card	 0000000E _DATA	
cards5 . . . . . . . . . . . . .	Card	 00000010 _DATA	
cards6 . . . . . . . . . . . . .	Card	 00000012 _DATA	
cards7 . . . . . . . . . . . . .	Card	 00000014 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isClubP  . . . . . . . . . . . .	DWord	 0000003A _DATA	
isClubS  . . . . . . . . . . . .	DWord	 0000004E _DATA	
isDimondP  . . . . . . . . . . .	DWord	 0000003E _DATA	
isDimondS  . . . . . . . . . . .	DWord	 00000052 _DATA	
isFlushP . . . . . . . . . . . .	DWord	 00000042 _DATA	
isFlushS . . . . . . . . . . . .	DWord	 00000056 _DATA	
isHeartP . . . . . . . . . . . .	DWord	 00000036 _DATA	
isHeartS . . . . . . . . . . . .	DWord	 0000004A _DATA	
isSpadeP . . . . . . . . . . . .	DWord	 00000032 _DATA	
isSpadeS . . . . . . . . . . . .	DWord	 00000046 _DATA	
isStraightP  . . . . . . . . . .	DWord	 0000005E _DATA	
isStraightS  . . . . . . . . . .	DWord	 0000005A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
var1 . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
var2 . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
