Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/04/14 22:34:00
MASM Templat						     Page 1 - 1


				TITLE MASM Template

				; Zeus cs278 EX
				;Write a program that 

				INCLUDE Irvine32.inc 
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000002			Card STRUCT																																							    ;
				;	Basic class for all all cards suits containing suit and value																										;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000000  00				value byte 0																																						;
 00000001  00				Suit byte 0																																							;
				Card ENDS																																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;


 00000000 00 00				cards1 Card <0,0>
 00000002 00 00				cards2 Card <0,0>
 00000004 00 00				cards3 Card <0,0>
 00000006 00 00				cards4 Card <0,0>
 00000008 00 00				cards5 Card <0,0>
 0000000A 00 00				cards6 Card <0,0>
 0000000C 00 00				cards7 Card <0,0>

 0000000E 00 00				cardp1 Card <0,0>
 00000010 00 00				cardp2 Card <0,0>
 00000012 00 00				cardp3 Card <0,0>
 00000014 00 00				cardp4 Card <0,0>
 00000016 00 00				cardp5 Card <0,0>
 00000018 00 00				cardp6 Card <0,0>
 0000001A 00 00				cardp7 Card <0,0>

 0000001C 00000000			isSpadeP DWORD 0
 00000020 00000000			isHeartP DWORD 0
 00000024 00000000			isClubP	DWORD 0
 00000028 00000000			isDimondP DWORD 0
 0000002C 00000000			isFlushP DWORD 0

 00000030 00000000			isSpadeS DWORD 0
 00000034 00000000			isHeartS DWORD 0
 00000038 00000000			isClubS DWORD 0
 0000003C 00000000			isDimondS DWORD 0
 00000040 00000000			isFlushS DWORD 0

 00000044 00000000			isStraightS DWORD 0
 00000048 00000000			isStraightP DWORD 0
 0000004C  00000007 [			StraightS byte 7 dup (0)
	    00
	   ]
 00000053  00000007 [			StraightP byte 7 dup (0)
	    00
	   ]

 0000005A 00000000			PlayerRoyal DWORD 0
 0000005E 00000000			PlayerStraightFlush DWORD 0
 00000062 00000000			PlayerFour DWORD 0
 00000066 00000000			PlayerFull DWORD 0
 0000006A 00000000			PlayerFlush DWORD 0
 0000006E 00000000			PlayerStraight DWORD 0
 00000072 00000000			PlayerThree DWORD 0
 00000076 00000000			PlayerTwoPair DWORD 0
 0000007A 00000000			PlayerOnePair DWORD 0
 0000007E 00000000			PlayerHighCard DWORD 0

 00000082 00000000			SpockRoyal DWORD 0
 00000086 00000000			SpockStraightFlush DWORD 0
 0000008A 00000000			SpockFour DWORD 0
 0000008E 00000000			SpockFull DWORD 0
 00000092 00000000			SpockFlush DWORD 0
 00000096 00000000			SpockStraight DWORD 0
 0000009A 00000000			SpockThree DWORD 0
 0000009E 00000000			SpockTwoPair DWORD 0
 000000A2 00000000			SpockOnePair DWORD 0
 000000A6 00000000			SpockHighCard DWORD 0

 000000AA  00000034 [		Deck byte 52 dup (?)
	    00
	   ]

																					;array of Suits
 000000DE  00000002 [		PlayerHand byte 2 dup (?)											;2 Cards for the player
	    00
	   ]
 000000E0  00000002 [		SpockHand byte 2 dup (?)											;2 Cards for the AI
	    00
	   ]
 000000E2  00000005 [		Table byte 5 dup (?)												;3 Flop cards, 1 Turn card, 1 River card
	    00
	   ]

 000000E7 00000000		DeckMark DWORD ?													;Bookmark for place in Deck
 000000EB 00000000		TableMark DWORD ?													;Bookmark for place in Table

 000000EF 00000000		ChipsPlayer DWORD 0
 000000F3 00000000		ChipsSpock  DWORD 0
 000000F7 00000000		ChipsTable DWORD 0
 000000FB 00000001		BigBlind DWORD 1													;Variable for who is responsible for Big blind, other is responsible for little blind 1/2 big blind bet
 000000FF  00000007 [		FullHandSpock BYTE 7 dup (0)
	    00
	   ]
 00000106  00000007 [		FullHandPlayer BYTE 7 dup (0)
	    00
	   ]

 0000010D 59 6F 75 20 57	PromptYouWin byte "You Win, your earning are: ", 0
	   69 6E 2C 20 79
	   6F 75 72 20 65
	   61 72 6E 69 6E
	   67 20 61 72 65
	   3A 20 00
 00000129 59 6F 75 20 4C	PromptYouLose byte "You Lose, you walk away with: ", 0
	   6F 73 65 2C 20
	   79 6F 75 20 77
	   61 6C 6B 20 61
	   77 61 79 20 77
	   69 74 68 3A 20
	   00
 00000148 57 6F 75 6C 64	PromptPlayAgain byte "Would you like to play again 1 for yes or 0 for no:  "
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 20 31
	   20 66 6F 72 20
	   79 65 73 20 6F
	   72 20 30 20 66
	   6F 72 20 6E 6F
	   3A 20 20
 0000017D 3F			PromptWinImage byte "?"
 0000017E 3F			PromptLoseImage byte "?"
 0000017F 3F			PromptChipsPlayer byte "?"
 00000180 3F			PromptChipsSpock byte "?"
 00000181 54 68 61 74 20	PromptBadInput byte "That is not a valid choice, please try again"
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   63 68 6F 69 63
	   65 2C 20 70 6C
	   65 61 73 65 20
	   74 72 79 20 61
	   67 61 69 6E


 00000000			.code
 00000000			main PROC
 00000000  C7 05 000000EF R		mov ChipsPlayer, 100
	   00000064
 0000000A  C7 05 000000F3 R		mov ChipsSpock, 100
	   00000064
 00000014				G1:
 00000014  E8 0000014C				Call Ante
 00000019  E8 0000004A				Call Shuffel
 0000001E  E8 0000008E				Call DealHand
 00000023  E8 0000023F				Call HandSpock
 00000028  E8 000006D8				Call Bid1
 0000002D  E8 000000B8				Call DealFlop
 00000032  E8 00000230				Call HandSpock
 00000037  E8 000006CA				Call Bid2
 0000003C  E8 000000DA				Call DealTurn
 00000041  E8 00000221				Call HandSpock
 00000046  E8 000006BC				Call Bid3
 0000004B  E8 000000F9				Call DealRiver
 00000050  E8 00000212				Call HandSpock
 00000055  E8 0000045B				Call HandPlayer
 0000005A  E8 000006A9				Call CompareHand
 0000005F  E2 B3			Loop G1

				exit
 00000061  6A 00	   *	    push   +000000000h
 00000063  E8 00000000 E   *	    call   ExitProcess
 00000068			main ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000068			Shuffel PROC																																							;
				;	Recieves: nothing																																					;
				;	Returns: Full/shuffled Deck																																			;
				;Adds 52 cards to the Deck 13 from each suit and shuffles them		Values 1-13 =Spades 14-26 Hearts 27-39 Clubs 40-52													;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000068  B9 00000034		mov ecx, 52
 0000006D  B2 00		mov dl, 0
 0000006F  B0 01		mov al, 1
 00000071  BE 00000000		mov esi, 0
 00000076				L0:
 00000076  88 86 000000AA R			mov Deck[esi], al
 0000007C  FE C0				inc al
 0000007E  83 C6 01				add esi,TYPE Deck
 00000081  FE C2				inc dl
 00000083  E2 F1			Loop L0

 00000085  B9 00000068		mov ecx, 104

 0000008A				S1:
 0000008A  B8 00000035				mov eax,53
 0000008F  E8 00000000 E			call randomrange
 00000094  8B F0				mov esi, eax
 00000096  8A 9E 000000AA R			mov bl,Deck[esi]
 0000009C  A0 000000AA R			mov al, Deck[0]
 000000A1  86 C3				xchg al,bl
 000000A3  88 9E 000000AA R			mov Deck[esi], bl
 000000A9  A2 000000AA R			mov Deck[0], al
 000000AE  E2 DA			Loop S1

 000000B0  C3			ret
 000000B1			Shuffel ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000B1			DealHand PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to PlayerHand/SpockHand																														;
				;Procedure deals PlayerHand/SpockHand																																	;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000B1  B9 00000002		mov ecx, 2
 000000B6  BE 00000000		mov esi, 0
 000000BB  BB 00000000		mov ebx, 0

 000000C0				H1:
 000000C0  8A 83 000000AA R			mov al, Deck[ebx]
 000000C6  88 86 000000DE R			mov PlayerHand[esi], al
 000000CC  83 C3 01				add ebx, TYPE Deck
 000000CF  8A 83 000000AA R			mov al, Deck [ebx]
 000000D5  88 86 000000E0 R			mov SpockHand[esi], al
 000000DB  83 C6 01				add esi, TYPE PlayerHand
 000000DE  83 C3 01				add ebx, TYPE Deck
 000000E1  E2 DD			Loop H1
 000000E3  89 1D 000000E7 R	mov DeckMark,EBX
 000000E9  C3			ret
 000000EA			DealHand ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000000EA			DealFlop PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Dek to Flop																																		;
				;Procedure deals Flop																																					;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 000000EA  B9 00000003		mov ecx, 3
 000000EF  8B 1D 000000E7 R	mov ebx, DeckMark
 000000F5  BF 00000000		mov edi,0

 000000FA				T1:
 000000FA  8A 83 000000AA R			mov al, Deck[ebx]
 00000100  88 87 000000E2 R			mov Table[edi], al
 00000106  83 C3 01				add ebx, TYPE Deck
 00000109  83 C7 01				add edi, TYPE Table
 0000010C  E2 EC			Loop T1
 0000010E  89 3D 000000EB R	mov TableMark,edi
 00000114  89 1D 000000E7 R	mov DeckMark,ebx
 0000011A  C3			ret
 0000011B			DealFlop ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000011B			DealTurn PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to Turn																																		;
				;Procedure skips a card for burn and deals Turn																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000011B  8B 1D 000000E7 R	mov ebx, DeckMark
 00000121  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 00000124  8B 3D 000000EB R	mov edi, TableMark
 0000012A  8A 83 000000AA R	mov al, Deck[ebx]
 00000130  88 87 000000E2 R	mov Table[edi],al
 00000136  83 C3 01		add ebx, TYPE Deck
 00000139  89 1D 000000E7 R	mov DeckMark, EBX
 0000013F  83 C7 01		add edi, TYPE Table
 00000142  89 3D 000000EB R	mov TableMark, edi

 00000148  C3			ret
 00000149			DealTurn ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000149			DealRiver PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to River																																	;
				;Procedure skips a card from Deck for burn and deals River																												;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00000149  8B 1D 000000E7 R	mov ebx, DeckMark
 0000014F  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 00000152  8B 3D 000000EB R	mov edi, TableMark
 00000158  8A 83 000000AA R	mov al, Deck[ebx]
 0000015E  88 87 000000E2 R	mov Table[edi],al

 00000164  C3			ret
 00000165			DealRiver ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000165			Ante PROC																																								;
				;	Recieves: BigBlind, ChipsPlayer, ChipsSpock, ChipsTable,																											;
				;	Returns: ChipsPlayer(modified) ChipsSpock(modified), ChipTable(modified)																							;
				;	Big and Little blinds paid in for oppening bet																														;
				;Procedure Checks to ensure that player and spock have the chips to make bet if not game end call win/lose, change the value of chips									;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				.if(BigBlind > 0)
 00000165  83 3D 000000FB R
	   00		   *	    cmp    BigBlind, 000h
 0000016C  76 28	   *	    jbe    @C0001
 0000016E  C7 05 000000FB R		mov BigBlind, 0
	   00000000
					.if(ChipsPlayer < 25)
 00000178  83 3D 000000EF R
	   19		   *	    cmp    ChipsPlayer, 019h
 0000017F  73 05	   *	    jae    @C0003
 00000181  E8 00000094					call Lose
						.endif
					
						.if(ChipsSpock < 50)
 00000186		   *@C0003:
 00000186  83 3D 000000F3 R
	   32		   *	    cmp    ChipsSpock, 032h
 0000018D  73 23	   *	    jae    @C0005
 0000018F  E8 0000006C					call Win	
						.endif

						.else
 00000194  EB 1C	   *	    jmp    @C0007
 00000196		   *@C0001:
 00000196  83 2D 000000EF R				sub ChipsPlayer, 25
	   19
 0000019D  83 05 000000F7 R				add ChipsTable, 25
	   19
 000001A4  83 2D 000000F3 R				sub ChipsSpock, 50
	   32
 000001AB  83 05 000000F7 R				add ChipsTable, 50
	   32
					.endif
 000001B2		   *@C0007:
 000001B2		   *@C0005:

					.if(BigBlind<1)
 000001B2  83 3D 000000FB R
	   01		   *	    cmp    BigBlind, 001h
 000001B9  73 28	   *	    jae    @C0008
 000001BB  C7 05 000000FB R			mov BigBlind, 1
	   00000001
						.if(ChipsPlayer < 50)
 000001C5  83 3D 000000EF R
	   32		   *	    cmp    ChipsPlayer, 032h
 000001CC  73 05	   *	    jae    @C000A
 000001CE  E8 00000047					call Lose
						.endif
					
						.if(ChipsSpock < 25)
 000001D3		   *@C000A:
 000001D3  83 3D 000000F3 R
	   19		   *	    cmp    ChipsSpock, 019h
 000001DA  73 23	   *	    jae    @C000C
 000001DC  E8 0000001F					call Win	
						.endif

						.else
 000001E1  EB 1C	   *	    jmp    @C000E
 000001E3		   *@C0008:
 000001E3  83 2D 000000EF R				sub ChipsPlayer, 50
	   32
 000001EA  83 05 000000F7 R				add ChipsTable, 50
	   32
 000001F1  83 2D 000000F3 R				sub ChipsSpock, 25
	   19
 000001F8  83 05 000000F7 R				add ChipsTable, 25
	   19
					.endif
 000001FF		   *@C000E:
 000001FF		   *@C000C:

 000001FF  C3			ret
 00000200			Ante ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000200			Win PROC																																								;
				;	Recieves: PromptWinImage, PromptYouWin, PlayerChips																													;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000200  BA 0000017D R		mov edx, OFFSET PromptWinImage
 00000205  E8 00000000 E		call WriteString
 0000020A  8B 15 000000EF R		mov edx, ChipsPlayer
 00000210  E8 00000000 E		call WriteString
 00000215  E8 0000001A			Call PlayAgain
 0000021A			Win ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000021A			Lose PROC																																								;
				;	Recieves: PromptLoseImage, PromptYouLose, PlayerChips																												;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000021A  BA 0000017E R		mov edx, OFFSET PromptLoseImage
 0000021F  E8 00000000 E		call WriteString
 00000224  8B 15 000000EF R		mov edx, ChipsPlayer
 0000022A  E8 00000000 E		call WriteString
 0000022F  E8 00000000			Call PlayAgain
 00000234			Lose ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000234			PlayAgain PROC																																							;
				;	Recieves: PromptPlayAgain																																			;
				;	Returns: Nothing																																					;
				;	Asks if you want to PlayAgain, if y call main/if n invoke exitproccess/if else prompbadinput																		;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000234  BA 00000148 R		mov edx, OFFSET PromptPlayAgain
 00000239  E8 00000000 E		call WriteString
 0000023E  E8 00000000 E		call Readint
						.if(eax==0)
 00000243  0B C0	   *	    or	eax, eax
 00000245  75 09	   *	    jne    @C000F
							INVOKE ExitProcess, 0
 00000247  6A 00	   *	    push   +000000000h
 00000249  E8 00000000 E   *	    call   ExitProcess
						.elseif(eax==1)
 0000024E  EB 16	   *	    jmp    @C0011
 00000250		   *@C000F:
 00000250  83 F8 01	   *	    cmp    eax, 001h
 00000253  75 07	   *	    jne    @C0012
 00000255  E8 FFFFFDA6					call Main
						.else
 0000025A  EB 0A	   *	    jmp    @C0014
 0000025C		   *@C0012:
 0000025C  A0 00000181 R				mov al, PromptBadInput
 00000261  E8 FFFFFFCE					call PlayAgain
						.endif
 00000266		   *@C0014:
 00000266		   *@C0011:
 00000266  C3			ret
 00000267			PlayAgain ENDP


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000267			HandSpock PROC																																							;
				;	Recieves: Table, SpockHand, FullHandSpock																															;
				;	Returns: FullHandSpock																																				;
				;	Adds Spock and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000267  B8 00000000		mov eax, 0
 0000026C  B9 00000005		mov ecx, 5
 00000271				FSH1:	
 00000271  8A 90 000000E2 R			mov dl, table[eax]																						;FullSpockHand1
 00000277  88 90 000000FF R			mov FullHandSpock[eax],dl		
 0000027D  83 C0 01				add eax, TYPE FullHandSpock
 00000280  E2 EF			Loop FSH1																						
 00000282  BB 00000000		mov ebx, 0
 00000287  B9 00000002		mov ecx, 2
 0000028C				FSH2:																										;FullSpockHand2
 0000028C  8A 93 000000E0 R			mov dl, SpockHand[ebx]
 00000292  88 90 000000FF R			mov FullHandSpock[eax],dl
 00000298  83 C0 01				add eax, TYPE FullHandSpock
 0000029B  83 C3 01				add ebx, TYPE SpockHand
 0000029E  E2 EC			Loop FSH2

 000002A0  A0 000000FF R	mov al, FullHandSpock[0]
 000002A5  A2 00000000 R	mov cards1.value,al
					.if(al >0 && al < 14)
 000002AA  3C 00	   *	    cmp    al, 000h
 000002AC  76 0D	   *	    jbe    @C0015
 000002AE  3C 0E	   *	    cmp    al, 00Eh
 000002B0  73 09	   *	    jae    @C0015
 000002B2  C6 05 00000001 R			mov cards1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000002B9  EB 31	   *	    jmp    @C0018
 000002BB		   *@C0015:
 000002BB  3C 0D	   *	    cmp    al, 00Dh
 000002BD  76 0D	   *	    jbe    @C0019
 000002BF  3C 1B	   *	    cmp    al, 01Bh
 000002C1  73 09	   *	    jae    @C0019
 000002C3  C6 05 00000001 R			mov cards1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000002CA  EB 20	   *	    jmp    @C001C
 000002CC		   *@C0019:
 000002CC  3C 1A	   *	    cmp    al, 01Ah
 000002CE  76 0D	   *	    jbe    @C001D
 000002D0  3C 28	   *	    cmp    al, 028h
 000002D2  73 09	   *	    jae    @C001D
 000002D4  C6 05 00000001 R			mov cards1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000002DB  EB 0F	   *	    jmp    @C0020
 000002DD		   *@C001D:
 000002DD  3C 27	   *	    cmp    al, 027h
 000002DF  76 0B	   *	    jbe    @C0021
 000002E1  3C 35	   *	    cmp    al, 035h
 000002E3  73 07	   *	    jae    @C0021
 000002E5  C6 05 00000001 R			mov cards1.suit, 4
	   04
					.endif
 000002EC		   *@C0021:
 000002EC		   *@C0020:
 000002EC		   *@C001C:
 000002EC		   *@C0018:
 000002EC  A0 00000100 R	mov al, FullHandSpock[1]
 000002F1  A2 00000002 R	mov cards2.value,al
					.if(al >0 && al < 14)
 000002F6  3C 00	   *	    cmp    al, 000h
 000002F8  76 0D	   *	    jbe    @C0024
 000002FA  3C 0E	   *	    cmp    al, 00Eh
 000002FC  73 09	   *	    jae    @C0024
 000002FE  C6 05 00000003 R			mov cards2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000305  EB 31	   *	    jmp    @C0027
 00000307		   *@C0024:
 00000307  3C 0D	   *	    cmp    al, 00Dh
 00000309  76 0D	   *	    jbe    @C0028
 0000030B  3C 1B	   *	    cmp    al, 01Bh
 0000030D  73 09	   *	    jae    @C0028
 0000030F  C6 05 00000003 R			mov cards2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000316  EB 20	   *	    jmp    @C002B
 00000318		   *@C0028:
 00000318  3C 1A	   *	    cmp    al, 01Ah
 0000031A  76 0D	   *	    jbe    @C002C
 0000031C  3C 28	   *	    cmp    al, 028h
 0000031E  73 09	   *	    jae    @C002C
 00000320  C6 05 00000003 R			mov cards2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000327  EB 0F	   *	    jmp    @C002F
 00000329		   *@C002C:
 00000329  3C 27	   *	    cmp    al, 027h
 0000032B  76 0B	   *	    jbe    @C0030
 0000032D  3C 35	   *	    cmp    al, 035h
 0000032F  73 07	   *	    jae    @C0030
 00000331  C6 05 00000003 R			mov cards2.suit, 4
	   04
					.endif
 00000338		   *@C0030:
 00000338		   *@C002F:
 00000338		   *@C002B:
 00000338		   *@C0027:
 00000338  A0 00000101 R	mov al, FullHandSpock[2]
 0000033D  A2 00000004 R	mov cards3.value,al
					.if(al >0 && al < 14)
 00000342  3C 00	   *	    cmp    al, 000h
 00000344  76 0D	   *	    jbe    @C0033
 00000346  3C 0E	   *	    cmp    al, 00Eh
 00000348  73 09	   *	    jae    @C0033
 0000034A  C6 05 00000005 R			mov cards3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000351  EB 31	   *	    jmp    @C0036
 00000353		   *@C0033:
 00000353  3C 0D	   *	    cmp    al, 00Dh
 00000355  76 0D	   *	    jbe    @C0037
 00000357  3C 1B	   *	    cmp    al, 01Bh
 00000359  73 09	   *	    jae    @C0037
 0000035B  C6 05 00000005 R			mov cards3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000362  EB 20	   *	    jmp    @C003A
 00000364		   *@C0037:
 00000364  3C 1A	   *	    cmp    al, 01Ah
 00000366  76 0D	   *	    jbe    @C003B
 00000368  3C 28	   *	    cmp    al, 028h
 0000036A  73 09	   *	    jae    @C003B
 0000036C  C6 05 00000005 R			mov cards3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000373  EB 0F	   *	    jmp    @C003E
 00000375		   *@C003B:
 00000375  3C 27	   *	    cmp    al, 027h
 00000377  76 0B	   *	    jbe    @C003F
 00000379  3C 35	   *	    cmp    al, 035h
 0000037B  73 07	   *	    jae    @C003F
 0000037D  C6 05 00000005 R			mov cards3.suit, 4
	   04
					.endif
 00000384		   *@C003F:
 00000384		   *@C003E:
 00000384		   *@C003A:
 00000384		   *@C0036:
 00000384  A0 00000102 R	mov al, FullHandSpock[3]
 00000389  A2 00000006 R	mov cards4.value,al
					.if(al >0 && al < 14)
 0000038E  3C 00	   *	    cmp    al, 000h
 00000390  76 0D	   *	    jbe    @C0042
 00000392  3C 0E	   *	    cmp    al, 00Eh
 00000394  73 09	   *	    jae    @C0042
 00000396  C6 05 00000007 R			mov cards4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000039D  EB 31	   *	    jmp    @C0045
 0000039F		   *@C0042:
 0000039F  3C 0D	   *	    cmp    al, 00Dh
 000003A1  76 0D	   *	    jbe    @C0046
 000003A3  3C 1B	   *	    cmp    al, 01Bh
 000003A5  73 09	   *	    jae    @C0046
 000003A7  C6 05 00000007 R			mov cards4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000003AE  EB 20	   *	    jmp    @C0049
 000003B0		   *@C0046:
 000003B0  3C 1A	   *	    cmp    al, 01Ah
 000003B2  76 0D	   *	    jbe    @C004A
 000003B4  3C 28	   *	    cmp    al, 028h
 000003B6  73 09	   *	    jae    @C004A
 000003B8  C6 05 00000007 R			mov cards4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000003BF  EB 0F	   *	    jmp    @C004D
 000003C1		   *@C004A:
 000003C1  3C 27	   *	    cmp    al, 027h
 000003C3  76 0B	   *	    jbe    @C004E
 000003C5  3C 35	   *	    cmp    al, 035h
 000003C7  73 07	   *	    jae    @C004E
 000003C9  C6 05 00000007 R			mov cards4.suit, 4
	   04
					.endif
 000003D0		   *@C004E:
 000003D0		   *@C004D:
 000003D0		   *@C0049:
 000003D0		   *@C0045:
 000003D0  A0 00000103 R	mov al, FullHandSpock[4]
 000003D5  A2 00000008 R	mov cards5.value,al
					.if(al >0 && al < 14)
 000003DA  3C 00	   *	    cmp    al, 000h
 000003DC  76 0D	   *	    jbe    @C0051
 000003DE  3C 0E	   *	    cmp    al, 00Eh
 000003E0  73 09	   *	    jae    @C0051
 000003E2  C6 05 00000009 R			mov cards5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000003E9  EB 31	   *	    jmp    @C0054
 000003EB		   *@C0051:
 000003EB  3C 0D	   *	    cmp    al, 00Dh
 000003ED  76 0D	   *	    jbe    @C0055
 000003EF  3C 1B	   *	    cmp    al, 01Bh
 000003F1  73 09	   *	    jae    @C0055
 000003F3  C6 05 00000009 R			mov cards5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000003FA  EB 20	   *	    jmp    @C0058
 000003FC		   *@C0055:
 000003FC  3C 1A	   *	    cmp    al, 01Ah
 000003FE  76 0D	   *	    jbe    @C0059
 00000400  3C 28	   *	    cmp    al, 028h
 00000402  73 09	   *	    jae    @C0059
 00000404  C6 05 00000009 R			mov cards5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000040B  EB 0F	   *	    jmp    @C005C
 0000040D		   *@C0059:
 0000040D  3C 27	   *	    cmp    al, 027h
 0000040F  76 0B	   *	    jbe    @C005D
 00000411  3C 35	   *	    cmp    al, 035h
 00000413  73 07	   *	    jae    @C005D
 00000415  C6 05 00000009 R			mov cards5.suit, 4
	   04
					.endif
 0000041C		   *@C005D:
 0000041C		   *@C005C:
 0000041C		   *@C0058:
 0000041C		   *@C0054:
 0000041C  A0 00000104 R	mov al, FullHandSpock[5]
 00000421  A2 0000000A R	mov cards6.value,al
					.if(al >0 && al < 14)
 00000426  3C 00	   *	    cmp    al, 000h
 00000428  76 0D	   *	    jbe    @C0060
 0000042A  3C 0E	   *	    cmp    al, 00Eh
 0000042C  73 09	   *	    jae    @C0060
 0000042E  C6 05 0000000B R			mov cards6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000435  EB 31	   *	    jmp    @C0063
 00000437		   *@C0060:
 00000437  3C 0D	   *	    cmp    al, 00Dh
 00000439  76 0D	   *	    jbe    @C0064
 0000043B  3C 1B	   *	    cmp    al, 01Bh
 0000043D  73 09	   *	    jae    @C0064
 0000043F  C6 05 0000000B R			mov cards6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000446  EB 20	   *	    jmp    @C0067
 00000448		   *@C0064:
 00000448  3C 1A	   *	    cmp    al, 01Ah
 0000044A  76 0D	   *	    jbe    @C0068
 0000044C  3C 28	   *	    cmp    al, 028h
 0000044E  73 09	   *	    jae    @C0068
 00000450  C6 05 0000000B R			mov cards6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000457  EB 0F	   *	    jmp    @C006B
 00000459		   *@C0068:
 00000459  3C 27	   *	    cmp    al, 027h
 0000045B  76 0B	   *	    jbe    @C006C
 0000045D  3C 35	   *	    cmp    al, 035h
 0000045F  73 07	   *	    jae    @C006C
 00000461  C6 05 0000000B R			mov cards6.suit, 4
	   04
					.endif
 00000468		   *@C006C:
 00000468		   *@C006B:
 00000468		   *@C0067:
 00000468		   *@C0063:
 00000468  A0 00000105 R	mov al, FullHandSpock[6]
 0000046D  A2 0000000C R	mov cards7.value,al
					.if(al >0 && al < 14)
 00000472  3C 00	   *	    cmp    al, 000h
 00000474  76 0D	   *	    jbe    @C006F
 00000476  3C 0E	   *	    cmp    al, 00Eh
 00000478  73 09	   *	    jae    @C006F
 0000047A  C6 05 0000000D R			mov cards7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000481  EB 31	   *	    jmp    @C0072
 00000483		   *@C006F:
 00000483  3C 0D	   *	    cmp    al, 00Dh
 00000485  76 0D	   *	    jbe    @C0073
 00000487  3C 1B	   *	    cmp    al, 01Bh
 00000489  73 09	   *	    jae    @C0073
 0000048B  C6 05 0000000D R			mov cards7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000492  EB 20	   *	    jmp    @C0076
 00000494		   *@C0073:
 00000494  3C 1A	   *	    cmp    al, 01Ah
 00000496  76 0D	   *	    jbe    @C0077
 00000498  3C 28	   *	    cmp    al, 028h
 0000049A  73 09	   *	    jae    @C0077
 0000049C  C6 05 0000000D R			mov cards7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000004A3  EB 0F	   *	    jmp    @C007A
 000004A5		   *@C0077:
 000004A5  3C 27	   *	    cmp    al, 027h
 000004A7  76 0B	   *	    jbe    @C007B
 000004A9  3C 35	   *	    cmp    al, 035h
 000004AB  73 07	   *	    jae    @C007B
 000004AD  C6 05 0000000D R			mov cards7.suit, 4
	   04
					.endif
 000004B4		   *@C007B:
 000004B4		   *@C007A:
 000004B4		   *@C0076:
 000004B4		   *@C0072:
 000004B4  C3			ret
 000004B5			HandSpock ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000004B5			HandPlayer PROC																																							;
				;	Recieves: Table, PlayerHand, FullHandPlayer																															;
				;	Returns: FullHandPlayer																																				;
				;	Adds Player and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000004B5  B8 00000000		mov eax, 0
 000004BA  B9 00000005		mov ecx, 5
 000004BF				FPH1:																									;FullPlayerHand1
 000004BF  8A 90 000000E2 R			mov dl, table[eax]																						
 000004C5  88 90 00000106 R			mov FullHandPlayer[eax], dl
 000004CB  83 C0 01				add eax, TYPE FullHandPlayer
 000004CE  E2 EF			Loop FPH1																						
 000004D0  BB 00000000		mov ebx, 0
 000004D5  B9 00000002		mov ecx, 2
 000004DA				FPH2:																									;FullPlayerHand2
 000004DA  8A 93 000000DE R			mov dl, PlayerHand[ebx]																						
 000004E0  88 90 00000106 R			mov FullHandPlayer[eax], dl
 000004E6  83 C0 01				add eax, TYPE FullHandPlayer
 000004E9  BB 00000001				mov ebx, TYPE PlayerHand
 000004EE  E2 EA			Loop FPH2

 000004F0  A0 00000106 R	mov al, FullHandplayer[0]
 000004F5  A2 0000000E R	mov cardp1.value,al
					.if(al >0 && al < 14)
 000004FA  3C 00	   *	    cmp    al, 000h
 000004FC  76 0D	   *	    jbe    @C007E
 000004FE  3C 0E	   *	    cmp    al, 00Eh
 00000500  73 09	   *	    jae    @C007E
 00000502  C6 05 0000000F R			mov cardp1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000509  EB 31	   *	    jmp    @C0081
 0000050B		   *@C007E:
 0000050B  3C 0D	   *	    cmp    al, 00Dh
 0000050D  76 0D	   *	    jbe    @C0082
 0000050F  3C 1B	   *	    cmp    al, 01Bh
 00000511  73 09	   *	    jae    @C0082
 00000513  C6 05 0000000F R			mov cardp1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000051A  EB 20	   *	    jmp    @C0085
 0000051C		   *@C0082:
 0000051C  3C 1A	   *	    cmp    al, 01Ah
 0000051E  76 0D	   *	    jbe    @C0086
 00000520  3C 28	   *	    cmp    al, 028h
 00000522  73 09	   *	    jae    @C0086
 00000524  C6 05 0000000F R			mov cardp1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000052B  EB 0F	   *	    jmp    @C0089
 0000052D		   *@C0086:
 0000052D  3C 27	   *	    cmp    al, 027h
 0000052F  76 0B	   *	    jbe    @C008A
 00000531  3C 35	   *	    cmp    al, 035h
 00000533  73 07	   *	    jae    @C008A
 00000535  C6 05 0000000F R			mov cardp1.suit, 4
	   04
					.endif
 0000053C		   *@C008A:
 0000053C		   *@C0089:
 0000053C		   *@C0085:
 0000053C		   *@C0081:
 0000053C  A0 00000107 R	mov al, FullHandplayer[1]
 00000541  A2 00000010 R	mov cardp2.value,al
					.if(al >0 && al < 14)
 00000546  3C 00	   *	    cmp    al, 000h
 00000548  76 0D	   *	    jbe    @C008D
 0000054A  3C 0E	   *	    cmp    al, 00Eh
 0000054C  73 09	   *	    jae    @C008D
 0000054E  C6 05 00000011 R			mov cardp2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000555  EB 31	   *	    jmp    @C0090
 00000557		   *@C008D:
 00000557  3C 0D	   *	    cmp    al, 00Dh
 00000559  76 0D	   *	    jbe    @C0091
 0000055B  3C 1B	   *	    cmp    al, 01Bh
 0000055D  73 09	   *	    jae    @C0091
 0000055F  C6 05 00000011 R			mov cardp2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000566  EB 20	   *	    jmp    @C0094
 00000568		   *@C0091:
 00000568  3C 1A	   *	    cmp    al, 01Ah
 0000056A  76 0D	   *	    jbe    @C0095
 0000056C  3C 28	   *	    cmp    al, 028h
 0000056E  73 09	   *	    jae    @C0095
 00000570  C6 05 00000011 R			mov cardp2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000577  EB 0F	   *	    jmp    @C0098
 00000579		   *@C0095:
 00000579  3C 27	   *	    cmp    al, 027h
 0000057B  76 0B	   *	    jbe    @C0099
 0000057D  3C 35	   *	    cmp    al, 035h
 0000057F  73 07	   *	    jae    @C0099
 00000581  C6 05 00000011 R			mov cardp2.suit, 4
	   04
					.endif
 00000588		   *@C0099:
 00000588		   *@C0098:
 00000588		   *@C0094:
 00000588		   *@C0090:
 00000588  A0 00000108 R	mov al, FullHandplayer[2]
 0000058D  A2 00000012 R	mov cardp3.value,al
					.if(al >0 && al < 14)
 00000592  3C 00	   *	    cmp    al, 000h
 00000594  76 0D	   *	    jbe    @C009C
 00000596  3C 0E	   *	    cmp    al, 00Eh
 00000598  73 09	   *	    jae    @C009C
 0000059A  C6 05 00000013 R			mov cardp3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000005A1  EB 31	   *	    jmp    @C009F
 000005A3		   *@C009C:
 000005A3  3C 0D	   *	    cmp    al, 00Dh
 000005A5  76 0D	   *	    jbe    @C00A0
 000005A7  3C 1B	   *	    cmp    al, 01Bh
 000005A9  73 09	   *	    jae    @C00A0
 000005AB  C6 05 00000013 R			mov cardp3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000005B2  EB 20	   *	    jmp    @C00A3
 000005B4		   *@C00A0:
 000005B4  3C 1A	   *	    cmp    al, 01Ah
 000005B6  76 0D	   *	    jbe    @C00A4
 000005B8  3C 28	   *	    cmp    al, 028h
 000005BA  73 09	   *	    jae    @C00A4
 000005BC  C6 05 00000013 R			mov cardp3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000005C3  EB 0F	   *	    jmp    @C00A7
 000005C5		   *@C00A4:
 000005C5  3C 27	   *	    cmp    al, 027h
 000005C7  76 0B	   *	    jbe    @C00A8
 000005C9  3C 35	   *	    cmp    al, 035h
 000005CB  73 07	   *	    jae    @C00A8
 000005CD  C6 05 00000013 R			mov cardp3.suit, 4
	   04
					.endif
 000005D4		   *@C00A8:
 000005D4		   *@C00A7:
 000005D4		   *@C00A3:
 000005D4		   *@C009F:
 000005D4  A0 00000109 R	mov al, FullHandplayer[3]
 000005D9  A2 00000014 R	mov cardp4.value,al
					.if(al >0 && al < 14)
 000005DE  3C 00	   *	    cmp    al, 000h
 000005E0  76 0D	   *	    jbe    @C00AB
 000005E2  3C 0E	   *	    cmp    al, 00Eh
 000005E4  73 09	   *	    jae    @C00AB
 000005E6  C6 05 00000015 R			mov cardp4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000005ED  EB 31	   *	    jmp    @C00AE
 000005EF		   *@C00AB:
 000005EF  3C 0D	   *	    cmp    al, 00Dh
 000005F1  76 0D	   *	    jbe    @C00AF
 000005F3  3C 1B	   *	    cmp    al, 01Bh
 000005F5  73 09	   *	    jae    @C00AF
 000005F7  C6 05 00000015 R			mov cardp4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000005FE  EB 20	   *	    jmp    @C00B2
 00000600		   *@C00AF:
 00000600  3C 1A	   *	    cmp    al, 01Ah
 00000602  76 0D	   *	    jbe    @C00B3
 00000604  3C 28	   *	    cmp    al, 028h
 00000606  73 09	   *	    jae    @C00B3
 00000608  C6 05 00000015 R			mov cardp4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000060F  EB 0F	   *	    jmp    @C00B6
 00000611		   *@C00B3:
 00000611  3C 27	   *	    cmp    al, 027h
 00000613  76 0B	   *	    jbe    @C00B7
 00000615  3C 35	   *	    cmp    al, 035h
 00000617  73 07	   *	    jae    @C00B7
 00000619  C6 05 00000015 R			mov cardp4.suit, 4
	   04
					.endif
 00000620		   *@C00B7:
 00000620		   *@C00B6:
 00000620		   *@C00B2:
 00000620		   *@C00AE:
 00000620  A0 0000010A R	mov al, FullHandplayer[4]
 00000625  A2 00000016 R	mov cardp5.value,al
					.if(al >0 && al < 14)
 0000062A  3C 00	   *	    cmp    al, 000h
 0000062C  76 0D	   *	    jbe    @C00BA
 0000062E  3C 0E	   *	    cmp    al, 00Eh
 00000630  73 09	   *	    jae    @C00BA
 00000632  C6 05 00000017 R			mov cardp5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000639  EB 31	   *	    jmp    @C00BD
 0000063B		   *@C00BA:
 0000063B  3C 0D	   *	    cmp    al, 00Dh
 0000063D  76 0D	   *	    jbe    @C00BE
 0000063F  3C 1B	   *	    cmp    al, 01Bh
 00000641  73 09	   *	    jae    @C00BE
 00000643  C6 05 00000017 R			mov cardp5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000064A  EB 20	   *	    jmp    @C00C1
 0000064C		   *@C00BE:
 0000064C  3C 1A	   *	    cmp    al, 01Ah
 0000064E  76 0D	   *	    jbe    @C00C2
 00000650  3C 28	   *	    cmp    al, 028h
 00000652  73 09	   *	    jae    @C00C2
 00000654  C6 05 00000017 R			mov cardp5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000065B  EB 0F	   *	    jmp    @C00C5
 0000065D		   *@C00C2:
 0000065D  3C 27	   *	    cmp    al, 027h
 0000065F  76 0B	   *	    jbe    @C00C6
 00000661  3C 35	   *	    cmp    al, 035h
 00000663  73 07	   *	    jae    @C00C6
 00000665  C6 05 00000017 R			mov cardp5.suit, 4
	   04
					.endif
 0000066C		   *@C00C6:
 0000066C		   *@C00C5:
 0000066C		   *@C00C1:
 0000066C		   *@C00BD:
 0000066C  A0 0000010B R	mov al, FullHandplayer[5]
 00000671  A2 00000018 R	mov cardp6.value,al
					.if(al >0 && al < 14)
 00000676  3C 00	   *	    cmp    al, 000h
 00000678  76 0D	   *	    jbe    @C00C9
 0000067A  3C 0E	   *	    cmp    al, 00Eh
 0000067C  73 09	   *	    jae    @C00C9
 0000067E  C6 05 00000019 R			mov cardp6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000685  EB 31	   *	    jmp    @C00CC
 00000687		   *@C00C9:
 00000687  3C 0D	   *	    cmp    al, 00Dh
 00000689  76 0D	   *	    jbe    @C00CD
 0000068B  3C 1B	   *	    cmp    al, 01Bh
 0000068D  73 09	   *	    jae    @C00CD
 0000068F  C6 05 00000019 R			mov cardp6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000696  EB 20	   *	    jmp    @C00D0
 00000698		   *@C00CD:
 00000698  3C 1A	   *	    cmp    al, 01Ah
 0000069A  76 0D	   *	    jbe    @C00D1
 0000069C  3C 28	   *	    cmp    al, 028h
 0000069E  73 09	   *	    jae    @C00D1
 000006A0  C6 05 00000019 R			mov cardp6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000006A7  EB 0F	   *	    jmp    @C00D4
 000006A9		   *@C00D1:
 000006A9  3C 27	   *	    cmp    al, 027h
 000006AB  76 0B	   *	    jbe    @C00D5
 000006AD  3C 35	   *	    cmp    al, 035h
 000006AF  73 07	   *	    jae    @C00D5
 000006B1  C6 05 00000019 R			mov cardp6.suit, 4
	   04
					.endif
 000006B8		   *@C00D5:
 000006B8		   *@C00D4:
 000006B8		   *@C00D0:
 000006B8		   *@C00CC:
 000006B8  A0 0000010C R	mov al, FullHandplayer[6]
 000006BD  A2 0000001A R	mov cardp7.value,al
					.if(al >0 && al < 14)
 000006C2  3C 00	   *	    cmp    al, 000h
 000006C4  76 0D	   *	    jbe    @C00D8
 000006C6  3C 0E	   *	    cmp    al, 00Eh
 000006C8  73 09	   *	    jae    @C00D8
 000006CA  C6 05 0000001B R			mov cardp7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000006D1  EB 31	   *	    jmp    @C00DB
 000006D3		   *@C00D8:
 000006D3  3C 0D	   *	    cmp    al, 00Dh
 000006D5  76 0D	   *	    jbe    @C00DC
 000006D7  3C 1B	   *	    cmp    al, 01Bh
 000006D9  73 09	   *	    jae    @C00DC
 000006DB  C6 05 0000001B R			mov cardp7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000006E2  EB 20	   *	    jmp    @C00DF
 000006E4		   *@C00DC:
 000006E4  3C 1A	   *	    cmp    al, 01Ah
 000006E6  76 0D	   *	    jbe    @C00E0
 000006E8  3C 28	   *	    cmp    al, 028h
 000006EA  73 09	   *	    jae    @C00E0
 000006EC  C6 05 0000001B R			mov cardp7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000006F3  EB 0F	   *	    jmp    @C00E3
 000006F5		   *@C00E0:
 000006F5  3C 27	   *	    cmp    al, 027h
 000006F7  76 0B	   *	    jbe    @C00E4
 000006F9  3C 35	   *	    cmp    al, 035h
 000006FB  73 07	   *	    jae    @C00E4
 000006FD  C6 05 0000001B R			mov cardp7.suit, 4
	   04
					.endif
 00000704		   *@C00E4:
 00000704		   *@C00E3:
 00000704		   *@C00DF:
 00000704		   *@C00DB:
 00000704  C3				ret
 00000705			HandPlayer ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000705			Bid1 PROC
 00000705  C3				ret
 00000706			Bid1 ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000706			Bid2 PROC
 00000706  C3				ret
 00000707			Bid2 ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000707			Bid3 PROC
 00000707  C3				ret
 00000708			Bid3 ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000708			CompareHand Proc
 00000708  E8 00000006			call IsAFlush
 0000070D  E8 000003E2			call IsAStraight
 00000712  C3				ret
 00000713			CompareHand ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000713			IsAFlush Proc
				;Spock Check
					.if (cards1.suit == 1)
 00000713  80 3D 00000001 R
	   01		   *	    cmp    cards1 . Suit, 001h
 0000071A  75 06	   *	    jne    @C00E7
 0000071C  FF 05 00000030 R			inc IsSpadeS
					.endif
 00000722		   *@C00E7:
					.if (cards2.suit == 1)
 00000722  80 3D 00000003 R
	   01		   *	    cmp    cards2 . Suit, 001h
 00000729  75 06	   *	    jne    @C00E9
 0000072B  FF 05 00000030 R			inc IsSpadeS
					.endif
 00000731		   *@C00E9:
					.if (cards3.suit == 1)
 00000731  80 3D 00000005 R
	   01		   *	    cmp    cards3 . Suit, 001h
 00000738  75 06	   *	    jne    @C00EB
 0000073A  FF 05 00000030 R			inc IsSpadeS
					.endif
 00000740		   *@C00EB:
					.if (cards4.suit == 1)
 00000740  80 3D 00000007 R
	   01		   *	    cmp    cards4 . Suit, 001h
 00000747  75 06	   *	    jne    @C00ED
 00000749  FF 05 00000030 R			inc IsSpadeS
					.endif
 0000074F		   *@C00ED:
					.if (cards5.suit == 1)
 0000074F  80 3D 00000009 R
	   01		   *	    cmp    cards5 . Suit, 001h
 00000756  75 06	   *	    jne    @C00EF
 00000758  FF 05 00000030 R			inc IsSpadeS
					.endif
 0000075E		   *@C00EF:
					.if (cards6.suit == 1)
 0000075E  80 3D 0000000B R
	   01		   *	    cmp    cards6 . Suit, 001h
 00000765  75 06	   *	    jne    @C00F1
 00000767  FF 05 00000030 R			inc IsSpadeS
					.endif
 0000076D		   *@C00F1:
					.if (cards7.suit == 1)
 0000076D  80 3D 0000000D R
	   01		   *	    cmp    cards7 . Suit, 001h
 00000774  75 06	   *	    jne    @C00F3
 00000776  FF 05 00000030 R			inc IsSpadeS
					.endif
 0000077C		   *@C00F3:

					.if (cards1.suit == 2)
 0000077C  80 3D 00000001 R
	   02		   *	    cmp    cards1 . Suit, 002h
 00000783  75 06	   *	    jne    @C00F5
 00000785  FF 05 00000034 R			inc IsHeartS
					.endif
 0000078B		   *@C00F5:
					.if (cards2.suit == 2)
 0000078B  80 3D 00000003 R
	   02		   *	    cmp    cards2 . Suit, 002h
 00000792  75 06	   *	    jne    @C00F7
 00000794  FF 05 00000034 R			inc IsHeartS
					.endif
 0000079A		   *@C00F7:
					.if (cards3.suit == 2)
 0000079A  80 3D 00000005 R
	   02		   *	    cmp    cards3 . Suit, 002h
 000007A1  75 06	   *	    jne    @C00F9
 000007A3  FF 05 00000034 R			inc IsHeartS
					.endif
 000007A9		   *@C00F9:
					.if (cards4.suit == 2)
 000007A9  80 3D 00000007 R
	   02		   *	    cmp    cards4 . Suit, 002h
 000007B0  75 06	   *	    jne    @C00FB
 000007B2  FF 05 00000034 R			inc IsHeartS
					.endif
 000007B8		   *@C00FB:
					.if (cards5.suit == 2)
 000007B8  80 3D 00000009 R
	   02		   *	    cmp    cards5 . Suit, 002h
 000007BF  75 06	   *	    jne    @C00FD
 000007C1  FF 05 00000034 R			inc IsHeartS
					.endif
 000007C7		   *@C00FD:
					.if (cards6.suit == 2)
 000007C7  80 3D 0000000B R
	   02		   *	    cmp    cards6 . Suit, 002h
 000007CE  75 06	   *	    jne    @C00FF
 000007D0  FF 05 00000034 R			inc IsHeartS
					.endif
 000007D6		   *@C00FF:
					.if (cards7.suit == 2)
 000007D6  80 3D 0000000D R
	   02		   *	    cmp    cards7 . Suit, 002h
 000007DD  75 06	   *	    jne    @C0101
 000007DF  FF 05 00000034 R			inc IsHeartS
					.endif
 000007E5		   *@C0101:

					.if (cards1.suit == 3)
 000007E5  80 3D 00000001 R
	   03		   *	    cmp    cards1 . Suit, 003h
 000007EC  75 06	   *	    jne    @C0103
 000007EE  FF 05 00000038 R			inc IsClubS
					.endif
 000007F4		   *@C0103:
					.if (cards2.suit == 3)
 000007F4  80 3D 00000003 R
	   03		   *	    cmp    cards2 . Suit, 003h
 000007FB  75 06	   *	    jne    @C0105
 000007FD  FF 05 00000038 R			inc IsClubS
					.endif
 00000803		   *@C0105:
					.if (cards3.suit == 3)
 00000803  80 3D 00000005 R
	   03		   *	    cmp    cards3 . Suit, 003h
 0000080A  75 06	   *	    jne    @C0107
 0000080C  FF 05 00000038 R			inc IsClubS
					.endif
 00000812		   *@C0107:
					.if (cards4.suit == 3)
 00000812  80 3D 00000007 R
	   03		   *	    cmp    cards4 . Suit, 003h
 00000819  75 06	   *	    jne    @C0109
 0000081B  FF 05 00000038 R			inc IsClubS
					.endif
 00000821		   *@C0109:
					.if (cards5.suit == 3)
 00000821  80 3D 00000009 R
	   03		   *	    cmp    cards5 . Suit, 003h
 00000828  75 06	   *	    jne    @C010B
 0000082A  FF 05 00000038 R			inc IsClubS
					.endif
 00000830		   *@C010B:
					.if (cards6.suit == 3)
 00000830  80 3D 0000000B R
	   03		   *	    cmp    cards6 . Suit, 003h
 00000837  75 06	   *	    jne    @C010D
 00000839  FF 05 00000038 R			inc IsClubS
					.endif
 0000083F		   *@C010D:
					.if (cards7.suit == 3)
 0000083F  80 3D 0000000D R
	   03		   *	    cmp    cards7 . Suit, 003h
 00000846  75 06	   *	    jne    @C010F
 00000848  FF 05 00000038 R			inc IsClubS
					.endif
 0000084E		   *@C010F:

					.if (cards1.suit == 4)
 0000084E  80 3D 00000001 R
	   04		   *	    cmp    cards1 . Suit, 004h
 00000855  75 06	   *	    jne    @C0111
 00000857  FF 05 0000003C R			inc IsDimondS
					.endif
 0000085D		   *@C0111:
					.if (cards2.suit == 4)
 0000085D  80 3D 00000003 R
	   04		   *	    cmp    cards2 . Suit, 004h
 00000864  75 06	   *	    jne    @C0113
 00000866  FF 05 0000003C R			inc IsDimondS
					.endif
 0000086C		   *@C0113:
					.if (cards3.suit == 4)
 0000086C  80 3D 00000005 R
	   04		   *	    cmp    cards3 . Suit, 004h
 00000873  75 06	   *	    jne    @C0115
 00000875  FF 05 0000003C R			inc IsDimondS
					.endif
 0000087B		   *@C0115:
					.if (cards4.suit == 4)
 0000087B  80 3D 00000007 R
	   04		   *	    cmp    cards4 . Suit, 004h
 00000882  75 06	   *	    jne    @C0117
 00000884  FF 05 0000003C R			inc IsDimondS
					.endif
 0000088A		   *@C0117:
					.if (cards5.suit == 4)
 0000088A  80 3D 00000009 R
	   04		   *	    cmp    cards5 . Suit, 004h
 00000891  75 06	   *	    jne    @C0119
 00000893  FF 05 0000003C R			inc IsDimondS
					.endif
 00000899		   *@C0119:
					.if (cards6.suit == 4)
 00000899  80 3D 0000000B R
	   04		   *	    cmp    cards6 . Suit, 004h
 000008A0  75 06	   *	    jne    @C011B
 000008A2  FF 05 0000003C R			inc IsDimondS
					.endif
 000008A8		   *@C011B:
					.if (cards7.suit == 4)
 000008A8  80 3D 0000000D R
	   04		   *	    cmp    cards7 . Suit, 004h
 000008AF  75 06	   *	    jne    @C011D
 000008B1  FF 05 0000003C R			inc IsDimondS
					.endif
 000008B7		   *@C011D:

					.if(IsSpadeS>4)
 000008B7  83 3D 00000030 R
	   04		   *	    cmp    isSpadeS, 004h
 000008BE  76 0A	   *	    jbe    @C011F
 000008C0  C7 05 00000040 R			mov isFlushS, 1
	   00000001
					.endif
 000008CA		   *@C011F:
					.if(IsHeartS>4)
 000008CA  83 3D 00000034 R
	   04		   *	    cmp    isHeartS, 004h
 000008D1  76 0A	   *	    jbe    @C0121
 000008D3  C7 05 00000040 R			mov isFlushS, 1
	   00000001
					.endif
 000008DD		   *@C0121:
					.if(IsClubS>4)
 000008DD  83 3D 00000038 R
	   04		   *	    cmp    isClubS, 004h
 000008E4  76 0A	   *	    jbe    @C0123
 000008E6  C7 05 00000040 R			mov isFlushS, 1
	   00000001
					.endif
 000008F0		   *@C0123:
					.if(IsDimondS>4)
 000008F0  83 3D 0000003C R
	   04		   *	    cmp    isDimondS, 004h
 000008F7  76 0A	   *	    jbe    @C0125
 000008F9  C7 05 00000040 R			mov isFlushS, 1
	   00000001
					.endif
 00000903		   *@C0125:

				;Player Check
					.if (cardp1.suit == 1)
 00000903  80 3D 0000000F R
	   01		   *	    cmp    cardp1 . Suit, 001h
 0000090A  75 06	   *	    jne    @C0127
 0000090C  FF 05 0000001C R			inc IsSpadeP
					.endif
 00000912		   *@C0127:
					.if (cardp2.suit == 1)
 00000912  80 3D 00000011 R
	   01		   *	    cmp    cardp2 . Suit, 001h
 00000919  75 06	   *	    jne    @C0129
 0000091B  FF 05 0000001C R			inc IsSpadeP
					.endif
 00000921		   *@C0129:
					.if (cardp3.suit == 1)
 00000921  80 3D 00000013 R
	   01		   *	    cmp    cardp3 . Suit, 001h
 00000928  75 06	   *	    jne    @C012B
 0000092A  FF 05 0000001C R			inc IsSpadeP
					.endif
 00000930		   *@C012B:
					.if (cardp4.suit == 1)
 00000930  80 3D 00000015 R
	   01		   *	    cmp    cardp4 . Suit, 001h
 00000937  75 06	   *	    jne    @C012D
 00000939  FF 05 0000001C R			inc IsSpadeP
					.endif
 0000093F		   *@C012D:
					.if (cardp5.suit == 1)
 0000093F  80 3D 00000017 R
	   01		   *	    cmp    cardp5 . Suit, 001h
 00000946  75 06	   *	    jne    @C012F
 00000948  FF 05 0000001C R			inc IsSpadeP
					.endif
 0000094E		   *@C012F:
					.if (cardp6.suit == 1)
 0000094E  80 3D 00000019 R
	   01		   *	    cmp    cardp6 . Suit, 001h
 00000955  75 06	   *	    jne    @C0131
 00000957  FF 05 0000001C R			inc IsSpadeP
					.endif
 0000095D		   *@C0131:
					.if (cardp7.suit == 1)
 0000095D  80 3D 0000001B R
	   01		   *	    cmp    cardp7 . Suit, 001h
 00000964  75 06	   *	    jne    @C0133
 00000966  FF 05 0000001C R			inc IsSpadeP
					.endif
 0000096C		   *@C0133:

					.if (cardp1.suit == 2)
 0000096C  80 3D 0000000F R
	   02		   *	    cmp    cardp1 . Suit, 002h
 00000973  75 06	   *	    jne    @C0135
 00000975  FF 05 00000020 R			inc IsHeartP
					.endif
 0000097B		   *@C0135:
					.if (cardp2.suit == 2)
 0000097B  80 3D 00000011 R
	   02		   *	    cmp    cardp2 . Suit, 002h
 00000982  75 06	   *	    jne    @C0137
 00000984  FF 05 00000020 R			inc IsHeartP
					.endif
 0000098A		   *@C0137:
					.if (cardp3.suit == 2)
 0000098A  80 3D 00000013 R
	   02		   *	    cmp    cardp3 . Suit, 002h
 00000991  75 06	   *	    jne    @C0139
 00000993  FF 05 00000020 R			inc IsHeartP
					.endif
 00000999		   *@C0139:
					.if (cardp4.suit == 2)
 00000999  80 3D 00000015 R
	   02		   *	    cmp    cardp4 . Suit, 002h
 000009A0  75 06	   *	    jne    @C013B
 000009A2  FF 05 00000020 R			inc IsHeartP
					.endif
 000009A8		   *@C013B:
					.if (cardp5.suit == 2)
 000009A8  80 3D 00000017 R
	   02		   *	    cmp    cardp5 . Suit, 002h
 000009AF  75 06	   *	    jne    @C013D
 000009B1  FF 05 00000020 R			inc IsHeartP
					.endif
 000009B7		   *@C013D:
					.if (cardp6.suit == 2)
 000009B7  80 3D 00000019 R
	   02		   *	    cmp    cardp6 . Suit, 002h
 000009BE  75 06	   *	    jne    @C013F
 000009C0  FF 05 00000020 R			inc IsHeartP
					.endif
 000009C6		   *@C013F:
					.if (cardp7.suit == 2)
 000009C6  80 3D 0000001B R
	   02		   *	    cmp    cardp7 . Suit, 002h
 000009CD  75 06	   *	    jne    @C0141
 000009CF  FF 05 00000020 R			inc IsHeartP
					.endif
 000009D5		   *@C0141:

					.if (cardp1.suit == 3)
 000009D5  80 3D 0000000F R
	   03		   *	    cmp    cardp1 . Suit, 003h
 000009DC  75 06	   *	    jne    @C0143
 000009DE  FF 05 00000024 R			inc IsClubP
					.endif
 000009E4		   *@C0143:
					.if (cardp2.suit == 3)
 000009E4  80 3D 00000011 R
	   03		   *	    cmp    cardp2 . Suit, 003h
 000009EB  75 06	   *	    jne    @C0145
 000009ED  FF 05 00000024 R			inc IsClubP
					.endif
 000009F3		   *@C0145:
					.if (cardp3.suit == 3)
 000009F3  80 3D 00000013 R
	   03		   *	    cmp    cardp3 . Suit, 003h
 000009FA  75 06	   *	    jne    @C0147
 000009FC  FF 05 00000024 R			inc IsClubP
					.endif
 00000A02		   *@C0147:
					.if (cardp4.suit == 3)
 00000A02  80 3D 00000015 R
	   03		   *	    cmp    cardp4 . Suit, 003h
 00000A09  75 06	   *	    jne    @C0149
 00000A0B  FF 05 00000024 R			inc IsClubP
					.endif
 00000A11		   *@C0149:
					.if (cardp5.suit == 3)
 00000A11  80 3D 00000017 R
	   03		   *	    cmp    cardp5 . Suit, 003h
 00000A18  75 06	   *	    jne    @C014B
 00000A1A  FF 05 00000024 R			inc IsClubP
					.endif
 00000A20		   *@C014B:
					.if (cardp6.suit == 3)
 00000A20  80 3D 00000019 R
	   03		   *	    cmp    cardp6 . Suit, 003h
 00000A27  75 06	   *	    jne    @C014D
 00000A29  FF 05 00000024 R			inc IsClubP
					.endif
 00000A2F		   *@C014D:
					.if (cardp7.suit == 3)
 00000A2F  80 3D 0000001B R
	   03		   *	    cmp    cardp7 . Suit, 003h
 00000A36  75 06	   *	    jne    @C014F
 00000A38  FF 05 00000024 R			inc IsClubP
					.endif
 00000A3E		   *@C014F:

					.if (cardp1.suit == 4)
 00000A3E  80 3D 0000000F R
	   04		   *	    cmp    cardp1 . Suit, 004h
 00000A45  75 06	   *	    jne    @C0151
 00000A47  FF 05 00000028 R			inc IsDimondP
					.endif
 00000A4D		   *@C0151:
					.if (cardp2.suit == 4)
 00000A4D  80 3D 00000011 R
	   04		   *	    cmp    cardp2 . Suit, 004h
 00000A54  75 06	   *	    jne    @C0153
 00000A56  FF 05 00000028 R			inc IsDimondP
					.endif
 00000A5C		   *@C0153:
					.if (cardp3.suit == 4)
 00000A5C  80 3D 00000013 R
	   04		   *	    cmp    cardp3 . Suit, 004h
 00000A63  75 06	   *	    jne    @C0155
 00000A65  FF 05 00000028 R			inc IsDimondP
					.endif
 00000A6B		   *@C0155:
					.if (cardp4.suit == 4)
 00000A6B  80 3D 00000015 R
	   04		   *	    cmp    cardp4 . Suit, 004h
 00000A72  75 06	   *	    jne    @C0157
 00000A74  FF 05 00000028 R			inc IsDimondP
					.endif
 00000A7A		   *@C0157:
					.if (cardp5.suit == 4)
 00000A7A  80 3D 00000017 R
	   04		   *	    cmp    cardp5 . Suit, 004h
 00000A81  75 06	   *	    jne    @C0159
 00000A83  FF 05 00000028 R			inc IsDimondP
					.endif
 00000A89		   *@C0159:
					.if (cardp6.suit == 4)
 00000A89  80 3D 00000019 R
	   04		   *	    cmp    cardp6 . Suit, 004h
 00000A90  75 06	   *	    jne    @C015B
 00000A92  FF 05 00000028 R			inc IsDimondP
					.endif
 00000A98		   *@C015B:
					.if (cardp7.suit == 4)
 00000A98  80 3D 0000001B R
	   04		   *	    cmp    cardp7 . Suit, 004h
 00000A9F  75 06	   *	    jne    @C015D
 00000AA1  FF 05 00000028 R			inc IsDimondP
					.endif
 00000AA7		   *@C015D:

					.if(IsSpadeP>4)
 00000AA7  83 3D 0000001C R
	   04		   *	    cmp    isSpadeP, 004h
 00000AAE  76 0A	   *	    jbe    @C015F
 00000AB0  C7 05 0000002C R			mov isFlushP, 1
	   00000001
					.endif
 00000ABA		   *@C015F:
					.if(IsHeartP>4)
 00000ABA  83 3D 00000020 R
	   04		   *	    cmp    isHeartP, 004h
 00000AC1  76 0A	   *	    jbe    @C0161
 00000AC3  C7 05 0000002C R			mov isFlushP, 1
	   00000001
					.endif
 00000ACD		   *@C0161:
					.if(IsClubP>4)
 00000ACD  83 3D 00000024 R
	   04		   *	    cmp    isClubP, 004h
 00000AD4  76 0A	   *	    jbe    @C0163
 00000AD6  C7 05 0000002C R			mov isFlushP, 1
	   00000001
					.endif
 00000AE0		   *@C0163:
					.if(IsDimondP>4)
 00000AE0  83 3D 00000028 R
	   04		   *	    cmp    isDimondP, 004h
 00000AE7  76 0A	   *	    jbe    @C0165
 00000AE9  C7 05 0000002C R			mov isFlushP, 1
	   00000001
					.endif
 00000AF3		   *@C0165:
 00000AF3  C3			ret
 00000AF4			IsAFlush ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000AF4			IsAStraight Proc

				;Spock Straight

 00000AF4  A0 00000000 R	mov al, cards1.value
				.if (al == 1||al==14||al==27||al==40)
 00000AF9  3C 01	   *	    cmp    al, 001h
 00000AFB  74 0C	   *	    je	@C0168
 00000AFD  3C 0E	   *	    cmp    al, 00Eh
 00000AFF  74 08	   *	    je	@C0168
 00000B01  3C 1B	   *	    cmp    al, 01Bh
 00000B03  74 04	   *	    je	@C0168
 00000B05  3C 28	   *	    cmp    al, 028h
 00000B07  75 07	   *	    jne    @C0167
 00000B09		   *@C0168:
 00000B09  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00000B0B  E9 000000FD	   *	    jmp    @C016C
 00000B10		   *@C0167:
 00000B10  3C 02	   *	    cmp    al, 002h
 00000B12  74 0C	   *	    je	@C016E
 00000B14  3C 0F	   *	    cmp    al, 00Fh
 00000B16  74 08	   *	    je	@C016E
 00000B18  3C 1C	   *	    cmp    al, 01Ch
 00000B1A  74 04	   *	    je	@C016E
 00000B1C  3C 29	   *	    cmp    al, 029h
 00000B1E  75 07	   *	    jne    @C016D
 00000B20		   *@C016E:
 00000B20  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00000B22  E9 000000E6	   *	    jmp    @C0172
 00000B27		   *@C016D:
 00000B27  3C 03	   *	    cmp    al, 003h
 00000B29  74 0C	   *	    je	@C0174
 00000B2B  3C 10	   *	    cmp    al, 010h
 00000B2D  74 08	   *	    je	@C0174
 00000B2F  3C 1D	   *	    cmp    al, 01Dh
 00000B31  74 04	   *	    je	@C0174
 00000B33  3C 2A	   *	    cmp    al, 02Ah
 00000B35  75 07	   *	    jne    @C0173
 00000B37		   *@C0174:
 00000B37  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00000B39  E9 000000CF	   *	    jmp    @C0178
 00000B3E		   *@C0173:
 00000B3E  3C 04	   *	    cmp    al, 004h
 00000B40  74 0C	   *	    je	@C017A
 00000B42  3C 11	   *	    cmp    al, 011h
 00000B44  74 08	   *	    je	@C017A
 00000B46  3C 1E	   *	    cmp    al, 01Eh
 00000B48  74 04	   *	    je	@C017A
 00000B4A  3C 2B	   *	    cmp    al, 02Bh
 00000B4C  75 07	   *	    jne    @C0179
 00000B4E		   *@C017A:
 00000B4E  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00000B50  E9 000000B8	   *	    jmp    @C017E
 00000B55		   *@C0179:
 00000B55  3C 05	   *	    cmp    al, 005h
 00000B57  74 0C	   *	    je	@C0180
 00000B59  3C 12	   *	    cmp    al, 012h
 00000B5B  74 08	   *	    je	@C0180
 00000B5D  3C 1F	   *	    cmp    al, 01Fh
 00000B5F  74 04	   *	    je	@C0180
 00000B61  3C 2C	   *	    cmp    al, 02Ch
 00000B63  75 07	   *	    jne    @C017F
 00000B65		   *@C0180:
 00000B65  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00000B67  E9 000000A1	   *	    jmp    @C0184
 00000B6C		   *@C017F:
 00000B6C  3C 06	   *	    cmp    al, 006h
 00000B6E  74 0C	   *	    je	@C0186
 00000B70  3C 13	   *	    cmp    al, 013h
 00000B72  74 08	   *	    je	@C0186
 00000B74  3C 20	   *	    cmp    al, 020h
 00000B76  74 04	   *	    je	@C0186
 00000B78  3C 2D	   *	    cmp    al, 02Dh
 00000B7A  75 07	   *	    jne    @C0185
 00000B7C		   *@C0186:
 00000B7C  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00000B7E  E9 0000008A	   *	    jmp    @C018A
 00000B83		   *@C0185:
 00000B83  3C 07	   *	    cmp    al, 007h
 00000B85  74 0C	   *	    je	@C018C
 00000B87  3C 14	   *	    cmp    al, 014h
 00000B89  74 08	   *	    je	@C018C
 00000B8B  3C 21	   *	    cmp    al, 021h
 00000B8D  74 04	   *	    je	@C018C
 00000B8F  3C 2E	   *	    cmp    al, 02Eh
 00000B91  75 04	   *	    jne    @C018B
 00000B93		   *@C018C:
 00000B93  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00000B95  EB 76	   *	    jmp    @C0190
 00000B97		   *@C018B:
 00000B97  3C 08	   *	    cmp    al, 008h
 00000B99  74 0C	   *	    je	@C0192
 00000B9B  3C 15	   *	    cmp    al, 015h
 00000B9D  74 08	   *	    je	@C0192
 00000B9F  3C 22	   *	    cmp    al, 022h
 00000BA1  74 04	   *	    je	@C0192
 00000BA3  3C 2F	   *	    cmp    al, 02Fh
 00000BA5  75 04	   *	    jne    @C0191
 00000BA7		   *@C0192:
 00000BA7  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00000BA9  EB 62	   *	    jmp    @C0196
 00000BAB		   *@C0191:
 00000BAB  3C 09	   *	    cmp    al, 009h
 00000BAD  74 0C	   *	    je	@C0198
 00000BAF  3C 16	   *	    cmp    al, 016h
 00000BB1  74 08	   *	    je	@C0198
 00000BB3  3C 23	   *	    cmp    al, 023h
 00000BB5  74 04	   *	    je	@C0198
 00000BB7  3C 30	   *	    cmp    al, 030h
 00000BB9  75 04	   *	    jne    @C0197
 00000BBB		   *@C0198:
 00000BBB  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00000BBD  EB 4E	   *	    jmp    @C019C
 00000BBF		   *@C0197:
 00000BBF  3C 0A	   *	    cmp    al, 00Ah
 00000BC1  74 0C	   *	    je	@C019E
 00000BC3  3C 17	   *	    cmp    al, 017h
 00000BC5  74 08	   *	    je	@C019E
 00000BC7  3C 24	   *	    cmp    al, 024h
 00000BC9  74 04	   *	    je	@C019E
 00000BCB  3C 31	   *	    cmp    al, 031h
 00000BCD  75 04	   *	    jne    @C019D
 00000BCF		   *@C019E:
 00000BCF  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00000BD1  EB 3A	   *	    jmp    @C01A2
 00000BD3		   *@C019D:
 00000BD3  3C 0B	   *	    cmp    al, 00Bh
 00000BD5  74 0C	   *	    je	@C01A4
 00000BD7  3C 18	   *	    cmp    al, 018h
 00000BD9  74 08	   *	    je	@C01A4
 00000BDB  3C 25	   *	    cmp    al, 025h
 00000BDD  74 04	   *	    je	@C01A4
 00000BDF  3C 32	   *	    cmp    al, 032h
 00000BE1  75 04	   *	    jne    @C01A3
 00000BE3		   *@C01A4:
 00000BE3  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00000BE5  EB 26	   *	    jmp    @C01A8
 00000BE7		   *@C01A3:
 00000BE7  3C 0C	   *	    cmp    al, 00Ch
 00000BE9  74 0C	   *	    je	@C01AA
 00000BEB  3C 19	   *	    cmp    al, 019h
 00000BED  74 08	   *	    je	@C01AA
 00000BEF  3C 26	   *	    cmp    al, 026h
 00000BF1  74 04	   *	    je	@C01AA
 00000BF3  3C 33	   *	    cmp    al, 033h
 00000BF5  75 04	   *	    jne    @C01A9
 00000BF7		   *@C01AA:
 00000BF7  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00000BF9  EB 12	   *	    jmp    @C01AE
 00000BFB		   *@C01A9:
 00000BFB  3C 0D	   *	    cmp    al, 00Dh
 00000BFD  74 0C	   *	    je	@C01B0
 00000BFF  3C 1A	   *	    cmp    al, 01Ah
 00000C01  74 08	   *	    je	@C01B0
 00000C03  3C 27	   *	    cmp    al, 027h
 00000C05  74 04	   *	    je	@C01B0
 00000C07  3C 34	   *	    cmp    al, 034h
 00000C09  75 02	   *	    jne    @C01AF
 00000C0B		   *@C01B0:
 00000C0B  B0 0D			mov al,13
				.endif
 00000C0D		   *@C01AF:
 00000C0D		   *@C01AE:
 00000C0D		   *@C01A8:
 00000C0D		   *@C01A2:
 00000C0D		   *@C019C:
 00000C0D		   *@C0196:
 00000C0D		   *@C0190:
 00000C0D		   *@C018A:
 00000C0D		   *@C0184:
 00000C0D		   *@C017E:
 00000C0D		   *@C0178:
 00000C0D		   *@C0172:
 00000C0D		   *@C016C:
 00000C0D  A2 0000004C R	mov straights[0], al

 00000C12  A0 00000002 R	mov al, cards2.value
				.if (al == 1||al==14||al==27||al==40)
 00000C17  3C 01	   *	    cmp    al, 001h
 00000C19  74 0C	   *	    je	@C01B5
 00000C1B  3C 0E	   *	    cmp    al, 00Eh
 00000C1D  74 08	   *	    je	@C01B5
 00000C1F  3C 1B	   *	    cmp    al, 01Bh
 00000C21  74 04	   *	    je	@C01B5
 00000C23  3C 28	   *	    cmp    al, 028h
 00000C25  75 07	   *	    jne    @C01B4
 00000C27		   *@C01B5:
 00000C27  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00000C29  E9 000000FD	   *	    jmp    @C01B9
 00000C2E		   *@C01B4:
 00000C2E  3C 02	   *	    cmp    al, 002h
 00000C30  74 0C	   *	    je	@C01BB
 00000C32  3C 0F	   *	    cmp    al, 00Fh
 00000C34  74 08	   *	    je	@C01BB
 00000C36  3C 1C	   *	    cmp    al, 01Ch
 00000C38  74 04	   *	    je	@C01BB
 00000C3A  3C 29	   *	    cmp    al, 029h
 00000C3C  75 07	   *	    jne    @C01BA
 00000C3E		   *@C01BB:
 00000C3E  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00000C40  E9 000000E6	   *	    jmp    @C01BF
 00000C45		   *@C01BA:
 00000C45  3C 03	   *	    cmp    al, 003h
 00000C47  74 0C	   *	    je	@C01C1
 00000C49  3C 10	   *	    cmp    al, 010h
 00000C4B  74 08	   *	    je	@C01C1
 00000C4D  3C 1D	   *	    cmp    al, 01Dh
 00000C4F  74 04	   *	    je	@C01C1
 00000C51  3C 2A	   *	    cmp    al, 02Ah
 00000C53  75 07	   *	    jne    @C01C0
 00000C55		   *@C01C1:
 00000C55  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00000C57  E9 000000CF	   *	    jmp    @C01C5
 00000C5C		   *@C01C0:
 00000C5C  3C 04	   *	    cmp    al, 004h
 00000C5E  74 0C	   *	    je	@C01C7
 00000C60  3C 11	   *	    cmp    al, 011h
 00000C62  74 08	   *	    je	@C01C7
 00000C64  3C 1E	   *	    cmp    al, 01Eh
 00000C66  74 04	   *	    je	@C01C7
 00000C68  3C 2B	   *	    cmp    al, 02Bh
 00000C6A  75 07	   *	    jne    @C01C6
 00000C6C		   *@C01C7:
 00000C6C  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00000C6E  E9 000000B8	   *	    jmp    @C01CB
 00000C73		   *@C01C6:
 00000C73  3C 05	   *	    cmp    al, 005h
 00000C75  74 0C	   *	    je	@C01CD
 00000C77  3C 12	   *	    cmp    al, 012h
 00000C79  74 08	   *	    je	@C01CD
 00000C7B  3C 1F	   *	    cmp    al, 01Fh
 00000C7D  74 04	   *	    je	@C01CD
 00000C7F  3C 2C	   *	    cmp    al, 02Ch
 00000C81  75 07	   *	    jne    @C01CC
 00000C83		   *@C01CD:
 00000C83  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00000C85  E9 000000A1	   *	    jmp    @C01D1
 00000C8A		   *@C01CC:
 00000C8A  3C 06	   *	    cmp    al, 006h
 00000C8C  74 0C	   *	    je	@C01D3
 00000C8E  3C 13	   *	    cmp    al, 013h
 00000C90  74 08	   *	    je	@C01D3
 00000C92  3C 20	   *	    cmp    al, 020h
 00000C94  74 04	   *	    je	@C01D3
 00000C96  3C 2D	   *	    cmp    al, 02Dh
 00000C98  75 07	   *	    jne    @C01D2
 00000C9A		   *@C01D3:
 00000C9A  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00000C9C  E9 0000008A	   *	    jmp    @C01D7
 00000CA1		   *@C01D2:
 00000CA1  3C 07	   *	    cmp    al, 007h
 00000CA3  74 0C	   *	    je	@C01D9
 00000CA5  3C 14	   *	    cmp    al, 014h
 00000CA7  74 08	   *	    je	@C01D9
 00000CA9  3C 21	   *	    cmp    al, 021h
 00000CAB  74 04	   *	    je	@C01D9
 00000CAD  3C 2E	   *	    cmp    al, 02Eh
 00000CAF  75 04	   *	    jne    @C01D8
 00000CB1		   *@C01D9:
 00000CB1  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00000CB3  EB 76	   *	    jmp    @C01DD
 00000CB5		   *@C01D8:
 00000CB5  3C 08	   *	    cmp    al, 008h
 00000CB7  74 0C	   *	    je	@C01DF
 00000CB9  3C 15	   *	    cmp    al, 015h
 00000CBB  74 08	   *	    je	@C01DF
 00000CBD  3C 22	   *	    cmp    al, 022h
 00000CBF  74 04	   *	    je	@C01DF
 00000CC1  3C 2F	   *	    cmp    al, 02Fh
 00000CC3  75 04	   *	    jne    @C01DE
 00000CC5		   *@C01DF:
 00000CC5  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00000CC7  EB 62	   *	    jmp    @C01E3
 00000CC9		   *@C01DE:
 00000CC9  3C 09	   *	    cmp    al, 009h
 00000CCB  74 0C	   *	    je	@C01E5
 00000CCD  3C 16	   *	    cmp    al, 016h
 00000CCF  74 08	   *	    je	@C01E5
 00000CD1  3C 23	   *	    cmp    al, 023h
 00000CD3  74 04	   *	    je	@C01E5
 00000CD5  3C 30	   *	    cmp    al, 030h
 00000CD7  75 04	   *	    jne    @C01E4
 00000CD9		   *@C01E5:
 00000CD9  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00000CDB  EB 4E	   *	    jmp    @C01E9
 00000CDD		   *@C01E4:
 00000CDD  3C 0A	   *	    cmp    al, 00Ah
 00000CDF  74 0C	   *	    je	@C01EB
 00000CE1  3C 17	   *	    cmp    al, 017h
 00000CE3  74 08	   *	    je	@C01EB
 00000CE5  3C 24	   *	    cmp    al, 024h
 00000CE7  74 04	   *	    je	@C01EB
 00000CE9  3C 31	   *	    cmp    al, 031h
 00000CEB  75 04	   *	    jne    @C01EA
 00000CED		   *@C01EB:
 00000CED  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00000CEF  EB 3A	   *	    jmp    @C01EF
 00000CF1		   *@C01EA:
 00000CF1  3C 0B	   *	    cmp    al, 00Bh
 00000CF3  74 0C	   *	    je	@C01F1
 00000CF5  3C 18	   *	    cmp    al, 018h
 00000CF7  74 08	   *	    je	@C01F1
 00000CF9  3C 25	   *	    cmp    al, 025h
 00000CFB  74 04	   *	    je	@C01F1
 00000CFD  3C 32	   *	    cmp    al, 032h
 00000CFF  75 04	   *	    jne    @C01F0
 00000D01		   *@C01F1:
 00000D01  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00000D03  EB 26	   *	    jmp    @C01F5
 00000D05		   *@C01F0:
 00000D05  3C 0C	   *	    cmp    al, 00Ch
 00000D07  74 0C	   *	    je	@C01F7
 00000D09  3C 19	   *	    cmp    al, 019h
 00000D0B  74 08	   *	    je	@C01F7
 00000D0D  3C 26	   *	    cmp    al, 026h
 00000D0F  74 04	   *	    je	@C01F7
 00000D11  3C 33	   *	    cmp    al, 033h
 00000D13  75 04	   *	    jne    @C01F6
 00000D15		   *@C01F7:
 00000D15  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00000D17  EB 12	   *	    jmp    @C01FB
 00000D19		   *@C01F6:
 00000D19  3C 0D	   *	    cmp    al, 00Dh
 00000D1B  74 0C	   *	    je	@C01FD
 00000D1D  3C 1A	   *	    cmp    al, 01Ah
 00000D1F  74 08	   *	    je	@C01FD
 00000D21  3C 27	   *	    cmp    al, 027h
 00000D23  74 04	   *	    je	@C01FD
 00000D25  3C 34	   *	    cmp    al, 034h
 00000D27  75 02	   *	    jne    @C01FC
 00000D29		   *@C01FD:
 00000D29  B0 0D			mov al,13
				.endif
 00000D2B		   *@C01FC:
 00000D2B		   *@C01FB:
 00000D2B		   *@C01F5:
 00000D2B		   *@C01EF:
 00000D2B		   *@C01E9:
 00000D2B		   *@C01E3:
 00000D2B		   *@C01DD:
 00000D2B		   *@C01D7:
 00000D2B		   *@C01D1:
 00000D2B		   *@C01CB:
 00000D2B		   *@C01C5:
 00000D2B		   *@C01BF:
 00000D2B		   *@C01B9:
 00000D2B  A2 0000004D R	mov straights[1], al

 00000D30  A0 00000004 R	mov al, cards3.value
				.if (al == 1||al==14||al==27||al==40)
 00000D35  3C 01	   *	    cmp    al, 001h
 00000D37  74 0C	   *	    je	@C0202
 00000D39  3C 0E	   *	    cmp    al, 00Eh
 00000D3B  74 08	   *	    je	@C0202
 00000D3D  3C 1B	   *	    cmp    al, 01Bh
 00000D3F  74 04	   *	    je	@C0202
 00000D41  3C 28	   *	    cmp    al, 028h
 00000D43  75 07	   *	    jne    @C0201
 00000D45		   *@C0202:
 00000D45  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00000D47  E9 000000FD	   *	    jmp    @C0206
 00000D4C		   *@C0201:
 00000D4C  3C 02	   *	    cmp    al, 002h
 00000D4E  74 0C	   *	    je	@C0208
 00000D50  3C 0F	   *	    cmp    al, 00Fh
 00000D52  74 08	   *	    je	@C0208
 00000D54  3C 1C	   *	    cmp    al, 01Ch
 00000D56  74 04	   *	    je	@C0208
 00000D58  3C 29	   *	    cmp    al, 029h
 00000D5A  75 07	   *	    jne    @C0207
 00000D5C		   *@C0208:
 00000D5C  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00000D5E  E9 000000E6	   *	    jmp    @C020C
 00000D63		   *@C0207:
 00000D63  3C 03	   *	    cmp    al, 003h
 00000D65  74 0C	   *	    je	@C020E
 00000D67  3C 10	   *	    cmp    al, 010h
 00000D69  74 08	   *	    je	@C020E
 00000D6B  3C 1D	   *	    cmp    al, 01Dh
 00000D6D  74 04	   *	    je	@C020E
 00000D6F  3C 2A	   *	    cmp    al, 02Ah
 00000D71  75 07	   *	    jne    @C020D
 00000D73		   *@C020E:
 00000D73  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00000D75  E9 000000CF	   *	    jmp    @C0212
 00000D7A		   *@C020D:
 00000D7A  3C 04	   *	    cmp    al, 004h
 00000D7C  74 0C	   *	    je	@C0214
 00000D7E  3C 11	   *	    cmp    al, 011h
 00000D80  74 08	   *	    je	@C0214
 00000D82  3C 1E	   *	    cmp    al, 01Eh
 00000D84  74 04	   *	    je	@C0214
 00000D86  3C 2B	   *	    cmp    al, 02Bh
 00000D88  75 07	   *	    jne    @C0213
 00000D8A		   *@C0214:
 00000D8A  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00000D8C  E9 000000B8	   *	    jmp    @C0218
 00000D91		   *@C0213:
 00000D91  3C 05	   *	    cmp    al, 005h
 00000D93  74 0C	   *	    je	@C021A
 00000D95  3C 12	   *	    cmp    al, 012h
 00000D97  74 08	   *	    je	@C021A
 00000D99  3C 1F	   *	    cmp    al, 01Fh
 00000D9B  74 04	   *	    je	@C021A
 00000D9D  3C 2C	   *	    cmp    al, 02Ch
 00000D9F  75 07	   *	    jne    @C0219
 00000DA1		   *@C021A:
 00000DA1  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00000DA3  E9 000000A1	   *	    jmp    @C021E
 00000DA8		   *@C0219:
 00000DA8  3C 06	   *	    cmp    al, 006h
 00000DAA  74 0C	   *	    je	@C0220
 00000DAC  3C 13	   *	    cmp    al, 013h
 00000DAE  74 08	   *	    je	@C0220
 00000DB0  3C 20	   *	    cmp    al, 020h
 00000DB2  74 04	   *	    je	@C0220
 00000DB4  3C 2D	   *	    cmp    al, 02Dh
 00000DB6  75 07	   *	    jne    @C021F
 00000DB8		   *@C0220:
 00000DB8  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00000DBA  E9 0000008A	   *	    jmp    @C0224
 00000DBF		   *@C021F:
 00000DBF  3C 07	   *	    cmp    al, 007h
 00000DC1  74 0C	   *	    je	@C0226
 00000DC3  3C 14	   *	    cmp    al, 014h
 00000DC5  74 08	   *	    je	@C0226
 00000DC7  3C 21	   *	    cmp    al, 021h
 00000DC9  74 04	   *	    je	@C0226
 00000DCB  3C 2E	   *	    cmp    al, 02Eh
 00000DCD  75 04	   *	    jne    @C0225
 00000DCF		   *@C0226:
 00000DCF  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00000DD1  EB 76	   *	    jmp    @C022A
 00000DD3		   *@C0225:
 00000DD3  3C 08	   *	    cmp    al, 008h
 00000DD5  74 0C	   *	    je	@C022C
 00000DD7  3C 15	   *	    cmp    al, 015h
 00000DD9  74 08	   *	    je	@C022C
 00000DDB  3C 22	   *	    cmp    al, 022h
 00000DDD  74 04	   *	    je	@C022C
 00000DDF  3C 2F	   *	    cmp    al, 02Fh
 00000DE1  75 04	   *	    jne    @C022B
 00000DE3		   *@C022C:
 00000DE3  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00000DE5  EB 62	   *	    jmp    @C0230
 00000DE7		   *@C022B:
 00000DE7  3C 09	   *	    cmp    al, 009h
 00000DE9  74 0C	   *	    je	@C0232
 00000DEB  3C 16	   *	    cmp    al, 016h
 00000DED  74 08	   *	    je	@C0232
 00000DEF  3C 23	   *	    cmp    al, 023h
 00000DF1  74 04	   *	    je	@C0232
 00000DF3  3C 30	   *	    cmp    al, 030h
 00000DF5  75 04	   *	    jne    @C0231
 00000DF7		   *@C0232:
 00000DF7  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00000DF9  EB 4E	   *	    jmp    @C0236
 00000DFB		   *@C0231:
 00000DFB  3C 0A	   *	    cmp    al, 00Ah
 00000DFD  74 0C	   *	    je	@C0238
 00000DFF  3C 17	   *	    cmp    al, 017h
 00000E01  74 08	   *	    je	@C0238
 00000E03  3C 24	   *	    cmp    al, 024h
 00000E05  74 04	   *	    je	@C0238
 00000E07  3C 31	   *	    cmp    al, 031h
 00000E09  75 04	   *	    jne    @C0237
 00000E0B		   *@C0238:
 00000E0B  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00000E0D  EB 3A	   *	    jmp    @C023C
 00000E0F		   *@C0237:
 00000E0F  3C 0B	   *	    cmp    al, 00Bh
 00000E11  74 0C	   *	    je	@C023E
 00000E13  3C 18	   *	    cmp    al, 018h
 00000E15  74 08	   *	    je	@C023E
 00000E17  3C 25	   *	    cmp    al, 025h
 00000E19  74 04	   *	    je	@C023E
 00000E1B  3C 32	   *	    cmp    al, 032h
 00000E1D  75 04	   *	    jne    @C023D
 00000E1F		   *@C023E:
 00000E1F  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00000E21  EB 26	   *	    jmp    @C0242
 00000E23		   *@C023D:
 00000E23  3C 0C	   *	    cmp    al, 00Ch
 00000E25  74 0C	   *	    je	@C0244
 00000E27  3C 19	   *	    cmp    al, 019h
 00000E29  74 08	   *	    je	@C0244
 00000E2B  3C 26	   *	    cmp    al, 026h
 00000E2D  74 04	   *	    je	@C0244
 00000E2F  3C 33	   *	    cmp    al, 033h
 00000E31  75 04	   *	    jne    @C0243
 00000E33		   *@C0244:
 00000E33  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00000E35  EB 12	   *	    jmp    @C0248
 00000E37		   *@C0243:
 00000E37  3C 0D	   *	    cmp    al, 00Dh
 00000E39  74 0C	   *	    je	@C024A
 00000E3B  3C 1A	   *	    cmp    al, 01Ah
 00000E3D  74 08	   *	    je	@C024A
 00000E3F  3C 27	   *	    cmp    al, 027h
 00000E41  74 04	   *	    je	@C024A
 00000E43  3C 34	   *	    cmp    al, 034h
 00000E45  75 02	   *	    jne    @C0249
 00000E47		   *@C024A:
 00000E47  B0 0D			mov al,13
				.endif
 00000E49		   *@C0249:
 00000E49		   *@C0248:
 00000E49		   *@C0242:
 00000E49		   *@C023C:
 00000E49		   *@C0236:
 00000E49		   *@C0230:
 00000E49		   *@C022A:
 00000E49		   *@C0224:
 00000E49		   *@C021E:
 00000E49		   *@C0218:
 00000E49		   *@C0212:
 00000E49		   *@C020C:
 00000E49		   *@C0206:
 00000E49  A2 0000004E R	mov straights[2], al

 00000E4E  A0 00000006 R	mov al, cards4.value
				.if (al == 1||al==14||al==27||al==40)
 00000E53  3C 01	   *	    cmp    al, 001h
 00000E55  74 0C	   *	    je	@C024F
 00000E57  3C 0E	   *	    cmp    al, 00Eh
 00000E59  74 08	   *	    je	@C024F
 00000E5B  3C 1B	   *	    cmp    al, 01Bh
 00000E5D  74 04	   *	    je	@C024F
 00000E5F  3C 28	   *	    cmp    al, 028h
 00000E61  75 07	   *	    jne    @C024E
 00000E63		   *@C024F:
 00000E63  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00000E65  E9 000000FD	   *	    jmp    @C0253
 00000E6A		   *@C024E:
 00000E6A  3C 02	   *	    cmp    al, 002h
 00000E6C  74 0C	   *	    je	@C0255
 00000E6E  3C 0F	   *	    cmp    al, 00Fh
 00000E70  74 08	   *	    je	@C0255
 00000E72  3C 1C	   *	    cmp    al, 01Ch
 00000E74  74 04	   *	    je	@C0255
 00000E76  3C 29	   *	    cmp    al, 029h
 00000E78  75 07	   *	    jne    @C0254
 00000E7A		   *@C0255:
 00000E7A  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00000E7C  E9 000000E6	   *	    jmp    @C0259
 00000E81		   *@C0254:
 00000E81  3C 03	   *	    cmp    al, 003h
 00000E83  74 0C	   *	    je	@C025B
 00000E85  3C 10	   *	    cmp    al, 010h
 00000E87  74 08	   *	    je	@C025B
 00000E89  3C 1D	   *	    cmp    al, 01Dh
 00000E8B  74 04	   *	    je	@C025B
 00000E8D  3C 2A	   *	    cmp    al, 02Ah
 00000E8F  75 07	   *	    jne    @C025A
 00000E91		   *@C025B:
 00000E91  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00000E93  E9 000000CF	   *	    jmp    @C025F
 00000E98		   *@C025A:
 00000E98  3C 04	   *	    cmp    al, 004h
 00000E9A  74 0C	   *	    je	@C0261
 00000E9C  3C 11	   *	    cmp    al, 011h
 00000E9E  74 08	   *	    je	@C0261
 00000EA0  3C 1E	   *	    cmp    al, 01Eh
 00000EA2  74 04	   *	    je	@C0261
 00000EA4  3C 2B	   *	    cmp    al, 02Bh
 00000EA6  75 07	   *	    jne    @C0260
 00000EA8		   *@C0261:
 00000EA8  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00000EAA  E9 000000B8	   *	    jmp    @C0265
 00000EAF		   *@C0260:
 00000EAF  3C 05	   *	    cmp    al, 005h
 00000EB1  74 0C	   *	    je	@C0267
 00000EB3  3C 12	   *	    cmp    al, 012h
 00000EB5  74 08	   *	    je	@C0267
 00000EB7  3C 1F	   *	    cmp    al, 01Fh
 00000EB9  74 04	   *	    je	@C0267
 00000EBB  3C 2C	   *	    cmp    al, 02Ch
 00000EBD  75 07	   *	    jne    @C0266
 00000EBF		   *@C0267:
 00000EBF  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00000EC1  E9 000000A1	   *	    jmp    @C026B
 00000EC6		   *@C0266:
 00000EC6  3C 06	   *	    cmp    al, 006h
 00000EC8  74 0C	   *	    je	@C026D
 00000ECA  3C 13	   *	    cmp    al, 013h
 00000ECC  74 08	   *	    je	@C026D
 00000ECE  3C 20	   *	    cmp    al, 020h
 00000ED0  74 04	   *	    je	@C026D
 00000ED2  3C 2D	   *	    cmp    al, 02Dh
 00000ED4  75 07	   *	    jne    @C026C
 00000ED6		   *@C026D:
 00000ED6  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00000ED8  E9 0000008A	   *	    jmp    @C0271
 00000EDD		   *@C026C:
 00000EDD  3C 07	   *	    cmp    al, 007h
 00000EDF  74 0C	   *	    je	@C0273
 00000EE1  3C 14	   *	    cmp    al, 014h
 00000EE3  74 08	   *	    je	@C0273
 00000EE5  3C 21	   *	    cmp    al, 021h
 00000EE7  74 04	   *	    je	@C0273
 00000EE9  3C 2E	   *	    cmp    al, 02Eh
 00000EEB  75 04	   *	    jne    @C0272
 00000EED		   *@C0273:
 00000EED  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00000EEF  EB 76	   *	    jmp    @C0277
 00000EF1		   *@C0272:
 00000EF1  3C 08	   *	    cmp    al, 008h
 00000EF3  74 0C	   *	    je	@C0279
 00000EF5  3C 15	   *	    cmp    al, 015h
 00000EF7  74 08	   *	    je	@C0279
 00000EF9  3C 22	   *	    cmp    al, 022h
 00000EFB  74 04	   *	    je	@C0279
 00000EFD  3C 2F	   *	    cmp    al, 02Fh
 00000EFF  75 04	   *	    jne    @C0278
 00000F01		   *@C0279:
 00000F01  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00000F03  EB 62	   *	    jmp    @C027D
 00000F05		   *@C0278:
 00000F05  3C 09	   *	    cmp    al, 009h
 00000F07  74 0C	   *	    je	@C027F
 00000F09  3C 16	   *	    cmp    al, 016h
 00000F0B  74 08	   *	    je	@C027F
 00000F0D  3C 23	   *	    cmp    al, 023h
 00000F0F  74 04	   *	    je	@C027F
 00000F11  3C 30	   *	    cmp    al, 030h
 00000F13  75 04	   *	    jne    @C027E
 00000F15		   *@C027F:
 00000F15  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00000F17  EB 4E	   *	    jmp    @C0283
 00000F19		   *@C027E:
 00000F19  3C 0A	   *	    cmp    al, 00Ah
 00000F1B  74 0C	   *	    je	@C0285
 00000F1D  3C 17	   *	    cmp    al, 017h
 00000F1F  74 08	   *	    je	@C0285
 00000F21  3C 24	   *	    cmp    al, 024h
 00000F23  74 04	   *	    je	@C0285
 00000F25  3C 31	   *	    cmp    al, 031h
 00000F27  75 04	   *	    jne    @C0284
 00000F29		   *@C0285:
 00000F29  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00000F2B  EB 3A	   *	    jmp    @C0289
 00000F2D		   *@C0284:
 00000F2D  3C 0B	   *	    cmp    al, 00Bh
 00000F2F  74 0C	   *	    je	@C028B
 00000F31  3C 18	   *	    cmp    al, 018h
 00000F33  74 08	   *	    je	@C028B
 00000F35  3C 25	   *	    cmp    al, 025h
 00000F37  74 04	   *	    je	@C028B
 00000F39  3C 32	   *	    cmp    al, 032h
 00000F3B  75 04	   *	    jne    @C028A
 00000F3D		   *@C028B:
 00000F3D  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00000F3F  EB 26	   *	    jmp    @C028F
 00000F41		   *@C028A:
 00000F41  3C 0C	   *	    cmp    al, 00Ch
 00000F43  74 0C	   *	    je	@C0291
 00000F45  3C 19	   *	    cmp    al, 019h
 00000F47  74 08	   *	    je	@C0291
 00000F49  3C 26	   *	    cmp    al, 026h
 00000F4B  74 04	   *	    je	@C0291
 00000F4D  3C 33	   *	    cmp    al, 033h
 00000F4F  75 04	   *	    jne    @C0290
 00000F51		   *@C0291:
 00000F51  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00000F53  EB 12	   *	    jmp    @C0295
 00000F55		   *@C0290:
 00000F55  3C 0D	   *	    cmp    al, 00Dh
 00000F57  74 0C	   *	    je	@C0297
 00000F59  3C 1A	   *	    cmp    al, 01Ah
 00000F5B  74 08	   *	    je	@C0297
 00000F5D  3C 27	   *	    cmp    al, 027h
 00000F5F  74 04	   *	    je	@C0297
 00000F61  3C 34	   *	    cmp    al, 034h
 00000F63  75 02	   *	    jne    @C0296
 00000F65		   *@C0297:
 00000F65  B0 0D			mov al,13
				.endif
 00000F67		   *@C0296:
 00000F67		   *@C0295:
 00000F67		   *@C028F:
 00000F67		   *@C0289:
 00000F67		   *@C0283:
 00000F67		   *@C027D:
 00000F67		   *@C0277:
 00000F67		   *@C0271:
 00000F67		   *@C026B:
 00000F67		   *@C0265:
 00000F67		   *@C025F:
 00000F67		   *@C0259:
 00000F67		   *@C0253:
 00000F67  A2 0000004F R	mov straights[3], al

 00000F6C  A0 00000008 R	mov al, cards5.value
				.if (al == 1||al==14||al==27||al==40)
 00000F71  3C 01	   *	    cmp    al, 001h
 00000F73  74 0C	   *	    je	@C029C
 00000F75  3C 0E	   *	    cmp    al, 00Eh
 00000F77  74 08	   *	    je	@C029C
 00000F79  3C 1B	   *	    cmp    al, 01Bh
 00000F7B  74 04	   *	    je	@C029C
 00000F7D  3C 28	   *	    cmp    al, 028h
 00000F7F  75 07	   *	    jne    @C029B
 00000F81		   *@C029C:
 00000F81  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00000F83  E9 000000FD	   *	    jmp    @C02A0
 00000F88		   *@C029B:
 00000F88  3C 02	   *	    cmp    al, 002h
 00000F8A  74 0C	   *	    je	@C02A2
 00000F8C  3C 0F	   *	    cmp    al, 00Fh
 00000F8E  74 08	   *	    je	@C02A2
 00000F90  3C 1C	   *	    cmp    al, 01Ch
 00000F92  74 04	   *	    je	@C02A2
 00000F94  3C 29	   *	    cmp    al, 029h
 00000F96  75 07	   *	    jne    @C02A1
 00000F98		   *@C02A2:
 00000F98  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00000F9A  E9 000000E6	   *	    jmp    @C02A6
 00000F9F		   *@C02A1:
 00000F9F  3C 03	   *	    cmp    al, 003h
 00000FA1  74 0C	   *	    je	@C02A8
 00000FA3  3C 10	   *	    cmp    al, 010h
 00000FA5  74 08	   *	    je	@C02A8
 00000FA7  3C 1D	   *	    cmp    al, 01Dh
 00000FA9  74 04	   *	    je	@C02A8
 00000FAB  3C 2A	   *	    cmp    al, 02Ah
 00000FAD  75 07	   *	    jne    @C02A7
 00000FAF		   *@C02A8:
 00000FAF  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00000FB1  E9 000000CF	   *	    jmp    @C02AC
 00000FB6		   *@C02A7:
 00000FB6  3C 04	   *	    cmp    al, 004h
 00000FB8  74 0C	   *	    je	@C02AE
 00000FBA  3C 11	   *	    cmp    al, 011h
 00000FBC  74 08	   *	    je	@C02AE
 00000FBE  3C 1E	   *	    cmp    al, 01Eh
 00000FC0  74 04	   *	    je	@C02AE
 00000FC2  3C 2B	   *	    cmp    al, 02Bh
 00000FC4  75 07	   *	    jne    @C02AD
 00000FC6		   *@C02AE:
 00000FC6  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00000FC8  E9 000000B8	   *	    jmp    @C02B2
 00000FCD		   *@C02AD:
 00000FCD  3C 05	   *	    cmp    al, 005h
 00000FCF  74 0C	   *	    je	@C02B4
 00000FD1  3C 12	   *	    cmp    al, 012h
 00000FD3  74 08	   *	    je	@C02B4
 00000FD5  3C 1F	   *	    cmp    al, 01Fh
 00000FD7  74 04	   *	    je	@C02B4
 00000FD9  3C 2C	   *	    cmp    al, 02Ch
 00000FDB  75 07	   *	    jne    @C02B3
 00000FDD		   *@C02B4:
 00000FDD  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00000FDF  E9 000000A1	   *	    jmp    @C02B8
 00000FE4		   *@C02B3:
 00000FE4  3C 06	   *	    cmp    al, 006h
 00000FE6  74 0C	   *	    je	@C02BA
 00000FE8  3C 13	   *	    cmp    al, 013h
 00000FEA  74 08	   *	    je	@C02BA
 00000FEC  3C 20	   *	    cmp    al, 020h
 00000FEE  74 04	   *	    je	@C02BA
 00000FF0  3C 2D	   *	    cmp    al, 02Dh
 00000FF2  75 07	   *	    jne    @C02B9
 00000FF4		   *@C02BA:
 00000FF4  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00000FF6  E9 0000008A	   *	    jmp    @C02BE
 00000FFB		   *@C02B9:
 00000FFB  3C 07	   *	    cmp    al, 007h
 00000FFD  74 0C	   *	    je	@C02C0
 00000FFF  3C 14	   *	    cmp    al, 014h
 00001001  74 08	   *	    je	@C02C0
 00001003  3C 21	   *	    cmp    al, 021h
 00001005  74 04	   *	    je	@C02C0
 00001007  3C 2E	   *	    cmp    al, 02Eh
 00001009  75 04	   *	    jne    @C02BF
 0000100B		   *@C02C0:
 0000100B  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000100D  EB 76	   *	    jmp    @C02C4
 0000100F		   *@C02BF:
 0000100F  3C 08	   *	    cmp    al, 008h
 00001011  74 0C	   *	    je	@C02C6
 00001013  3C 15	   *	    cmp    al, 015h
 00001015  74 08	   *	    je	@C02C6
 00001017  3C 22	   *	    cmp    al, 022h
 00001019  74 04	   *	    je	@C02C6
 0000101B  3C 2F	   *	    cmp    al, 02Fh
 0000101D  75 04	   *	    jne    @C02C5
 0000101F		   *@C02C6:
 0000101F  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001021  EB 62	   *	    jmp    @C02CA
 00001023		   *@C02C5:
 00001023  3C 09	   *	    cmp    al, 009h
 00001025  74 0C	   *	    je	@C02CC
 00001027  3C 16	   *	    cmp    al, 016h
 00001029  74 08	   *	    je	@C02CC
 0000102B  3C 23	   *	    cmp    al, 023h
 0000102D  74 04	   *	    je	@C02CC
 0000102F  3C 30	   *	    cmp    al, 030h
 00001031  75 04	   *	    jne    @C02CB
 00001033		   *@C02CC:
 00001033  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001035  EB 4E	   *	    jmp    @C02D0
 00001037		   *@C02CB:
 00001037  3C 0A	   *	    cmp    al, 00Ah
 00001039  74 0C	   *	    je	@C02D2
 0000103B  3C 17	   *	    cmp    al, 017h
 0000103D  74 08	   *	    je	@C02D2
 0000103F  3C 24	   *	    cmp    al, 024h
 00001041  74 04	   *	    je	@C02D2
 00001043  3C 31	   *	    cmp    al, 031h
 00001045  75 04	   *	    jne    @C02D1
 00001047		   *@C02D2:
 00001047  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001049  EB 3A	   *	    jmp    @C02D6
 0000104B		   *@C02D1:
 0000104B  3C 0B	   *	    cmp    al, 00Bh
 0000104D  74 0C	   *	    je	@C02D8
 0000104F  3C 18	   *	    cmp    al, 018h
 00001051  74 08	   *	    je	@C02D8
 00001053  3C 25	   *	    cmp    al, 025h
 00001055  74 04	   *	    je	@C02D8
 00001057  3C 32	   *	    cmp    al, 032h
 00001059  75 04	   *	    jne    @C02D7
 0000105B		   *@C02D8:
 0000105B  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000105D  EB 26	   *	    jmp    @C02DC
 0000105F		   *@C02D7:
 0000105F  3C 0C	   *	    cmp    al, 00Ch
 00001061  74 0C	   *	    je	@C02DE
 00001063  3C 19	   *	    cmp    al, 019h
 00001065  74 08	   *	    je	@C02DE
 00001067  3C 26	   *	    cmp    al, 026h
 00001069  74 04	   *	    je	@C02DE
 0000106B  3C 33	   *	    cmp    al, 033h
 0000106D  75 04	   *	    jne    @C02DD
 0000106F		   *@C02DE:
 0000106F  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001071  EB 12	   *	    jmp    @C02E2
 00001073		   *@C02DD:
 00001073  3C 0D	   *	    cmp    al, 00Dh
 00001075  74 0C	   *	    je	@C02E4
 00001077  3C 1A	   *	    cmp    al, 01Ah
 00001079  74 08	   *	    je	@C02E4
 0000107B  3C 27	   *	    cmp    al, 027h
 0000107D  74 04	   *	    je	@C02E4
 0000107F  3C 34	   *	    cmp    al, 034h
 00001081  75 02	   *	    jne    @C02E3
 00001083		   *@C02E4:
 00001083  B0 0D			mov al,13
				.endif
 00001085		   *@C02E3:
 00001085		   *@C02E2:
 00001085		   *@C02DC:
 00001085		   *@C02D6:
 00001085		   *@C02D0:
 00001085		   *@C02CA:
 00001085		   *@C02C4:
 00001085		   *@C02BE:
 00001085		   *@C02B8:
 00001085		   *@C02B2:
 00001085		   *@C02AC:
 00001085		   *@C02A6:
 00001085		   *@C02A0:
 00001085  A2 00000050 R	mov straights[4], al

 0000108A  A0 0000000A R	mov al, cards6.value
				.if (al == 1||al==14||al==27||al==40)
 0000108F  3C 01	   *	    cmp    al, 001h
 00001091  74 0C	   *	    je	@C02E9
 00001093  3C 0E	   *	    cmp    al, 00Eh
 00001095  74 08	   *	    je	@C02E9
 00001097  3C 1B	   *	    cmp    al, 01Bh
 00001099  74 04	   *	    je	@C02E9
 0000109B  3C 28	   *	    cmp    al, 028h
 0000109D  75 07	   *	    jne    @C02E8
 0000109F		   *@C02E9:
 0000109F  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000010A1  E9 000000FD	   *	    jmp    @C02ED
 000010A6		   *@C02E8:
 000010A6  3C 02	   *	    cmp    al, 002h
 000010A8  74 0C	   *	    je	@C02EF
 000010AA  3C 0F	   *	    cmp    al, 00Fh
 000010AC  74 08	   *	    je	@C02EF
 000010AE  3C 1C	   *	    cmp    al, 01Ch
 000010B0  74 04	   *	    je	@C02EF
 000010B2  3C 29	   *	    cmp    al, 029h
 000010B4  75 07	   *	    jne    @C02EE
 000010B6		   *@C02EF:
 000010B6  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000010B8  E9 000000E6	   *	    jmp    @C02F3
 000010BD		   *@C02EE:
 000010BD  3C 03	   *	    cmp    al, 003h
 000010BF  74 0C	   *	    je	@C02F5
 000010C1  3C 10	   *	    cmp    al, 010h
 000010C3  74 08	   *	    je	@C02F5
 000010C5  3C 1D	   *	    cmp    al, 01Dh
 000010C7  74 04	   *	    je	@C02F5
 000010C9  3C 2A	   *	    cmp    al, 02Ah
 000010CB  75 07	   *	    jne    @C02F4
 000010CD		   *@C02F5:
 000010CD  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000010CF  E9 000000CF	   *	    jmp    @C02F9
 000010D4		   *@C02F4:
 000010D4  3C 04	   *	    cmp    al, 004h
 000010D6  74 0C	   *	    je	@C02FB
 000010D8  3C 11	   *	    cmp    al, 011h
 000010DA  74 08	   *	    je	@C02FB
 000010DC  3C 1E	   *	    cmp    al, 01Eh
 000010DE  74 04	   *	    je	@C02FB
 000010E0  3C 2B	   *	    cmp    al, 02Bh
 000010E2  75 07	   *	    jne    @C02FA
 000010E4		   *@C02FB:
 000010E4  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000010E6  E9 000000B8	   *	    jmp    @C02FF
 000010EB		   *@C02FA:
 000010EB  3C 05	   *	    cmp    al, 005h
 000010ED  74 0C	   *	    je	@C0301
 000010EF  3C 12	   *	    cmp    al, 012h
 000010F1  74 08	   *	    je	@C0301
 000010F3  3C 1F	   *	    cmp    al, 01Fh
 000010F5  74 04	   *	    je	@C0301
 000010F7  3C 2C	   *	    cmp    al, 02Ch
 000010F9  75 07	   *	    jne    @C0300
 000010FB		   *@C0301:
 000010FB  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000010FD  E9 000000A1	   *	    jmp    @C0305
 00001102		   *@C0300:
 00001102  3C 06	   *	    cmp    al, 006h
 00001104  74 0C	   *	    je	@C0307
 00001106  3C 13	   *	    cmp    al, 013h
 00001108  74 08	   *	    je	@C0307
 0000110A  3C 20	   *	    cmp    al, 020h
 0000110C  74 04	   *	    je	@C0307
 0000110E  3C 2D	   *	    cmp    al, 02Dh
 00001110  75 07	   *	    jne    @C0306
 00001112		   *@C0307:
 00001112  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001114  E9 0000008A	   *	    jmp    @C030B
 00001119		   *@C0306:
 00001119  3C 07	   *	    cmp    al, 007h
 0000111B  74 0C	   *	    je	@C030D
 0000111D  3C 14	   *	    cmp    al, 014h
 0000111F  74 08	   *	    je	@C030D
 00001121  3C 21	   *	    cmp    al, 021h
 00001123  74 04	   *	    je	@C030D
 00001125  3C 2E	   *	    cmp    al, 02Eh
 00001127  75 04	   *	    jne    @C030C
 00001129		   *@C030D:
 00001129  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000112B  EB 76	   *	    jmp    @C0311
 0000112D		   *@C030C:
 0000112D  3C 08	   *	    cmp    al, 008h
 0000112F  74 0C	   *	    je	@C0313
 00001131  3C 15	   *	    cmp    al, 015h
 00001133  74 08	   *	    je	@C0313
 00001135  3C 22	   *	    cmp    al, 022h
 00001137  74 04	   *	    je	@C0313
 00001139  3C 2F	   *	    cmp    al, 02Fh
 0000113B  75 04	   *	    jne    @C0312
 0000113D		   *@C0313:
 0000113D  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000113F  EB 62	   *	    jmp    @C0317
 00001141		   *@C0312:
 00001141  3C 09	   *	    cmp    al, 009h
 00001143  74 0C	   *	    je	@C0319
 00001145  3C 16	   *	    cmp    al, 016h
 00001147  74 08	   *	    je	@C0319
 00001149  3C 23	   *	    cmp    al, 023h
 0000114B  74 04	   *	    je	@C0319
 0000114D  3C 30	   *	    cmp    al, 030h
 0000114F  75 04	   *	    jne    @C0318
 00001151		   *@C0319:
 00001151  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001153  EB 4E	   *	    jmp    @C031D
 00001155		   *@C0318:
 00001155  3C 0A	   *	    cmp    al, 00Ah
 00001157  74 0C	   *	    je	@C031F
 00001159  3C 17	   *	    cmp    al, 017h
 0000115B  74 08	   *	    je	@C031F
 0000115D  3C 24	   *	    cmp    al, 024h
 0000115F  74 04	   *	    je	@C031F
 00001161  3C 31	   *	    cmp    al, 031h
 00001163  75 04	   *	    jne    @C031E
 00001165		   *@C031F:
 00001165  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001167  EB 3A	   *	    jmp    @C0323
 00001169		   *@C031E:
 00001169  3C 0B	   *	    cmp    al, 00Bh
 0000116B  74 0C	   *	    je	@C0325
 0000116D  3C 18	   *	    cmp    al, 018h
 0000116F  74 08	   *	    je	@C0325
 00001171  3C 25	   *	    cmp    al, 025h
 00001173  74 04	   *	    je	@C0325
 00001175  3C 32	   *	    cmp    al, 032h
 00001177  75 04	   *	    jne    @C0324
 00001179		   *@C0325:
 00001179  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000117B  EB 26	   *	    jmp    @C0329
 0000117D		   *@C0324:
 0000117D  3C 0C	   *	    cmp    al, 00Ch
 0000117F  74 0C	   *	    je	@C032B
 00001181  3C 19	   *	    cmp    al, 019h
 00001183  74 08	   *	    je	@C032B
 00001185  3C 26	   *	    cmp    al, 026h
 00001187  74 04	   *	    je	@C032B
 00001189  3C 33	   *	    cmp    al, 033h
 0000118B  75 04	   *	    jne    @C032A
 0000118D		   *@C032B:
 0000118D  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000118F  EB 12	   *	    jmp    @C032F
 00001191		   *@C032A:
 00001191  3C 0D	   *	    cmp    al, 00Dh
 00001193  74 0C	   *	    je	@C0331
 00001195  3C 1A	   *	    cmp    al, 01Ah
 00001197  74 08	   *	    je	@C0331
 00001199  3C 27	   *	    cmp    al, 027h
 0000119B  74 04	   *	    je	@C0331
 0000119D  3C 34	   *	    cmp    al, 034h
 0000119F  75 02	   *	    jne    @C0330
 000011A1		   *@C0331:
 000011A1  B0 0D			mov al,13
				.endif
 000011A3		   *@C0330:
 000011A3		   *@C032F:
 000011A3		   *@C0329:
 000011A3		   *@C0323:
 000011A3		   *@C031D:
 000011A3		   *@C0317:
 000011A3		   *@C0311:
 000011A3		   *@C030B:
 000011A3		   *@C0305:
 000011A3		   *@C02FF:
 000011A3		   *@C02F9:
 000011A3		   *@C02F3:
 000011A3		   *@C02ED:
 000011A3  A2 00000051 R	mov straights[5], al

 000011A8  A0 0000000C R	mov al, cards7.value
				.if (al == 1||al==14||al==27||al==40)
 000011AD  3C 01	   *	    cmp    al, 001h
 000011AF  74 0C	   *	    je	@C0336
 000011B1  3C 0E	   *	    cmp    al, 00Eh
 000011B3  74 08	   *	    je	@C0336
 000011B5  3C 1B	   *	    cmp    al, 01Bh
 000011B7  74 04	   *	    je	@C0336
 000011B9  3C 28	   *	    cmp    al, 028h
 000011BB  75 07	   *	    jne    @C0335
 000011BD		   *@C0336:
 000011BD  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000011BF  E9 000000FD	   *	    jmp    @C033A
 000011C4		   *@C0335:
 000011C4  3C 02	   *	    cmp    al, 002h
 000011C6  74 0C	   *	    je	@C033C
 000011C8  3C 0F	   *	    cmp    al, 00Fh
 000011CA  74 08	   *	    je	@C033C
 000011CC  3C 1C	   *	    cmp    al, 01Ch
 000011CE  74 04	   *	    je	@C033C
 000011D0  3C 29	   *	    cmp    al, 029h
 000011D2  75 07	   *	    jne    @C033B
 000011D4		   *@C033C:
 000011D4  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000011D6  E9 000000E6	   *	    jmp    @C0340
 000011DB		   *@C033B:
 000011DB  3C 03	   *	    cmp    al, 003h
 000011DD  74 0C	   *	    je	@C0342
 000011DF  3C 10	   *	    cmp    al, 010h
 000011E1  74 08	   *	    je	@C0342
 000011E3  3C 1D	   *	    cmp    al, 01Dh
 000011E5  74 04	   *	    je	@C0342
 000011E7  3C 2A	   *	    cmp    al, 02Ah
 000011E9  75 07	   *	    jne    @C0341
 000011EB		   *@C0342:
 000011EB  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000011ED  E9 000000CF	   *	    jmp    @C0346
 000011F2		   *@C0341:
 000011F2  3C 04	   *	    cmp    al, 004h
 000011F4  74 0C	   *	    je	@C0348
 000011F6  3C 11	   *	    cmp    al, 011h
 000011F8  74 08	   *	    je	@C0348
 000011FA  3C 1E	   *	    cmp    al, 01Eh
 000011FC  74 04	   *	    je	@C0348
 000011FE  3C 2B	   *	    cmp    al, 02Bh
 00001200  75 07	   *	    jne    @C0347
 00001202		   *@C0348:
 00001202  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001204  E9 000000B8	   *	    jmp    @C034C
 00001209		   *@C0347:
 00001209  3C 05	   *	    cmp    al, 005h
 0000120B  74 0C	   *	    je	@C034E
 0000120D  3C 12	   *	    cmp    al, 012h
 0000120F  74 08	   *	    je	@C034E
 00001211  3C 1F	   *	    cmp    al, 01Fh
 00001213  74 04	   *	    je	@C034E
 00001215  3C 2C	   *	    cmp    al, 02Ch
 00001217  75 07	   *	    jne    @C034D
 00001219		   *@C034E:
 00001219  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000121B  E9 000000A1	   *	    jmp    @C0352
 00001220		   *@C034D:
 00001220  3C 06	   *	    cmp    al, 006h
 00001222  74 0C	   *	    je	@C0354
 00001224  3C 13	   *	    cmp    al, 013h
 00001226  74 08	   *	    je	@C0354
 00001228  3C 20	   *	    cmp    al, 020h
 0000122A  74 04	   *	    je	@C0354
 0000122C  3C 2D	   *	    cmp    al, 02Dh
 0000122E  75 07	   *	    jne    @C0353
 00001230		   *@C0354:
 00001230  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001232  E9 0000008A	   *	    jmp    @C0358
 00001237		   *@C0353:
 00001237  3C 07	   *	    cmp    al, 007h
 00001239  74 0C	   *	    je	@C035A
 0000123B  3C 14	   *	    cmp    al, 014h
 0000123D  74 08	   *	    je	@C035A
 0000123F  3C 21	   *	    cmp    al, 021h
 00001241  74 04	   *	    je	@C035A
 00001243  3C 2E	   *	    cmp    al, 02Eh
 00001245  75 04	   *	    jne    @C0359
 00001247		   *@C035A:
 00001247  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001249  EB 76	   *	    jmp    @C035E
 0000124B		   *@C0359:
 0000124B  3C 08	   *	    cmp    al, 008h
 0000124D  74 0C	   *	    je	@C0360
 0000124F  3C 15	   *	    cmp    al, 015h
 00001251  74 08	   *	    je	@C0360
 00001253  3C 22	   *	    cmp    al, 022h
 00001255  74 04	   *	    je	@C0360
 00001257  3C 2F	   *	    cmp    al, 02Fh
 00001259  75 04	   *	    jne    @C035F
 0000125B		   *@C0360:
 0000125B  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000125D  EB 62	   *	    jmp    @C0364
 0000125F		   *@C035F:
 0000125F  3C 09	   *	    cmp    al, 009h
 00001261  74 0C	   *	    je	@C0366
 00001263  3C 16	   *	    cmp    al, 016h
 00001265  74 08	   *	    je	@C0366
 00001267  3C 23	   *	    cmp    al, 023h
 00001269  74 04	   *	    je	@C0366
 0000126B  3C 30	   *	    cmp    al, 030h
 0000126D  75 04	   *	    jne    @C0365
 0000126F		   *@C0366:
 0000126F  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001271  EB 4E	   *	    jmp    @C036A
 00001273		   *@C0365:
 00001273  3C 0A	   *	    cmp    al, 00Ah
 00001275  74 0C	   *	    je	@C036C
 00001277  3C 17	   *	    cmp    al, 017h
 00001279  74 08	   *	    je	@C036C
 0000127B  3C 24	   *	    cmp    al, 024h
 0000127D  74 04	   *	    je	@C036C
 0000127F  3C 31	   *	    cmp    al, 031h
 00001281  75 04	   *	    jne    @C036B
 00001283		   *@C036C:
 00001283  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001285  EB 3A	   *	    jmp    @C0370
 00001287		   *@C036B:
 00001287  3C 0B	   *	    cmp    al, 00Bh
 00001289  74 0C	   *	    je	@C0372
 0000128B  3C 18	   *	    cmp    al, 018h
 0000128D  74 08	   *	    je	@C0372
 0000128F  3C 25	   *	    cmp    al, 025h
 00001291  74 04	   *	    je	@C0372
 00001293  3C 32	   *	    cmp    al, 032h
 00001295  75 04	   *	    jne    @C0371
 00001297		   *@C0372:
 00001297  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001299  EB 26	   *	    jmp    @C0376
 0000129B		   *@C0371:
 0000129B  3C 0C	   *	    cmp    al, 00Ch
 0000129D  74 0C	   *	    je	@C0378
 0000129F  3C 19	   *	    cmp    al, 019h
 000012A1  74 08	   *	    je	@C0378
 000012A3  3C 26	   *	    cmp    al, 026h
 000012A5  74 04	   *	    je	@C0378
 000012A7  3C 33	   *	    cmp    al, 033h
 000012A9  75 04	   *	    jne    @C0377
 000012AB		   *@C0378:
 000012AB  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000012AD  EB 12	   *	    jmp    @C037C
 000012AF		   *@C0377:
 000012AF  3C 0D	   *	    cmp    al, 00Dh
 000012B1  74 0C	   *	    je	@C037E
 000012B3  3C 1A	   *	    cmp    al, 01Ah
 000012B5  74 08	   *	    je	@C037E
 000012B7  3C 27	   *	    cmp    al, 027h
 000012B9  74 04	   *	    je	@C037E
 000012BB  3C 34	   *	    cmp    al, 034h
 000012BD  75 02	   *	    jne    @C037D
 000012BF		   *@C037E:
 000012BF  B0 0D			mov al,13
				.endif
 000012C1		   *@C037D:
 000012C1		   *@C037C:
 000012C1		   *@C0376:
 000012C1		   *@C0370:
 000012C1		   *@C036A:
 000012C1		   *@C0364:
 000012C1		   *@C035E:
 000012C1		   *@C0358:
 000012C1		   *@C0352:
 000012C1		   *@C034C:
 000012C1		   *@C0346:
 000012C1		   *@C0340:
 000012C1		   *@C033A:
 000012C1  A2 00000052 R	mov straights[6], al

 000012C6  B9 00000006		mov ecx,6
 000012CB  BF 00000006		mov edi,6
 000012D0  BE 00000000		mov esi,0
					
 000012D5				SS1:
 000012D5  8B D6				mov edx,esi
 000012D7  42					inc edx
 000012D8  51					push ecx
 000012D9  8B CF				mov ecx, edi
 000012DB						SS2:
 000012DB  8A 86 0000004C R					mov al, straights[esi]
 000012E1  8A 9A 0000004C R					mov bl, straights[edx]
									.if (al < bl)
 000012E7  3A C3	   *	    cmp    al, bl
 000012E9  73 0E	   *	    jae    @C0382
 000012EB  86 C3								xchg al, bl
 000012ED  88 86 0000004C R							mov straights[esi],al
 000012F3  88 9A 0000004C R							mov straights[edx],bl
									.endif 
 000012F9		   *@C0382:
 000012F9  42							inc edx
 000012FA  E2 DF					Loop SS2
 000012FC  59					pop ecx
 000012FD  46					inc esi		
 000012FE  4F					dec edi
 000012FF  E2 D4			Loop SS1
					
 00001301  A0 0000004C R	mov al, straights[0]
 00001306  8A 1D 0000004D R	mov bl, straights[1]
 0000130C  2A C3			sub al,bl
					.if(al==1)
 0000130E  3C 01	   *	    cmp    al, 001h
 00001310  75 4A	   *	    jne    @C0384
 00001312  A0 0000004D R			mov al, straights[1]
 00001317  8A 1D 0000004E R			mov bl, straights[2]
 0000131D  2A C3				sub al,bl
							.if(al==1)
 0000131F  3C 01	   *	    cmp    al, 001h
 00001321  75 39	   *	    jne    @C0386
 00001323  A0 0000004E R					mov al, straights[2]
 00001328  8A 1D 0000004F R					mov bl, straights[3]
 0000132E  2A C3						sub al,bl
									.if(al==1)
 00001330  3C 01	   *	    cmp    al, 001h
 00001332  75 28	   *	    jne    @C0388
 00001334  A0 0000004F R							mov al, straights[3]
 00001339  8A 1D 00000050 R							mov bl, straights[4]
 0000133F  2A C3								sub al,bl
											.if(al==1)
 00001341  3C 01	   *	    cmp    al, 001h
 00001343  75 17	   *	    jne    @C038A
 00001345  A0 00000050 R									mov al, straights[4]
 0000134A  8A 1D 00000051 R									mov bl, straights[5]
 00001350  2A C3										sub al,bl
													.if(al==1)
 00001352  3C 01	   *	    cmp    al, 001h
 00001354  75 06	   *	    jne    @C038C
 00001356  FF 05 00000044 R											inc isStraightS
													.endif
											.endif
 0000135C		   *@C038C:
									.endif
 0000135C		   *@C038A:
							.endif
 0000135C		   *@C0388:
					.endif
 0000135C		   *@C0386:
 0000135C		   *@C0384:
 0000135C  A0 0000004D R	mov al, straights[1]
 00001361  8A 1D 0000004E R	mov bl, straights[2]
 00001367  2A C3			sub al,bl
					.if(al==1)
 00001369  3C 01	   *	    cmp    al, 001h
 0000136B  75 4A	   *	    jne    @C038E
 0000136D  A0 0000004E R			mov al, straights[2]
 00001372  8A 1D 0000004F R			mov bl, straights[3]
 00001378  2A C3				sub al,bl
							.if(al==1)
 0000137A  3C 01	   *	    cmp    al, 001h
 0000137C  75 39	   *	    jne    @C0390
 0000137E  A0 0000004F R					mov al, straights[3]
 00001383  8A 1D 00000050 R					mov bl, straights[4]
 00001389  2A C3						sub al,bl
									.if(al==1)
 0000138B  3C 01	   *	    cmp    al, 001h
 0000138D  75 28	   *	    jne    @C0392
 0000138F  A0 00000050 R							mov al, straights[4]
 00001394  8A 1D 00000051 R							mov bl, straights[5]
 0000139A  2A C3								sub al,bl
											.if(al==1)
 0000139C  3C 01	   *	    cmp    al, 001h
 0000139E  75 17	   *	    jne    @C0394
 000013A0  A0 00000051 R									mov al, straights[5]
 000013A5  8A 1D 00000052 R									mov bl, straights[6]
 000013AB  2A C3										sub al,bl
													.if(al==1)
 000013AD  3C 01	   *	    cmp    al, 001h
 000013AF  75 06	   *	    jne    @C0396
 000013B1  FF 05 00000044 R											inc isStraightS
													.endif
											.endif
 000013B7		   *@C0396:
									.endif
 000013B7		   *@C0394:
							.endif
 000013B7		   *@C0392:
					.endif
 000013B7		   *@C0390:
 000013B7		   *@C038E:

 000013B7  A0 0000004E R	mov al, straights[2]
 000013BC  8A 1D 0000004F R	mov bl, straights[3]
 000013C2  2A C3		sub al,bl
					.if(al==1)
 000013C4  3C 01	   *	    cmp    al, 001h
 000013C6  75 4A	   *	    jne    @C0398
 000013C8  A0 0000004F R			mov al, straights[3]
 000013CD  8A 1D 00000050 R			mov bl, straights[4]
 000013D3  2A C3				sub al,bl
							.if(al==1)
 000013D5  3C 01	   *	    cmp    al, 001h
 000013D7  75 39	   *	    jne    @C039A
 000013D9  A0 00000050 R					mov al, straights[4]
 000013DE  8A 1D 00000051 R					mov bl, straights[5]
 000013E4  2A C3						sub al,bl
									.if(al==1)
 000013E6  3C 01	   *	    cmp    al, 001h
 000013E8  75 28	   *	    jne    @C039C
 000013EA  A0 00000051 R							mov al, straights[5]
 000013EF  8A 1D 00000052 R							mov bl, straights[6]
 000013F5  2A C3								sub al,bl
											.if(al==1)
 000013F7  3C 01	   *	    cmp    al, 001h
 000013F9  75 17	   *	    jne    @C039E
 000013FB  A0 00000052 R									mov al, straights[6]
 00001400  8A 1D 00000053 R									mov bl, straights[7]
 00001406  2A C3										sub al,bl
													.if(al==1)
 00001408  3C 01	   *	    cmp    al, 001h
 0000140A  75 06	   *	    jne    @C03A0
 0000140C  FF 05 00000044 R											inc isStraightS
													.endif
											.endif
 00001412		   *@C03A0:
									.endif
 00001412		   *@C039E:
							.endif
 00001412		   *@C039C:
					.endif
 00001412		   *@C039A:
 00001412		   *@C0398:

				;Player Straight
 00001412  A0 0000000E R	mov al, cardp1.value
				.if (al == 1||al==14||al==27||al==40)
 00001417  3C 01	   *	    cmp    al, 001h
 00001419  74 0C	   *	    je	@C03A3
 0000141B  3C 0E	   *	    cmp    al, 00Eh
 0000141D  74 08	   *	    je	@C03A3
 0000141F  3C 1B	   *	    cmp    al, 01Bh
 00001421  74 04	   *	    je	@C03A3
 00001423  3C 28	   *	    cmp    al, 028h
 00001425  75 07	   *	    jne    @C03A2
 00001427		   *@C03A3:
 00001427  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001429  E9 000000FD	   *	    jmp    @C03A7
 0000142E		   *@C03A2:
 0000142E  3C 02	   *	    cmp    al, 002h
 00001430  74 0C	   *	    je	@C03A9
 00001432  3C 0F	   *	    cmp    al, 00Fh
 00001434  74 08	   *	    je	@C03A9
 00001436  3C 1C	   *	    cmp    al, 01Ch
 00001438  74 04	   *	    je	@C03A9
 0000143A  3C 29	   *	    cmp    al, 029h
 0000143C  75 07	   *	    jne    @C03A8
 0000143E		   *@C03A9:
 0000143E  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001440  E9 000000E6	   *	    jmp    @C03AD
 00001445		   *@C03A8:
 00001445  3C 03	   *	    cmp    al, 003h
 00001447  74 0C	   *	    je	@C03AF
 00001449  3C 10	   *	    cmp    al, 010h
 0000144B  74 08	   *	    je	@C03AF
 0000144D  3C 1D	   *	    cmp    al, 01Dh
 0000144F  74 04	   *	    je	@C03AF
 00001451  3C 2A	   *	    cmp    al, 02Ah
 00001453  75 07	   *	    jne    @C03AE
 00001455		   *@C03AF:
 00001455  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001457  E9 000000CF	   *	    jmp    @C03B3
 0000145C		   *@C03AE:
 0000145C  3C 04	   *	    cmp    al, 004h
 0000145E  74 0C	   *	    je	@C03B5
 00001460  3C 11	   *	    cmp    al, 011h
 00001462  74 08	   *	    je	@C03B5
 00001464  3C 1E	   *	    cmp    al, 01Eh
 00001466  74 04	   *	    je	@C03B5
 00001468  3C 2B	   *	    cmp    al, 02Bh
 0000146A  75 07	   *	    jne    @C03B4
 0000146C		   *@C03B5:
 0000146C  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 0000146E  E9 000000B8	   *	    jmp    @C03B9
 00001473		   *@C03B4:
 00001473  3C 05	   *	    cmp    al, 005h
 00001475  74 0C	   *	    je	@C03BB
 00001477  3C 12	   *	    cmp    al, 012h
 00001479  74 08	   *	    je	@C03BB
 0000147B  3C 1F	   *	    cmp    al, 01Fh
 0000147D  74 04	   *	    je	@C03BB
 0000147F  3C 2C	   *	    cmp    al, 02Ch
 00001481  75 07	   *	    jne    @C03BA
 00001483		   *@C03BB:
 00001483  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001485  E9 000000A1	   *	    jmp    @C03BF
 0000148A		   *@C03BA:
 0000148A  3C 06	   *	    cmp    al, 006h
 0000148C  74 0C	   *	    je	@C03C1
 0000148E  3C 13	   *	    cmp    al, 013h
 00001490  74 08	   *	    je	@C03C1
 00001492  3C 20	   *	    cmp    al, 020h
 00001494  74 04	   *	    je	@C03C1
 00001496  3C 2D	   *	    cmp    al, 02Dh
 00001498  75 07	   *	    jne    @C03C0
 0000149A		   *@C03C1:
 0000149A  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 0000149C  E9 0000008A	   *	    jmp    @C03C5
 000014A1		   *@C03C0:
 000014A1  3C 07	   *	    cmp    al, 007h
 000014A3  74 0C	   *	    je	@C03C7
 000014A5  3C 14	   *	    cmp    al, 014h
 000014A7  74 08	   *	    je	@C03C7
 000014A9  3C 21	   *	    cmp    al, 021h
 000014AB  74 04	   *	    je	@C03C7
 000014AD  3C 2E	   *	    cmp    al, 02Eh
 000014AF  75 04	   *	    jne    @C03C6
 000014B1		   *@C03C7:
 000014B1  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000014B3  EB 76	   *	    jmp    @C03CB
 000014B5		   *@C03C6:
 000014B5  3C 08	   *	    cmp    al, 008h
 000014B7  74 0C	   *	    je	@C03CD
 000014B9  3C 15	   *	    cmp    al, 015h
 000014BB  74 08	   *	    je	@C03CD
 000014BD  3C 22	   *	    cmp    al, 022h
 000014BF  74 04	   *	    je	@C03CD
 000014C1  3C 2F	   *	    cmp    al, 02Fh
 000014C3  75 04	   *	    jne    @C03CC
 000014C5		   *@C03CD:
 000014C5  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000014C7  EB 62	   *	    jmp    @C03D1
 000014C9		   *@C03CC:
 000014C9  3C 09	   *	    cmp    al, 009h
 000014CB  74 0C	   *	    je	@C03D3
 000014CD  3C 16	   *	    cmp    al, 016h
 000014CF  74 08	   *	    je	@C03D3
 000014D1  3C 23	   *	    cmp    al, 023h
 000014D3  74 04	   *	    je	@C03D3
 000014D5  3C 30	   *	    cmp    al, 030h
 000014D7  75 04	   *	    jne    @C03D2
 000014D9		   *@C03D3:
 000014D9  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000014DB  EB 4E	   *	    jmp    @C03D7
 000014DD		   *@C03D2:
 000014DD  3C 0A	   *	    cmp    al, 00Ah
 000014DF  74 0C	   *	    je	@C03D9
 000014E1  3C 17	   *	    cmp    al, 017h
 000014E3  74 08	   *	    je	@C03D9
 000014E5  3C 24	   *	    cmp    al, 024h
 000014E7  74 04	   *	    je	@C03D9
 000014E9  3C 31	   *	    cmp    al, 031h
 000014EB  75 04	   *	    jne    @C03D8
 000014ED		   *@C03D9:
 000014ED  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000014EF  EB 3A	   *	    jmp    @C03DD
 000014F1		   *@C03D8:
 000014F1  3C 0B	   *	    cmp    al, 00Bh
 000014F3  74 0C	   *	    je	@C03DF
 000014F5  3C 18	   *	    cmp    al, 018h
 000014F7  74 08	   *	    je	@C03DF
 000014F9  3C 25	   *	    cmp    al, 025h
 000014FB  74 04	   *	    je	@C03DF
 000014FD  3C 32	   *	    cmp    al, 032h
 000014FF  75 04	   *	    jne    @C03DE
 00001501		   *@C03DF:
 00001501  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001503  EB 26	   *	    jmp    @C03E3
 00001505		   *@C03DE:
 00001505  3C 0C	   *	    cmp    al, 00Ch
 00001507  74 0C	   *	    je	@C03E5
 00001509  3C 19	   *	    cmp    al, 019h
 0000150B  74 08	   *	    je	@C03E5
 0000150D  3C 26	   *	    cmp    al, 026h
 0000150F  74 04	   *	    je	@C03E5
 00001511  3C 33	   *	    cmp    al, 033h
 00001513  75 04	   *	    jne    @C03E4
 00001515		   *@C03E5:
 00001515  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001517  EB 12	   *	    jmp    @C03E9
 00001519		   *@C03E4:
 00001519  3C 0D	   *	    cmp    al, 00Dh
 0000151B  74 0C	   *	    je	@C03EB
 0000151D  3C 1A	   *	    cmp    al, 01Ah
 0000151F  74 08	   *	    je	@C03EB
 00001521  3C 27	   *	    cmp    al, 027h
 00001523  74 04	   *	    je	@C03EB
 00001525  3C 34	   *	    cmp    al, 034h
 00001527  75 02	   *	    jne    @C03EA
 00001529		   *@C03EB:
 00001529  B0 0D			mov al,13
				.endif
 0000152B		   *@C03EA:
 0000152B		   *@C03E9:
 0000152B		   *@C03E3:
 0000152B		   *@C03DD:
 0000152B		   *@C03D7:
 0000152B		   *@C03D1:
 0000152B		   *@C03CB:
 0000152B		   *@C03C5:
 0000152B		   *@C03BF:
 0000152B		   *@C03B9:
 0000152B		   *@C03B3:
 0000152B		   *@C03AD:
 0000152B		   *@C03A7:
 0000152B  A2 00000053 R	mov straightp[0], al


 00001530  A0 00000010 R	mov al, cardp2.value
				.if (al == 1||al==14||al==27||al==40)
 00001535  3C 01	   *	    cmp    al, 001h
 00001537  74 0C	   *	    je	@C03F0
 00001539  3C 0E	   *	    cmp    al, 00Eh
 0000153B  74 08	   *	    je	@C03F0
 0000153D  3C 1B	   *	    cmp    al, 01Bh
 0000153F  74 04	   *	    je	@C03F0
 00001541  3C 28	   *	    cmp    al, 028h
 00001543  75 07	   *	    jne    @C03EF
 00001545		   *@C03F0:
 00001545  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001547  E9 000000FD	   *	    jmp    @C03F4
 0000154C		   *@C03EF:
 0000154C  3C 02	   *	    cmp    al, 002h
 0000154E  74 0C	   *	    je	@C03F6
 00001550  3C 0F	   *	    cmp    al, 00Fh
 00001552  74 08	   *	    je	@C03F6
 00001554  3C 1C	   *	    cmp    al, 01Ch
 00001556  74 04	   *	    je	@C03F6
 00001558  3C 29	   *	    cmp    al, 029h
 0000155A  75 07	   *	    jne    @C03F5
 0000155C		   *@C03F6:
 0000155C  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 0000155E  E9 000000E6	   *	    jmp    @C03FA
 00001563		   *@C03F5:
 00001563  3C 03	   *	    cmp    al, 003h
 00001565  74 0C	   *	    je	@C03FC
 00001567  3C 10	   *	    cmp    al, 010h
 00001569  74 08	   *	    je	@C03FC
 0000156B  3C 1D	   *	    cmp    al, 01Dh
 0000156D  74 04	   *	    je	@C03FC
 0000156F  3C 2A	   *	    cmp    al, 02Ah
 00001571  75 07	   *	    jne    @C03FB
 00001573		   *@C03FC:
 00001573  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001575  E9 000000CF	   *	    jmp    @C0400
 0000157A		   *@C03FB:
 0000157A  3C 04	   *	    cmp    al, 004h
 0000157C  74 0C	   *	    je	@C0402
 0000157E  3C 11	   *	    cmp    al, 011h
 00001580  74 08	   *	    je	@C0402
 00001582  3C 1E	   *	    cmp    al, 01Eh
 00001584  74 04	   *	    je	@C0402
 00001586  3C 2B	   *	    cmp    al, 02Bh
 00001588  75 07	   *	    jne    @C0401
 0000158A		   *@C0402:
 0000158A  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 0000158C  E9 000000B8	   *	    jmp    @C0406
 00001591		   *@C0401:
 00001591  3C 05	   *	    cmp    al, 005h
 00001593  74 0C	   *	    je	@C0408
 00001595  3C 12	   *	    cmp    al, 012h
 00001597  74 08	   *	    je	@C0408
 00001599  3C 1F	   *	    cmp    al, 01Fh
 0000159B  74 04	   *	    je	@C0408
 0000159D  3C 2C	   *	    cmp    al, 02Ch
 0000159F  75 07	   *	    jne    @C0407
 000015A1		   *@C0408:
 000015A1  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000015A3  E9 000000A1	   *	    jmp    @C040C
 000015A8		   *@C0407:
 000015A8  3C 06	   *	    cmp    al, 006h
 000015AA  74 0C	   *	    je	@C040E
 000015AC  3C 13	   *	    cmp    al, 013h
 000015AE  74 08	   *	    je	@C040E
 000015B0  3C 20	   *	    cmp    al, 020h
 000015B2  74 04	   *	    je	@C040E
 000015B4  3C 2D	   *	    cmp    al, 02Dh
 000015B6  75 07	   *	    jne    @C040D
 000015B8		   *@C040E:
 000015B8  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000015BA  E9 0000008A	   *	    jmp    @C0412
 000015BF		   *@C040D:
 000015BF  3C 07	   *	    cmp    al, 007h
 000015C1  74 0C	   *	    je	@C0414
 000015C3  3C 14	   *	    cmp    al, 014h
 000015C5  74 08	   *	    je	@C0414
 000015C7  3C 21	   *	    cmp    al, 021h
 000015C9  74 04	   *	    je	@C0414
 000015CB  3C 2E	   *	    cmp    al, 02Eh
 000015CD  75 04	   *	    jne    @C0413
 000015CF		   *@C0414:
 000015CF  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000015D1  EB 76	   *	    jmp    @C0418
 000015D3		   *@C0413:
 000015D3  3C 08	   *	    cmp    al, 008h
 000015D5  74 0C	   *	    je	@C041A
 000015D7  3C 15	   *	    cmp    al, 015h
 000015D9  74 08	   *	    je	@C041A
 000015DB  3C 22	   *	    cmp    al, 022h
 000015DD  74 04	   *	    je	@C041A
 000015DF  3C 2F	   *	    cmp    al, 02Fh
 000015E1  75 04	   *	    jne    @C0419
 000015E3		   *@C041A:
 000015E3  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000015E5  EB 62	   *	    jmp    @C041E
 000015E7		   *@C0419:
 000015E7  3C 09	   *	    cmp    al, 009h
 000015E9  74 0C	   *	    je	@C0420
 000015EB  3C 16	   *	    cmp    al, 016h
 000015ED  74 08	   *	    je	@C0420
 000015EF  3C 23	   *	    cmp    al, 023h
 000015F1  74 04	   *	    je	@C0420
 000015F3  3C 30	   *	    cmp    al, 030h
 000015F5  75 04	   *	    jne    @C041F
 000015F7		   *@C0420:
 000015F7  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000015F9  EB 4E	   *	    jmp    @C0424
 000015FB		   *@C041F:
 000015FB  3C 0A	   *	    cmp    al, 00Ah
 000015FD  74 0C	   *	    je	@C0426
 000015FF  3C 17	   *	    cmp    al, 017h
 00001601  74 08	   *	    je	@C0426
 00001603  3C 24	   *	    cmp    al, 024h
 00001605  74 04	   *	    je	@C0426
 00001607  3C 31	   *	    cmp    al, 031h
 00001609  75 04	   *	    jne    @C0425
 0000160B		   *@C0426:
 0000160B  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000160D  EB 3A	   *	    jmp    @C042A
 0000160F		   *@C0425:
 0000160F  3C 0B	   *	    cmp    al, 00Bh
 00001611  74 0C	   *	    je	@C042C
 00001613  3C 18	   *	    cmp    al, 018h
 00001615  74 08	   *	    je	@C042C
 00001617  3C 25	   *	    cmp    al, 025h
 00001619  74 04	   *	    je	@C042C
 0000161B  3C 32	   *	    cmp    al, 032h
 0000161D  75 04	   *	    jne    @C042B
 0000161F		   *@C042C:
 0000161F  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001621  EB 26	   *	    jmp    @C0430
 00001623		   *@C042B:
 00001623  3C 0C	   *	    cmp    al, 00Ch
 00001625  74 0C	   *	    je	@C0432
 00001627  3C 19	   *	    cmp    al, 019h
 00001629  74 08	   *	    je	@C0432
 0000162B  3C 26	   *	    cmp    al, 026h
 0000162D  74 04	   *	    je	@C0432
 0000162F  3C 33	   *	    cmp    al, 033h
 00001631  75 04	   *	    jne    @C0431
 00001633		   *@C0432:
 00001633  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001635  EB 12	   *	    jmp    @C0436
 00001637		   *@C0431:
 00001637  3C 0D	   *	    cmp    al, 00Dh
 00001639  74 0C	   *	    je	@C0438
 0000163B  3C 1A	   *	    cmp    al, 01Ah
 0000163D  74 08	   *	    je	@C0438
 0000163F  3C 27	   *	    cmp    al, 027h
 00001641  74 04	   *	    je	@C0438
 00001643  3C 34	   *	    cmp    al, 034h
 00001645  75 02	   *	    jne    @C0437
 00001647		   *@C0438:
 00001647  B0 0D			mov al,13
				.endif
 00001649		   *@C0437:
 00001649		   *@C0436:
 00001649		   *@C0430:
 00001649		   *@C042A:
 00001649		   *@C0424:
 00001649		   *@C041E:
 00001649		   *@C0418:
 00001649		   *@C0412:
 00001649		   *@C040C:
 00001649		   *@C0406:
 00001649		   *@C0400:
 00001649		   *@C03FA:
 00001649		   *@C03F4:
 00001649  A2 00000054 R	mov straightp[1], al


 0000164E  A0 00000012 R	mov al, cardp3.value
				.if (al == 1||al==14||al==27||al==40)
 00001653  3C 01	   *	    cmp    al, 001h
 00001655  74 0C	   *	    je	@C043D
 00001657  3C 0E	   *	    cmp    al, 00Eh
 00001659  74 08	   *	    je	@C043D
 0000165B  3C 1B	   *	    cmp    al, 01Bh
 0000165D  74 04	   *	    je	@C043D
 0000165F  3C 28	   *	    cmp    al, 028h
 00001661  75 07	   *	    jne    @C043C
 00001663		   *@C043D:
 00001663  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001665  E9 000000FD	   *	    jmp    @C0441
 0000166A		   *@C043C:
 0000166A  3C 02	   *	    cmp    al, 002h
 0000166C  74 0C	   *	    je	@C0443
 0000166E  3C 0F	   *	    cmp    al, 00Fh
 00001670  74 08	   *	    je	@C0443
 00001672  3C 1C	   *	    cmp    al, 01Ch
 00001674  74 04	   *	    je	@C0443
 00001676  3C 29	   *	    cmp    al, 029h
 00001678  75 07	   *	    jne    @C0442
 0000167A		   *@C0443:
 0000167A  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 0000167C  E9 000000E6	   *	    jmp    @C0447
 00001681		   *@C0442:
 00001681  3C 03	   *	    cmp    al, 003h
 00001683  74 0C	   *	    je	@C0449
 00001685  3C 10	   *	    cmp    al, 010h
 00001687  74 08	   *	    je	@C0449
 00001689  3C 1D	   *	    cmp    al, 01Dh
 0000168B  74 04	   *	    je	@C0449
 0000168D  3C 2A	   *	    cmp    al, 02Ah
 0000168F  75 07	   *	    jne    @C0448
 00001691		   *@C0449:
 00001691  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001693  E9 000000CF	   *	    jmp    @C044D
 00001698		   *@C0448:
 00001698  3C 04	   *	    cmp    al, 004h
 0000169A  74 0C	   *	    je	@C044F
 0000169C  3C 11	   *	    cmp    al, 011h
 0000169E  74 08	   *	    je	@C044F
 000016A0  3C 1E	   *	    cmp    al, 01Eh
 000016A2  74 04	   *	    je	@C044F
 000016A4  3C 2B	   *	    cmp    al, 02Bh
 000016A6  75 07	   *	    jne    @C044E
 000016A8		   *@C044F:
 000016A8  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000016AA  E9 000000B8	   *	    jmp    @C0453
 000016AF		   *@C044E:
 000016AF  3C 05	   *	    cmp    al, 005h
 000016B1  74 0C	   *	    je	@C0455
 000016B3  3C 12	   *	    cmp    al, 012h
 000016B5  74 08	   *	    je	@C0455
 000016B7  3C 1F	   *	    cmp    al, 01Fh
 000016B9  74 04	   *	    je	@C0455
 000016BB  3C 2C	   *	    cmp    al, 02Ch
 000016BD  75 07	   *	    jne    @C0454
 000016BF		   *@C0455:
 000016BF  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000016C1  E9 000000A1	   *	    jmp    @C0459
 000016C6		   *@C0454:
 000016C6  3C 06	   *	    cmp    al, 006h
 000016C8  74 0C	   *	    je	@C045B
 000016CA  3C 13	   *	    cmp    al, 013h
 000016CC  74 08	   *	    je	@C045B
 000016CE  3C 20	   *	    cmp    al, 020h
 000016D0  74 04	   *	    je	@C045B
 000016D2  3C 2D	   *	    cmp    al, 02Dh
 000016D4  75 07	   *	    jne    @C045A
 000016D6		   *@C045B:
 000016D6  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000016D8  E9 0000008A	   *	    jmp    @C045F
 000016DD		   *@C045A:
 000016DD  3C 07	   *	    cmp    al, 007h
 000016DF  74 0C	   *	    je	@C0461
 000016E1  3C 14	   *	    cmp    al, 014h
 000016E3  74 08	   *	    je	@C0461
 000016E5  3C 21	   *	    cmp    al, 021h
 000016E7  74 04	   *	    je	@C0461
 000016E9  3C 2E	   *	    cmp    al, 02Eh
 000016EB  75 04	   *	    jne    @C0460
 000016ED		   *@C0461:
 000016ED  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 000016EF  EB 76	   *	    jmp    @C0465
 000016F1		   *@C0460:
 000016F1  3C 08	   *	    cmp    al, 008h
 000016F3  74 0C	   *	    je	@C0467
 000016F5  3C 15	   *	    cmp    al, 015h
 000016F7  74 08	   *	    je	@C0467
 000016F9  3C 22	   *	    cmp    al, 022h
 000016FB  74 04	   *	    je	@C0467
 000016FD  3C 2F	   *	    cmp    al, 02Fh
 000016FF  75 04	   *	    jne    @C0466
 00001701		   *@C0467:
 00001701  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001703  EB 62	   *	    jmp    @C046B
 00001705		   *@C0466:
 00001705  3C 09	   *	    cmp    al, 009h
 00001707  74 0C	   *	    je	@C046D
 00001709  3C 16	   *	    cmp    al, 016h
 0000170B  74 08	   *	    je	@C046D
 0000170D  3C 23	   *	    cmp    al, 023h
 0000170F  74 04	   *	    je	@C046D
 00001711  3C 30	   *	    cmp    al, 030h
 00001713  75 04	   *	    jne    @C046C
 00001715		   *@C046D:
 00001715  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001717  EB 4E	   *	    jmp    @C0471
 00001719		   *@C046C:
 00001719  3C 0A	   *	    cmp    al, 00Ah
 0000171B  74 0C	   *	    je	@C0473
 0000171D  3C 17	   *	    cmp    al, 017h
 0000171F  74 08	   *	    je	@C0473
 00001721  3C 24	   *	    cmp    al, 024h
 00001723  74 04	   *	    je	@C0473
 00001725  3C 31	   *	    cmp    al, 031h
 00001727  75 04	   *	    jne    @C0472
 00001729		   *@C0473:
 00001729  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000172B  EB 3A	   *	    jmp    @C0477
 0000172D		   *@C0472:
 0000172D  3C 0B	   *	    cmp    al, 00Bh
 0000172F  74 0C	   *	    je	@C0479
 00001731  3C 18	   *	    cmp    al, 018h
 00001733  74 08	   *	    je	@C0479
 00001735  3C 25	   *	    cmp    al, 025h
 00001737  74 04	   *	    je	@C0479
 00001739  3C 32	   *	    cmp    al, 032h
 0000173B  75 04	   *	    jne    @C0478
 0000173D		   *@C0479:
 0000173D  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000173F  EB 26	   *	    jmp    @C047D
 00001741		   *@C0478:
 00001741  3C 0C	   *	    cmp    al, 00Ch
 00001743  74 0C	   *	    je	@C047F
 00001745  3C 19	   *	    cmp    al, 019h
 00001747  74 08	   *	    je	@C047F
 00001749  3C 26	   *	    cmp    al, 026h
 0000174B  74 04	   *	    je	@C047F
 0000174D  3C 33	   *	    cmp    al, 033h
 0000174F  75 04	   *	    jne    @C047E
 00001751		   *@C047F:
 00001751  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001753  EB 12	   *	    jmp    @C0483
 00001755		   *@C047E:
 00001755  3C 0D	   *	    cmp    al, 00Dh
 00001757  74 0C	   *	    je	@C0485
 00001759  3C 1A	   *	    cmp    al, 01Ah
 0000175B  74 08	   *	    je	@C0485
 0000175D  3C 27	   *	    cmp    al, 027h
 0000175F  74 04	   *	    je	@C0485
 00001761  3C 34	   *	    cmp    al, 034h
 00001763  75 02	   *	    jne    @C0484
 00001765		   *@C0485:
 00001765  B0 0D			mov al,13
				.endif
 00001767		   *@C0484:
 00001767		   *@C0483:
 00001767		   *@C047D:
 00001767		   *@C0477:
 00001767		   *@C0471:
 00001767		   *@C046B:
 00001767		   *@C0465:
 00001767		   *@C045F:
 00001767		   *@C0459:
 00001767		   *@C0453:
 00001767		   *@C044D:
 00001767		   *@C0447:
 00001767		   *@C0441:
 00001767  A2 00000055 R	mov straightp[2], al


 0000176C  A0 00000014 R	mov al, cardp4.value
				.if (al == 1||al==14||al==27||al==40)
 00001771  3C 01	   *	    cmp    al, 001h
 00001773  74 0C	   *	    je	@C048A
 00001775  3C 0E	   *	    cmp    al, 00Eh
 00001777  74 08	   *	    je	@C048A
 00001779  3C 1B	   *	    cmp    al, 01Bh
 0000177B  74 04	   *	    je	@C048A
 0000177D  3C 28	   *	    cmp    al, 028h
 0000177F  75 07	   *	    jne    @C0489
 00001781		   *@C048A:
 00001781  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001783  E9 000000FD	   *	    jmp    @C048E
 00001788		   *@C0489:
 00001788  3C 02	   *	    cmp    al, 002h
 0000178A  74 0C	   *	    je	@C0490
 0000178C  3C 0F	   *	    cmp    al, 00Fh
 0000178E  74 08	   *	    je	@C0490
 00001790  3C 1C	   *	    cmp    al, 01Ch
 00001792  74 04	   *	    je	@C0490
 00001794  3C 29	   *	    cmp    al, 029h
 00001796  75 07	   *	    jne    @C048F
 00001798		   *@C0490:
 00001798  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 0000179A  E9 000000E6	   *	    jmp    @C0494
 0000179F		   *@C048F:
 0000179F  3C 03	   *	    cmp    al, 003h
 000017A1  74 0C	   *	    je	@C0496
 000017A3  3C 10	   *	    cmp    al, 010h
 000017A5  74 08	   *	    je	@C0496
 000017A7  3C 1D	   *	    cmp    al, 01Dh
 000017A9  74 04	   *	    je	@C0496
 000017AB  3C 2A	   *	    cmp    al, 02Ah
 000017AD  75 07	   *	    jne    @C0495
 000017AF		   *@C0496:
 000017AF  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000017B1  E9 000000CF	   *	    jmp    @C049A
 000017B6		   *@C0495:
 000017B6  3C 04	   *	    cmp    al, 004h
 000017B8  74 0C	   *	    je	@C049C
 000017BA  3C 11	   *	    cmp    al, 011h
 000017BC  74 08	   *	    je	@C049C
 000017BE  3C 1E	   *	    cmp    al, 01Eh
 000017C0  74 04	   *	    je	@C049C
 000017C2  3C 2B	   *	    cmp    al, 02Bh
 000017C4  75 07	   *	    jne    @C049B
 000017C6		   *@C049C:
 000017C6  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000017C8  E9 000000B8	   *	    jmp    @C04A0
 000017CD		   *@C049B:
 000017CD  3C 05	   *	    cmp    al, 005h
 000017CF  74 0C	   *	    je	@C04A2
 000017D1  3C 12	   *	    cmp    al, 012h
 000017D3  74 08	   *	    je	@C04A2
 000017D5  3C 1F	   *	    cmp    al, 01Fh
 000017D7  74 04	   *	    je	@C04A2
 000017D9  3C 2C	   *	    cmp    al, 02Ch
 000017DB  75 07	   *	    jne    @C04A1
 000017DD		   *@C04A2:
 000017DD  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000017DF  E9 000000A1	   *	    jmp    @C04A6
 000017E4		   *@C04A1:
 000017E4  3C 06	   *	    cmp    al, 006h
 000017E6  74 0C	   *	    je	@C04A8
 000017E8  3C 13	   *	    cmp    al, 013h
 000017EA  74 08	   *	    je	@C04A8
 000017EC  3C 20	   *	    cmp    al, 020h
 000017EE  74 04	   *	    je	@C04A8
 000017F0  3C 2D	   *	    cmp    al, 02Dh
 000017F2  75 07	   *	    jne    @C04A7
 000017F4		   *@C04A8:
 000017F4  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 000017F6  E9 0000008A	   *	    jmp    @C04AC
 000017FB		   *@C04A7:
 000017FB  3C 07	   *	    cmp    al, 007h
 000017FD  74 0C	   *	    je	@C04AE
 000017FF  3C 14	   *	    cmp    al, 014h
 00001801  74 08	   *	    je	@C04AE
 00001803  3C 21	   *	    cmp    al, 021h
 00001805  74 04	   *	    je	@C04AE
 00001807  3C 2E	   *	    cmp    al, 02Eh
 00001809  75 04	   *	    jne    @C04AD
 0000180B		   *@C04AE:
 0000180B  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000180D  EB 76	   *	    jmp    @C04B2
 0000180F		   *@C04AD:
 0000180F  3C 08	   *	    cmp    al, 008h
 00001811  74 0C	   *	    je	@C04B4
 00001813  3C 15	   *	    cmp    al, 015h
 00001815  74 08	   *	    je	@C04B4
 00001817  3C 22	   *	    cmp    al, 022h
 00001819  74 04	   *	    je	@C04B4
 0000181B  3C 2F	   *	    cmp    al, 02Fh
 0000181D  75 04	   *	    jne    @C04B3
 0000181F		   *@C04B4:
 0000181F  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001821  EB 62	   *	    jmp    @C04B8
 00001823		   *@C04B3:
 00001823  3C 09	   *	    cmp    al, 009h
 00001825  74 0C	   *	    je	@C04BA
 00001827  3C 16	   *	    cmp    al, 016h
 00001829  74 08	   *	    je	@C04BA
 0000182B  3C 23	   *	    cmp    al, 023h
 0000182D  74 04	   *	    je	@C04BA
 0000182F  3C 30	   *	    cmp    al, 030h
 00001831  75 04	   *	    jne    @C04B9
 00001833		   *@C04BA:
 00001833  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001835  EB 4E	   *	    jmp    @C04BE
 00001837		   *@C04B9:
 00001837  3C 0A	   *	    cmp    al, 00Ah
 00001839  74 0C	   *	    je	@C04C0
 0000183B  3C 17	   *	    cmp    al, 017h
 0000183D  74 08	   *	    je	@C04C0
 0000183F  3C 24	   *	    cmp    al, 024h
 00001841  74 04	   *	    je	@C04C0
 00001843  3C 31	   *	    cmp    al, 031h
 00001845  75 04	   *	    jne    @C04BF
 00001847		   *@C04C0:
 00001847  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001849  EB 3A	   *	    jmp    @C04C4
 0000184B		   *@C04BF:
 0000184B  3C 0B	   *	    cmp    al, 00Bh
 0000184D  74 0C	   *	    je	@C04C6
 0000184F  3C 18	   *	    cmp    al, 018h
 00001851  74 08	   *	    je	@C04C6
 00001853  3C 25	   *	    cmp    al, 025h
 00001855  74 04	   *	    je	@C04C6
 00001857  3C 32	   *	    cmp    al, 032h
 00001859  75 04	   *	    jne    @C04C5
 0000185B		   *@C04C6:
 0000185B  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000185D  EB 26	   *	    jmp    @C04CA
 0000185F		   *@C04C5:
 0000185F  3C 0C	   *	    cmp    al, 00Ch
 00001861  74 0C	   *	    je	@C04CC
 00001863  3C 19	   *	    cmp    al, 019h
 00001865  74 08	   *	    je	@C04CC
 00001867  3C 26	   *	    cmp    al, 026h
 00001869  74 04	   *	    je	@C04CC
 0000186B  3C 33	   *	    cmp    al, 033h
 0000186D  75 04	   *	    jne    @C04CB
 0000186F		   *@C04CC:
 0000186F  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001871  EB 12	   *	    jmp    @C04D0
 00001873		   *@C04CB:
 00001873  3C 0D	   *	    cmp    al, 00Dh
 00001875  74 0C	   *	    je	@C04D2
 00001877  3C 1A	   *	    cmp    al, 01Ah
 00001879  74 08	   *	    je	@C04D2
 0000187B  3C 27	   *	    cmp    al, 027h
 0000187D  74 04	   *	    je	@C04D2
 0000187F  3C 34	   *	    cmp    al, 034h
 00001881  75 02	   *	    jne    @C04D1
 00001883		   *@C04D2:
 00001883  B0 0D			mov al,13
				.endif
 00001885		   *@C04D1:
 00001885		   *@C04D0:
 00001885		   *@C04CA:
 00001885		   *@C04C4:
 00001885		   *@C04BE:
 00001885		   *@C04B8:
 00001885		   *@C04B2:
 00001885		   *@C04AC:
 00001885		   *@C04A6:
 00001885		   *@C04A0:
 00001885		   *@C049A:
 00001885		   *@C0494:
 00001885		   *@C048E:
 00001885  A2 00000056 R	mov straightp[3], al


 0000188A  A0 00000016 R	mov al, cardp5.value
				.if (al == 1||al==14||al==27||al==40)
 0000188F  3C 01	   *	    cmp    al, 001h
 00001891  74 0C	   *	    je	@C04D7
 00001893  3C 0E	   *	    cmp    al, 00Eh
 00001895  74 08	   *	    je	@C04D7
 00001897  3C 1B	   *	    cmp    al, 01Bh
 00001899  74 04	   *	    je	@C04D7
 0000189B  3C 28	   *	    cmp    al, 028h
 0000189D  75 07	   *	    jne    @C04D6
 0000189F		   *@C04D7:
 0000189F  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000018A1  E9 000000FD	   *	    jmp    @C04DB
 000018A6		   *@C04D6:
 000018A6  3C 02	   *	    cmp    al, 002h
 000018A8  74 0C	   *	    je	@C04DD
 000018AA  3C 0F	   *	    cmp    al, 00Fh
 000018AC  74 08	   *	    je	@C04DD
 000018AE  3C 1C	   *	    cmp    al, 01Ch
 000018B0  74 04	   *	    je	@C04DD
 000018B2  3C 29	   *	    cmp    al, 029h
 000018B4  75 07	   *	    jne    @C04DC
 000018B6		   *@C04DD:
 000018B6  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000018B8  E9 000000E6	   *	    jmp    @C04E1
 000018BD		   *@C04DC:
 000018BD  3C 03	   *	    cmp    al, 003h
 000018BF  74 0C	   *	    je	@C04E3
 000018C1  3C 10	   *	    cmp    al, 010h
 000018C3  74 08	   *	    je	@C04E3
 000018C5  3C 1D	   *	    cmp    al, 01Dh
 000018C7  74 04	   *	    je	@C04E3
 000018C9  3C 2A	   *	    cmp    al, 02Ah
 000018CB  75 07	   *	    jne    @C04E2
 000018CD		   *@C04E3:
 000018CD  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000018CF  E9 000000CF	   *	    jmp    @C04E7
 000018D4		   *@C04E2:
 000018D4  3C 04	   *	    cmp    al, 004h
 000018D6  74 0C	   *	    je	@C04E9
 000018D8  3C 11	   *	    cmp    al, 011h
 000018DA  74 08	   *	    je	@C04E9
 000018DC  3C 1E	   *	    cmp    al, 01Eh
 000018DE  74 04	   *	    je	@C04E9
 000018E0  3C 2B	   *	    cmp    al, 02Bh
 000018E2  75 07	   *	    jne    @C04E8
 000018E4		   *@C04E9:
 000018E4  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 000018E6  E9 000000B8	   *	    jmp    @C04ED
 000018EB		   *@C04E8:
 000018EB  3C 05	   *	    cmp    al, 005h
 000018ED  74 0C	   *	    je	@C04EF
 000018EF  3C 12	   *	    cmp    al, 012h
 000018F1  74 08	   *	    je	@C04EF
 000018F3  3C 1F	   *	    cmp    al, 01Fh
 000018F5  74 04	   *	    je	@C04EF
 000018F7  3C 2C	   *	    cmp    al, 02Ch
 000018F9  75 07	   *	    jne    @C04EE
 000018FB		   *@C04EF:
 000018FB  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 000018FD  E9 000000A1	   *	    jmp    @C04F3
 00001902		   *@C04EE:
 00001902  3C 06	   *	    cmp    al, 006h
 00001904  74 0C	   *	    je	@C04F5
 00001906  3C 13	   *	    cmp    al, 013h
 00001908  74 08	   *	    je	@C04F5
 0000190A  3C 20	   *	    cmp    al, 020h
 0000190C  74 04	   *	    je	@C04F5
 0000190E  3C 2D	   *	    cmp    al, 02Dh
 00001910  75 07	   *	    jne    @C04F4
 00001912		   *@C04F5:
 00001912  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001914  E9 0000008A	   *	    jmp    @C04F9
 00001919		   *@C04F4:
 00001919  3C 07	   *	    cmp    al, 007h
 0000191B  74 0C	   *	    je	@C04FB
 0000191D  3C 14	   *	    cmp    al, 014h
 0000191F  74 08	   *	    je	@C04FB
 00001921  3C 21	   *	    cmp    al, 021h
 00001923  74 04	   *	    je	@C04FB
 00001925  3C 2E	   *	    cmp    al, 02Eh
 00001927  75 04	   *	    jne    @C04FA
 00001929		   *@C04FB:
 00001929  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000192B  EB 76	   *	    jmp    @C04FF
 0000192D		   *@C04FA:
 0000192D  3C 08	   *	    cmp    al, 008h
 0000192F  74 0C	   *	    je	@C0501
 00001931  3C 15	   *	    cmp    al, 015h
 00001933  74 08	   *	    je	@C0501
 00001935  3C 22	   *	    cmp    al, 022h
 00001937  74 04	   *	    je	@C0501
 00001939  3C 2F	   *	    cmp    al, 02Fh
 0000193B  75 04	   *	    jne    @C0500
 0000193D		   *@C0501:
 0000193D  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000193F  EB 62	   *	    jmp    @C0505
 00001941		   *@C0500:
 00001941  3C 09	   *	    cmp    al, 009h
 00001943  74 0C	   *	    je	@C0507
 00001945  3C 16	   *	    cmp    al, 016h
 00001947  74 08	   *	    je	@C0507
 00001949  3C 23	   *	    cmp    al, 023h
 0000194B  74 04	   *	    je	@C0507
 0000194D  3C 30	   *	    cmp    al, 030h
 0000194F  75 04	   *	    jne    @C0506
 00001951		   *@C0507:
 00001951  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001953  EB 4E	   *	    jmp    @C050B
 00001955		   *@C0506:
 00001955  3C 0A	   *	    cmp    al, 00Ah
 00001957  74 0C	   *	    je	@C050D
 00001959  3C 17	   *	    cmp    al, 017h
 0000195B  74 08	   *	    je	@C050D
 0000195D  3C 24	   *	    cmp    al, 024h
 0000195F  74 04	   *	    je	@C050D
 00001961  3C 31	   *	    cmp    al, 031h
 00001963  75 04	   *	    jne    @C050C
 00001965		   *@C050D:
 00001965  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001967  EB 3A	   *	    jmp    @C0511
 00001969		   *@C050C:
 00001969  3C 0B	   *	    cmp    al, 00Bh
 0000196B  74 0C	   *	    je	@C0513
 0000196D  3C 18	   *	    cmp    al, 018h
 0000196F  74 08	   *	    je	@C0513
 00001971  3C 25	   *	    cmp    al, 025h
 00001973  74 04	   *	    je	@C0513
 00001975  3C 32	   *	    cmp    al, 032h
 00001977  75 04	   *	    jne    @C0512
 00001979		   *@C0513:
 00001979  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000197B  EB 26	   *	    jmp    @C0517
 0000197D		   *@C0512:
 0000197D  3C 0C	   *	    cmp    al, 00Ch
 0000197F  74 0C	   *	    je	@C0519
 00001981  3C 19	   *	    cmp    al, 019h
 00001983  74 08	   *	    je	@C0519
 00001985  3C 26	   *	    cmp    al, 026h
 00001987  74 04	   *	    je	@C0519
 00001989  3C 33	   *	    cmp    al, 033h
 0000198B  75 04	   *	    jne    @C0518
 0000198D		   *@C0519:
 0000198D  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 0000198F  EB 12	   *	    jmp    @C051D
 00001991		   *@C0518:
 00001991  3C 0D	   *	    cmp    al, 00Dh
 00001993  74 0C	   *	    je	@C051F
 00001995  3C 1A	   *	    cmp    al, 01Ah
 00001997  74 08	   *	    je	@C051F
 00001999  3C 27	   *	    cmp    al, 027h
 0000199B  74 04	   *	    je	@C051F
 0000199D  3C 34	   *	    cmp    al, 034h
 0000199F  75 02	   *	    jne    @C051E
 000019A1		   *@C051F:
 000019A1  B0 0D			mov al,13
				.endif
 000019A3		   *@C051E:
 000019A3		   *@C051D:
 000019A3		   *@C0517:
 000019A3		   *@C0511:
 000019A3		   *@C050B:
 000019A3		   *@C0505:
 000019A3		   *@C04FF:
 000019A3		   *@C04F9:
 000019A3		   *@C04F3:
 000019A3		   *@C04ED:
 000019A3		   *@C04E7:
 000019A3		   *@C04E1:
 000019A3		   *@C04DB:
 000019A3  A2 00000057 R	mov straightp[4], al


 000019A8  A0 00000018 R	mov al, cardp6.value
				.if (al == 1||al==14||al==27||al==40)
 000019AD  3C 01	   *	    cmp    al, 001h
 000019AF  74 0C	   *	    je	@C0524
 000019B1  3C 0E	   *	    cmp    al, 00Eh
 000019B3  74 08	   *	    je	@C0524
 000019B5  3C 1B	   *	    cmp    al, 01Bh
 000019B7  74 04	   *	    je	@C0524
 000019B9  3C 28	   *	    cmp    al, 028h
 000019BB  75 07	   *	    jne    @C0523
 000019BD		   *@C0524:
 000019BD  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000019BF  E9 000000FD	   *	    jmp    @C0528
 000019C4		   *@C0523:
 000019C4  3C 02	   *	    cmp    al, 002h
 000019C6  74 0C	   *	    je	@C052A
 000019C8  3C 0F	   *	    cmp    al, 00Fh
 000019CA  74 08	   *	    je	@C052A
 000019CC  3C 1C	   *	    cmp    al, 01Ch
 000019CE  74 04	   *	    je	@C052A
 000019D0  3C 29	   *	    cmp    al, 029h
 000019D2  75 07	   *	    jne    @C0529
 000019D4		   *@C052A:
 000019D4  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000019D6  E9 000000E6	   *	    jmp    @C052E
 000019DB		   *@C0529:
 000019DB  3C 03	   *	    cmp    al, 003h
 000019DD  74 0C	   *	    je	@C0530
 000019DF  3C 10	   *	    cmp    al, 010h
 000019E1  74 08	   *	    je	@C0530
 000019E3  3C 1D	   *	    cmp    al, 01Dh
 000019E5  74 04	   *	    je	@C0530
 000019E7  3C 2A	   *	    cmp    al, 02Ah
 000019E9  75 07	   *	    jne    @C052F
 000019EB		   *@C0530:
 000019EB  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000019ED  E9 000000CF	   *	    jmp    @C0534
 000019F2		   *@C052F:
 000019F2  3C 04	   *	    cmp    al, 004h
 000019F4  74 0C	   *	    je	@C0536
 000019F6  3C 11	   *	    cmp    al, 011h
 000019F8  74 08	   *	    je	@C0536
 000019FA  3C 1E	   *	    cmp    al, 01Eh
 000019FC  74 04	   *	    je	@C0536
 000019FE  3C 2B	   *	    cmp    al, 02Bh
 00001A00  75 07	   *	    jne    @C0535
 00001A02		   *@C0536:
 00001A02  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001A04  E9 000000B8	   *	    jmp    @C053A
 00001A09		   *@C0535:
 00001A09  3C 05	   *	    cmp    al, 005h
 00001A0B  74 0C	   *	    je	@C053C
 00001A0D  3C 12	   *	    cmp    al, 012h
 00001A0F  74 08	   *	    je	@C053C
 00001A11  3C 1F	   *	    cmp    al, 01Fh
 00001A13  74 04	   *	    je	@C053C
 00001A15  3C 2C	   *	    cmp    al, 02Ch
 00001A17  75 07	   *	    jne    @C053B
 00001A19		   *@C053C:
 00001A19  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001A1B  E9 000000A1	   *	    jmp    @C0540
 00001A20		   *@C053B:
 00001A20  3C 06	   *	    cmp    al, 006h
 00001A22  74 0C	   *	    je	@C0542
 00001A24  3C 13	   *	    cmp    al, 013h
 00001A26  74 08	   *	    je	@C0542
 00001A28  3C 20	   *	    cmp    al, 020h
 00001A2A  74 04	   *	    je	@C0542
 00001A2C  3C 2D	   *	    cmp    al, 02Dh
 00001A2E  75 07	   *	    jne    @C0541
 00001A30		   *@C0542:
 00001A30  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001A32  E9 0000008A	   *	    jmp    @C0546
 00001A37		   *@C0541:
 00001A37  3C 07	   *	    cmp    al, 007h
 00001A39  74 0C	   *	    je	@C0548
 00001A3B  3C 14	   *	    cmp    al, 014h
 00001A3D  74 08	   *	    je	@C0548
 00001A3F  3C 21	   *	    cmp    al, 021h
 00001A41  74 04	   *	    je	@C0548
 00001A43  3C 2E	   *	    cmp    al, 02Eh
 00001A45  75 04	   *	    jne    @C0547
 00001A47		   *@C0548:
 00001A47  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001A49  EB 76	   *	    jmp    @C054C
 00001A4B		   *@C0547:
 00001A4B  3C 08	   *	    cmp    al, 008h
 00001A4D  74 0C	   *	    je	@C054E
 00001A4F  3C 15	   *	    cmp    al, 015h
 00001A51  74 08	   *	    je	@C054E
 00001A53  3C 22	   *	    cmp    al, 022h
 00001A55  74 04	   *	    je	@C054E
 00001A57  3C 2F	   *	    cmp    al, 02Fh
 00001A59  75 04	   *	    jne    @C054D
 00001A5B		   *@C054E:
 00001A5B  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001A5D  EB 62	   *	    jmp    @C0552
 00001A5F		   *@C054D:
 00001A5F  3C 09	   *	    cmp    al, 009h
 00001A61  74 0C	   *	    je	@C0554
 00001A63  3C 16	   *	    cmp    al, 016h
 00001A65  74 08	   *	    je	@C0554
 00001A67  3C 23	   *	    cmp    al, 023h
 00001A69  74 04	   *	    je	@C0554
 00001A6B  3C 30	   *	    cmp    al, 030h
 00001A6D  75 04	   *	    jne    @C0553
 00001A6F		   *@C0554:
 00001A6F  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001A71  EB 4E	   *	    jmp    @C0558
 00001A73		   *@C0553:
 00001A73  3C 0A	   *	    cmp    al, 00Ah
 00001A75  74 0C	   *	    je	@C055A
 00001A77  3C 17	   *	    cmp    al, 017h
 00001A79  74 08	   *	    je	@C055A
 00001A7B  3C 24	   *	    cmp    al, 024h
 00001A7D  74 04	   *	    je	@C055A
 00001A7F  3C 31	   *	    cmp    al, 031h
 00001A81  75 04	   *	    jne    @C0559
 00001A83		   *@C055A:
 00001A83  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001A85  EB 3A	   *	    jmp    @C055E
 00001A87		   *@C0559:
 00001A87  3C 0B	   *	    cmp    al, 00Bh
 00001A89  74 0C	   *	    je	@C0560
 00001A8B  3C 18	   *	    cmp    al, 018h
 00001A8D  74 08	   *	    je	@C0560
 00001A8F  3C 25	   *	    cmp    al, 025h
 00001A91  74 04	   *	    je	@C0560
 00001A93  3C 32	   *	    cmp    al, 032h
 00001A95  75 04	   *	    jne    @C055F
 00001A97		   *@C0560:
 00001A97  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001A99  EB 26	   *	    jmp    @C0564
 00001A9B		   *@C055F:
 00001A9B  3C 0C	   *	    cmp    al, 00Ch
 00001A9D  74 0C	   *	    je	@C0566
 00001A9F  3C 19	   *	    cmp    al, 019h
 00001AA1  74 08	   *	    je	@C0566
 00001AA3  3C 26	   *	    cmp    al, 026h
 00001AA5  74 04	   *	    je	@C0566
 00001AA7  3C 33	   *	    cmp    al, 033h
 00001AA9  75 04	   *	    jne    @C0565
 00001AAB		   *@C0566:
 00001AAB  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001AAD  EB 12	   *	    jmp    @C056A
 00001AAF		   *@C0565:
 00001AAF  3C 0D	   *	    cmp    al, 00Dh
 00001AB1  74 0C	   *	    je	@C056C
 00001AB3  3C 1A	   *	    cmp    al, 01Ah
 00001AB5  74 08	   *	    je	@C056C
 00001AB7  3C 27	   *	    cmp    al, 027h
 00001AB9  74 04	   *	    je	@C056C
 00001ABB  3C 34	   *	    cmp    al, 034h
 00001ABD  75 02	   *	    jne    @C056B
 00001ABF		   *@C056C:
 00001ABF  B0 0D			mov al,13
				.endif
 00001AC1		   *@C056B:
 00001AC1		   *@C056A:
 00001AC1		   *@C0564:
 00001AC1		   *@C055E:
 00001AC1		   *@C0558:
 00001AC1		   *@C0552:
 00001AC1		   *@C054C:
 00001AC1		   *@C0546:
 00001AC1		   *@C0540:
 00001AC1		   *@C053A:
 00001AC1		   *@C0534:
 00001AC1		   *@C052E:
 00001AC1		   *@C0528:
 00001AC1  A2 00000058 R	mov straightp[5], al


 00001AC6  A0 0000001A R	mov al, cardp7.value
				.if (al == 1||al==14||al==27||al==40)
 00001ACB  3C 01	   *	    cmp    al, 001h
 00001ACD  74 0C	   *	    je	@C0571
 00001ACF  3C 0E	   *	    cmp    al, 00Eh
 00001AD1  74 08	   *	    je	@C0571
 00001AD3  3C 1B	   *	    cmp    al, 01Bh
 00001AD5  74 04	   *	    je	@C0571
 00001AD7  3C 28	   *	    cmp    al, 028h
 00001AD9  75 07	   *	    jne    @C0570
 00001ADB		   *@C0571:
 00001ADB  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001ADD  E9 000000FD	   *	    jmp    @C0575
 00001AE2		   *@C0570:
 00001AE2  3C 02	   *	    cmp    al, 002h
 00001AE4  74 0C	   *	    je	@C0577
 00001AE6  3C 0F	   *	    cmp    al, 00Fh
 00001AE8  74 08	   *	    je	@C0577
 00001AEA  3C 1C	   *	    cmp    al, 01Ch
 00001AEC  74 04	   *	    je	@C0577
 00001AEE  3C 29	   *	    cmp    al, 029h
 00001AF0  75 07	   *	    jne    @C0576
 00001AF2		   *@C0577:
 00001AF2  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001AF4  E9 000000E6	   *	    jmp    @C057B
 00001AF9		   *@C0576:
 00001AF9  3C 03	   *	    cmp    al, 003h
 00001AFB  74 0C	   *	    je	@C057D
 00001AFD  3C 10	   *	    cmp    al, 010h
 00001AFF  74 08	   *	    je	@C057D
 00001B01  3C 1D	   *	    cmp    al, 01Dh
 00001B03  74 04	   *	    je	@C057D
 00001B05  3C 2A	   *	    cmp    al, 02Ah
 00001B07  75 07	   *	    jne    @C057C
 00001B09		   *@C057D:
 00001B09  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001B0B  E9 000000CF	   *	    jmp    @C0581
 00001B10		   *@C057C:
 00001B10  3C 04	   *	    cmp    al, 004h
 00001B12  74 0C	   *	    je	@C0583
 00001B14  3C 11	   *	    cmp    al, 011h
 00001B16  74 08	   *	    je	@C0583
 00001B18  3C 1E	   *	    cmp    al, 01Eh
 00001B1A  74 04	   *	    je	@C0583
 00001B1C  3C 2B	   *	    cmp    al, 02Bh
 00001B1E  75 07	   *	    jne    @C0582
 00001B20		   *@C0583:
 00001B20  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001B22  E9 000000B8	   *	    jmp    @C0587
 00001B27		   *@C0582:
 00001B27  3C 05	   *	    cmp    al, 005h
 00001B29  74 0C	   *	    je	@C0589
 00001B2B  3C 12	   *	    cmp    al, 012h
 00001B2D  74 08	   *	    je	@C0589
 00001B2F  3C 1F	   *	    cmp    al, 01Fh
 00001B31  74 04	   *	    je	@C0589
 00001B33  3C 2C	   *	    cmp    al, 02Ch
 00001B35  75 07	   *	    jne    @C0588
 00001B37		   *@C0589:
 00001B37  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001B39  E9 000000A1	   *	    jmp    @C058D
 00001B3E		   *@C0588:
 00001B3E  3C 06	   *	    cmp    al, 006h
 00001B40  74 0C	   *	    je	@C058F
 00001B42  3C 13	   *	    cmp    al, 013h
 00001B44  74 08	   *	    je	@C058F
 00001B46  3C 20	   *	    cmp    al, 020h
 00001B48  74 04	   *	    je	@C058F
 00001B4A  3C 2D	   *	    cmp    al, 02Dh
 00001B4C  75 07	   *	    jne    @C058E
 00001B4E		   *@C058F:
 00001B4E  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001B50  E9 0000008A	   *	    jmp    @C0593
 00001B55		   *@C058E:
 00001B55  3C 07	   *	    cmp    al, 007h
 00001B57  74 0C	   *	    je	@C0595
 00001B59  3C 14	   *	    cmp    al, 014h
 00001B5B  74 08	   *	    je	@C0595
 00001B5D  3C 21	   *	    cmp    al, 021h
 00001B5F  74 04	   *	    je	@C0595
 00001B61  3C 2E	   *	    cmp    al, 02Eh
 00001B63  75 04	   *	    jne    @C0594
 00001B65		   *@C0595:
 00001B65  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001B67  EB 76	   *	    jmp    @C0599
 00001B69		   *@C0594:
 00001B69  3C 08	   *	    cmp    al, 008h
 00001B6B  74 0C	   *	    je	@C059B
 00001B6D  3C 15	   *	    cmp    al, 015h
 00001B6F  74 08	   *	    je	@C059B
 00001B71  3C 22	   *	    cmp    al, 022h
 00001B73  74 04	   *	    je	@C059B
 00001B75  3C 2F	   *	    cmp    al, 02Fh
 00001B77  75 04	   *	    jne    @C059A
 00001B79		   *@C059B:
 00001B79  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001B7B  EB 62	   *	    jmp    @C059F
 00001B7D		   *@C059A:
 00001B7D  3C 09	   *	    cmp    al, 009h
 00001B7F  74 0C	   *	    je	@C05A1
 00001B81  3C 16	   *	    cmp    al, 016h
 00001B83  74 08	   *	    je	@C05A1
 00001B85  3C 23	   *	    cmp    al, 023h
 00001B87  74 04	   *	    je	@C05A1
 00001B89  3C 30	   *	    cmp    al, 030h
 00001B8B  75 04	   *	    jne    @C05A0
 00001B8D		   *@C05A1:
 00001B8D  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001B8F  EB 4E	   *	    jmp    @C05A5
 00001B91		   *@C05A0:
 00001B91  3C 0A	   *	    cmp    al, 00Ah
 00001B93  74 0C	   *	    je	@C05A7
 00001B95  3C 17	   *	    cmp    al, 017h
 00001B97  74 08	   *	    je	@C05A7
 00001B99  3C 24	   *	    cmp    al, 024h
 00001B9B  74 04	   *	    je	@C05A7
 00001B9D  3C 31	   *	    cmp    al, 031h
 00001B9F  75 04	   *	    jne    @C05A6
 00001BA1		   *@C05A7:
 00001BA1  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001BA3  EB 3A	   *	    jmp    @C05AB
 00001BA5		   *@C05A6:
 00001BA5  3C 0B	   *	    cmp    al, 00Bh
 00001BA7  74 0C	   *	    je	@C05AD
 00001BA9  3C 18	   *	    cmp    al, 018h
 00001BAB  74 08	   *	    je	@C05AD
 00001BAD  3C 25	   *	    cmp    al, 025h
 00001BAF  74 04	   *	    je	@C05AD
 00001BB1  3C 32	   *	    cmp    al, 032h
 00001BB3  75 04	   *	    jne    @C05AC
 00001BB5		   *@C05AD:
 00001BB5  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001BB7  EB 26	   *	    jmp    @C05B1
 00001BB9		   *@C05AC:
 00001BB9  3C 0C	   *	    cmp    al, 00Ch
 00001BBB  74 0C	   *	    je	@C05B3
 00001BBD  3C 19	   *	    cmp    al, 019h
 00001BBF  74 08	   *	    je	@C05B3
 00001BC1  3C 26	   *	    cmp    al, 026h
 00001BC3  74 04	   *	    je	@C05B3
 00001BC5  3C 33	   *	    cmp    al, 033h
 00001BC7  75 04	   *	    jne    @C05B2
 00001BC9		   *@C05B3:
 00001BC9  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001BCB  EB 12	   *	    jmp    @C05B7
 00001BCD		   *@C05B2:
 00001BCD  3C 0D	   *	    cmp    al, 00Dh
 00001BCF  74 0C	   *	    je	@C05B9
 00001BD1  3C 1A	   *	    cmp    al, 01Ah
 00001BD3  74 08	   *	    je	@C05B9
 00001BD5  3C 27	   *	    cmp    al, 027h
 00001BD7  74 04	   *	    je	@C05B9
 00001BD9  3C 34	   *	    cmp    al, 034h
 00001BDB  75 02	   *	    jne    @C05B8
 00001BDD		   *@C05B9:
 00001BDD  B0 0D			mov al,13
				.endif
 00001BDF		   *@C05B8:
 00001BDF		   *@C05B7:
 00001BDF		   *@C05B1:
 00001BDF		   *@C05AB:
 00001BDF		   *@C05A5:
 00001BDF		   *@C059F:
 00001BDF		   *@C0599:
 00001BDF		   *@C0593:
 00001BDF		   *@C058D:
 00001BDF		   *@C0587:
 00001BDF		   *@C0581:
 00001BDF		   *@C057B:
 00001BDF		   *@C0575:
 00001BDF  A2 00000059 R	mov straightp[6], al

 00001BE4  B9 00000006		mov ecx,6
 00001BE9  BF 00000006		mov edi,6
 00001BEE  BE 00000000		mov esi,0
					
 00001BF3				PS1:
 00001BF3  8B D6				mov edx,esi
 00001BF5  42					inc edx
 00001BF6  51					push ecx
 00001BF7  8B CF				mov ecx, edi
 00001BF9						PS2:
 00001BF9  8A 86 00000053 R					mov al, straightp[esi]
 00001BFF  8A 9A 00000053 R					mov bl, straightp[edx]
									.if (al < bl)
 00001C05  3A C3	   *	    cmp    al, bl
 00001C07  73 0E	   *	    jae    @C05BD
 00001C09  86 C3								xchg al, bl
 00001C0B  88 86 00000053 R							mov straightp[esi],al
 00001C11  88 9A 00000053 R							mov straightp[edx],bl
									.endif 
 00001C17		   *@C05BD:
 00001C17  42							inc edx
 00001C18  E2 DF					Loop PS2
 00001C1A  59					pop ecx
 00001C1B  46					inc esi		
 00001C1C  4F					dec edi
 00001C1D  E2 D4			Loop PS1
					
 00001C1F  A0 00000053 R	mov al, straightp[0]
 00001C24  8A 1D 00000054 R	mov bl, straightp[1]
 00001C2A  2A C3			sub al,bl
					.if(al==1)
 00001C2C  3C 01	   *	    cmp    al, 001h
 00001C2E  75 4A	   *	    jne    @C05BF
 00001C30  A0 00000054 R			mov al, straightp[1]
 00001C35  8A 1D 00000055 R			mov bl, straightp[2]
 00001C3B  2A C3				sub al,bl
							.if(al==1)
 00001C3D  3C 01	   *	    cmp    al, 001h
 00001C3F  75 39	   *	    jne    @C05C1
 00001C41  A0 00000055 R					mov al, straightp[2]
 00001C46  8A 1D 00000056 R					mov bl, straightp[3]
 00001C4C  2A C3						sub al,bl
									.if(al==1)
 00001C4E  3C 01	   *	    cmp    al, 001h
 00001C50  75 28	   *	    jne    @C05C3
 00001C52  A0 00000056 R							mov al, straightp[3]
 00001C57  8A 1D 00000057 R							mov bl, straightp[4]
 00001C5D  2A C3								sub al,bl
											.if(al==1)
 00001C5F  3C 01	   *	    cmp    al, 001h
 00001C61  75 17	   *	    jne    @C05C5
 00001C63  A0 00000057 R									mov al, straightp[4]
 00001C68  8A 1D 00000058 R									mov bl, straightp[5]
 00001C6E  2A C3										sub al,bl
													.if(al==1)
 00001C70  3C 01	   *	    cmp    al, 001h
 00001C72  75 06	   *	    jne    @C05C7
 00001C74  FF 05 00000048 R											inc isstraightp
													.endif
											.endif
 00001C7A		   *@C05C7:
									.endif
 00001C7A		   *@C05C5:
							.endif
 00001C7A		   *@C05C3:
					.endif
 00001C7A		   *@C05C1:
 00001C7A		   *@C05BF:
 00001C7A  A0 00000054 R	mov al, straightp[1]
 00001C7F  8A 1D 00000055 R	mov bl, straightp[2]
 00001C85  2A C3			sub al,bl
					.if(al==1)
 00001C87  3C 01	   *	    cmp    al, 001h
 00001C89  75 4A	   *	    jne    @C05C9
 00001C8B  A0 00000055 R			mov al, straightp[2]
 00001C90  8A 1D 00000056 R			mov bl, straightp[3]
 00001C96  2A C3				sub al,bl
							.if(al==1)
 00001C98  3C 01	   *	    cmp    al, 001h
 00001C9A  75 39	   *	    jne    @C05CB
 00001C9C  A0 00000056 R					mov al, straightp[3]
 00001CA1  8A 1D 00000057 R					mov bl, straightp[4]
 00001CA7  2A C3						sub al,bl
									.if(al==1)
 00001CA9  3C 01	   *	    cmp    al, 001h
 00001CAB  75 28	   *	    jne    @C05CD
 00001CAD  A0 00000057 R							mov al, straightp[4]
 00001CB2  8A 1D 00000058 R							mov bl, straightp[5]
 00001CB8  2A C3								sub al,bl
											.if(al==1)
 00001CBA  3C 01	   *	    cmp    al, 001h
 00001CBC  75 17	   *	    jne    @C05CF
 00001CBE  A0 00000058 R									mov al, straightp[5]
 00001CC3  8A 1D 00000059 R									mov bl, straightp[6]
 00001CC9  2A C3										sub al,bl
													.if(al==1)
 00001CCB  3C 01	   *	    cmp    al, 001h
 00001CCD  75 06	   *	    jne    @C05D1
 00001CCF  FF 05 00000048 R											inc isstraightp
													.endif
											.endif
 00001CD5		   *@C05D1:
									.endif
 00001CD5		   *@C05CF:
							.endif
 00001CD5		   *@C05CD:
					.endif
 00001CD5		   *@C05CB:
 00001CD5		   *@C05C9:

 00001CD5  A0 00000055 R	mov al, straightp[2]
 00001CDA  8A 1D 00000056 R	mov bl, straightp[3]
 00001CE0  2A C3		sub al,bl
					.if(al==1)
 00001CE2  3C 01	   *	    cmp    al, 001h
 00001CE4  75 4A	   *	    jne    @C05D3
 00001CE6  A0 00000056 R			mov al, straightp[3]
 00001CEB  8A 1D 00000057 R			mov bl, straightp[4]
 00001CF1  2A C3				sub al,bl
							.if(al==1)
 00001CF3  3C 01	   *	    cmp    al, 001h
 00001CF5  75 39	   *	    jne    @C05D5
 00001CF7  A0 00000057 R					mov al, straightp[4]
 00001CFC  8A 1D 00000058 R					mov bl, straightp[5]
 00001D02  2A C3						sub al,bl
									.if(al==1)
 00001D04  3C 01	   *	    cmp    al, 001h
 00001D06  75 28	   *	    jne    @C05D7
 00001D08  A0 00000058 R							mov al, straightp[5]
 00001D0D  8A 1D 00000059 R							mov bl, straightp[6]
 00001D13  2A C3								sub al,bl
											.if(al==1)
 00001D15  3C 01	   *	    cmp    al, 001h
 00001D17  75 17	   *	    jne    @C05D9
 00001D19  A0 00000059 R									mov al, straightp[6]
 00001D1E  8A 1D 0000005A R									mov bl, straightp[7]
 00001D24  2A C3										sub al,bl
													.if(al==1)
 00001D26  3C 01	   *	    cmp    al, 001h
 00001D28  75 06	   *	    jne    @C05DB
 00001D2A  FF 05 00000048 R											inc isstraightp
													.endif
											.endif
 00001D30		   *@C05DB:
									.endif
 00001D30		   *@C05D9:
							.endif
 00001D30		   *@C05D7:
					.endif
 00001D30		   *@C05D5:
 00001D30		   *@C05D3:
 00001D30  C3			ret
 00001D31			IsAStraight ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001D31			FourKind PROC

 00001D31  C3			ret
 00001D32			FourKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001D32			FullHouse PROC

 00001D32  C3			ret
 00001D33			FullHouse ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001D33			ThreeKind PROC

 00001D33  C3			ret
 00001D34			ThreeKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001D34			TwoPair PROC

 00001D34  C3			ret
 00001D35			TwoPair ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001D35			Pair PROC

 00001D35  C3			ret
 00001D36			Pair ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001D36			HighCard PROC

 00001D36  C3			ret
 00001D37			HighCard ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001D37			Tie PROC

 00001D37  C3			ret
 00001D38			Tie ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/04/14 22:34:00
MASM Templat						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Card . . . . . . . . . . . . . .	 00000002
  value  . . . . . . . . . . . .	 00000000	 Byte
  Suit . . . . . . . . . . . . .	 00000001	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001AD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001D38 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Ante . . . . . . . . . . . . . .	P Near	 00000165 _TEXT	Length= 0000009B Public STDCALL
Bid1 . . . . . . . . . . . . . .	P Near	 00000705 _TEXT	Length= 00000001 Public STDCALL
Bid2 . . . . . . . . . . . . . .	P Near	 00000706 _TEXT	Length= 00000001 Public STDCALL
Bid3 . . . . . . . . . . . . . .	P Near	 00000707 _TEXT	Length= 00000001 Public STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CompareHand  . . . . . . . . . .	P Near	 00000708 _TEXT	Length= 0000000B Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DealFlop . . . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 00000031 Public STDCALL
  T1 . . . . . . . . . . . . . .	L Near	 000000FA _TEXT	
DealHand . . . . . . . . . . . .	P Near	 000000B1 _TEXT	Length= 00000039 Public STDCALL
  H1 . . . . . . . . . . . . . .	L Near	 000000C0 _TEXT	
DealRiver  . . . . . . . . . . .	P Near	 00000149 _TEXT	Length= 0000001C Public STDCALL
DealTurn . . . . . . . . . . . .	P Near	 0000011B _TEXT	Length= 0000002E Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FourKind . . . . . . . . . . . .	P Near	 00001D31 _TEXT	Length= 00000001 Public STDCALL
FullHouse  . . . . . . . . . . .	P Near	 00001D32 _TEXT	Length= 00000001 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandPlayer . . . . . . . . . . .	P Near	 000004B5 _TEXT	Length= 00000250 Public STDCALL
  FPH1 . . . . . . . . . . . . .	L Near	 000004BF _TEXT	
  FPH2 . . . . . . . . . . . . .	L Near	 000004DA _TEXT	
HandSpock  . . . . . . . . . . .	P Near	 00000267 _TEXT	Length= 0000024E Public STDCALL
  FSH1 . . . . . . . . . . . . .	L Near	 00000271 _TEXT	
  FSH2 . . . . . . . . . . . . .	L Near	 0000028C _TEXT	
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HighCard . . . . . . . . . . . .	P Near	 00001D36 _TEXT	Length= 00000001 Public STDCALL
IsAFlush . . . . . . . . . . . .	P Near	 00000713 _TEXT	Length= 000003E1 Public STDCALL
IsAStraight  . . . . . . . . . .	P Near	 00000AF4 _TEXT	Length= 0000123D Public STDCALL
  SS1  . . . . . . . . . . . . .	L Near	 000012D5 _TEXT	
  SS2  . . . . . . . . . . . . .	L Near	 000012DB _TEXT	
  PS1  . . . . . . . . . . . . .	L Near	 00001BF3 _TEXT	
  PS2  . . . . . . . . . . . . .	L Near	 00001BF9 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Lose . . . . . . . . . . . . . .	P Near	 0000021A _TEXT	Length= 0000001A Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Pair . . . . . . . . . . . . . .	P Near	 00001D35 _TEXT	Length= 00000001 Public STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayAgain  . . . . . . . . . . .	P Near	 00000234 _TEXT	Length= 00000033 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Shuffel  . . . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 00000049 Public STDCALL
  L0 . . . . . . . . . . . . . .	L Near	 00000076 _TEXT	
  S1 . . . . . . . . . . . . . .	L Near	 0000008A _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ThreeKind  . . . . . . . . . . .	P Near	 00001D33 _TEXT	Length= 00000001 Public STDCALL
Tie  . . . . . . . . . . . . . .	P Near	 00001D37 _TEXT	Length= 00000001 Public STDCALL
TwoPair  . . . . . . . . . . . .	P Near	 00001D34 _TEXT	Length= 00000001 Public STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Win  . . . . . . . . . . . . . .	P Near	 00000200 _TEXT	Length= 0000001A Public STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000068 Public STDCALL
  G1 . . . . . . . . . . . . . .	L Near	 00000014 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BigBlind . . . . . . . . . . . .	DWord	 000000FB _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ChipsPlayer  . . . . . . . . . .	DWord	 000000EF _DATA	
ChipsSpock . . . . . . . . . . .	DWord	 000000F3 _DATA	
ChipsTable . . . . . . . . . . .	DWord	 000000F7 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DeckMark . . . . . . . . . . . .	DWord	 000000E7 _DATA	
Deck . . . . . . . . . . . . . .	Byte	 000000AA _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FullHandPlayer . . . . . . . . .	Byte	 00000106 _DATA	
FullHandSpock  . . . . . . . . .	Byte	 000000FF _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PlayerFlush  . . . . . . . . . .	DWord	 0000006A _DATA	
PlayerFour . . . . . . . . . . .	DWord	 00000062 _DATA	
PlayerFull . . . . . . . . . . .	DWord	 00000066 _DATA	
PlayerHand . . . . . . . . . . .	Byte	 000000DE _DATA	
PlayerHighCard . . . . . . . . .	DWord	 0000007E _DATA	
PlayerOnePair  . . . . . . . . .	DWord	 0000007A _DATA	
PlayerRoyal  . . . . . . . . . .	DWord	 0000005A _DATA	
PlayerStraightFlush  . . . . . .	DWord	 0000005E _DATA	
PlayerStraight . . . . . . . . .	DWord	 0000006E _DATA	
PlayerThree  . . . . . . . . . .	DWord	 00000072 _DATA	
PlayerTwoPair  . . . . . . . . .	DWord	 00000076 _DATA	
PromptBadInput . . . . . . . . .	Byte	 00000181 _DATA	
PromptChipsPlayer  . . . . . . .	Byte	 0000017F _DATA	
PromptChipsSpock . . . . . . . .	Byte	 00000180 _DATA	
PromptLoseImage  . . . . . . . .	Byte	 0000017E _DATA	
PromptPlayAgain  . . . . . . . .	Byte	 00000148 _DATA	
PromptWinImage . . . . . . . . .	Byte	 0000017D _DATA	
PromptYouLose  . . . . . . . . .	Byte	 00000129 _DATA	
PromptYouWin . . . . . . . . . .	Byte	 0000010D _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SpockFlush . . . . . . . . . . .	DWord	 00000092 _DATA	
SpockFour  . . . . . . . . . . .	DWord	 0000008A _DATA	
SpockFull  . . . . . . . . . . .	DWord	 0000008E _DATA	
SpockHand  . . . . . . . . . . .	Byte	 000000E0 _DATA	
SpockHighCard  . . . . . . . . .	DWord	 000000A6 _DATA	
SpockOnePair . . . . . . . . . .	DWord	 000000A2 _DATA	
SpockRoyal . . . . . . . . . . .	DWord	 00000082 _DATA	
SpockStraightFlush . . . . . . .	DWord	 00000086 _DATA	
SpockStraight  . . . . . . . . .	DWord	 00000096 _DATA	
SpockThree . . . . . . . . . . .	DWord	 0000009A _DATA	
SpockTwoPair . . . . . . . . . .	DWord	 0000009E _DATA	
StraightP  . . . . . . . . . . .	Byte	 00000053 _DATA	
StraightS  . . . . . . . . . . .	Byte	 0000004C _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TableMark  . . . . . . . . . . .	DWord	 000000EB _DATA	
Table  . . . . . . . . . . . . .	Byte	 000000E2 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardp1 . . . . . . . . . . . . .	Card	 0000000E _DATA	
cardp2 . . . . . . . . . . . . .	Card	 00000010 _DATA	
cardp3 . . . . . . . . . . . . .	Card	 00000012 _DATA	
cardp4 . . . . . . . . . . . . .	Card	 00000014 _DATA	
cardp5 . . . . . . . . . . . . .	Card	 00000016 _DATA	
cardp6 . . . . . . . . . . . . .	Card	 00000018 _DATA	
cardp7 . . . . . . . . . . . . .	Card	 0000001A _DATA	
cards1 . . . . . . . . . . . . .	Card	 00000000 _DATA	
cards2 . . . . . . . . . . . . .	Card	 00000002 _DATA	
cards3 . . . . . . . . . . . . .	Card	 00000004 _DATA	
cards4 . . . . . . . . . . . . .	Card	 00000006 _DATA	
cards5 . . . . . . . . . . . . .	Card	 00000008 _DATA	
cards6 . . . . . . . . . . . . .	Card	 0000000A _DATA	
cards7 . . . . . . . . . . . . .	Card	 0000000C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isClubP  . . . . . . . . . . . .	DWord	 00000024 _DATA	
isClubS  . . . . . . . . . . . .	DWord	 00000038 _DATA	
isDimondP  . . . . . . . . . . .	DWord	 00000028 _DATA	
isDimondS  . . . . . . . . . . .	DWord	 0000003C _DATA	
isFlushP . . . . . . . . . . . .	DWord	 0000002C _DATA	
isFlushS . . . . . . . . . . . .	DWord	 00000040 _DATA	
isHeartP . . . . . . . . . . . .	DWord	 00000020 _DATA	
isHeartS . . . . . . . . . . . .	DWord	 00000034 _DATA	
isSpadeP . . . . . . . . . . . .	DWord	 0000001C _DATA	
isSpadeS . . . . . . . . . . . .	DWord	 00000030 _DATA	
isStraightP  . . . . . . . . . .	DWord	 00000048 _DATA	
isStraightS  . . . . . . . . . .	DWord	 00000044 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
