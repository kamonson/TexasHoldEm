Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/10/14 19:34:34
Texas Hold 'e						     Page 1 - 1


				TITLE Texas Hold 'em

				; Kyle Kat Neele
				; Write a texas holdem game against spock

				INCLUDE Irvine32.inc 
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000002			Card STRUCT																																							    ;
				;	Basic class for all all cards suits containing suit and value																										;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000000  00				value byte 0																																						;
 00000001  00				Suit byte 0																																							;
				Card ENDS																																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
				ConvertValue MACRO																																						;
				;Macro For converting card data into visable cards																														;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

					.if(bl <= 52 && bl >= 1)
						.if(bl >= 14 && bl <= 26)
							sub bl, 13			
						.elseif(bl >= 27 && bl <= 39)
							sub bl, 26
						.elseif(bl >= 40 && bl <= 52)
							sub bl, 39
							
						.endif
						
						.if(bl >0 && bl < 10)
							movzx eax, bl
							call writeint
						.elseif (bl == 10)
							mov PromptSuit, "J"
							mov EDX, OFFSET PromptSuit
							Call WriteString
						.elseif (bl == 11)
							mov PromptSuit, "Q"
							mov EDX, OFFSET PromptSuit
							Call WriteString
						.elseif (bl == 12)
							mov PromptSuit, "K"
							mov EDX, OFFSET PromptSuit
							Call WriteString
						.elseif (bl == 13)
							mov PromptSuit, "A"
							mov EDX, OFFSET PromptSuit
							Call WriteString
							
						.endif
				ENDM
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
				ConvertSuit MACRO																																						;
				;Macro For converting card suit into visable cards																														;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
					.if(bl == 1)
						mov al, 06
						mov PromptSuit, al
					.elseif(bl == 2)
						mov al, 03h
						mov PromptSuit, al
					.elseif(bl == 3)
						mov al, 05
						mov PromptSuit, al
					.elseif(bl == 4)
						mov al, 04
						mov PromptSuit, al
					.else
						mov al, "X"
						mov PromptSuit, al
					.endif
				ENDM

				BlankCard Macro
					mov PromptSuit, "X"
					mov edx, OFFSET PromptSuit
					call writestring
				ENDM
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;



				;Prompts for scoring
 00000000  00000007 [			StraightS byte 7 dup (0)
	    00
	   ]
 00000007  00000007 [			StraightP byte 7 dup (0)
	    00
	   ]

 0000000E 00000000			isSpadeP DWORD 0
 00000012 00000000			isHeartP DWORD 0
 00000016 00000000			isClubP	DWORD 0
 0000001A 00000000			isDimondP DWORD 0
 0000001E 00000000			isFlushP DWORD 0
 00000022 00000000			isSpadeS DWORD 0
 00000026 00000000			isHeartS DWORD 0
 0000002A 00000000			isClubS DWORD 0
 0000002E 00000000			isDimondS DWORD 0
 00000032 00000000			isFlushS DWORD 0
 00000036 00000000			isStraightS DWORD 0
 0000003A 00000000			isStraightP DWORD 0

 0000003E 00000000			RFp DWORD 0
 00000042 00000000			RFs DWORD 0
 00000046 00				HighFourS byte 0
 00000047 00				HighFourP byte 0
 00000048 00				HighThreeS byte 0
 00000049 00				HighThreeP byte 0
 0000004A 00				High2PairS byte 0
 0000004B 00				High2PairP byte 0
 0000004C 00				Low2PairS byte 0
 0000004D 00				Low2PairP byte 0
 0000004E 00				PairS byte 0
 0000004F 00				PairP byte 0
 00000050 00				HighPairS byte 0
 00000051 00				HighPairP byte 0
 00000052 00				HighSts byte 0
 00000053 00				HighStp byte 0
 00000054 00				HighCards byte 0
 00000055 00				HighCardp byte 0

 00000056 00000000			PlayerRoyal DWORD 0
 0000005A 00000000			PlayerStraightFlush DWORD 0
 0000005E 00000000			PlayerFour DWORD 0
 00000062 00000000			PlayerFull DWORD 0
 00000066 00000000			PlayerFlush DWORD 0
 0000006A 00000000			PlayerStraight DWORD 0
 0000006E 00000000			PlayerThree DWORD 0
 00000072 00000000			PlayerTwoPair DWORD 0
 00000076 00000000			PlayerOnePair DWORD 0
 0000007A 00000000			PlayerHandValue DWORD 0
 0000007E 00000000			ChipsCall DWORD 0
 00000082 00000000			ChipsRaise DWORD 0
 00000086 00000000			SpockBet DWORD 0
 0000008A 00000000			PlayerBet DWORD 0
 0000008E 00000000			FoldS DWORD 0
 00000092 00000000			FoldP DWORD 0

 00000096 00000000			SpockRoyal DWORD 0
 0000009A 00000000			SpockStraightFlush DWORD 0
 0000009E 00000000			SpockFour DWORD 0
 000000A2 00000000			SpockFull DWORD 0
 000000A6 00000000			SpockFlush DWORD 0
 000000AA 00000000			SpockStraight DWORD 0
 000000AE 00000000			SpockThree DWORD 0
 000000B2 00000000			SpockTwoPair DWORD 0
 000000B6 00000000			SpockOnePair DWORD 0
 000000BA 00000000			SpockHandValue DWORD 0



				;game controll variables
 000000BE  00000034 [			Deck byte 52 dup (?)
	    00
	   ]

																						;array of Suits
 000000F2  00000002 [			PlayerHand byte 2 dup (?)											;2 Cards for the player
	    00
	   ]
 000000F4  00000002 [			SpockHand byte 2 dup (?)											;2 Cards for the AI
	    00
	   ]
 000000F6  00000005 [			Table byte 5 dup (?)												;3 Flop cards, 1 Turn card, 1 River card
	    00
	   ]

 000000FB 00000000			DeckMark DWORD ?													;Bookmark for place in Deck
 000000FF 00000000			TableMark DWORD ?													;Bookmark for place in Table

 00000103 00000000			ChipsPlayer DWORD 0
 00000107 00000000			ChipsSpock  DWORD 0
 0000010B 00000000			ChipsTable DWORD 0
 0000010F 00000001			BigBlind DWORD 1													;Variable for who is responsible for Big blind, other is responsible for little blind 1/2 big blind bet
 00000113  00000007 [			FullHandSpock BYTE 7 dup (0)										;FullHand of ... including 2 cards 6-7 and table cards 1-5
	    00
	   ]
 0000011A  00000007 [			FullHandPlayer BYTE 7 dup (0)										;FullHand of ... including 2 cards 6-7 and table cards 1-5			
	    00
	   ]

					
 00000121 00000000			var1 DWORD 0
 00000125 00000000			var2 DWORD 0

 00000129 00 00				cards1 Card <0,0>
 0000012B 00 00				cards2 Card <0,0>
 0000012D 00 00				cards3 Card <0,0>
 0000012F 00 00				cards4 Card <0,0>
 00000131 00 00				cards5 Card <0,0>
 00000133 00 00				cards6 Card <0,0>
 00000135 00 00				cards7 Card <0,0>

 00000137 00 00				cardp1 Card <0,0>
 00000139 00 00				cardp2 Card <0,0>
 0000013B 00 00				cardp3 Card <0,0>
 0000013D 00 00				cardp4 Card <0,0>
 0000013F 00 00				cardp5 Card <0,0>
 00000141 00 00				cardp6 Card <0,0>
 00000143 00 00				cardp7 Card <0,0>

				;Prompts
 00000145 59 4F 55 20 57		PromptYouWin byte "YOU WIN. FASCINATING , your earning are: ", 0
	   49 4E 2E 20 46
	   41 53 43 49 4E
	   41 54 49 4E 47
	   20 2C 20 79 6F
	   75 72 20 65 61
	   72 6E 69 6E 67
	   20 61 72 65 3A
	   20 00
 0000016F 59 4F 55 20 4C		PromptYouLose byte "YOU LOSE. LIVE LONG & PROSPER, you walk away with: ", 0
	   4F 53 45 2E 20
	   4C 49 56 45 20
	   4C 4F 4E 47 20
	   26 20 50 52 4F
	   53 50 45 52 2C
	   20 79 6F 75 20
	   77 61 6C 6B 20
	   61 77 61 79 20
	   77 69 74 68 3A
	   20 00
 000001A3 57 6F 75 6C 64		PromptPlayAgain byte "Would you like to play again 1 for yes or 0 for no:  ",0
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 20 31
	   20 66 6F 72 20
	   79 65 73 20 6F
	   72 20 30 20 66
	   6F 72 20 6E 6F
	   3A 20 20 00
 000001D9 3F 00				PromptWinImage byte "?",0
 000001DB 3F 00				PromptLoseImage byte "?",0
 000001DD 3F 00				PromptChipsPlayer byte "?",0
 000001DF 3F 00				PromptChipsSpock byte "?",0
 000001E1 54 68 61 74 20		PromptBadInput byte "That is not a valid choice, please try again",0
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   63 68 6F 69 63
	   65 2C 20 70 6C
	   65 61 73 65 20
	   74 72 79 20 61
	   67 61 69 6E 00
 0000020E 53 70 6F 63 6B		PromptSpockTurn byte "Spocks Turn To bet",0
	   73 20 54 75 72
	   6E 20 54 6F 20
	   62 65 74 00
 00000221 53 70 6F 63 6B		PromptSpockBet byte "Spock Bets: ",0
	   20 42 65 74 73
	   3A 20 00
 0000022E 53 70 6F 63 6B		PromptSpockRaise byte "Spock Raises: ",0
	   20 52 61 69 73
	   65 73 3A 20 00
 0000023D 53 70 6F 63 6B		PromptSpockCall byte "Spock Calls",0
	   20 43 61 6C 6C
	   73 00
 00000249 53 70 6F 63 6B		PromptSpockFold byte "Spock Folds",0
	   20 46 6F 6C 64
	   73 00
 00000255 57 6F 75 6C 64		PromptPlayerBet byte "Would you like to bet<1>, call<2>, or fold<0>",0			
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 62 65
	   74 3C 31 3E 2C
	   20 63 61 6C 6C
	   3C 32 3E 2C 20
	   6F 72 20 66 6F
	   6C 64 3C 30 3E
	   00
 00000283 57 6F 75 6C 64		PromptPlayerSecond byte "Would you like to raise<1>, call<2>, or fold<0>",0		
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 72 61
	   69 73 65 3C 31
	   3E 2C 20 63 61
	   6C 6C 3C 32 3E
	   2C 20 6F 72 20
	   66 6F 6C 64 3C
	   30 3E 00
 000002B3 49 74 20 69 73		PromptPlayerTurn byte "It is your turn",0										
	   20 79 6F 75 72
	   20 74 75 72 6E
	   00
 000002C3 41 6D 6D 6F 75		PromptPlayerRaise byte "Ammount to raise: ",0									
	   6E 74 20 74 6F
	   20 72 61 69 73
	   65 3A 20 00
 000002D6 43 61 6C 6C 00		PromptPlayerCall byte "Call",0													
 000002DB 46 6F 6C 64 00		PromptPlayerFold byte "Fold",0													
 000002E0 59 6F 75 20 64		PromptPlayerNotEnoughChips byte "You do not have enough chips for that",0		
	   6F 20 6E 6F 74
	   20 68 61 76 65
	   20 65 6E 6F 75
	   67 68 20 63 68
	   69 70 73 20 66
	   6F 72 20 74 68
	   61 74 00
 00000306 2D 2D 2D 2D 2D		PromptLine byte "--------------------------------------------------------------------"
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D
 0000034A 58 58 00			PromptCardUnknown byte		"XX",0
 0000034D 53 70 6F 63 6B		PromptShowSpock byte		"Spock Cards: |XX|  |XX|",0
	   20 43 61 72 64
	   73 3A 20 7C 58
	   58 7C 20 20 7C
	   58 58 7C 00
 00000365 54 61 62 6C 65		PromptShowTable1 byte		"Table Cards: |",0
	   20 43 61 72 64
	   73 3A 20 7C 00
 00000374 7C 20 7C 00			PromptShowTable2 byte       "| |",0
 00000378 7C 00				PromptShowTable3 byte       "|",0
 0000037A 50 6C 61 79 65		PromptShowPlayer1 byte		"Player Cards: |",0
	   72 20 43 61 72
	   64 73 3A 20 7C
	   00
 0000038A 7C 20 7C 00			PromptShowPlayer2 byte		"| |",0
 0000038E 7C 00				PromptShowPlayer3 byte		"|",0
 00000390 53 70 6F 63 6B		PromptShowSpockChips byte	"Spock Chips: ",0
	   20 43 68 69 70
	   73 3A 20 00
 0000039E 54 61 62 6C 65		PromptShowTableChips byte	"Table Chips: ",0
	   20 43 68 69 70
	   73 3A 20 00
 000003AC 50 6C 61 79 65		PromptShowPlayerChips byte	"Player Chips: ",0
	   72 20 43 68 69
	   70 73 3A 20 00
 000003BB 58 00				PromptSuit byte				"X",0
 000003BD 53 70 6F 63 6B		PromptShowSpock1 byte		"Spock Cards: |",0
	   20 43 61 72 64
	   73 3A 20 7C 00
 000003CC 53 70 6F 63 6B		PromptHandVS1 byte			"Spock Has: ",0
	   20 48 61 73 3A
	   20 00
 000003D8 52 6F 79 61 6C		PromptRF byte				"Royal Flush",0
	   20 46 6C 75 73
	   68 00
 000003E4 53 74 72 61 69		PromptSF byte				"Straight Flush",0
	   67 68 74 20 46
	   6C 75 73 68 00
 000003F3 46 6F 75 72 20		PromptFK byte				"Four of a Kind",0
	   6F 66 20 61 20
	   4B 69 6E 64 00
 00000402 46 75 6C 6C 20		PromptFH byte				"Full House",0
	   48 6F 75 73 65
	   00
 0000040D 46 6C 75 73 68		PromptFL byte				"Flush",0
	   00
 00000413 53 74 72 61 69		PromptST byte				"Straight",0
	   67 68 74 00
 0000041C 54 68 72 65 65		PromptTK byte				"Three of a Kind",0
	   20 6F 66 20 61
	   20 4B 69 6E 64
	   00
 0000042C 54 77 6F 20 50		PromptTP byte				"Two Pair",0
	   61 69 72 00
 00000435 50 61 69 72 00		PromptOP byte				"Pair",0
 0000043A 50 6C 61 79 65		PromptHandVP1 byte			"Player Has: ",0
	   72 20 48 61 73
	   3A 20 00
 00000447 20 48 69 67 68		PromptHandVP2 byte			" High",0
	   00
 0000044D 50 6C 61 79 65		PromptHandWinP byte			"Player Wins the Hand",0
	   72 20 57 69 6E
	   73 20 74 68 65
	   20 48 61 6E 64
	   00
 00000462 53 70 6F 63 6B		PromptHandWinS byte			"Spock Wins the Hand",0
	   20 57 69 6E 73
	   20 74 68 65 20
	   48 61 6E 64 00
 00000476 54 69 65 00			PromptHandWinT byte			"Tie",0
 0000047A 50 72 65 73 73		PromptPressEnter byte		"Press Enter To Continue",0
	   20 45 6E 74 65
	   72 20 54 6F 20
	   43 6F 6E 74 69
	   6E 75 65 00
 00000492 50 6C 61 79 65		pfold byte					"Player Folded",0
	   72 20 46 6F 6C
	   64 65 64 00
 000004A0 53 70 6F 63 6B		sfold byte					"Spock Folded",0
	   20 46 6F 6C 64
	   65 64 00

				;Images
 000004AD 20 20 20 20 20		Spock2 BYTE "                                                     " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 000004E3 20 20 20 20 20		Spock3 BYTE "              :                                 :    " , 0
	   20 20 20 20 20
	   20 20 20 20 3A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 3A 20
	   20 20 20 00
 00000519 20 20 20 20 20		Spock4 BYTE "            :                                   :    " , 0
	   20 20 20 20 20
	   20 20 3A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 3A 20
	   20 20 20 00
 0000054F 20 20 20 20 20		Spock5 BYTE "            :  RRVIttIti+==iiii++iii++=;:,       :   " , 0
	   20 20 20 20 20
	   20 20 3A 20 20
	   52 52 56 49 74
	   74 49 74 69 2B
	   3D 3D 69 69 69
	   69 2B 2B 69 69
	   69 2B 2B 3D 3B
	   3A 2C 20 20 20
	   20 20 20 20 3A
	   20 20 20 00
 00000585 20 20 20 20 20		Spock6 BYTE "            : IBMMMMWWWWMMMMMBXXVVYYIi=;:,        :  " , 0
	   20 20 20 20 20
	   20 20 3A 20 49
	   42 4D 4D 4D 4D
	   57 57 57 57 4D
	   4D 4D 4D 4D 42
	   58 58 56 56 59
	   59 49 69 3D 3B
	   3A 2C 20 20 20
	   20 20 20 20 20
	   3A 20 20 00
 000005BB 20 20 20 20 20		Spock7 BYTE "            : tBBMMMWWWMMMMMMBXXXVYIti;;;:,,      :  " , 0
	   20 20 20 20 20
	   20 20 3A 20 74
	   42 42 4D 4D 4D
	   57 57 57 4D 4D
	   4D 4D 4D 4D 42
	   58 58 58 56 59
	   49 74 69 3B 3B
	   3B 3A 2C 2C 20
	   20 20 20 20 20
	   3A 20 20 00
 000005F1 20 20 20 20 20		Spock8 BYTE "            t YXIXBMMWMMBMBBRXVIi+==;::;::::       , " , 0
	   20 20 20 20 20
	   20 20 74 20 59
	   58 49 58 42 4D
	   4D 57 4D 4D 42
	   4D 42 42 52 58
	   56 49 69 2B 3D
	   3D 3B 3A 3A 3B
	   3A 3A 3A 3A 20
	   20 20 20 20 20
	   20 2C 20 00
 00000627 20 20 20 20 20		Spock9 BYTE "           ;t IVYt+=+iIIVMBYi=:,,,=i+=;:::::,      ;;" , 0
	   20 20 20 20 20
	   20 3B 74 20 49
	   56 59 74 2B 3D
	   2B 69 49 49 56
	   4D 42 59 69 3D
	   3A 2C 2C 2C 3D
	   69 2B 3D 3B 3A
	   3A 3A 3A 3A 2C
	   20 20 20 20 20
	   20 3B 3B 00
 0000065D 20 20 20 20 20		Spock10 BYTE "           YX=YVIt+=,,:=VWBt;::::=,,:::;;;:;:     ;;;" , 0
	   20 20 20 20 20
	   20 59 58 3D 59
	   56 49 74 2B 3D
	   2C 2C 3A 3D 56
	   57 42 74 3B 3A
	   3A 3A 3A 3D 2C
	   2C 3A 3A 3A 3B
	   3B 3B 3A 3B 3A
	   20 20 20 20 20
	   3B 3B 3B 00
 00000693 20 20 20 20 20		Spock11 BYTE "           VMiXRttItIVRBBWRi:.tXXVVYItiIi==;:   ;;;; " , 0
	   20 20 20 20 20
	   20 56 4D 69 58
	   52 74 74 49 74
	   49 56 52 42 42
	   57 52 69 3A 2E
	   74 58 58 56 56
	   59 49 74 69 49
	   69 3D 3D 3B 3A
	   20 20 20 3B 3B
	   3B 3B 20 00
 000006C9 20 20 20 20 20		Spock12 BYTE "           =XIBWMMMBBBMRMBXi;,tXXRRXXXVYYt+;;: ;;;;; " , 0
	   20 20 20 20 20
	   20 3D 58 49 42
	   57 4D 4D 4D 42
	   42 42 4D 52 4D
	   42 58 69 3B 2C
	   74 58 58 52 52
	   58 58 58 56 59
	   59 74 2B 3B 3B
	   3A 20 3B 3B 3B
	   3B 3B 20 00
 000006FF 20 20 20 20 20		Spock13 BYTE "            =iBWWMMBBMBBWBY;;;,YXRRRRXXVIi;;;:;,;;;= " , 0
	   20 20 20 20 20
	   20 20 3D 69 42
	   57 57 4D 4D 42
	   42 4D 42 42 57
	   42 59 3B 3B 3B
	   2C 59 58 52 52
	   52 52 58 58 56
	   49 69 3B 3B 3B
	   3A 3B 2C 3B 3B
	   3B 3D 20 00
 00000735 20 20 20 20 20		Spock14 BYTE "             iXMMMMMWWBMWMY+;=+IXRRXXVYIi;:;;:,,;;=  " , 0
	   20 20 20 20 20
	   20 20 20 69 58
	   4D 4D 4D 4D 4D
	   57 57 42 4D 57
	   4D 59 2B 3B 3D
	   2B 49 58 52 52
	   58 58 56 59 49
	   69 3B 3A 3B 3B
	   3A 2C 2C 3B 3B
	   3D 20 20 00
 0000076B 20 20 20 20 20		Spock15 BYTE "             iBRBBMMMMYYXV+:,:;+XRXXVIt+;;:;++::;;;  " , 0
	   20 20 20 20 20
	   20 20 20 69 42
	   52 42 42 4D 4D
	   4D 4D 59 59 58
	   56 2B 3A 2C 3A
	   3B 2B 58 52 58
	   58 56 49 74 2B
	   3B 3B 3A 3B 2B
	   2B 3A 3A 3B 3B
	   3B 20 20 00
 000007A1 20 20 20 20 20		Spock16 BYTE "             =MRRRBMMBBYtt;::::;+VXVIi=;;;:;=+;;;;=  " , 0
	   20 20 20 20 20
	   20 20 20 3D 4D
	   52 52 52 42 4D
	   4D 42 42 59 74
	   74 3B 3A 3A 3A
	   3A 3B 2B 56 58
	   56 49 69 3D 3B
	   3B 3B 3A 3B 3D
	   2B 3B 3B 3B 3B
	   3D 20 20 00
 000007D7 20 20 20 20 20		Spock17 BYTE "              XBRBBBBBMMBRRVItttYYYYt=;;;;;;==:;=    " , 0
	   20 20 20 20 20
	   20 20 20 20 58
	   42 52 42 42 42
	   42 42 4D 4D 42
	   52 52 56 49 74
	   74 74 59 59 59
	   59 74 3D 3B 3B
	   3B 3B 3B 3B 3D
	   3D 3A 3B 3D 20
	   20 20 20 00
 0000080D 20 20 20 20 20		Spock18 BYTE "               VRRRRRBRRRRXRVYYIttiti=::;:::=;=      " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   56 52 52 52 52
	   52 42 52 52 52
	   52 58 52 56 59
	   59 49 74 74 69
	   74 69 3D 3A 3A
	   3B 3A 3A 3A 3D
	   3B 3D 20 20 20
	   20 20 20 00
 00000843 20 20 20 20 20		Spock19 BYTE "                YRRRRXXVIIYIiitt+++ii=:;:::;==       " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 59 52 52 52
	   52 58 58 56 49
	   49 59 49 69 69
	   74 74 2B 2B 2B
	   69 69 3D 3A 3B
	   3A 3A 3A 3B 3D
	   3D 20 20 20 20
	   20 20 20 00
 00000879 20 20 20 20 20		Spock20 BYTE "                +XRRXIIIIYVVI;i+=;=tt=;::::;:;       " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 58 52 52
	   58 49 49 49 49
	   59 56 56 49 3B
	   69 2B 3D 3B 3D
	   74 74 3D 3B 3A
	   3A 3A 3A 3B 3A
	   3B 20 20 20 20
	   20 20 20 00
 000008AF 20 20 20 20 20		Spock21 BYTE "                 tRRXXVYti++==;;;=iYt;:::::,;;       " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 74 52 52
	   58 58 56 59 74
	   69 2B 2B 3D 3D
	   3B 3B 3B 3D 69
	   59 74 3B 3A 3A
	   3A 3A 3A 2C 3B
	   3B 20 20 20 20
	   20 20 20 00
 000008E5 20 20 20 20 20		Spock22 BYTE "                  IXRRXVVVVYYItiitIIi=:::;,::;       " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 49 58
	   52 52 58 56 56
	   56 56 59 59 49
	   74 69 69 74 49
	   49 69 3D 3A 3A
	   3A 3B 2C 3A 3A
	   3B 20 20 20 20
	   20 20 20 00
 0000091B 20 20 20 20 20		Spock23 BYTE "                   tVXRRRBBRXVYYYIti;::::,::::       " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 74
	   56 58 52 52 52
	   42 42 52 58 56
	   59 59 59 49 74
	   69 3B 3A 3A 3A
	   3A 2C 3A 3A 3A
	   3A 20 20 20 20
	   20 20 20 00
 00000951 20 20 20 20 20		Spock24 BYTE "                    YVYVYYYYYItti+=:,,,,,:::::;      " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   59 56 59 56 59
	   59 59 59 59 49
	   74 74 69 2B 3D
	   3A 2C 2C 2C 2C
	   2C 3A 3A 3A 3A
	   3A 3B 20 20 20
	   20 20 20 00
 00000987 20 20 20 20 20		Spock25 BYTE "                    YRVI+==;;;;;:,,,,,,,:::::::      " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   59 52 56 49 2B
	   3D 3D 3B 3B 3B
	   3B 3B 3A 2C 2C
	   2C 2C 2C 2C 2C
	   3A 3A 3A 3A 3A
	   3A 3A 20 20 20
	   20 20 20 00

 000009BD 20 20 20 20 20		Texas1 BYTE "                                           " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 000009E9 4D 4D 50 27 27		Texas2 BYTE "MMP''MM''YMM" , 0
	   4D 4D 27 27 59
	   4D 4D 00
 000009F6 50 27 20 20 20		Texas3 BYTE "P'   MM   `7" , 0
	   4D 4D 20 20 20
	   60 37 00
 00000A03 20 20 20 20 20		Texas4 BYTE "     MM  .gP'Ya `7M'   `MF' ,6'Yb.  ,pP'Ybd	              __             " , 0
	   4D 4D 20 20 2E
	   67 50 27 59 61
	   20 60 37 4D 27
	   20 20 20 60 4D
	   46 27 20 2C 36
	   27 59 62 2E 20
	   20 2C 70 50 27
	   59 62 64 09 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000A4D 20 20 20 20 20		Texas5 BYTE "     MM ,M'   Yb  `VA ,V'  8)   MM  8I   `#	        _..-''--'----_.      " , 0
	   4D 4D 20 2C 4D
	   27 20 20 20 59
	   62 20 20 60 56
	   41 20 2C 56 27
	   20 20 38 29 20
	   20 20 4D 4D 20
	   20 38 49 20 20
	   20 60 23 09 20
	   20 20 20 20 20
	   20 20 5F 2E 2E
	   2D 27 27 2D 2D
	   27 2D 2D 2D 2D
	   5F 2E 20 20 20
	   20 20 20 00
 00000A97 20 20 20 20 20		Texas6 BYTE "     MM 8M''''''    XMX     ,pm9MM  `YMMMa.	      ,''.-''| .---/ _`-._   " , 0
	   4D 4D 20 38 4D
	   27 27 27 27 27
	   27 20 20 20 20
	   58 4D 58 20 20
	   20 20 20 2C 70
	   6D 39 4D 4D 20
	   20 60 59 4D 4D
	   4D 61 2E 09 20
	   20 20 20 20 20
	   2C 27 27 2E 2D
	   27 27 7C 20 2E
	   2D 2D 2D 2F 20
	   5F 60 2D 2E 5F
	   20 20 20 00
 00000AE1 20 20 20 20 20		Texas7 BYTE "     MM YM.    ,  ,V' VA.  8M   MM  L.   I8	    ,' \ \  ;| | ,/ / `-._`-." , 0
	   4D 4D 20 59 4D
	   2E 20 20 20 20
	   2C 20 20 2C 56
	   27 20 56 41 2E
	   20 20 38 4D 20
	   20 20 4D 4D 20
	   20 4C 2E 20 20
	   20 49 38 09 20
	   20 20 20 2C 27
	   20 5C 20 5C 20
	   20 3B 7C 20 7C
	   20 2C 2F 20 2F
	   20 60 2D 2E 5F
	   60 2D 2E 00
 00000B2B 20 20 20 2E 4A		Texas8 BYTE "   .JMML.`Mbmmd'.AM.   .MA.`Moo9^Yo.M9mmmP'	  ,' ,',\ \( | |// /,-._  / /" , 0
	   4D 4D 4C 2E 60
	   4D 62 6D 6D 64
	   27 2E 41 4D 2E
	   20 20 20 2E 4D
	   41 2E 60 4D 6F
	   6F 39 5E 59 6F
	   2E 4D 39 6D 6D
	   6D 50 27 09 20
	   20 2C 27 20 2C
	   27 2C 5C 20 5C
	   28 20 7C 20 7C
	   2F 2F 20 2F 2C
	   2D 2E 5F 20 20
	   2F 20 2F 00
 00000B75 09 20 20 20 20		Hold1 BYTE "	                       ,,        ,,	  ;.`. `,\ \`| |/ / |   )/ / " , 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2C
	   2C 20 20 20 20
	   20 20 20 20 2C
	   2C 09 20 20 3B
	   2E 60 2E 20 60
	   2C 5C 20 5C 60
	   7C 20 7C 2F 20
	   2F 20 7C 20 20
	   20 29 2F 20 2F
	   20 00
 00000BB8 09 60 37 4D 4D		Hold2 BYTE "	`7MMF'  `7MMF'       `7MM      `7MM	 / /`_`.\_\ \| /_.-.'-''/ /  " , 0
	   46 27 20 20 60
	   37 4D 4D 46 27
	   20 20 20 20 20
	   20 20 60 37 4D
	   4D 20 20 20 20
	   20 20 60 37 4D
	   4D 09 20 2F 20
	   2F 60 5F 60 2E
	   5C 5F 5C 20 5C
	   7C 20 2F 5F 2E
	   2D 2E 27 2D 27
	   27 2F 20 2F 20
	   20 00
 00000BFB 09 20 20 4D 4D		Hold3 BYTE "	  MM      MM           MM        MM	/ /_|_:.`. \ |;'`..')  / /   " , 0
	   20 20 20 20 20
	   20 4D 4D 20 20
	   20 20 20 20 20
	   20 20 20 20 4D
	   4D 20 20 20 20
	   20 20 20 20 4D
	   4D 09 2F 20 2F
	   5F 7C 5F 3A 2E
	   60 2E 20 5C 20
	   7C 3B 27 60 2E
	   2E 27 29 20 20
	   2F 20 2F 20 20
	   20 00
 00000C3E 09 20 20 4D 4D		Hold4 BYTE "	  MM      MM  ,pW'Wq.  MM   ,M''bMM	`-._`-._`.`.;`.\  ,'  / /    " , 0
	   20 20 20 20 20
	   20 4D 4D 20 20
	   2C 70 57 27 57
	   71 2E 20 20 4D
	   4D 20 20 20 2C
	   4D 27 27 62 4D
	   4D 09 60 2D 2E
	   5F 60 2D 2E 5F
	   60 2E 60 2E 3B
	   60 2E 5C 20 20
	   2C 27 20 20 2F
	   20 2F 20 20 20
	   20 00
 00000C81 09 20 20 4D 4D		Hold5 BYTE "	  MMmmmmmmMM 6W'   `Wb MM ,AP    MM	    `-._`.`/    ,'-._/ /     " , 0
	   6D 6D 6D 6D 6D
	   6D 4D 4D 20 36
	   57 27 20 20 20
	   60 57 62 20 4D
	   4D 20 2C 41 50
	   20 20 20 20 4D
	   4D 09 20 20 20
	   20 60 2D 2E 5F
	   60 2E 60 2F 20
	   20 20 20 2C 27
	   2D 2E 5F 2F 20
	   2F 20 20 20 20
	   20 00
 00000CC4 09 20 20 4D 4D		Hold6 BYTE "	  MM      MM 8M     M8 MM 8MI    MM	      : `-/     \`-.._/      " , 0
	   20 20 20 20 20
	   20 4D 4D 20 38
	   4D 20 20 20 20
	   20 4D 38 20 4D
	   4D 20 38 4D 49
	   20 20 20 20 4D
	   4D 09 20 20 20
	   20 20 20 3A 20
	   60 2D 2F 20 20
	   20 20 20 5C 60
	   2D 2E 2E 5F 2F
	   20 20 20 20 20
	   20 00
 00000D07 09 20 20 4D 4D		Hold7 BYTE "	  MM      MM YA.   ,A9 MM `Mb    MM	      |  :      ;._ (        " , 0
	   20 20 20 20 20
	   20 4D 4D 20 59
	   41 2E 20 20 20
	   2C 41 39 20 4D
	   4D 20 60 4D 62
	   20 20 20 20 4D
	   4D 09 20 20 20
	   20 20 20 7C 20
	   20 3A 20 20 20
	   20 20 20 3B 2E
	   5F 20 28 20 20
	   20 20 20 20 20
	   20 00
 00000D4A 09 2E 4A 4D 4D		Hold8 BYTE "	.JMML.  .JMML.`Ybmd9'.JMML.`Wbmd'MML.	      :  |      \  ` \       " , 0
	   4C 2E 20 20 2E
	   4A 4D 4D 4C 2E
	   60 59 62 6D 64
	   39 27 2E 4A 4D
	   4D 4C 2E 60 57
	   62 6D 64 27 4D
	   4D 4C 2E 09 20
	   20 20 20 20 20
	   3A 20 20 7C 20
	   20 20 20 20 20
	   5C 20 20 60 20
	   5C 20 20 20 20
	   20 20 20 00

 00000D8F 09 09 09 09 09		Em1 BYTE "																       \         \   |       " , 0
	   09 09 09 09 09
	   09 09 09 09 09
	   09 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   00
 00000DBD 09 20 20 20 20		Em2 BYTE "	    gp `7MM'''YMM			        :        :   ;       " , 0
	   67 70 20 60 37
	   4D 4D 27 27 27
	   59 4D 4D 09 09
	   09 20 20 20 20
	   20 20 20 20 3A
	   20 20 20 20 20
	   20 20 20 3A 20
	   20 20 3B 20 20
	   20 20 20 20 20
	   00
 00000DF0 09 20 20 20 20		Em3 BYTE "	    \/   MM    `7			        |           /        " , 0
	   5C 2F 20 20 20
	   4D 4D 20 20 20
	   20 60 37 09 09
	   09 20 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 20 20
	   00
 00000E23 09 20 20 20 20		Em4 BYTE "	    `'   MM   d    `7MMpMMMb.pMMMb.	        ;         ,'         " , 0
	   60 27 20 20 20
	   4D 4D 20 20 20
	   64 20 20 20 20
	   60 37 4D 4D 70
	   4D 4D 4D 62 2E
	   70 4D 4D 4D 62
	   2E 09 20 20 20
	   20 20 20 20 20
	   3B 20 20 20 20
	   20 20 20 20 20
	   2C 27 20 20 20
	   20 20 20 20 20
	   20 00
 00000E66 09 20 20 20 20		Em5 BYTE "	         MMmmMM      MM    MM    MM	       /         /           " , 0
	   20 20 20 20 20
	   4D 4D 6D 6D 4D
	   4D 20 20 20 20
	   20 20 4D 4D 20
	   20 20 20 4D 4D
	   20 20 20 20 4D
	   4D 09 20 20 20
	   20 20 20 20 2F
	   20 20 20 20 20
	   20 20 20 20 2F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 00
 00000EA9 09 20 20 20 20		Em6 BYTE "	         MM   Y  ,   MM    MM    MM	     /         /            " , 0
	   20 20 20 20 20
	   4D 4D 20 20 20
	   59 20 20 2C 20
	   20 20 4D 4D 20
	   20 20 20 4D 4D
	   20 20 20 20 4D
	   4D 09 20 20 20
	   20 20 2F 20 20
	   20 20 20 20 20
	   20 20 2F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000EEB 09 20 20 20 20		Em7 BYTE "	         MM     ,M   MM    MM    MM	              /             " , 0
	   20 20 20 20 20
	   4D 4D 20 20 20
	   20 20 2C 4D 20
	   20 20 4D 4D 20
	   20 20 20 4D 4D
	   20 20 20 20 4D
	   4D 09 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000F2D 09 20 20 20 20		Em8 BYTE "	       .JMMmmmmMMM .JMML  JMML  JMML." , 0
	   20 20 20 2E 4A
	   4D 4D 6D 6D 6D
	   6D 4D 4D 4D 20
	   2E 4A 4D 4D 4C
	   20 20 4A 4D 4D
	   4C 20 20 4A 4D
	   4D 4C 2E 00


 00000000			.code
 00000000			main PROC
 00000000  E8 00000068			call Welcome
 00000005  C7 05 00000103 R		mov ChipsPlayer, 1000
	   000003E8
 0000000F  C7 05 00000107 R		mov ChipsSpock, 1000
	   000003E8
 00000019				G1:
 00000019  E8 0000030C				Call Ante
 0000001E  E8 000001D6				Call Shuffel
 00000023  E8 0000024E				Call DealHand
 00000028  E8 00000703				Call HandSpock
 0000002D  E8 00000B9C				Call Bid
 00000032  E8 00000278				Call DealFlop
 00000037  E8 000006F4				Call HandSpock
 0000003C  E8 00000B8D				Call Bid
 00000041  E8 0000029A				Call DealTurn
 00000046  E8 000006E5				Call HandSpock
 0000004B  E8 00000B7E				Call Bid
 00000050  E8 000002B9				Call DealRiver
 00000055  E8 000006D6				Call HandSpock
 0000005A  E8 0000091F				Call HandPlayer
 0000005F  E8 00001559				Call CompareHand
 00000064  E2 B3			Loop G1

				exit
 00000066  6A 00	   *	    push   +000000000h
 00000068  E8 00000000 E   *	    call   ExitProcess
 0000006D			main ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000006D			Welcome PROC
				;Display welcome image
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000006D  E8 00000000 E		call Clrscr
 00000072  B8 00000002			mov eax, green
 00000077  E8 00000000 E		call SetTextColor

 0000007C  BA 000009BD R		mov edx, OFFSET Texas1
 00000081  E8 00000000 E		call WriteString
 00000086  E8 00000000 E		call Crlf
 0000008B  BA 000009E9 R		mov edx, OFFSET Texas2
 00000090  E8 00000000 E		call WriteString
 00000095  E8 00000000 E		call Crlf
 0000009A  BA 000009F6 R		mov edx, OFFSET Texas3
 0000009F  E8 00000000 E		call WriteString
 000000A4  E8 00000000 E		call Crlf
 000000A9  BA 00000A03 R		mov edx, OFFSET Texas4
 000000AE  E8 00000000 E		call WriteString
 000000B3  E8 00000000 E		call Crlf
 000000B8  BA 00000A4D R		mov edx, OFFSET Texas5
 000000BD  E8 00000000 E		call WriteString
 000000C2  E8 00000000 E		call Crlf
 000000C7  BA 00000A97 R		mov edx, OFFSET Texas6
 000000CC  E8 00000000 E		call WriteString
 000000D1  E8 00000000 E		call Crlf
 000000D6  BA 00000AE1 R		mov edx, OFFSET Texas7
 000000DB  E8 00000000 E		call WriteString
 000000E0  E8 00000000 E		call Crlf
 000000E5  BA 00000B2B R		mov edx, OFFSET Texas8
 000000EA  E8 00000000 E		call WriteString
 000000EF  E8 00000000 E		call Crlf

 000000F4  BA 00000B75 R		mov edx, OFFSET Hold1
 000000F9  E8 00000000 E		call WriteString
 000000FE  E8 00000000 E		call Crlf
 00000103  BA 00000BB8 R		mov edx, OFFSET Hold2
 00000108  E8 00000000 E		call WriteString
 0000010D  E8 00000000 E		call Crlf
 00000112  BA 00000BFB R		mov edx, OFFSET Hold3
 00000117  E8 00000000 E		call WriteString
 0000011C  E8 00000000 E		call Crlf
 00000121  BA 00000C3E R		mov edx, OFFSET Hold4
 00000126  E8 00000000 E		call WriteString
 0000012B  E8 00000000 E		call Crlf
 00000130  BA 00000C81 R		mov edx, OFFSET Hold5
 00000135  E8 00000000 E		call WriteString
 0000013A  E8 00000000 E		call Crlf
 0000013F  BA 00000CC4 R		mov edx, OFFSET Hold6
 00000144  E8 00000000 E		call WriteString
 00000149  E8 00000000 E		call Crlf
 0000014E  BA 00000D07 R		mov edx, OFFSET Hold7
 00000153  E8 00000000 E		call WriteString
 00000158  E8 00000000 E		call Crlf
 0000015D  BA 00000D4A R		mov edx, OFFSET Hold8
 00000162  E8 00000000 E		call WriteString
 00000167  E8 00000000 E		call Crlf

 0000016C  BA 00000D8F R		mov edx, OFFSET Em1
 00000171  E8 00000000 E		call WriteString
 00000176  E8 00000000 E		call Crlf
 0000017B  BA 00000DBD R		mov edx, OFFSET Em2
 00000180  E8 00000000 E		call WriteString
 00000185  E8 00000000 E		call Crlf
 0000018A  BA 00000DF0 R		mov edx, OFFSET Em3
 0000018F  E8 00000000 E		call WriteString
 00000194  E8 00000000 E		call Crlf
 00000199  BA 00000E23 R		mov edx, OFFSET Em4
 0000019E  E8 00000000 E		call WriteString
 000001A3  E8 00000000 E		call Crlf
 000001A8  BA 00000E66 R		mov edx, OFFSET Em5
 000001AD  E8 00000000 E		call WriteString
 000001B2  E8 00000000 E		call Crlf
 000001B7  BA 00000EA9 R		mov edx, OFFSET Em6
 000001BC  E8 00000000 E		call WriteString
 000001C1  E8 00000000 E		call Crlf
 000001C6  BA 00000EEB R		mov edx, OFFSET Em7
 000001CB  E8 00000000 E		call WriteString
 000001D0  E8 00000000 E		call Crlf
 000001D5  BA 00000F2D R		mov edx, OFFSET Em8
 000001DA  E8 00000000 E		call WriteString
 000001DF  E8 00000000 E		call Crlf
					
 000001E4  E8 00000000 E		call Crlf
 000001E9  B8 0000000F			mov eax, white
 000001EE  E8 00000000 E		call SetTextColor
 000001F3  E8 00000000 E		call readint
 000001F8  C3			ret
 000001F9			Welcome ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000001F9			Shuffel PROC																																							;
				;	Recieves: nothing																																					;
				;	Returns: Full/shuffled Deck																																			;
				;Adds 52 cards to the Deck 13 from each suit and shuffles them		Values 1-13 =Spades 14-26 Hearts 27-39 Clubs 40-52													;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 000001F9  B9 00000007		mov ecx, 7
 000001FE  B0 3C		mov al, 60
 00000200  BE 00000000		mov esi, 0
 00000205				EmptyHands:
 00000205  88 86 00000000 R			mov StraightS[esi], al
 0000020B  88 86 00000007 R			mov StraightP[esi], al
 00000211  04 02				add al, 2
 00000213  46					inc esi
 00000214  E2 EF			Loop EmptyHands

 00000216  B9 00000005		mov ecx, 5
 0000021B  B0 46		mov al, 70
 0000021D  BE 00000000		mov esi, 0
 00000222				EmptyTable:
 00000222  88 86 000000F6 R			mov Table[esi],al
 00000228  04 02				add al, 2
 0000022A  46					inc esi
 0000022B  E2 F5			Loop EmptyTable

 0000022D  B9 00000034		mov ecx, 52
 00000232  B2 00		mov dl, 0
 00000234  B0 02		mov al, 2
 00000236  BE 00000000		mov esi, 0
 0000023B				L0:
 0000023B  88 86 000000BE R			mov Deck[esi], al
 00000241  FE C0				inc al
 00000243  83 C6 01				add esi,TYPE Deck
 00000246  FE C2				inc dl
 00000248  E2 F1			Loop L0

 0000024A  B9 00000068		mov ecx, 104

 0000024F				S1:
 0000024F  B8 00000035				mov eax,53
 00000254  E8 00000000 E			call randomrange
 00000259  8B F0				mov esi, eax
 0000025B  8A 9E 000000BE R			mov bl,Deck[esi]
 00000261  A0 000000BE R			mov al, Deck[0]
 00000266  86 C3				xchg al,bl
 00000268  88 9E 000000BE R			mov Deck[esi], bl
 0000026E  A2 000000BE R			mov Deck[0], al
 00000273  E2 DA			Loop S1

 00000275  C3			ret
 00000276			Shuffel ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000276			DealHand PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to PlayerHand/SpockHand																														;
				;Procedure deals PlayerHand/SpockHand																																	;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000276  B9 00000002		mov ecx, 2
 0000027B  BE 00000000		mov esi, 0
 00000280  BB 00000000		mov ebx, 0

 00000285				H1:
 00000285  8A 83 000000BE R			mov al, Deck[ebx]
 0000028B  88 86 000000F2 R			mov PlayerHand[esi], al
 00000291  83 C3 01				add ebx, TYPE Deck
 00000294  8A 83 000000BE R			mov al, Deck [ebx]
 0000029A  88 86 000000F4 R			mov SpockHand[esi], al
 000002A0  83 C6 01				add esi, TYPE PlayerHand
 000002A3  83 C3 01				add ebx, TYPE Deck
 000002A6  E2 DD			Loop H1
 000002A8  89 1D 000000FB R	mov DeckMark,EBX
 000002AE  C3			ret
 000002AF			DealHand ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000002AF			DealFlop PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Dek to Flop																																		;
				;Procedure deals Flop																																					;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 000002AF  B9 00000003		mov ecx, 3
 000002B4  8B 1D 000000FB R	mov ebx, DeckMark
 000002BA  BF 00000000		mov edi,0

 000002BF				T1:
 000002BF  8A 83 000000BE R			mov al, Deck[ebx]
 000002C5  88 87 000000F6 R			mov Table[edi], al
 000002CB  83 C3 01				add ebx, TYPE Deck
 000002CE  83 C7 01				add edi, TYPE Table
 000002D1  E2 EC			Loop T1
 000002D3  89 3D 000000FF R	mov TableMark,edi
 000002D9  89 1D 000000FB R	mov DeckMark,ebx
 000002DF  C3			ret
 000002E0			DealFlop ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000002E0			DealTurn PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to Turn																																		;
				;Procedure skips a card for burn and deals Turn																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 000002E0  8B 1D 000000FB R	mov ebx, DeckMark
 000002E6  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 000002E9  8B 3D 000000FF R	mov edi, TableMark
 000002EF  8A 83 000000BE R	mov al, Deck[ebx]
 000002F5  88 87 000000F6 R	mov Table[edi],al
 000002FB  83 C3 01		add ebx, TYPE Deck
 000002FE  89 1D 000000FB R	mov DeckMark, EBX
 00000304  83 C7 01		add edi, TYPE Table
 00000307  89 3D 000000FF R	mov TableMark, edi

 0000030D  C3			ret
 0000030E			DealTurn ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000030E			DealRiver PROC																																							;
				;	Recieves: Deck																																						;
				;	Returns: Nothing																																					;
				;	Assigns cards from Deck to River																																	;
				;Procedure skips a card from Deck for burn and deals River																												;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 0000030E  8B 1D 000000FB R	mov ebx, DeckMark
 00000314  83 C3 01		add ebx, TYPE Deck		;;;;;;;;;THIS IS THE BURN
 00000317  8B 3D 000000FF R	mov edi, TableMark
 0000031D  8A 83 000000BE R	mov al, Deck[ebx]
 00000323  88 87 000000F6 R	mov Table[edi],al

 00000329  C3			ret
 0000032A			DealRiver ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000032A			Ante PROC																																								;
				;	Recieves: BigBlind, ChipsPlayer, ChipsSpock, ChipsTable,																											;
				;	Returns: ChipsPlayer(modified) ChipsSpock(modified), ChipTable(modified)																							;
				;	Big and Little blinds paid in for oppening bet																														;
				;Procedure Checks to ensure that player and spock have the chips to make bet if not game end call win/lose, change the value of chips									;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				.if(BigBlind > 0)
 0000032A  83 3D 0000010F R
	   00		   *	    cmp    BigBlind, 000h
 00000331  76 3A	   *	    jbe    @C0001
					
					.if(ChipsPlayer < 25)
 00000333  83 3D 00000103 R
	   19		   *	    cmp    ChipsPlayer, 019h
 0000033A  73 05	   *	    jae    @C0003
 0000033C  E8 00000222					call Lose
						.endif
					
						.if(ChipsSpock < 50)
 00000341		   *@C0003:
 00000341  83 3D 00000107 R
	   32		   *	    cmp    ChipsSpock, 032h
 00000348  73 05	   *	    jae    @C0005
 0000034A  E8 0000007F					call Win	
						.endif
					
 0000034F		   *@C0005:
 0000034F  83 2D 00000103 R			sub ChipsPlayer, 25
	   19
 00000356  83 05 0000010B R			add ChipsTable, 25
	   19
 0000035D  83 2D 00000107 R			sub ChipsSpock, 50
	   32
 00000364  83 05 0000010B R			add ChipsTable, 50
	   32

					.elseif (BigBlind<1)
 0000036B  EB 41	   *	    jmp    @C0007
 0000036D		   *@C0001:
 0000036D  83 3D 0000010F R
	   01		   *	    cmp    BigBlind, 001h
 00000374  73 38	   *	    jae    @C0008
					
						.if(ChipsPlayer < 50)
 00000376  83 3D 00000103 R
	   32		   *	    cmp    ChipsPlayer, 032h
 0000037D  73 05	   *	    jae    @C000A
 0000037F  E8 000001DF					call Lose
						.endif
					
						.if(ChipsSpock < 25)
 00000384		   *@C000A:
 00000384  83 3D 00000107 R
	   19		   *	    cmp    ChipsSpock, 019h
 0000038B  73 05	   *	    jae    @C000C
 0000038D  E8 0000003C					call Win	
						.endif
					
 00000392		   *@C000C:
 00000392  83 2D 00000103 R				sub ChipsPlayer, 50
	   32
 00000399  83 05 0000010B R				add ChipsTable, 50
	   32
 000003A0  83 2D 00000107 R				sub ChipsSpock, 25
	   19
 000003A7  83 05 0000010B R				add ChipsTable, 25
	   19
				.endif
 000003AE		   *@C0008:
 000003AE		   *@C0007:

 000003AE  A1 0000010F R	mov eax, BigBlind
				.if(BigBlind > 0)
 000003B3  83 3D 0000010F R
	   00		   *	    cmp    BigBlind, 000h
 000003BA  76 07	   *	    jbe    @C000E
 000003BC  B8 00000000			mov eax, 0
				.else
 000003C1  EB 05	   *	    jmp    @C0010
 000003C3		   *@C000E:
 000003C3  B8 00000001			mov eax, 1
				.endif
 000003C8		   *@C0010:
 000003C8  A3 0000010F R	mov bigblind,eax

 000003CD  C3			ret
 000003CE			Ante ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000003CE			Win PROC																																								;
				;	Recieves: PromptWinImage, PromptYouWin, PlayerChips																													;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000003CE  E8 00000000 E		call clrscr
 000003D3  BA 000004AD R		mov edx, OFFSET Spock2
 000003D8  E8 00000000 E		call WriteString
 000003DD  E8 00000000 E		call Crlf
 000003E2  BA 000004E3 R		mov edx, OFFSET Spock3
 000003E7  E8 00000000 E		call WriteString
 000003EC  E8 00000000 E		call Crlf
 000003F1  BA 00000519 R		mov edx, OFFSET Spock4
 000003F6  E8 00000000 E		call WriteString
 000003FB  E8 00000000 E		call Crlf
 00000400  BA 0000054F R		mov edx, OFFSET Spock5
 00000405  E8 00000000 E		call WriteString
 0000040A  E8 00000000 E		call Crlf
 0000040F  BA 00000585 R		mov edx, OFFSET Spock6
 00000414  E8 00000000 E		call WriteString
 00000419  E8 00000000 E		call Crlf
 0000041E  BA 000005BB R		mov edx, OFFSET Spock7
 00000423  E8 00000000 E		call WriteString
 00000428  E8 00000000 E		call Crlf
 0000042D  BA 000005F1 R		mov edx, OFFSET Spock8
 00000432  E8 00000000 E		call WriteString
 00000437  E8 00000000 E		call Crlf
 0000043C  BA 00000627 R		mov edx, OFFSET Spock9
 00000441  E8 00000000 E		call WriteString
 00000446  E8 00000000 E		call Crlf
 0000044B  BA 0000065D R		mov edx, OFFSET Spock10
 00000450  E8 00000000 E		call WriteString
 00000455  E8 00000000 E		call Crlf
 0000045A  BA 00000693 R		mov edx, OFFSET Spock11
 0000045F  E8 00000000 E		call WriteString
 00000464  E8 00000000 E		call Crlf
 00000469  BA 000006C9 R		mov edx, OFFSET Spock12
 0000046E  E8 00000000 E		call WriteString
 00000473  E8 00000000 E		call Crlf
 00000478  BA 000006FF R		mov edx, OFFSET Spock13
 0000047D  E8 00000000 E		call WriteString
 00000482  E8 00000000 E		call Crlf
 00000487  BA 00000735 R		mov edx, OFFSET Spock14
 0000048C  E8 00000000 E		call WriteString
 00000491  E8 00000000 E		call Crlf
 00000496  BA 0000076B R		mov edx, OFFSET Spock15
 0000049B  E8 00000000 E		call WriteString
 000004A0  E8 00000000 E		call Crlf
 000004A5  BA 000007A1 R		mov edx, OFFSET Spock16
 000004AA  E8 00000000 E		call WriteString
 000004AF  E8 00000000 E		call Crlf
 000004B4  BA 000007D7 R		mov edx, OFFSET Spock17
 000004B9  E8 00000000 E		call WriteString
 000004BE  E8 00000000 E		call Crlf
 000004C3  BA 0000080D R		mov edx, OFFSET Spock18
 000004C8  E8 00000000 E		call WriteString
 000004CD  E8 00000000 E		call Crlf
 000004D2  BA 00000843 R		mov edx, OFFSET Spock19
 000004D7  E8 00000000 E		call WriteString
 000004DC  E8 00000000 E		call Crlf
 000004E1  BA 00000879 R		mov edx, OFFSET Spock20
 000004E6  E8 00000000 E		call WriteString
 000004EB  E8 00000000 E		call Crlf
 000004F0  BA 000008AF R		mov edx, OFFSET Spock21
 000004F5  E8 00000000 E		call WriteString
 000004FA  E8 00000000 E		call Crlf
 000004FF  BA 000008E5 R		mov edx, OFFSET Spock22
 00000504  E8 00000000 E		call WriteString
 00000509  E8 00000000 E		call Crlf
 0000050E  BA 0000091B R		mov edx, OFFSET Spock23
 00000513  E8 00000000 E		call WriteString
 00000518  E8 00000000 E		call Crlf
 0000051D  BA 00000951 R		mov edx, OFFSET Spock24
 00000522  E8 00000000 E		call WriteString
 00000527  E8 00000000 E		call Crlf
 0000052C  BA 00000987 R		mov edx, OFFSET Spock25
 00000531  E8 00000000 E		call WriteString
 00000536  E8 00000000 E		call Crlf

 0000053B  E8 00000000 E		call Crlf
 00000540  E8 00000000 E		call CRLF
 00000545  BA 00000145 R		mov edx, OFFSET PromptYouWin
 0000054A  E8 00000000 E		call WriteString
 0000054F  A1 00000103 R		mov eax, ChipsPlayer
 00000554  E8 00000000 E		call WriteInt   
 00000559  E8 00000000 E		call CRLF
 0000055E  E8 0000019A			Call PlayAgain
 00000563			Win ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000563			Lose PROC																																								;
				;	Recieves: PromptLoseImage, PromptYouLose, PlayerChips																												;
				;	Returns: Nothing																																					;
				;	Display image and earnings, calls PlayAgain																															;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000563  E8 00000000 E		call Clrscr
 00000568  E8 00000000 E		call Crlf
 0000056D  BA 000004AD R		mov edx, OFFSET Spock2
 00000572  E8 00000000 E		call WriteString
 00000577  E8 00000000 E		call Crlf
 0000057C  BA 000004E3 R		mov edx, OFFSET Spock3
 00000581  E8 00000000 E		call WriteString
 00000586  E8 00000000 E		call Crlf
 0000058B  BA 00000519 R		mov edx, OFFSET Spock4
 00000590  E8 00000000 E		call WriteString
 00000595  E8 00000000 E		call Crlf
 0000059A  BA 0000054F R		mov edx, OFFSET Spock5
 0000059F  E8 00000000 E		call WriteString
 000005A4  E8 00000000 E		call Crlf
 000005A9  BA 00000585 R		mov edx, OFFSET Spock6
 000005AE  E8 00000000 E		call WriteString
 000005B3  E8 00000000 E		call Crlf
 000005B8  BA 000005BB R		mov edx, OFFSET Spock7
 000005BD  E8 00000000 E		call WriteString
 000005C2  E8 00000000 E		call Crlf
 000005C7  BA 000005F1 R		mov edx, OFFSET Spock8
 000005CC  E8 00000000 E		call WriteString
 000005D1  E8 00000000 E		call Crlf
 000005D6  BA 00000627 R		mov edx, OFFSET Spock9
 000005DB  E8 00000000 E		call WriteString
 000005E0  E8 00000000 E		call Crlf
 000005E5  BA 0000065D R		mov edx, OFFSET Spock10
 000005EA  E8 00000000 E		call WriteString
 000005EF  E8 00000000 E		call Crlf
 000005F4  BA 00000693 R		mov edx, OFFSET Spock11
 000005F9  E8 00000000 E		call WriteString
 000005FE  E8 00000000 E		call Crlf
 00000603  BA 000006C9 R		mov edx, OFFSET Spock12
 00000608  E8 00000000 E		call WriteString
 0000060D  E8 00000000 E		call Crlf
 00000612  BA 000006FF R		mov edx, OFFSET Spock13
 00000617  E8 00000000 E		call WriteString
 0000061C  E8 00000000 E		call Crlf
 00000621  BA 00000735 R		mov edx, OFFSET Spock14
 00000626  E8 00000000 E		call WriteString
 0000062B  E8 00000000 E		call Crlf
 00000630  BA 0000076B R		mov edx, OFFSET Spock15
 00000635  E8 00000000 E		call WriteString
 0000063A  E8 00000000 E		call Crlf
 0000063F  BA 000007A1 R		mov edx, OFFSET Spock16
 00000644  E8 00000000 E		call WriteString
 00000649  E8 00000000 E		call Crlf
 0000064E  BA 000007D7 R		mov edx, OFFSET Spock17
 00000653  E8 00000000 E		call WriteString
 00000658  E8 00000000 E		call Crlf
 0000065D  BA 0000080D R		mov edx, OFFSET Spock18
 00000662  E8 00000000 E		call WriteString
 00000667  E8 00000000 E		call Crlf
 0000066C  BA 00000843 R		mov edx, OFFSET Spock19
 00000671  E8 00000000 E		call WriteString
 00000676  E8 00000000 E		call Crlf
 0000067B  BA 00000879 R		mov edx, OFFSET Spock20
 00000680  E8 00000000 E		call WriteString
 00000685  E8 00000000 E		call Crlf
 0000068A  BA 000008AF R		mov edx, OFFSET Spock21
 0000068F  E8 00000000 E		call WriteString
 00000694  E8 00000000 E		call Crlf
 00000699  BA 000008E5 R		mov edx, OFFSET Spock22
 0000069E  E8 00000000 E		call WriteString
 000006A3  E8 00000000 E		call Crlf
 000006A8  BA 0000091B R		mov edx, OFFSET Spock23
 000006AD  E8 00000000 E		call WriteString
 000006B2  E8 00000000 E		call Crlf
 000006B7  BA 00000951 R		mov edx, OFFSET Spock24
 000006BC  E8 00000000 E		call WriteString
 000006C1  E8 00000000 E		call Crlf
 000006C6  BA 00000987 R		mov edx, OFFSET Spock25
 000006CB  E8 00000000 E		call WriteString
 000006D0  E8 00000000 E		call Crlf

 000006D5  E8 00000000 E		call Crlf
 000006DA  E8 00000000 E		call CRLF
 000006DF  BA 0000016F R		mov edx, OFFSET PromptYouLose
 000006E4  E8 00000000 E		call WriteString
 000006E9  A1 00000103 R		mov eax, ChipsPlayer
 000006EE  E8 00000000 E		call WriteInt   
 000006F3  E8 00000000 E		call CRLF
 000006F8  E8 00000000			Call PlayAgain
 000006FD			Lose ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000006FD			PlayAgain PROC																																							;
				;	Recieves: PromptPlayAgain																																			;
				;	Returns: Nothing																																					;
				;	Asks if you want to PlayAgain, if y call main/if n invoke exitproccess/if else prompbadinput																		;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000006FD  BA 000001A3 R		mov edx, OFFSET PromptPlayAgain
 00000702  E8 00000000 E		call WriteString
 00000707  E8 00000000 E		call Readint
						.if(eax==0)
 0000070C  0B C0	   *	    or	eax, eax
 0000070E  75 09	   *	    jne    @C0011
							INVOKE ExitProcess, 0
 00000710  6A 00	   *	    push   +000000000h
 00000712  E8 00000000 E   *	    call   ExitProcess
						.elseif(eax==1)
 00000717  EB 16	   *	    jmp    @C0013
 00000719		   *@C0011:
 00000719  83 F8 01	   *	    cmp    eax, 001h
 0000071C  75 07	   *	    jne    @C0014
 0000071E  E8 FFFFF8DD					call Main
						.else
 00000723  EB 0A	   *	    jmp    @C0016
 00000725		   *@C0014:
 00000725  A0 000001E1 R				mov al, PromptBadInput
 0000072A  E8 FFFFFFCE					call PlayAgain
						.endif
 0000072F		   *@C0016:
 0000072F		   *@C0013:
 0000072F  C3			ret
 00000730			PlayAgain ENDP


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000730			HandSpock PROC																																							;
				;	Recieves: Table, SpockHand, FullHandSpock																															;
				;	Returns: FullHandSpock																																				;
				;	Adds Spock and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000730  B8 00000000		mov eax, 0
 00000735  B9 00000005		mov ecx, 5
 0000073A				FSH1:	
 0000073A  8A 90 000000F6 R			mov dl, table[eax]																						;FullSpockHand1
 00000740  88 90 00000113 R			mov FullHandSpock[eax],dl		
 00000746  83 C0 01				add eax, TYPE FullHandSpock
 00000749  E2 EF			Loop FSH1																						
 0000074B  BB 00000000		mov ebx, 0
 00000750  B9 00000002		mov ecx, 2
 00000755				FSH2:																										;FullSpockHand2
 00000755  8A 93 000000F4 R			mov dl, SpockHand[ebx]
 0000075B  88 90 00000113 R			mov FullHandSpock[eax],dl
 00000761  83 C0 01				add eax, TYPE FullHandSpock
 00000764  83 C3 01				add ebx, TYPE SpockHand
 00000767  E2 EC			Loop FSH2

 00000769  A0 00000113 R	mov al, FullHandSpock[0]
 0000076E  A2 00000129 R	mov cards1.value,al
					.if(al >0 && al < 14)
 00000773  3C 00	   *	    cmp    al, 000h
 00000775  76 0D	   *	    jbe    @C0017
 00000777  3C 0E	   *	    cmp    al, 00Eh
 00000779  73 09	   *	    jae    @C0017
 0000077B  C6 05 0000012A R			mov cards1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000782  EB 31	   *	    jmp    @C001A
 00000784		   *@C0017:
 00000784  3C 0D	   *	    cmp    al, 00Dh
 00000786  76 0D	   *	    jbe    @C001B
 00000788  3C 1B	   *	    cmp    al, 01Bh
 0000078A  73 09	   *	    jae    @C001B
 0000078C  C6 05 0000012A R			mov cards1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000793  EB 20	   *	    jmp    @C001E
 00000795		   *@C001B:
 00000795  3C 1A	   *	    cmp    al, 01Ah
 00000797  76 0D	   *	    jbe    @C001F
 00000799  3C 28	   *	    cmp    al, 028h
 0000079B  73 09	   *	    jae    @C001F
 0000079D  C6 05 0000012A R			mov cards1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000007A4  EB 0F	   *	    jmp    @C0022
 000007A6		   *@C001F:
 000007A6  3C 27	   *	    cmp    al, 027h
 000007A8  76 0B	   *	    jbe    @C0023
 000007AA  3C 35	   *	    cmp    al, 035h
 000007AC  73 07	   *	    jae    @C0023
 000007AE  C6 05 0000012A R			mov cards1.suit, 4
	   04
					.endif
 000007B5		   *@C0023:
 000007B5		   *@C0022:
 000007B5		   *@C001E:
 000007B5		   *@C001A:
 000007B5  A0 00000114 R	mov al, FullHandSpock[1]
 000007BA  A2 0000012B R	mov cards2.value,al
					.if(al >0 && al < 14)
 000007BF  3C 00	   *	    cmp    al, 000h
 000007C1  76 0D	   *	    jbe    @C0026
 000007C3  3C 0E	   *	    cmp    al, 00Eh
 000007C5  73 09	   *	    jae    @C0026
 000007C7  C6 05 0000012C R			mov cards2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000007CE  EB 31	   *	    jmp    @C0029
 000007D0		   *@C0026:
 000007D0  3C 0D	   *	    cmp    al, 00Dh
 000007D2  76 0D	   *	    jbe    @C002A
 000007D4  3C 1B	   *	    cmp    al, 01Bh
 000007D6  73 09	   *	    jae    @C002A
 000007D8  C6 05 0000012C R			mov cards2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000007DF  EB 20	   *	    jmp    @C002D
 000007E1		   *@C002A:
 000007E1  3C 1A	   *	    cmp    al, 01Ah
 000007E3  76 0D	   *	    jbe    @C002E
 000007E5  3C 28	   *	    cmp    al, 028h
 000007E7  73 09	   *	    jae    @C002E
 000007E9  C6 05 0000012C R			mov cards2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000007F0  EB 0F	   *	    jmp    @C0031
 000007F2		   *@C002E:
 000007F2  3C 27	   *	    cmp    al, 027h
 000007F4  76 0B	   *	    jbe    @C0032
 000007F6  3C 35	   *	    cmp    al, 035h
 000007F8  73 07	   *	    jae    @C0032
 000007FA  C6 05 0000012C R			mov cards2.suit, 4
	   04
					.endif
 00000801		   *@C0032:
 00000801		   *@C0031:
 00000801		   *@C002D:
 00000801		   *@C0029:
 00000801  A0 00000115 R	mov al, FullHandSpock[2]
 00000806  A2 0000012D R	mov cards3.value,al
					.if(al >0 && al < 14)
 0000080B  3C 00	   *	    cmp    al, 000h
 0000080D  76 0D	   *	    jbe    @C0035
 0000080F  3C 0E	   *	    cmp    al, 00Eh
 00000811  73 09	   *	    jae    @C0035
 00000813  C6 05 0000012E R			mov cards3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000081A  EB 31	   *	    jmp    @C0038
 0000081C		   *@C0035:
 0000081C  3C 0D	   *	    cmp    al, 00Dh
 0000081E  76 0D	   *	    jbe    @C0039
 00000820  3C 1B	   *	    cmp    al, 01Bh
 00000822  73 09	   *	    jae    @C0039
 00000824  C6 05 0000012E R			mov cards3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000082B  EB 20	   *	    jmp    @C003C
 0000082D		   *@C0039:
 0000082D  3C 1A	   *	    cmp    al, 01Ah
 0000082F  76 0D	   *	    jbe    @C003D
 00000831  3C 28	   *	    cmp    al, 028h
 00000833  73 09	   *	    jae    @C003D
 00000835  C6 05 0000012E R			mov cards3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000083C  EB 0F	   *	    jmp    @C0040
 0000083E		   *@C003D:
 0000083E  3C 27	   *	    cmp    al, 027h
 00000840  76 0B	   *	    jbe    @C0041
 00000842  3C 35	   *	    cmp    al, 035h
 00000844  73 07	   *	    jae    @C0041
 00000846  C6 05 0000012E R			mov cards3.suit, 4
	   04
					.endif
 0000084D		   *@C0041:
 0000084D		   *@C0040:
 0000084D		   *@C003C:
 0000084D		   *@C0038:
 0000084D  A0 00000116 R	mov al, FullHandSpock[3]
 00000852  A2 0000012F R	mov cards4.value,al
					.if(al >0 && al < 14)
 00000857  3C 00	   *	    cmp    al, 000h
 00000859  76 0D	   *	    jbe    @C0044
 0000085B  3C 0E	   *	    cmp    al, 00Eh
 0000085D  73 09	   *	    jae    @C0044
 0000085F  C6 05 00000130 R			mov cards4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000866  EB 31	   *	    jmp    @C0047
 00000868		   *@C0044:
 00000868  3C 0D	   *	    cmp    al, 00Dh
 0000086A  76 0D	   *	    jbe    @C0048
 0000086C  3C 1B	   *	    cmp    al, 01Bh
 0000086E  73 09	   *	    jae    @C0048
 00000870  C6 05 00000130 R			mov cards4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000877  EB 20	   *	    jmp    @C004B
 00000879		   *@C0048:
 00000879  3C 1A	   *	    cmp    al, 01Ah
 0000087B  76 0D	   *	    jbe    @C004C
 0000087D  3C 28	   *	    cmp    al, 028h
 0000087F  73 09	   *	    jae    @C004C
 00000881  C6 05 00000130 R			mov cards4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000888  EB 0F	   *	    jmp    @C004F
 0000088A		   *@C004C:
 0000088A  3C 27	   *	    cmp    al, 027h
 0000088C  76 0B	   *	    jbe    @C0050
 0000088E  3C 35	   *	    cmp    al, 035h
 00000890  73 07	   *	    jae    @C0050
 00000892  C6 05 00000130 R			mov cards4.suit, 4
	   04
					.endif
 00000899		   *@C0050:
 00000899		   *@C004F:
 00000899		   *@C004B:
 00000899		   *@C0047:
 00000899  A0 00000117 R	mov al, FullHandSpock[4]
 0000089E  A2 00000131 R	mov cards5.value,al
					.if(al >0 && al < 14)
 000008A3  3C 00	   *	    cmp    al, 000h
 000008A5  76 0D	   *	    jbe    @C0053
 000008A7  3C 0E	   *	    cmp    al, 00Eh
 000008A9  73 09	   *	    jae    @C0053
 000008AB  C6 05 00000132 R			mov cards5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000008B2  EB 31	   *	    jmp    @C0056
 000008B4		   *@C0053:
 000008B4  3C 0D	   *	    cmp    al, 00Dh
 000008B6  76 0D	   *	    jbe    @C0057
 000008B8  3C 1B	   *	    cmp    al, 01Bh
 000008BA  73 09	   *	    jae    @C0057
 000008BC  C6 05 00000132 R			mov cards5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000008C3  EB 20	   *	    jmp    @C005A
 000008C5		   *@C0057:
 000008C5  3C 1A	   *	    cmp    al, 01Ah
 000008C7  76 0D	   *	    jbe    @C005B
 000008C9  3C 28	   *	    cmp    al, 028h
 000008CB  73 09	   *	    jae    @C005B
 000008CD  C6 05 00000132 R			mov cards5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000008D4  EB 0F	   *	    jmp    @C005E
 000008D6		   *@C005B:
 000008D6  3C 27	   *	    cmp    al, 027h
 000008D8  76 0B	   *	    jbe    @C005F
 000008DA  3C 35	   *	    cmp    al, 035h
 000008DC  73 07	   *	    jae    @C005F
 000008DE  C6 05 00000132 R			mov cards5.suit, 4
	   04
					.endif
 000008E5		   *@C005F:
 000008E5		   *@C005E:
 000008E5		   *@C005A:
 000008E5		   *@C0056:
 000008E5  A0 00000118 R	mov al, FullHandSpock[5]
 000008EA  A2 00000133 R	mov cards6.value,al
					.if(al >0 && al < 14)
 000008EF  3C 00	   *	    cmp    al, 000h
 000008F1  76 0D	   *	    jbe    @C0062
 000008F3  3C 0E	   *	    cmp    al, 00Eh
 000008F5  73 09	   *	    jae    @C0062
 000008F7  C6 05 00000134 R			mov cards6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000008FE  EB 31	   *	    jmp    @C0065
 00000900		   *@C0062:
 00000900  3C 0D	   *	    cmp    al, 00Dh
 00000902  76 0D	   *	    jbe    @C0066
 00000904  3C 1B	   *	    cmp    al, 01Bh
 00000906  73 09	   *	    jae    @C0066
 00000908  C6 05 00000134 R			mov cards6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000090F  EB 20	   *	    jmp    @C0069
 00000911		   *@C0066:
 00000911  3C 1A	   *	    cmp    al, 01Ah
 00000913  76 0D	   *	    jbe    @C006A
 00000915  3C 28	   *	    cmp    al, 028h
 00000917  73 09	   *	    jae    @C006A
 00000919  C6 05 00000134 R			mov cards6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000920  EB 0F	   *	    jmp    @C006D
 00000922		   *@C006A:
 00000922  3C 27	   *	    cmp    al, 027h
 00000924  76 0B	   *	    jbe    @C006E
 00000926  3C 35	   *	    cmp    al, 035h
 00000928  73 07	   *	    jae    @C006E
 0000092A  C6 05 00000134 R			mov cards6.suit, 4
	   04
					.endif
 00000931		   *@C006E:
 00000931		   *@C006D:
 00000931		   *@C0069:
 00000931		   *@C0065:
 00000931  A0 00000119 R	mov al, FullHandSpock[6]
 00000936  A2 00000135 R	mov cards7.value,al
					.if(al >0 && al < 14)
 0000093B  3C 00	   *	    cmp    al, 000h
 0000093D  76 0D	   *	    jbe    @C0071
 0000093F  3C 0E	   *	    cmp    al, 00Eh
 00000941  73 09	   *	    jae    @C0071
 00000943  C6 05 00000136 R			mov cards7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 0000094A  EB 31	   *	    jmp    @C0074
 0000094C		   *@C0071:
 0000094C  3C 0D	   *	    cmp    al, 00Dh
 0000094E  76 0D	   *	    jbe    @C0075
 00000950  3C 1B	   *	    cmp    al, 01Bh
 00000952  73 09	   *	    jae    @C0075
 00000954  C6 05 00000136 R			mov cards7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 0000095B  EB 20	   *	    jmp    @C0078
 0000095D		   *@C0075:
 0000095D  3C 1A	   *	    cmp    al, 01Ah
 0000095F  76 0D	   *	    jbe    @C0079
 00000961  3C 28	   *	    cmp    al, 028h
 00000963  73 09	   *	    jae    @C0079
 00000965  C6 05 00000136 R			mov cards7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 0000096C  EB 0F	   *	    jmp    @C007C
 0000096E		   *@C0079:
 0000096E  3C 27	   *	    cmp    al, 027h
 00000970  76 0B	   *	    jbe    @C007D
 00000972  3C 35	   *	    cmp    al, 035h
 00000974  73 07	   *	    jae    @C007D
 00000976  C6 05 00000136 R			mov cards7.suit, 4
	   04
					.endif
 0000097D		   *@C007D:
 0000097D		   *@C007C:
 0000097D		   *@C0078:
 0000097D		   *@C0074:
 0000097D  C3			ret
 0000097E			HandSpock ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000097E			HandPlayer PROC																																							;
				;	Recieves: Table, PlayerHand, FullHandPlayer																															;
				;	Returns: FullHandPlayer																																				;
				;	Adds Player and table together to make a full hand of available cards																								;
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000097E  B8 00000000		mov eax, 0
 00000983  B9 00000005		mov ecx, 5
 00000988				FPH1:																									;FullPlayerHand1
 00000988  8A 90 000000F6 R			mov dl, table[eax]																						
 0000098E  88 90 0000011A R			mov FullHandPlayer[eax], dl
 00000994  83 C0 01				add eax, TYPE FullHandPlayer
 00000997  E2 EF			Loop FPH1																						
 00000999  BB 00000000		mov ebx, 0
 0000099E  B9 00000002		mov ecx, 2
 000009A3				FPH2:																									;FullPlayerHand2
 000009A3  8A 93 000000F2 R			mov dl, PlayerHand[ebx]																						
 000009A9  88 90 0000011A R			mov FullHandPlayer[eax], dl
 000009AF  83 C0 01				add eax, TYPE FullHandPlayer
 000009B2  BB 00000001				mov ebx, TYPE PlayerHand
 000009B7  E2 EA			Loop FPH2

 000009B9  A0 0000011A R	mov al, FullHandplayer[0]
 000009BE  A2 00000137 R	mov cardp1.value,al
					.if(al >0 && al < 14)
 000009C3  3C 00	   *	    cmp    al, 000h
 000009C5  76 0D	   *	    jbe    @C0080
 000009C7  3C 0E	   *	    cmp    al, 00Eh
 000009C9  73 09	   *	    jae    @C0080
 000009CB  C6 05 00000138 R			mov cardp1.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 000009D2  EB 31	   *	    jmp    @C0083
 000009D4		   *@C0080:
 000009D4  3C 0D	   *	    cmp    al, 00Dh
 000009D6  76 0D	   *	    jbe    @C0084
 000009D8  3C 1B	   *	    cmp    al, 01Bh
 000009DA  73 09	   *	    jae    @C0084
 000009DC  C6 05 00000138 R			mov cardp1.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 000009E3  EB 20	   *	    jmp    @C0087
 000009E5		   *@C0084:
 000009E5  3C 1A	   *	    cmp    al, 01Ah
 000009E7  76 0D	   *	    jbe    @C0088
 000009E9  3C 28	   *	    cmp    al, 028h
 000009EB  73 09	   *	    jae    @C0088
 000009ED  C6 05 00000138 R			mov cardp1.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 000009F4  EB 0F	   *	    jmp    @C008B
 000009F6		   *@C0088:
 000009F6  3C 27	   *	    cmp    al, 027h
 000009F8  76 0B	   *	    jbe    @C008C
 000009FA  3C 35	   *	    cmp    al, 035h
 000009FC  73 07	   *	    jae    @C008C
 000009FE  C6 05 00000138 R			mov cardp1.suit, 4
	   04
					.endif
 00000A05		   *@C008C:
 00000A05		   *@C008B:
 00000A05		   *@C0087:
 00000A05		   *@C0083:
 00000A05  A0 0000011B R	mov al, FullHandplayer[1]
 00000A0A  A2 00000139 R	mov cardp2.value,al
					.if(al >0 && al < 14)
 00000A0F  3C 00	   *	    cmp    al, 000h
 00000A11  76 0D	   *	    jbe    @C008F
 00000A13  3C 0E	   *	    cmp    al, 00Eh
 00000A15  73 09	   *	    jae    @C008F
 00000A17  C6 05 0000013A R			mov cardp2.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000A1E  EB 31	   *	    jmp    @C0092
 00000A20		   *@C008F:
 00000A20  3C 0D	   *	    cmp    al, 00Dh
 00000A22  76 0D	   *	    jbe    @C0093
 00000A24  3C 1B	   *	    cmp    al, 01Bh
 00000A26  73 09	   *	    jae    @C0093
 00000A28  C6 05 0000013A R			mov cardp2.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000A2F  EB 20	   *	    jmp    @C0096
 00000A31		   *@C0093:
 00000A31  3C 1A	   *	    cmp    al, 01Ah
 00000A33  76 0D	   *	    jbe    @C0097
 00000A35  3C 28	   *	    cmp    al, 028h
 00000A37  73 09	   *	    jae    @C0097
 00000A39  C6 05 0000013A R			mov cardp2.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000A40  EB 0F	   *	    jmp    @C009A
 00000A42		   *@C0097:
 00000A42  3C 27	   *	    cmp    al, 027h
 00000A44  76 0B	   *	    jbe    @C009B
 00000A46  3C 35	   *	    cmp    al, 035h
 00000A48  73 07	   *	    jae    @C009B
 00000A4A  C6 05 0000013A R			mov cardp2.suit, 4
	   04
					.endif
 00000A51		   *@C009B:
 00000A51		   *@C009A:
 00000A51		   *@C0096:
 00000A51		   *@C0092:
 00000A51  A0 0000011C R	mov al, FullHandplayer[2]
 00000A56  A2 0000013B R	mov cardp3.value,al
					.if(al >0 && al < 14)
 00000A5B  3C 00	   *	    cmp    al, 000h
 00000A5D  76 0D	   *	    jbe    @C009E
 00000A5F  3C 0E	   *	    cmp    al, 00Eh
 00000A61  73 09	   *	    jae    @C009E
 00000A63  C6 05 0000013C R			mov cardp3.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000A6A  EB 31	   *	    jmp    @C00A1
 00000A6C		   *@C009E:
 00000A6C  3C 0D	   *	    cmp    al, 00Dh
 00000A6E  76 0D	   *	    jbe    @C00A2
 00000A70  3C 1B	   *	    cmp    al, 01Bh
 00000A72  73 09	   *	    jae    @C00A2
 00000A74  C6 05 0000013C R			mov cardp3.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000A7B  EB 20	   *	    jmp    @C00A5
 00000A7D		   *@C00A2:
 00000A7D  3C 1A	   *	    cmp    al, 01Ah
 00000A7F  76 0D	   *	    jbe    @C00A6
 00000A81  3C 28	   *	    cmp    al, 028h
 00000A83  73 09	   *	    jae    @C00A6
 00000A85  C6 05 0000013C R			mov cardp3.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000A8C  EB 0F	   *	    jmp    @C00A9
 00000A8E		   *@C00A6:
 00000A8E  3C 27	   *	    cmp    al, 027h
 00000A90  76 0B	   *	    jbe    @C00AA
 00000A92  3C 35	   *	    cmp    al, 035h
 00000A94  73 07	   *	    jae    @C00AA
 00000A96  C6 05 0000013C R			mov cardp3.suit, 4
	   04
					.endif
 00000A9D		   *@C00AA:
 00000A9D		   *@C00A9:
 00000A9D		   *@C00A5:
 00000A9D		   *@C00A1:
 00000A9D  A0 0000011D R	mov al, FullHandplayer[3]
 00000AA2  A2 0000013D R	mov cardp4.value,al
					.if(al >0 && al < 14)
 00000AA7  3C 00	   *	    cmp    al, 000h
 00000AA9  76 0D	   *	    jbe    @C00AD
 00000AAB  3C 0E	   *	    cmp    al, 00Eh
 00000AAD  73 09	   *	    jae    @C00AD
 00000AAF  C6 05 0000013E R			mov cardp4.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000AB6  EB 31	   *	    jmp    @C00B0
 00000AB8		   *@C00AD:
 00000AB8  3C 0D	   *	    cmp    al, 00Dh
 00000ABA  76 0D	   *	    jbe    @C00B1
 00000ABC  3C 1B	   *	    cmp    al, 01Bh
 00000ABE  73 09	   *	    jae    @C00B1
 00000AC0  C6 05 0000013E R			mov cardp4.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000AC7  EB 20	   *	    jmp    @C00B4
 00000AC9		   *@C00B1:
 00000AC9  3C 1A	   *	    cmp    al, 01Ah
 00000ACB  76 0D	   *	    jbe    @C00B5
 00000ACD  3C 28	   *	    cmp    al, 028h
 00000ACF  73 09	   *	    jae    @C00B5
 00000AD1  C6 05 0000013E R			mov cardp4.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000AD8  EB 0F	   *	    jmp    @C00B8
 00000ADA		   *@C00B5:
 00000ADA  3C 27	   *	    cmp    al, 027h
 00000ADC  76 0B	   *	    jbe    @C00B9
 00000ADE  3C 35	   *	    cmp    al, 035h
 00000AE0  73 07	   *	    jae    @C00B9
 00000AE2  C6 05 0000013E R			mov cardp4.suit, 4
	   04
					.endif
 00000AE9		   *@C00B9:
 00000AE9		   *@C00B8:
 00000AE9		   *@C00B4:
 00000AE9		   *@C00B0:
 00000AE9  A0 0000011E R	mov al, FullHandplayer[4]
 00000AEE  A2 0000013F R	mov cardp5.value,al
					.if(al >0 && al < 14)
 00000AF3  3C 00	   *	    cmp    al, 000h
 00000AF5  76 0D	   *	    jbe    @C00BC
 00000AF7  3C 0E	   *	    cmp    al, 00Eh
 00000AF9  73 09	   *	    jae    @C00BC
 00000AFB  C6 05 00000140 R			mov cardp5.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000B02  EB 31	   *	    jmp    @C00BF
 00000B04		   *@C00BC:
 00000B04  3C 0D	   *	    cmp    al, 00Dh
 00000B06  76 0D	   *	    jbe    @C00C0
 00000B08  3C 1B	   *	    cmp    al, 01Bh
 00000B0A  73 09	   *	    jae    @C00C0
 00000B0C  C6 05 00000140 R			mov cardp5.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000B13  EB 20	   *	    jmp    @C00C3
 00000B15		   *@C00C0:
 00000B15  3C 1A	   *	    cmp    al, 01Ah
 00000B17  76 0D	   *	    jbe    @C00C4
 00000B19  3C 28	   *	    cmp    al, 028h
 00000B1B  73 09	   *	    jae    @C00C4
 00000B1D  C6 05 00000140 R			mov cardp5.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000B24  EB 0F	   *	    jmp    @C00C7
 00000B26		   *@C00C4:
 00000B26  3C 27	   *	    cmp    al, 027h
 00000B28  76 0B	   *	    jbe    @C00C8
 00000B2A  3C 35	   *	    cmp    al, 035h
 00000B2C  73 07	   *	    jae    @C00C8
 00000B2E  C6 05 00000140 R			mov cardp5.suit, 4
	   04
					.endif
 00000B35		   *@C00C8:
 00000B35		   *@C00C7:
 00000B35		   *@C00C3:
 00000B35		   *@C00BF:
 00000B35  A0 0000011F R	mov al, FullHandplayer[5]
 00000B3A  A2 00000141 R	mov cardp6.value,al
					.if(al >0 && al < 14)
 00000B3F  3C 00	   *	    cmp    al, 000h
 00000B41  76 0D	   *	    jbe    @C00CB
 00000B43  3C 0E	   *	    cmp    al, 00Eh
 00000B45  73 09	   *	    jae    @C00CB
 00000B47  C6 05 00000142 R			mov cardp6.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000B4E  EB 31	   *	    jmp    @C00CE
 00000B50		   *@C00CB:
 00000B50  3C 0D	   *	    cmp    al, 00Dh
 00000B52  76 0D	   *	    jbe    @C00CF
 00000B54  3C 1B	   *	    cmp    al, 01Bh
 00000B56  73 09	   *	    jae    @C00CF
 00000B58  C6 05 00000142 R			mov cardp6.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000B5F  EB 20	   *	    jmp    @C00D2
 00000B61		   *@C00CF:
 00000B61  3C 1A	   *	    cmp    al, 01Ah
 00000B63  76 0D	   *	    jbe    @C00D3
 00000B65  3C 28	   *	    cmp    al, 028h
 00000B67  73 09	   *	    jae    @C00D3
 00000B69  C6 05 00000142 R			mov cardp6.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000B70  EB 0F	   *	    jmp    @C00D6
 00000B72		   *@C00D3:
 00000B72  3C 27	   *	    cmp    al, 027h
 00000B74  76 0B	   *	    jbe    @C00D7
 00000B76  3C 35	   *	    cmp    al, 035h
 00000B78  73 07	   *	    jae    @C00D7
 00000B7A  C6 05 00000142 R			mov cardp6.suit, 4
	   04
					.endif
 00000B81		   *@C00D7:
 00000B81		   *@C00D6:
 00000B81		   *@C00D2:
 00000B81		   *@C00CE:
 00000B81  A0 00000120 R	mov al, FullHandplayer[6]
 00000B86  A2 00000143 R	mov cardp7.value,al
					.if(al >0 && al < 14)
 00000B8B  3C 00	   *	    cmp    al, 000h
 00000B8D  76 0D	   *	    jbe    @C00DA
 00000B8F  3C 0E	   *	    cmp    al, 00Eh
 00000B91  73 09	   *	    jae    @C00DA
 00000B93  C6 05 00000144 R			mov cardp7.suit, 1																					;1=spade,2=heart,3=club,4=dimond
	   01
					.elseif(al > 13 && al < 27)
 00000B9A  EB 31	   *	    jmp    @C00DD
 00000B9C		   *@C00DA:
 00000B9C  3C 0D	   *	    cmp    al, 00Dh
 00000B9E  76 0D	   *	    jbe    @C00DE
 00000BA0  3C 1B	   *	    cmp    al, 01Bh
 00000BA2  73 09	   *	    jae    @C00DE
 00000BA4  C6 05 00000144 R			mov cardp7.suit, 2
	   02
					.elseif(al > 26 && al < 40)
 00000BAB  EB 20	   *	    jmp    @C00E1
 00000BAD		   *@C00DE:
 00000BAD  3C 1A	   *	    cmp    al, 01Ah
 00000BAF  76 0D	   *	    jbe    @C00E2
 00000BB1  3C 28	   *	    cmp    al, 028h
 00000BB3  73 09	   *	    jae    @C00E2
 00000BB5  C6 05 00000144 R			mov cardp7.suit, 3
	   03
					.elseif(al > 39 && al < 53)
 00000BBC  EB 0F	   *	    jmp    @C00E5
 00000BBE		   *@C00E2:
 00000BBE  3C 27	   *	    cmp    al, 027h
 00000BC0  76 0B	   *	    jbe    @C00E6
 00000BC2  3C 35	   *	    cmp    al, 035h
 00000BC4  73 07	   *	    jae    @C00E6
 00000BC6  C6 05 00000144 R			mov cardp7.suit, 4
	   04
					.endif
 00000BCD		   *@C00E6:
 00000BCD		   *@C00E5:
 00000BCD		   *@C00E1:
 00000BCD		   *@C00DD:
 00000BCD  C3				ret
 00000BCE			HandPlayer ENDP

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00000BCE			Bid PROC
				;Logic for spock ai biding if will lose then fold if hand value low bid low, if hand value high bid high, if out of chips fold
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00000BCE  E8 00002951		Call Display

 00000BD3  C7 05 0000007E R	mov ChipsCall, 0
	   00000000
 00000BDD  E8 00000653			call HandValue
				.if(FoldS == 1)
 00000BE2  83 3D 0000008E R
	   01		   *	    cmp    FoldS, 001h
 00000BE9  75 06	   *	    jne    @C00E9
 00000BEB  C3				ret
				.elseif(FoldP == 1)
 00000BEC  E9 00000643	   *	    jmp    @C00EB
 00000BF1		   *@C00E9:
 00000BF1  83 3D 00000092 R
	   01		   *	    cmp    FoldP, 001h
 00000BF8  75 06	   *	    jne    @C00EC
 00000BFA  C3				ret
				.elseif(bigblind == 1) ;spock bid first
 00000BFB  E9 00000634	   *	    jmp    @C00EE
 00000C00		   *@C00EC:
 00000C00  83 3D 0000010F R
	   01		   *	    cmp    BigBlind, 001h
 00000C07  0F 85 000002F3  *	    jne    @C00EF
 00000C0D  BA 0000020E R		mov edx, OFFSET PromptSpockTurn
 00000C12  E8 00000000 E		call WriteString
 00000C17  E8 00000000 E		call CRLF
						.if(SpockHandValue > 8)
 00000C1C  83 3D 000000BA R
	   08		   *	    cmp    SpockHandValue, 008h
 00000C23  76 39	   *	    jbe    @C00F1
 00000C25  8B 3D 00000107 R				mov edi, ChipsSpock
 00000C2B  29 3D 00000107 R				sub ChipsSpock, edi
 00000C31  89 3D 00000086 R				mov SpockBet,edi
 00000C37  01 3D 0000010B R				add ChipsTable, edi
 00000C3D  89 3D 0000007E R				mov ChipsCall, edi
							
 00000C43  BA 00000221 R				mov edx, OFFSET PromptSpockBet
 00000C48  E8 00000000 E				call WriteString
 00000C4D  8B C7					mov eax, edi
 00000C4F  E8 00000000 E				call writeint
 00000C54  E8 00000000 E				call CRLF

						.elseif(SpockHandValue > 4)
 00000C59  E9 000001A5	   *	    jmp    @C00F3
 00000C5E		   *@C00F1:
 00000C5E  83 3D 000000BA R
	   04		   *	    cmp    SpockHandValue, 004h
 00000C65  76 7A	   *	    jbe    @C00F4
							.if(ChipsSpock < 100)
 00000C67  83 3D 00000107 R
	   64		   *	    cmp    ChipsSpock, 064h
 00000C6E  73 39	   *	    jae    @C00F6
 00000C70  8B 3D 00000107 R					mov edi, ChipsSpock
 00000C76  29 3D 00000107 R					sub ChipsSpock, edi
 00000C7C  89 3D 00000086 R					mov SpockBet,edi
 00000C82  01 3D 0000010B R					add ChipsTable, edi
 00000C88  89 3D 0000007E R					mov ChipsCall, edi	
								
 00000C8E  BA 00000221 R					mov edx, OFFSET PromptSpockBet
 00000C93  E8 00000000 E					call WriteString
 00000C98  8B C7						mov eax, edi
 00000C9A  E8 00000000 E					call writeint
 00000C9F  E8 00000000 E					call CRLF		
							
							.else
 00000CA4  E9 0000015A	   *	    jmp    @C00F8
 00000CA9		   *@C00F6:
 00000CA9  BF 00000064						mov edi, 100
 00000CAE  29 3D 00000107 R					sub ChipsSpock, edi
 00000CB4  89 3D 00000086 R					mov SpockBet,edi
 00000CBA  01 3D 0000010B R					add ChipsTable, edi
 00000CC0  89 3D 0000007E R					mov ChipsCall, edi

 00000CC6  BA 00000221 R					mov edx, OFFSET PromptSpockBet
 00000CCB  E8 00000000 E					call WriteString
 00000CD0  8B C7						mov eax, edi
 00000CD2  E8 00000000 E					call writeint
 00000CD7  E8 00000000 E					call CRLF

							.endif
						.elseif(SpockHandValue > 1)
 00000CDC  E9 00000122	   *	    jmp    @C00F9
 00000CE1		   *@C00F4:
 00000CE1  83 3D 000000BA R
	   01		   *	    cmp    SpockHandValue, 001h
 00000CE8  76 7A	   *	    jbe    @C00FA
							.if(ChipsSpock < 50)
 00000CEA  83 3D 00000107 R
	   32		   *	    cmp    ChipsSpock, 032h
 00000CF1  73 39	   *	    jae    @C00FC
 00000CF3  8B 3D 00000107 R					mov edi, ChipsSpock
 00000CF9  29 3D 00000107 R					sub ChipsSpock, edi
 00000CFF  89 3D 00000086 R					mov SpockBet,edi
 00000D05  01 3D 0000010B R					add ChipsTable, edi
 00000D0B  89 3D 0000007E R					mov ChipsCall, edi

 00000D11  BA 00000221 R					mov edx, OFFSET PromptSpockBet
 00000D16  E8 00000000 E					call WriteString
 00000D1B  8B C7						mov eax, edi
 00000D1D  E8 00000000 E					call writeint
 00000D22  E8 00000000 E					call CRLF

							.else
 00000D27  E9 000000D7	   *	    jmp    @C00FE
 00000D2C		   *@C00FC:
 00000D2C  BF 00000032						mov edi, 50
 00000D31  29 3D 00000107 R					sub ChipsSpock, edi
 00000D37  89 3D 00000086 R					mov SpockBet,edi
 00000D3D  01 3D 0000010B R					add ChipsTable, edi
 00000D43  89 3D 0000007E R					mov ChipsCall, edi

 00000D49  BA 00000221 R					mov edx, OFFSET PromptSpockBet
 00000D4E  E8 00000000 E					call WriteString
 00000D53  8B C7						mov eax, edi
 00000D55  E8 00000000 E					call writeint
 00000D5A  E8 00000000 E					call CRLF

							.endif
						.elseif(HighCardS > 4)
 00000D5F  E9 0000009F	   *	    jmp    @C00FF
 00000D64		   *@C00FA:
 00000D64  80 3D 00000054 R
	   04		   *	    cmp    HighCards, 004h
 00000D6B  76 74	   *	    jbe    @C0100
							.if(ChipsSpock < 25)
 00000D6D  83 3D 00000107 R
	   19		   *	    cmp    ChipsSpock, 019h
 00000D74  73 36	   *	    jae    @C0102
 00000D76  8B 3D 00000107 R					mov edi, ChipsSpock
 00000D7C  29 3D 00000107 R					sub ChipsSpock, edi
 00000D82  89 3D 00000086 R					mov SpockBet,edi
 00000D88  01 3D 0000010B R					add ChipsTable, edi
 00000D8E  89 3D 0000007E R					mov ChipsCall, edi

 00000D94  BA 00000221 R					mov edx, OFFSET PromptSpockBet
 00000D99  E8 00000000 E					call WriteString
 00000D9E  8B C7						mov eax, edi
 00000DA0  E8 00000000 E					call writeint
 00000DA5  E8 00000000 E					call CRLF

							.else
 00000DAA  EB 57	   *	    jmp    @C0104
 00000DAC		   *@C0102:
 00000DAC  BF 00000019						mov edi, 25
 00000DB1  29 3D 00000107 R					sub ChipsSpock, edi
 00000DB7  89 3D 00000086 R					mov SpockBet, edi
 00000DBD  01 3D 0000010B R					add ChipsTable, edi
 00000DC3  89 3D 0000007E R					mov ChipsCall, edi

 00000DC9  BA 00000221 R					mov edx, OFFSET PromptSpockBet
 00000DCE  E8 00000000 E					call WriteString
 00000DD3  8B C7						mov eax, edi
 00000DD5  E8 00000000 E					call writeint
 00000DDA  E8 00000000 E					call CRLF

							.endif
						.elseif(HighCardS < 5)
 00000DDF  EB 22	   *	    jmp    @C0105
 00000DE1		   *@C0100:
 00000DE1  80 3D 00000054 R
	   05		   *	    cmp    HighCards, 005h
 00000DE8  73 19	   *	    jae    @C0106
 00000DEA  C7 05 0000008E R				mov FoldS, 1
	   00000001

 00000DF4  BA 00000249 R				mov edx, OFFSET PromptSpockFold
 00000DF9  E8 00000000 E				call WriteString
 00000DFE  E8 00000000 E				call CRLF
						.endif

 00000E03		   *@C0106:
 00000E03		   *@C0105:
 00000E03		   *@C00FF:
 00000E03		   *@C00F9:
 00000E03		   *@C00F3:
 00000E03		   *@C00F8:
 00000E03		   *@C00FE:
 00000E03		   *@C0104:
 00000E03  BA 00000283 R			mov edx, OFFSET PromptPlayerSecond
 00000E08  E8 00000000 E			call WriteString
 00000E0D  E8 00000000 E			call CRLF
 00000E12						BadInput1:
 00000E12  E8 00000000 E					Call ReadInt
									.if(eax==1)
 00000E17  83 F8 01	   *	    cmp    eax, 001h
 00000E1A  75 7D	   *	    jne    @C0108
 00000E1C  BA 000002C3 R							mov edx, OFFSET PromptPlayerRaise
 00000E21  E8 00000000 E							Call WriteString
 00000E26  E8 00000000 E							call readint
 00000E2B  E8 00000000 E							call CRLF
 00000E30  A3 0000007E R							mov ChipsCall, eax
 00000E35  8B 35 0000007E R							mov esi, ChipsCall
 00000E3B  03 C6								add eax, esi
 00000E3D  29 05 00000103 R							sub ChipsPlayer, eax
 00000E43  01 05 0000010B R							add ChipsTable, eax
 00000E49  8B 35 00000086 R							mov esi, SpockBet
 00000E4F  2B C6								sub eax, esi
											.if(ChipsSpock < eax)
 00000E51  39 05 00000107 R *	    cmp    ChipsSpock, eax
 00000E57  73 1F	   *	    jae    @C010A
 00000E59  C7 05 0000008E R									mov FoldS, 1
	   00000001
 00000E63  BA 00000249 R									mov edx, OFFSET PromptSpockFold
 00000E68  E8 00000000 E									call WriteString
 00000E6D  E8 00000000 E									call CRLF
 00000E72  C3											ret
											.else
 00000E73  E9 000003BC	   *	    jmp    @C010C
 00000E78		   *@C010A:
 00000E78  29 05 00000107 R									sub ChipsSpock, eax
 00000E7E  01 05 0000010B R									add ChipsTable, eax
 00000E84  BA 0000023D R									mov edx, OFFSET PromptSpockCall
 00000E89  E8 00000000 E									Call WriteString
 00000E8E  E8 00000000 E									call CRLF
 00000E93  C3											ret
											.endif
									.elseif(eax==2)
 00000E94  E9 0000039B	   *	    jmp    @C010D
 00000E99		   *@C0108:
 00000E99  83 F8 02	   *	    cmp    eax, 002h
 00000E9C  75 26	   *	    jne    @C010E
 00000E9E  BA 000002D6 R							mov edx, OFFSET PromptPlayerCall
 00000EA3  E8 00000000 E							Call WriteString
 00000EA8  E8 00000000 E							call CRLF
 00000EAD  A1 0000007E R							mov eax, ChipsCall
 00000EB2  29 05 00000103 R							sub ChipsPlayer, eax
 00000EB8  01 05 0000010B R							add ChipsTable, eax
 00000EBE  C3									ret
									.elseif(eax==0)
 00000EBF  E9 00000370	   *	    jmp    @C0110
 00000EC4		   *@C010E:
 00000EC4  0B C0	   *	    or	eax, eax
 00000EC6  75 1F	   *	    jne    @C0111
 00000EC8  C7 05 00000092 R							mov FoldP, 1
	   00000001
 00000ED2  BA 000002DB R							mov edx, OFFSET PromptPlayerFold
 00000ED7  E8 00000000 E							call WriteString
 00000EDC  E8 00000000 E							call CRLF
 00000EE1  C3									ret
									.else
 00000EE2  E9 0000034D	   *	    jmp    @C0113
 00000EE7		   *@C0111:
 00000EE7  BA 000001E1 R							mov edx, OFFSET PromptBadInput
 00000EEC  E8 00000000 E							Call WriteString
 00000EF1  E8 00000000 E							call CRLF
 00000EF6  E9 FFFFFF17								jmp BadInput1
									.endif
					
					.elseif(BigBlind==0)												;player turn
 00000EFB  E9 00000334	   *	    jmp    @C0114
 00000F00		   *@C00EF:
 00000F00  83 3D 0000010F R
	   00		   *	    cmp    BigBlind, 000h
 00000F07  0F 85 00000327  *	    jne    @C0115
 00000F0D  BA 000002B3 R			mov edx, OFFSET PromptPlayerTurn
 00000F12  E8 00000000 E			call WriteString
 00000F17  E8 00000000 E			call CRLF
 00000F1C  BA 00000255 R			mov edx, OFFSET PromptPlayerBet
 00000F21  E8 00000000 E			call WriteString
 00000F26  E8 00000000 E			call CRLF
 00000F2B						BadInput:
 00000F2B  E8 00000000 E					Call ReadInt
									.if(eax==1)
 00000F30  83 F8 01	   *	    cmp    eax, 001h
 00000F33  0F 85 0000029F  *	    jne    @C0117
 00000F39  BA 000002C3 R							mov edx, OFFSET PromptPlayerRaise
 00000F3E  E8 00000000 E							Call WriteString
 00000F43  E8 00000000 E							call readint
 00000F48  E8 00000000 E							call CRLF
 00000F4D  29 05 00000103 R							sub ChipsPlayer, eax
 00000F53  01 05 0000010B R							add ChipsTable, eax
 00000F59  A3 0000007E R							mov ChipsCall, eax
 00000F5E  83 C0 64								add eax, 100

											.if(ChipsSpock < edi)
 00000F61  39 3D 00000107 R *	    cmp    ChipsSpock, edi
 00000F67  73 1F	   *	    jae    @C0119
 00000F69  C7 05 0000008E R									mov FoldS, 1
	   00000001
 00000F73  BA 00000249 R									mov edx, OFFSET PromptSpockFold
 00000F78  E8 00000000 E									call WriteString
 00000F7D  E8 00000000 E									call CRLF
 00000F82  C3											ret
											.elseif(SpockHandValue < 1)
 00000F83  E9 0000024D	   *	    jmp    @C011B
 00000F88		   *@C0119:
 00000F88  83 3D 000000BA R
	   01		   *	    cmp    SpockHandValue, 001h
 00000F8F  0F 83 00000216  *	    jae    @C011C
														.if(SpockHandValue > 8)
 00000F95  83 3D 000000BA R
	   08		   *	    cmp    SpockHandValue, 008h
 00000F9C  76 3C	   *	    jbe    @C011E
 00000F9E  8B 3D 0000007E R												mov edi, ChipsCall
 00000FA4  83 C7 32													add edi, 50
 00000FA7  29 3D 00000107 R												sub ChipsSpock, edi
 00000FAD  89 3D 00000086 R												mov SpockBet,edi
 00000FB3  01 3D 0000010B R												add ChipsTable, edi
 00000FB9  89 3D 0000007E R												mov ChipsCall, edi
							
 00000FBF  BA 00000221 R												mov edx, OFFSET PromptSpockBet
 00000FC4  E8 00000000 E												call WriteString
 00000FC9  8B C7													mov eax, edi
 00000FCB  E8 00000000 E												call writeint
 00000FD0  E8 00000000 E												call CRLF

														.elseif(SpockHandValue > 4)
 00000FD5  E9 000001FB	   *	    jmp    @C0120
 00000FDA		   *@C011E:
 00000FDA  83 3D 000000BA R
	   04		   *	    cmp    SpockHandValue, 004h
 00000FE1  0F 86 0000008B  *	    jbe    @C0121
 00000FE7  8B 3D 0000007E R												mov edi, ChipsCall
 00000FED  83 C7 32													add edi, 50
															.if(ChipsSpock < edi)
 00000FF0  39 3D 00000107 R *	    cmp    ChipsSpock, edi
 00000FF6  73 42	   *	    jae    @C0123
 00000FF8  8B 3D 00000107 R													mov edi, ChipsSpock
 00000FFE  8B 3D 0000007E R													mov edi, ChipsCall
 00001004  83 C7 32														add edi, 50
 00001007  29 3D 00000107 R													sub ChipsSpock, edi
 0000100D  89 3D 00000086 R													mov SpockBet,edi
 00001013  01 3D 0000010B R													add ChipsTable, edi
 00001019  89 3D 0000007E R													mov ChipsCall, edi
							
 0000101F  BA 00000221 R													mov edx, OFFSET PromptSpockBet
 00001024  E8 00000000 E													call WriteString
 00001029  8B C7														mov eax, edi
 0000102B  E8 00000000 E													call writeint
 00001030  E8 00000000 E													call CRLF		
							
															.else
 00001035  E9 0000019B	   *	    jmp    @C0125
 0000103A		   *@C0123:
 0000103A  BF 00000032														mov edi, 50
 0000103F  29 3D 00000107 R													sub ChipsSpock, edi
 00001045  89 3D 00000086 R													mov SpockBet,edi
 0000104B  01 3D 0000010B R													add ChipsTable, edi
 00001051  89 3D 0000007E R													mov ChipsCall, edi

 00001057  BA 00000221 R													mov edx, OFFSET PromptSpockBet
 0000105C  E8 00000000 E													call WriteString
 00001061  8B C7														mov eax, edi
 00001063  E8 00000000 E													call writeint
 00001068  E8 00000000 E													call CRLF

															.endif
														.elseif(SpockHandValue > 1)
 0000106D  E9 00000163	   *	    jmp    @C0126
 00001072		   *@C0121:
 00001072  83 3D 000000BA R
	   01		   *	    cmp    SpockHandValue, 001h
 00001079  0F 86 00000082  *	    jbe    @C0127
 0000107F  8B 3D 0000007E R												mov edi, ChipsCall
 00001085  83 C7 19													add edi, 25
															.if(ChipsSpock < edi)
 00001088  39 3D 00000107 R *	    cmp    ChipsSpock, edi
 0000108E  73 39	   *	    jae    @C0129
 00001090  8B 3D 00000107 R													mov edi, ChipsSpock
 00001096  29 3D 00000107 R													sub ChipsSpock, edi
 0000109C  89 3D 00000086 R													mov SpockBet,edi
 000010A2  01 3D 0000010B R													add ChipsTable, edi
 000010A8  89 3D 0000007E R													mov ChipsCall, edi

 000010AE  BA 00000221 R													mov edx, OFFSET PromptSpockBet
 000010B3  E8 00000000 E													call WriteString
 000010B8  8B C7														mov eax, edi
 000010BA  E8 00000000 E													call writeint
 000010BF  E8 00000000 E													call CRLF

															.else
 000010C4  E9 0000010C	   *	    jmp    @C012B
 000010C9		   *@C0129:
 000010C9  BF 00000019														mov edi, 25
 000010CE  29 3D 00000107 R													sub ChipsSpock, edi
 000010D4  89 3D 00000086 R													mov SpockBet,edi
 000010DA  01 3D 0000010B R													add ChipsTable, edi
 000010E0  89 3D 0000007E R													mov ChipsCall, edi

 000010E6  BA 00000221 R													mov edx, OFFSET PromptSpockBet
 000010EB  E8 00000000 E													call WriteString
 000010F0  8B C7														mov eax, edi
 000010F2  E8 00000000 E													call writeint
 000010F7  E8 00000000 E													call CRLF

															.endif
														.elseif(HighCardS > 4)
 000010FC  E9 000000D4	   *	    jmp    @C012C
 00001101		   *@C0127:
 00001101  80 3D 00000054 R
	   04		   *	    cmp    HighCards, 004h
 00001108  76 7D	   *	    jbe    @C012D
 0000110A  8B 3D 0000007E R											mov edi, ChipsCall
															.if(ChipsSpock < edi)
 00001110  39 3D 00000107 R *	    cmp    ChipsSpock, edi
 00001116  73 39	   *	    jae    @C012F
 00001118  8B 3D 00000107 R													mov edi, ChipsSpock
 0000111E  29 3D 00000107 R													sub ChipsSpock, edi
 00001124  89 3D 00000086 R													mov SpockBet,edi
 0000112A  01 3D 0000010B R													add ChipsTable, edi
 00001130  89 3D 0000007E R													mov ChipsCall, edi

 00001136  BA 0000023D R													mov edx, OFFSET PromptSpockCall
 0000113B  E8 00000000 E													call WriteString
 00001140  8B C7														mov eax, edi
 00001142  E8 00000000 E													call writeint
 00001147  E8 00000000 E													call CRLF

															.else
 0000114C  E9 00000084	   *	    jmp    @C0131
 00001151		   *@C012F:
 00001151  8B 3D 0000007E R													mov edi, ChipsCall
 00001157  29 3D 00000107 R													sub ChipsSpock, edi
 0000115D  89 3D 00000086 R													mov SpockBet, edi
 00001163  01 3D 0000010B R													add ChipsTable, edi
 00001169  89 3D 0000007E R													mov ChipsCall, edi

 0000116F  BA 0000023D R													mov edx, OFFSET PromptSpockCall
 00001174  E8 00000000 E													call WriteString
 00001179  8B C7														mov eax, edi
 0000117B  E8 00000000 E													call writeint
 00001180  E8 00000000 E													call CRLF
								
															.endif
														.elseif(HighCardS < 5)
 00001185  EB 4E	   *	    jmp    @C0132
 00001187		   *@C012D:
 00001187  80 3D 00000054 R
	   05		   *	    cmp    HighCards, 005h
 0000118E  73 45	   *	    jae    @C0133
 00001190  C7 05 0000008E R												mov FoldS, 1
	   00000001
 0000119A  BA 00000249 R												mov edx, OFFSET PromptSpockFold
 0000119F  E8 00000000 E												call WriteString
 000011A4  E8 00000000 E												call CRLF
														.endif
											
											.elseif(SpockHandValue > 0)
 000011A9  EB 2A	   *	    jmp    @C0135
 000011AB		   *@C011C:
 000011AB  83 3D 000000BA R
	   00		   *	    cmp    SpockHandValue, 000h
 000011B2  76 21	   *	    jbe    @C0136
 000011B4  8B 3D 0000007E R									mov edi, ChipsCall
 000011BA  29 3D 00000107 R									sub ChipsSpock, edi
 000011C0  01 3D 0000010B R									add ChipsTable, edi
 000011C6  BA 0000023D R									mov edx, OFFSET PromptSpockCall
 000011CB  E8 00000000 E									call WriteString
 000011D0  E8 00000000 E									call CRLF			

											.endif
 000011D5		   *@C0136:
 000011D5		   *@C0135:
 000011D5		   *@C011B:
 000011D5		   *@C0133:
 000011D5		   *@C0132:
 000011D5		   *@C012C:
 000011D5		   *@C0126:
 000011D5		   *@C0120:
 000011D5		   *@C0125:
 000011D5		   *@C012B:
 000011D5		   *@C0131:
 000011D5  C3									ret

									.elseif(eax==2)
 000011D6  EB 5C	   *	    jmp    @C0138
 000011D8		   *@C0117:
 000011D8  83 F8 02	   *	    cmp    eax, 002h
 000011DB  75 23	   *	    jne    @C0139
 000011DD  BA 000002D6 R							mov edx, OFFSET PromptPlayerCall
 000011E2  E8 00000000 E							Call WriteString
 000011E7  E8 00000000 E							call CRLF
 000011EC  A1 0000007E R							mov eax, ChipsCall
 000011F1  29 05 00000103 R							sub ChipsPlayer, eax
 000011F7  01 05 0000010B R							add ChipsTable, eax
 000011FD  C3									ret
									.elseif(eax==0)
 000011FE  EB 34	   *	    jmp    @C013B
 00001200		   *@C0139:
 00001200  0B C0	   *	    or	eax, eax
 00001202  75 1C	   *	    jne    @C013C
 00001204  C7 05 00000092 R							mov FoldP, 1
	   00000001
 0000120E  BA 000002DB R							mov edx, OFFSET PromptPlayerFold
 00001213  E8 00000000 E							call WriteString
 00001218  E8 00000000 E							call CRLF
 0000121D  C3									ret
									.else
 0000121E  EB 14	   *	    jmp    @C013E
 00001220		   *@C013C:
 00001220  BA 000001E1 R							mov edx, OFFSET PromptBadInput
 00001225  E8 00000000 E							Call WriteString
 0000122A  E8 00000000 E							call CRLF
 0000122F  E9 FFFFFCF7								jmp BadInput
									.endif
				.endif
 00001234		   *@C013E:
 00001234		   *@C013B:
 00001234		   *@C0138:
 00001234		   *@C0115:
 00001234		   *@C0114:
 00001234		   *@C00EE:
 00001234		   *@C00EB:
 00001234		   *@C0113:
 00001234		   *@C0110:
 00001234		   *@C010D:
 00001234		   *@C010C:


 00001234  C3				ret
 00001235			Bid ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001235			HandValue PROC
				;clear hand values and reassess based on variables with stored data
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00001235  C7 05 0000000E R	mov isSpadeP, 0
	   00000000
 0000123F  C7 05 00000012 R	mov isHeartP, 0
	   00000000
 00001249  C7 05 00000016 R	mov isClubP, 0
	   00000000
 00001253  C7 05 0000001A R	mov isDimondP, 0
	   00000000
 0000125D  C7 05 0000001E R	mov isFlushP, 0
	   00000000
 00001267  C7 05 00000022 R	mov isSpadeS, 0
	   00000000
 00001271  C7 05 00000026 R	mov isHeartS, 0
	   00000000
 0000127B  C7 05 0000002A R	mov isClubS, 0
	   00000000
 00001285  C7 05 0000002E R	mov isDimondS, 0
	   00000000
 0000128F  C7 05 00000032 R	mov isFlushS, 0
	   00000000
 00001299  C7 05 00000036 R	mov isStraightS, 0
	   00000000
 000012A3  C7 05 0000003A R	mov isStraightP, 0
	   00000000

 000012AD  C7 05 0000003E R	mov RFp, 0
	   00000000
 000012B7  C7 05 00000042 R	mov RFs, 0
	   00000000
 000012C1  C6 05 00000046 R	mov HighFourS, 0
	   00
 000012C8  C6 05 00000047 R	mov HighFourP, 0
	   00
 000012CF  C6 05 00000048 R	mov HighThreeS, 0
	   00
 000012D6  C6 05 00000049 R	mov HighThreeP, 0
	   00
 000012DD  C6 05 0000004A R	mov High2PairS, 0
	   00
 000012E4  C6 05 0000004B R	mov High2PairP, 0
	   00
 000012EB  C6 05 0000004C R	mov Low2PairS, 0
	   00
 000012F2  C6 05 0000004D R	mov Low2PairP, 0
	   00
 000012F9  C6 05 0000004E R	mov PairS, 0
	   00
 00001300  C6 05 0000004F R	mov PairP, 0
	   00
 00001307  C6 05 00000050 R	mov HighPairS, 0
	   00
 0000130E  C6 05 00000051 R	mov HighPairP, 0
	   00
 00001315  C6 05 00000052 R	mov HighSts, 0
	   00
 0000131C  C6 05 00000053 R	mov HighStp, 0
	   00
 00001323  C6 05 00000054 R	mov HighCards, 0
	   00
 0000132A  C6 05 00000055 R	mov HighCardp, 0
	   00

 00001331  C7 05 00000056 R	mov PlayerRoyal, 0
	   00000000
 0000133B  C7 05 0000005A R	mov PlayerStraightFlush, 0
	   00000000
 00001345  C7 05 0000005E R	mov PlayerFour, 0
	   00000000
 0000134F  C7 05 00000062 R	mov PlayerFull, 0
	   00000000
 00001359  C7 05 00000066 R	mov PlayerFlush, 0
	   00000000
 00001363  C7 05 0000006A R	mov PlayerStraight, 0
	   00000000
 0000136D  C7 05 0000006E R	mov PlayerThree, 0
	   00000000
 00001377  C7 05 00000072 R	mov PlayerTwoPair, 0
	   00000000
 00001381  C7 05 00000076 R	mov PlayerOnePair, 0
	   00000000
 0000138B  C7 05 0000007A R	mov PlayerHandValue, 0
	   00000000

 00001395  C7 05 00000096 R	mov SpockRoyal, 0
	   00000000
 0000139F  C7 05 0000009A R	mov SpockStraightFlush, 0
	   00000000
 000013A9  C7 05 0000009E R	mov SpockFour, 0
	   00000000
 000013B3  C7 05 000000A2 R	mov SpockFull, 0
	   00000000
 000013BD  C7 05 000000A6 R	mov SpockFlush, 0
	   00000000
 000013C7  C7 05 000000AA R	mov SpockStraight, 0
	   00000000
 000013D1  C7 05 000000AE R	mov SpockThree, 0
	   00000000
 000013DB  C7 05 000000B2 R	mov SpockTwoPair, 0
	   00000000
 000013E5  C7 05 000000B6 R	mov SpockOnePair, 0
	   00000000
 000013EF  C7 05 000000BA R	mov SpockHandValue, 0
	   00000000

 000013F9  E8 00000341			call IsAFlush
 000013FE  E8 00000743			call IsAStraight
 00001403  E8 00001E15			call FourKind
 00001408  E8 00001F36			call ThreeKind
 0000140D  E8 00002024			call TwoPair
 00001412  E8 00001EF3			call FullHouse
 00001417  E8 000020F3			Call HighCard

					.if(SpockRoyal > 0)
 0000141C  83 3D 00000096 R
	   00		   *	    cmp    SpockRoyal, 000h
 00001423  76 0F	   *	    jbe    @C013F
 00001425  C7 05 000000BA R			mov SpockHandValue, 9
	   00000009
						.elseif(SpockStraightFlush > 0)
 0000142F  E9 000000B8	   *	    jmp    @C0141
 00001434		   *@C013F:
 00001434  83 3D 0000009A R
	   00		   *	    cmp    SpockStraightFlush, 000h
 0000143B  76 0F	   *	    jbe    @C0142
 0000143D  C7 05 000000BA R				mov SpockHandValue, 8
	   00000008
						.elseif(SpockFour > 0)
 00001447  E9 000000A0	   *	    jmp    @C0144
 0000144C		   *@C0142:
 0000144C  83 3D 0000009E R
	   00		   *	    cmp    SpockFour, 000h
 00001453  76 0F	   *	    jbe    @C0145
 00001455  C7 05 000000BA R				mov SpockHandValue, 7
	   00000007
						.elseif(SpockFull > 0)
 0000145F  E9 00000088	   *	    jmp    @C0147
 00001464		   *@C0145:
 00001464  83 3D 000000A2 R
	   00		   *	    cmp    SpockFull, 000h
 0000146B  76 0C	   *	    jbe    @C0148
 0000146D  C7 05 000000BA R				mov SpockHandValue, 6
	   00000006
						.elseif(SpockFlush > 0)
 00001477  EB 73	   *	    jmp    @C014A
 00001479		   *@C0148:
 00001479  83 3D 000000A6 R
	   00		   *	    cmp    SpockFlush, 000h
 00001480  76 0C	   *	    jbe    @C014B
 00001482  C7 05 000000BA R				mov SpockHandValue, 5
	   00000005
						.elseif(SpockStraight > 0)
 0000148C  EB 5E	   *	    jmp    @C014D
 0000148E		   *@C014B:
 0000148E  83 3D 000000AA R
	   00		   *	    cmp    SpockStraight, 000h
 00001495  76 0C	   *	    jbe    @C014E
 00001497  C7 05 000000BA R				mov SpockHandValue, 4
	   00000004
						.elseif(SpockThree > 0)
 000014A1  EB 49	   *	    jmp    @C0150
 000014A3		   *@C014E:
 000014A3  83 3D 000000AE R
	   00		   *	    cmp    SpockThree, 000h
 000014AA  76 0C	   *	    jbe    @C0151
 000014AC  C7 05 000000BA R				mov SpockHandValue, 3
	   00000003
						.elseif(SpockTwoPair > 0)
 000014B6  EB 34	   *	    jmp    @C0153
 000014B8		   *@C0151:
 000014B8  83 3D 000000B2 R
	   00		   *	    cmp    SpockTwoPair, 000h
 000014BF  76 0C	   *	    jbe    @C0154
 000014C1  C7 05 000000BA R				mov SpockHandValue, 2
	   00000002
						.elseif(SpockOnePair > 0)
 000014CB  EB 1F	   *	    jmp    @C0156
 000014CD		   *@C0154:
 000014CD  83 3D 000000B6 R
	   00		   *	    cmp    SpockOnePair, 000h
 000014D4  76 0C	   *	    jbe    @C0157
 000014D6  C7 05 000000BA R				mov SpockHandValue, 1
	   00000001
						.else
 000014E0  EB 0A	   *	    jmp    @C0159
 000014E2		   *@C0157:
 000014E2  C7 05 000000BA R				mov SpockHandValue,0
	   00000000
					.endif
 000014EC		   *@C0159:
 000014EC		   *@C0156:
 000014EC		   *@C0153:
 000014EC		   *@C0150:
 000014EC		   *@C014D:
 000014EC		   *@C014A:
 000014EC		   *@C0147:
 000014EC		   *@C0144:
 000014EC		   *@C0141:

					.if(PlayerRoyal > 0)
 000014EC  83 3D 00000056 R
	   00		   *	    cmp    PlayerRoyal, 000h
 000014F3  76 0F	   *	    jbe    @C015A
 000014F5  C7 05 0000007A R			mov PlayerHandValue, 9
	   00000009
						.elseif(PlayerStraightFlush > 0)
 000014FF  E9 000000B8	   *	    jmp    @C015C
 00001504		   *@C015A:
 00001504  83 3D 0000005A R
	   00		   *	    cmp    PlayerStraightFlush, 000h
 0000150B  76 0F	   *	    jbe    @C015D
 0000150D  C7 05 0000007A R				mov PlayerHandValue, 8
	   00000008
						.elseif(PlayerFour > 0)
 00001517  E9 000000A0	   *	    jmp    @C015F
 0000151C		   *@C015D:
 0000151C  83 3D 0000005E R
	   00		   *	    cmp    PlayerFour, 000h
 00001523  76 0F	   *	    jbe    @C0160
 00001525  C7 05 0000007A R				mov PlayerHandValue, 7
	   00000007
						.elseif(PlayerFull > 0)
 0000152F  E9 00000088	   *	    jmp    @C0162
 00001534		   *@C0160:
 00001534  83 3D 00000062 R
	   00		   *	    cmp    PlayerFull, 000h
 0000153B  76 0C	   *	    jbe    @C0163
 0000153D  C7 05 0000007A R				mov PlayerHandValue, 6
	   00000006
						.elseif(PlayerFlush > 0)
 00001547  EB 73	   *	    jmp    @C0165
 00001549		   *@C0163:
 00001549  83 3D 00000066 R
	   00		   *	    cmp    PlayerFlush, 000h
 00001550  76 0C	   *	    jbe    @C0166
 00001552  C7 05 0000007A R				mov PlayerHandValue, 5
	   00000005
						.elseif(PlayerStraight > 0)
 0000155C  EB 5E	   *	    jmp    @C0168
 0000155E		   *@C0166:
 0000155E  83 3D 0000006A R
	   00		   *	    cmp    PlayerStraight, 000h
 00001565  76 0C	   *	    jbe    @C0169
 00001567  C7 05 0000007A R				mov PlayerHandValue, 4
	   00000004
						.elseif(PlayerThree > 0)
 00001571  EB 49	   *	    jmp    @C016B
 00001573		   *@C0169:
 00001573  83 3D 0000006E R
	   00		   *	    cmp    PlayerThree, 000h
 0000157A  76 0C	   *	    jbe    @C016C
 0000157C  C7 05 0000007A R				mov PlayerHandValue, 3
	   00000003
						.elseif(PlayerTwoPair > 0)
 00001586  EB 34	   *	    jmp    @C016E
 00001588		   *@C016C:
 00001588  83 3D 00000072 R
	   00		   *	    cmp    PlayerTwoPair, 000h
 0000158F  76 0C	   *	    jbe    @C016F
 00001591  C7 05 0000007A R				mov PlayerHandValue, 2
	   00000002
						.elseif(PlayerOnePair > 0)
 0000159B  EB 1F	   *	    jmp    @C0171
 0000159D		   *@C016F:
 0000159D  83 3D 00000076 R
	   00		   *	    cmp    PlayerOnePair, 000h
 000015A4  76 0C	   *	    jbe    @C0172
 000015A6  C7 05 0000007A R				mov PlayerHandValue, 1
	   00000001
						.else
 000015B0  EB 0A	   *	    jmp    @C0174
 000015B2		   *@C0172:
 000015B2  C7 05 0000007A R				mov PlayerHandValue,0
	   00000000
					.endif 
 000015BC		   *@C0174:
 000015BC		   *@C0171:
 000015BC		   *@C016E:
 000015BC		   *@C016B:
 000015BC		   *@C0168:
 000015BC		   *@C0165:
 000015BC		   *@C0162:
 000015BC		   *@C015F:
 000015BC		   *@C015C:

 000015BC  C3				ret
 000015BD			HandValue ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 000015BD			CompareHand Proc
				;Looks at player hand value and compairs against eachother for win lose or tie
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 000015BD  E8 000027E0		Call DisplaySpock

 000015C2  E8 FFFFFC6E			Call HandValue


					.if(FoldS==1)
 000015C7  83 3D 0000008E R
	   01		   *	    cmp    FoldS, 001h
 000015CE  75 20	   *	    jne    @C0175
 000015D0  C7 05 000000BA R		mov SpockHandValue,0
	   00000000
 000015DA  C6 05 00000054 R		mov HighCards,0
	   00
 000015E1  BA 000004A0 R		mov EDX, OFFSET SFOLD
 000015E6  E8 00000000 E		Call writestring
 000015EB  E8 00000000 E		call crlf
				.endif
 000015F0		   *@C0175:

				.if(FoldP==1)
 000015F0  83 3D 00000092 R
	   01		   *	    cmp    FoldP, 001h
 000015F7  75 20	   *	    jne    @C0177
 000015F9  C7 05 0000007A R		mov PlayerHandValue,0
	   00000000
 00001603  C6 05 00000055 R		mov HighCardP,0
	   00
 0000160A  BA 00000492 R		mov edx, OFFSET Pfold
 0000160F  E8 00000000 E		Call writestring
 00001614  E8 00000000 E		call crlf
				.endif
 00001619		   *@C0177:

 00001619  8B 35 0000007A R		mov esi, PlayerHandValue
 0000161F  8B 3D 000000BA R		mov edi, SpockHandValue	
					
					.if(esi>edi)
 00001625  3B F7	   *	    cmp    esi, edi
 00001627  76 29	   *	    jbe    @C0179
 00001629  A1 0000010B R			mov eax, ChipsTable
 0000162E  01 05 00000103 R			add ChipsPlayer, eax
 00001634  C7 05 0000010B R			mov ChipsTable, 0
	   00000000
 0000163E  BA 0000044D R			mov EDX, OFFSET PromptHandWinP
 00001643  E8 00000000 E			call writestring
 00001648  E8 00000000 E			call crlf

					.elseif(edi>esi)
 0000164D  E9 000000A2	   *	    jmp    @C017B
 00001652		   *@C0179:
 00001652  3B FE	   *	    cmp    edi, esi
 00001654  76 26	   *	    jbe    @C017C
 00001656  A1 0000010B R			mov eax, ChipsTable
 0000165B  01 05 00000107 R			add ChipsSpock, eax
 00001661  C7 05 0000010B R			mov ChipsTable, 0
	   00000000
 0000166B  BA 00000462 R			mov EDX, OFFSET PromptHandWinS
 00001670  E8 00000000 E			call writestring
 00001675  E8 00000000 E			call crlf
					.else
 0000167A  EB 78	   *	    jmp    @C017E
 0000167C		   *@C017C:
 0000167C  A0 00000055 R			mov al, HighCardp
 00001681  8A 1D 00000054 R			mov bl, Highcards
							.if(al>bl)
 00001687  3A C3	   *	    cmp    al, bl
 00001689  76 17	   *	    jbe    @C017F
 0000168B  A1 0000010B R					mov eax, ChipsTable
 00001690  01 05 00000103 R					add ChipsPlayer, eax
 00001696  C7 05 0000010B R					mov ChipsTable, 0
	   00000000
							.elseif(bl>al)
 000016A0  EB 43	   *	    jmp    @C0181
 000016A2		   *@C017F:
 000016A2  3A D8	   *	    cmp    bl, al
 000016A4  76 17	   *	    jbe    @C0182
 000016A6  A1 0000010B R					mov eax, ChipsTable
 000016AB  01 05 00000107 R					add ChipsSpock, eax
 000016B1  C7 05 0000010B R					mov ChipsTable, 0
	   00000000
							.elseif(al==bl)
 000016BB  EB 28	   *	    jmp    @C0184
 000016BD		   *@C0182:
 000016BD  3A C3	   *	    cmp    al, bl
 000016BF  75 24	   *	    jne    @C0185
 000016C1  A1 0000010B R					mov eax, ChipsTable
 000016C6  BB 00000002						mov ebx, 2
 000016CB  2B D2						sub edx, edx
 000016CD  F7 F3						div ebx
 000016CF  01 05 00000107 R					add ChipsSpock, eax
 000016D5  01 05 00000103 R					add ChipsPlayer, eax
 000016DB  C7 05 0000010B R					mov ChipsTable, 0
	   00000000
							.endif
 000016E5		   *@C0185:
 000016E5		   *@C0184:
 000016E5		   *@C0181:
 000016E5  BA 00000476 R			mov EDX, OFFSET PromptHandWinT
 000016EA  E8 00000000 E			call writestring
 000016EF  E8 00000000 E			call crlf

					.endif
 000016F4		   *@C017E:
 000016F4		   *@C017B:
 000016F4  C7 05 00000092 R		mov FoldP, 0
	   00000000
 000016FE  C7 05 0000008E R		mov FoldS, 0
	   00000000
 00001708  E8 00003154			Call RoundWinner
 0000170D  C6 05 0000012A R		mov cards1.suit, 0
	   00
 00001714  C6 05 0000012C R		mov cards2.suit, 0
	   00
 0000171B  C6 05 0000012E R		mov cards3.suit, 0
	   00
 00001722  C6 05 00000130 R		mov cards4.suit, 0
	   00
 00001729  C6 05 00000132 R		mov cards5.suit, 0
	   00
 00001730  C6 05 00000134 R		mov cards6.suit, 0
	   00
 00001737  C6 05 00000136 R		mov cards7.suit, 0
	   00
 0000173E  C3				ret
 0000173F			CompareHand ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000173F			IsAFlush Proc
				;organize and calculate if person has 5 or more cards of same suit based off card.suit
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
				;Spock Check
					.if (cards1.suit == 1)
 0000173F  80 3D 0000012A R
	   01		   *	    cmp    cards1 . Suit, 001h
 00001746  75 06	   *	    jne    @C0187
 00001748  FF 05 00000022 R			inc IsSpadeS
					.endif
 0000174E		   *@C0187:
					.if (cards2.suit == 1)
 0000174E  80 3D 0000012C R
	   01		   *	    cmp    cards2 . Suit, 001h
 00001755  75 06	   *	    jne    @C0189
 00001757  FF 05 00000022 R			inc IsSpadeS
					.endif
 0000175D		   *@C0189:
					.if (cards3.suit == 1)
 0000175D  80 3D 0000012E R
	   01		   *	    cmp    cards3 . Suit, 001h
 00001764  75 06	   *	    jne    @C018B
 00001766  FF 05 00000022 R			inc IsSpadeS
					.endif
 0000176C		   *@C018B:
					.if (cards4.suit == 1)
 0000176C  80 3D 00000130 R
	   01		   *	    cmp    cards4 . Suit, 001h
 00001773  75 06	   *	    jne    @C018D
 00001775  FF 05 00000022 R			inc IsSpadeS
					.endif
 0000177B		   *@C018D:
					.if (cards5.suit == 1)
 0000177B  80 3D 00000132 R
	   01		   *	    cmp    cards5 . Suit, 001h
 00001782  75 06	   *	    jne    @C018F
 00001784  FF 05 00000022 R			inc IsSpadeS
					.endif
 0000178A		   *@C018F:
					.if (cards6.suit == 1)
 0000178A  80 3D 00000134 R
	   01		   *	    cmp    cards6 . Suit, 001h
 00001791  75 06	   *	    jne    @C0191
 00001793  FF 05 00000022 R			inc IsSpadeS
					.endif
 00001799		   *@C0191:
					.if (cards7.suit == 1)
 00001799  80 3D 00000136 R
	   01		   *	    cmp    cards7 . Suit, 001h
 000017A0  75 06	   *	    jne    @C0193
 000017A2  FF 05 00000022 R			inc IsSpadeS
					.endif
 000017A8		   *@C0193:

					.if (cards1.suit == 2)
 000017A8  80 3D 0000012A R
	   02		   *	    cmp    cards1 . Suit, 002h
 000017AF  75 06	   *	    jne    @C0195
 000017B1  FF 05 00000026 R			inc IsHeartS
					.endif
 000017B7		   *@C0195:
					.if (cards2.suit == 2)
 000017B7  80 3D 0000012C R
	   02		   *	    cmp    cards2 . Suit, 002h
 000017BE  75 06	   *	    jne    @C0197
 000017C0  FF 05 00000026 R			inc IsHeartS
					.endif
 000017C6		   *@C0197:
					.if (cards3.suit == 2)
 000017C6  80 3D 0000012E R
	   02		   *	    cmp    cards3 . Suit, 002h
 000017CD  75 06	   *	    jne    @C0199
 000017CF  FF 05 00000026 R			inc IsHeartS
					.endif
 000017D5		   *@C0199:
					.if (cards4.suit == 2)
 000017D5  80 3D 00000130 R
	   02		   *	    cmp    cards4 . Suit, 002h
 000017DC  75 06	   *	    jne    @C019B
 000017DE  FF 05 00000026 R			inc IsHeartS
					.endif
 000017E4		   *@C019B:
					.if (cards5.suit == 2)
 000017E4  80 3D 00000132 R
	   02		   *	    cmp    cards5 . Suit, 002h
 000017EB  75 06	   *	    jne    @C019D
 000017ED  FF 05 00000026 R			inc IsHeartS
					.endif
 000017F3		   *@C019D:
					.if (cards6.suit == 2)
 000017F3  80 3D 00000134 R
	   02		   *	    cmp    cards6 . Suit, 002h
 000017FA  75 06	   *	    jne    @C019F
 000017FC  FF 05 00000026 R			inc IsHeartS
					.endif
 00001802		   *@C019F:
					.if (cards7.suit == 2)
 00001802  80 3D 00000136 R
	   02		   *	    cmp    cards7 . Suit, 002h
 00001809  75 06	   *	    jne    @C01A1
 0000180B  FF 05 00000026 R			inc IsHeartS
					.endif
 00001811		   *@C01A1:

					.if (cards1.suit == 3)
 00001811  80 3D 0000012A R
	   03		   *	    cmp    cards1 . Suit, 003h
 00001818  75 06	   *	    jne    @C01A3
 0000181A  FF 05 0000002A R			inc IsClubS
					.endif
 00001820		   *@C01A3:
					.if (cards2.suit == 3)
 00001820  80 3D 0000012C R
	   03		   *	    cmp    cards2 . Suit, 003h
 00001827  75 06	   *	    jne    @C01A5
 00001829  FF 05 0000002A R			inc IsClubS
					.endif
 0000182F		   *@C01A5:
					.if (cards3.suit == 3)
 0000182F  80 3D 0000012E R
	   03		   *	    cmp    cards3 . Suit, 003h
 00001836  75 06	   *	    jne    @C01A7
 00001838  FF 05 0000002A R			inc IsClubS
					.endif
 0000183E		   *@C01A7:
					.if (cards4.suit == 3)
 0000183E  80 3D 00000130 R
	   03		   *	    cmp    cards4 . Suit, 003h
 00001845  75 06	   *	    jne    @C01A9
 00001847  FF 05 0000002A R			inc IsClubS
					.endif
 0000184D		   *@C01A9:
					.if (cards5.suit == 3)
 0000184D  80 3D 00000132 R
	   03		   *	    cmp    cards5 . Suit, 003h
 00001854  75 06	   *	    jne    @C01AB
 00001856  FF 05 0000002A R			inc IsClubS
					.endif
 0000185C		   *@C01AB:
					.if (cards6.suit == 3)
 0000185C  80 3D 00000134 R
	   03		   *	    cmp    cards6 . Suit, 003h
 00001863  75 06	   *	    jne    @C01AD
 00001865  FF 05 0000002A R			inc IsClubS
					.endif
 0000186B		   *@C01AD:
					.if (cards7.suit == 3)
 0000186B  80 3D 00000136 R
	   03		   *	    cmp    cards7 . Suit, 003h
 00001872  75 06	   *	    jne    @C01AF
 00001874  FF 05 0000002A R			inc IsClubS
					.endif
 0000187A		   *@C01AF:

					.if (cards1.suit == 4)
 0000187A  80 3D 0000012A R
	   04		   *	    cmp    cards1 . Suit, 004h
 00001881  75 06	   *	    jne    @C01B1
 00001883  FF 05 0000002E R			inc IsDimondS
					.endif
 00001889		   *@C01B1:
					.if (cards2.suit == 4)
 00001889  80 3D 0000012C R
	   04		   *	    cmp    cards2 . Suit, 004h
 00001890  75 06	   *	    jne    @C01B3
 00001892  FF 05 0000002E R			inc IsDimondS
					.endif
 00001898		   *@C01B3:
					.if (cards3.suit == 4)
 00001898  80 3D 0000012E R
	   04		   *	    cmp    cards3 . Suit, 004h
 0000189F  75 06	   *	    jne    @C01B5
 000018A1  FF 05 0000002E R			inc IsDimondS
					.endif
 000018A7		   *@C01B5:
					.if (cards4.suit == 4)
 000018A7  80 3D 00000130 R
	   04		   *	    cmp    cards4 . Suit, 004h
 000018AE  75 06	   *	    jne    @C01B7
 000018B0  FF 05 0000002E R			inc IsDimondS
					.endif
 000018B6		   *@C01B7:
					.if (cards5.suit == 4)
 000018B6  80 3D 00000132 R
	   04		   *	    cmp    cards5 . Suit, 004h
 000018BD  75 06	   *	    jne    @C01B9
 000018BF  FF 05 0000002E R			inc IsDimondS
					.endif
 000018C5		   *@C01B9:
					.if (cards6.suit == 4)
 000018C5  80 3D 00000134 R
	   04		   *	    cmp    cards6 . Suit, 004h
 000018CC  75 06	   *	    jne    @C01BB
 000018CE  FF 05 0000002E R			inc IsDimondS
					.endif
 000018D4		   *@C01BB:
					.if (cards7.suit == 4)
 000018D4  80 3D 00000136 R
	   04		   *	    cmp    cards7 . Suit, 004h
 000018DB  75 06	   *	    jne    @C01BD
 000018DD  FF 05 0000002E R			inc IsDimondS
					.endif
 000018E3		   *@C01BD:

					.if(IsSpadeS>4)
 000018E3  83 3D 00000022 R
	   04		   *	    cmp    isSpadeS, 004h
 000018EA  76 0A	   *	    jbe    @C01BF
 000018EC  C7 05 00000032 R			mov isFlushS, 1
	   00000001
					.endif
 000018F6		   *@C01BF:
					.if(IsHeartS>4)
 000018F6  83 3D 00000026 R
	   04		   *	    cmp    isHeartS, 004h
 000018FD  76 0A	   *	    jbe    @C01C1
 000018FF  C7 05 00000032 R			mov isFlushS, 1
	   00000001
					.endif
 00001909		   *@C01C1:
					.if(IsClubS>4)
 00001909  83 3D 0000002A R
	   04		   *	    cmp    isClubS, 004h
 00001910  76 0A	   *	    jbe    @C01C3
 00001912  C7 05 00000032 R			mov isFlushS, 1
	   00000001
					.endif
 0000191C		   *@C01C3:
					.if(IsDimondS>4)
 0000191C  83 3D 0000002E R
	   04		   *	    cmp    isDimondS, 004h
 00001923  76 0A	   *	    jbe    @C01C5
 00001925  C7 05 00000032 R			mov isFlushS, 1
	   00000001
					.endif
 0000192F		   *@C01C5:
					.if(isFlushS>0)
 0000192F  83 3D 00000032 R
	   00		   *	    cmp    isFlushS, 000h
 00001936  76 0A	   *	    jbe    @C01C7
 00001938  C7 05 000000A6 R			mov SpockFlush,1
	   00000001
					.endif
 00001942		   *@C01C7:

				;Player Check
					.if (cardp1.suit == 1)
 00001942  80 3D 00000138 R
	   01		   *	    cmp    cardp1 . Suit, 001h
 00001949  75 06	   *	    jne    @C01C9
 0000194B  FF 05 0000000E R			inc IsSpadeP
					.endif
 00001951		   *@C01C9:
					.if (cardp2.suit == 1)
 00001951  80 3D 0000013A R
	   01		   *	    cmp    cardp2 . Suit, 001h
 00001958  75 06	   *	    jne    @C01CB
 0000195A  FF 05 0000000E R			inc IsSpadeP
					.endif
 00001960		   *@C01CB:
					.if (cardp3.suit == 1)
 00001960  80 3D 0000013C R
	   01		   *	    cmp    cardp3 . Suit, 001h
 00001967  75 06	   *	    jne    @C01CD
 00001969  FF 05 0000000E R			inc IsSpadeP
					.endif
 0000196F		   *@C01CD:
					.if (cardp4.suit == 1)
 0000196F  80 3D 0000013E R
	   01		   *	    cmp    cardp4 . Suit, 001h
 00001976  75 06	   *	    jne    @C01CF
 00001978  FF 05 0000000E R			inc IsSpadeP
					.endif
 0000197E		   *@C01CF:
					.if (cardp5.suit == 1)
 0000197E  80 3D 00000140 R
	   01		   *	    cmp    cardp5 . Suit, 001h
 00001985  75 06	   *	    jne    @C01D1
 00001987  FF 05 0000000E R			inc IsSpadeP
					.endif
 0000198D		   *@C01D1:
					.if (cardp6.suit == 1)
 0000198D  80 3D 00000142 R
	   01		   *	    cmp    cardp6 . Suit, 001h
 00001994  75 06	   *	    jne    @C01D3
 00001996  FF 05 0000000E R			inc IsSpadeP
					.endif
 0000199C		   *@C01D3:
					.if (cardp7.suit == 1)
 0000199C  80 3D 00000144 R
	   01		   *	    cmp    cardp7 . Suit, 001h
 000019A3  75 06	   *	    jne    @C01D5
 000019A5  FF 05 0000000E R			inc IsSpadeP
					.endif
 000019AB		   *@C01D5:

					.if (cardp1.suit == 2)
 000019AB  80 3D 00000138 R
	   02		   *	    cmp    cardp1 . Suit, 002h
 000019B2  75 06	   *	    jne    @C01D7
 000019B4  FF 05 00000012 R			inc IsHeartP
					.endif
 000019BA		   *@C01D7:
					.if (cardp2.suit == 2)
 000019BA  80 3D 0000013A R
	   02		   *	    cmp    cardp2 . Suit, 002h
 000019C1  75 06	   *	    jne    @C01D9
 000019C3  FF 05 00000012 R			inc IsHeartP
					.endif
 000019C9		   *@C01D9:
					.if (cardp3.suit == 2)
 000019C9  80 3D 0000013C R
	   02		   *	    cmp    cardp3 . Suit, 002h
 000019D0  75 06	   *	    jne    @C01DB
 000019D2  FF 05 00000012 R			inc IsHeartP
					.endif
 000019D8		   *@C01DB:
					.if (cardp4.suit == 2)
 000019D8  80 3D 0000013E R
	   02		   *	    cmp    cardp4 . Suit, 002h
 000019DF  75 06	   *	    jne    @C01DD
 000019E1  FF 05 00000012 R			inc IsHeartP
					.endif
 000019E7		   *@C01DD:
					.if (cardp5.suit == 2)
 000019E7  80 3D 00000140 R
	   02		   *	    cmp    cardp5 . Suit, 002h
 000019EE  75 06	   *	    jne    @C01DF
 000019F0  FF 05 00000012 R			inc IsHeartP
					.endif
 000019F6		   *@C01DF:
					.if (cardp6.suit == 2)
 000019F6  80 3D 00000142 R
	   02		   *	    cmp    cardp6 . Suit, 002h
 000019FD  75 06	   *	    jne    @C01E1
 000019FF  FF 05 00000012 R			inc IsHeartP
					.endif
 00001A05		   *@C01E1:
					.if (cardp7.suit == 2)
 00001A05  80 3D 00000144 R
	   02		   *	    cmp    cardp7 . Suit, 002h
 00001A0C  75 06	   *	    jne    @C01E3
 00001A0E  FF 05 00000012 R			inc IsHeartP
					.endif
 00001A14		   *@C01E3:

					.if (cardp1.suit == 3)
 00001A14  80 3D 00000138 R
	   03		   *	    cmp    cardp1 . Suit, 003h
 00001A1B  75 06	   *	    jne    @C01E5
 00001A1D  FF 05 00000016 R			inc IsClubP
					.endif
 00001A23		   *@C01E5:
					.if (cardp2.suit == 3)
 00001A23  80 3D 0000013A R
	   03		   *	    cmp    cardp2 . Suit, 003h
 00001A2A  75 06	   *	    jne    @C01E7
 00001A2C  FF 05 00000016 R			inc IsClubP
					.endif
 00001A32		   *@C01E7:
					.if (cardp3.suit == 3)
 00001A32  80 3D 0000013C R
	   03		   *	    cmp    cardp3 . Suit, 003h
 00001A39  75 06	   *	    jne    @C01E9
 00001A3B  FF 05 00000016 R			inc IsClubP
					.endif
 00001A41		   *@C01E9:
					.if (cardp4.suit == 3)
 00001A41  80 3D 0000013E R
	   03		   *	    cmp    cardp4 . Suit, 003h
 00001A48  75 06	   *	    jne    @C01EB
 00001A4A  FF 05 00000016 R			inc IsClubP
					.endif
 00001A50		   *@C01EB:
					.if (cardp5.suit == 3)
 00001A50  80 3D 00000140 R
	   03		   *	    cmp    cardp5 . Suit, 003h
 00001A57  75 06	   *	    jne    @C01ED
 00001A59  FF 05 00000016 R			inc IsClubP
					.endif
 00001A5F		   *@C01ED:
					.if (cardp6.suit == 3)
 00001A5F  80 3D 00000142 R
	   03		   *	    cmp    cardp6 . Suit, 003h
 00001A66  75 06	   *	    jne    @C01EF
 00001A68  FF 05 00000016 R			inc IsClubP
					.endif
 00001A6E		   *@C01EF:
					.if (cardp7.suit == 3)
 00001A6E  80 3D 00000144 R
	   03		   *	    cmp    cardp7 . Suit, 003h
 00001A75  75 06	   *	    jne    @C01F1
 00001A77  FF 05 00000016 R			inc IsClubP
					.endif
 00001A7D		   *@C01F1:

					.if (cardp1.suit == 4)
 00001A7D  80 3D 00000138 R
	   04		   *	    cmp    cardp1 . Suit, 004h
 00001A84  75 06	   *	    jne    @C01F3
 00001A86  FF 05 0000001A R			inc IsDimondP
					.endif
 00001A8C		   *@C01F3:
					.if (cardp2.suit == 4)
 00001A8C  80 3D 0000013A R
	   04		   *	    cmp    cardp2 . Suit, 004h
 00001A93  75 06	   *	    jne    @C01F5
 00001A95  FF 05 0000001A R			inc IsDimondP
					.endif
 00001A9B		   *@C01F5:
					.if (cardp3.suit == 4)
 00001A9B  80 3D 0000013C R
	   04		   *	    cmp    cardp3 . Suit, 004h
 00001AA2  75 06	   *	    jne    @C01F7
 00001AA4  FF 05 0000001A R			inc IsDimondP
					.endif
 00001AAA		   *@C01F7:
					.if (cardp4.suit == 4)
 00001AAA  80 3D 0000013E R
	   04		   *	    cmp    cardp4 . Suit, 004h
 00001AB1  75 06	   *	    jne    @C01F9
 00001AB3  FF 05 0000001A R			inc IsDimondP
					.endif
 00001AB9		   *@C01F9:
					.if (cardp5.suit == 4)
 00001AB9  80 3D 00000140 R
	   04		   *	    cmp    cardp5 . Suit, 004h
 00001AC0  75 06	   *	    jne    @C01FB
 00001AC2  FF 05 0000001A R			inc IsDimondP
					.endif
 00001AC8		   *@C01FB:
					.if (cardp6.suit == 4)
 00001AC8  80 3D 00000142 R
	   04		   *	    cmp    cardp6 . Suit, 004h
 00001ACF  75 06	   *	    jne    @C01FD
 00001AD1  FF 05 0000001A R			inc IsDimondP
					.endif
 00001AD7		   *@C01FD:
					.if (cardp7.suit == 4)
 00001AD7  80 3D 00000144 R
	   04		   *	    cmp    cardp7 . Suit, 004h
 00001ADE  75 06	   *	    jne    @C01FF
 00001AE0  FF 05 0000001A R			inc IsDimondP
					.endif
 00001AE6		   *@C01FF:

					.if(IsSpadeP>4)
 00001AE6  83 3D 0000000E R
	   04		   *	    cmp    isSpadeP, 004h
 00001AED  76 0A	   *	    jbe    @C0201
 00001AEF  C7 05 0000001E R			mov isFlushP, 1
	   00000001
					.endif
 00001AF9		   *@C0201:
					.if(IsHeartP>4)
 00001AF9  83 3D 00000012 R
	   04		   *	    cmp    isHeartP, 004h
 00001B00  76 0A	   *	    jbe    @C0203
 00001B02  C7 05 0000001E R			mov isFlushP, 1
	   00000001
					.endif
 00001B0C		   *@C0203:
					.if(IsClubP>4)
 00001B0C  83 3D 00000016 R
	   04		   *	    cmp    isClubP, 004h
 00001B13  76 0A	   *	    jbe    @C0205
 00001B15  C7 05 0000001E R			mov isFlushP, 1
	   00000001
					.endif
 00001B1F		   *@C0205:
					.if(IsDimondP>4)
 00001B1F  83 3D 0000001A R
	   04		   *	    cmp    isDimondP, 004h
 00001B26  76 0A	   *	    jbe    @C0207
 00001B28  C7 05 0000001E R			mov isFlushP, 1
	   00000001
					.endif
 00001B32		   *@C0207:

					.if(isFlushP>0)
 00001B32  83 3D 0000001E R
	   00		   *	    cmp    isFlushP, 000h
 00001B39  76 0A	   *	    jbe    @C0209
 00001B3B  C7 05 00000066 R			mov PlayerFlush, 1
	   00000001
					.endif
 00001B45		   *@C0209:

 00001B45  C3			ret
 00001B46			IsAFlush ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00001B46			IsAStraight Proc
				;organize *player/spockhand into numerical order based off card.value
				;if card a = card b then card a=card b and card b= card c
				;if subtraction of card a - card b = 1 then go on to check if card a = card b
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;Spock Straight

 00001B46  A0 00000129 R	mov al, cards1.value
				.if (al == 1||al==14||al==27||al==40)
 00001B4B  3C 01	   *	    cmp    al, 001h
 00001B4D  74 0C	   *	    je	@C020C
 00001B4F  3C 0E	   *	    cmp    al, 00Eh
 00001B51  74 08	   *	    je	@C020C
 00001B53  3C 1B	   *	    cmp    al, 01Bh
 00001B55  74 04	   *	    je	@C020C
 00001B57  3C 28	   *	    cmp    al, 028h
 00001B59  75 07	   *	    jne    @C020B
 00001B5B		   *@C020C:
 00001B5B  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001B5D  E9 000000FD	   *	    jmp    @C0210
 00001B62		   *@C020B:
 00001B62  3C 02	   *	    cmp    al, 002h
 00001B64  74 0C	   *	    je	@C0212
 00001B66  3C 0F	   *	    cmp    al, 00Fh
 00001B68  74 08	   *	    je	@C0212
 00001B6A  3C 1C	   *	    cmp    al, 01Ch
 00001B6C  74 04	   *	    je	@C0212
 00001B6E  3C 29	   *	    cmp    al, 029h
 00001B70  75 07	   *	    jne    @C0211
 00001B72		   *@C0212:
 00001B72  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001B74  E9 000000E6	   *	    jmp    @C0216
 00001B79		   *@C0211:
 00001B79  3C 03	   *	    cmp    al, 003h
 00001B7B  74 0C	   *	    je	@C0218
 00001B7D  3C 10	   *	    cmp    al, 010h
 00001B7F  74 08	   *	    je	@C0218
 00001B81  3C 1D	   *	    cmp    al, 01Dh
 00001B83  74 04	   *	    je	@C0218
 00001B85  3C 2A	   *	    cmp    al, 02Ah
 00001B87  75 07	   *	    jne    @C0217
 00001B89		   *@C0218:
 00001B89  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001B8B  E9 000000CF	   *	    jmp    @C021C
 00001B90		   *@C0217:
 00001B90  3C 04	   *	    cmp    al, 004h
 00001B92  74 0C	   *	    je	@C021E
 00001B94  3C 11	   *	    cmp    al, 011h
 00001B96  74 08	   *	    je	@C021E
 00001B98  3C 1E	   *	    cmp    al, 01Eh
 00001B9A  74 04	   *	    je	@C021E
 00001B9C  3C 2B	   *	    cmp    al, 02Bh
 00001B9E  75 07	   *	    jne    @C021D
 00001BA0		   *@C021E:
 00001BA0  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001BA2  E9 000000B8	   *	    jmp    @C0222
 00001BA7		   *@C021D:
 00001BA7  3C 05	   *	    cmp    al, 005h
 00001BA9  74 0C	   *	    je	@C0224
 00001BAB  3C 12	   *	    cmp    al, 012h
 00001BAD  74 08	   *	    je	@C0224
 00001BAF  3C 1F	   *	    cmp    al, 01Fh
 00001BB1  74 04	   *	    je	@C0224
 00001BB3  3C 2C	   *	    cmp    al, 02Ch
 00001BB5  75 07	   *	    jne    @C0223
 00001BB7		   *@C0224:
 00001BB7  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001BB9  E9 000000A1	   *	    jmp    @C0228
 00001BBE		   *@C0223:
 00001BBE  3C 06	   *	    cmp    al, 006h
 00001BC0  74 0C	   *	    je	@C022A
 00001BC2  3C 13	   *	    cmp    al, 013h
 00001BC4  74 08	   *	    je	@C022A
 00001BC6  3C 20	   *	    cmp    al, 020h
 00001BC8  74 04	   *	    je	@C022A
 00001BCA  3C 2D	   *	    cmp    al, 02Dh
 00001BCC  75 07	   *	    jne    @C0229
 00001BCE		   *@C022A:
 00001BCE  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001BD0  E9 0000008A	   *	    jmp    @C022E
 00001BD5		   *@C0229:
 00001BD5  3C 07	   *	    cmp    al, 007h
 00001BD7  74 0C	   *	    je	@C0230
 00001BD9  3C 14	   *	    cmp    al, 014h
 00001BDB  74 08	   *	    je	@C0230
 00001BDD  3C 21	   *	    cmp    al, 021h
 00001BDF  74 04	   *	    je	@C0230
 00001BE1  3C 2E	   *	    cmp    al, 02Eh
 00001BE3  75 04	   *	    jne    @C022F
 00001BE5		   *@C0230:
 00001BE5  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001BE7  EB 76	   *	    jmp    @C0234
 00001BE9		   *@C022F:
 00001BE9  3C 08	   *	    cmp    al, 008h
 00001BEB  74 0C	   *	    je	@C0236
 00001BED  3C 15	   *	    cmp    al, 015h
 00001BEF  74 08	   *	    je	@C0236
 00001BF1  3C 22	   *	    cmp    al, 022h
 00001BF3  74 04	   *	    je	@C0236
 00001BF5  3C 2F	   *	    cmp    al, 02Fh
 00001BF7  75 04	   *	    jne    @C0235
 00001BF9		   *@C0236:
 00001BF9  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001BFB  EB 62	   *	    jmp    @C023A
 00001BFD		   *@C0235:
 00001BFD  3C 09	   *	    cmp    al, 009h
 00001BFF  74 0C	   *	    je	@C023C
 00001C01  3C 16	   *	    cmp    al, 016h
 00001C03  74 08	   *	    je	@C023C
 00001C05  3C 23	   *	    cmp    al, 023h
 00001C07  74 04	   *	    je	@C023C
 00001C09  3C 30	   *	    cmp    al, 030h
 00001C0B  75 04	   *	    jne    @C023B
 00001C0D		   *@C023C:
 00001C0D  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001C0F  EB 4E	   *	    jmp    @C0240
 00001C11		   *@C023B:
 00001C11  3C 0A	   *	    cmp    al, 00Ah
 00001C13  74 0C	   *	    je	@C0242
 00001C15  3C 17	   *	    cmp    al, 017h
 00001C17  74 08	   *	    je	@C0242
 00001C19  3C 24	   *	    cmp    al, 024h
 00001C1B  74 04	   *	    je	@C0242
 00001C1D  3C 31	   *	    cmp    al, 031h
 00001C1F  75 04	   *	    jne    @C0241
 00001C21		   *@C0242:
 00001C21  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001C23  EB 3A	   *	    jmp    @C0246
 00001C25		   *@C0241:
 00001C25  3C 0B	   *	    cmp    al, 00Bh
 00001C27  74 0C	   *	    je	@C0248
 00001C29  3C 18	   *	    cmp    al, 018h
 00001C2B  74 08	   *	    je	@C0248
 00001C2D  3C 25	   *	    cmp    al, 025h
 00001C2F  74 04	   *	    je	@C0248
 00001C31  3C 32	   *	    cmp    al, 032h
 00001C33  75 04	   *	    jne    @C0247
 00001C35		   *@C0248:
 00001C35  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001C37  EB 26	   *	    jmp    @C024C
 00001C39		   *@C0247:
 00001C39  3C 0C	   *	    cmp    al, 00Ch
 00001C3B  74 0C	   *	    je	@C024E
 00001C3D  3C 19	   *	    cmp    al, 019h
 00001C3F  74 08	   *	    je	@C024E
 00001C41  3C 26	   *	    cmp    al, 026h
 00001C43  74 04	   *	    je	@C024E
 00001C45  3C 33	   *	    cmp    al, 033h
 00001C47  75 04	   *	    jne    @C024D
 00001C49		   *@C024E:
 00001C49  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001C4B  EB 12	   *	    jmp    @C0252
 00001C4D		   *@C024D:
 00001C4D  3C 0D	   *	    cmp    al, 00Dh
 00001C4F  74 0C	   *	    je	@C0254
 00001C51  3C 1A	   *	    cmp    al, 01Ah
 00001C53  74 08	   *	    je	@C0254
 00001C55  3C 27	   *	    cmp    al, 027h
 00001C57  74 04	   *	    je	@C0254
 00001C59  3C 34	   *	    cmp    al, 034h
 00001C5B  75 02	   *	    jne    @C0253
 00001C5D		   *@C0254:
 00001C5D  B0 0D			mov al,13
				.endif
 00001C5F		   *@C0253:
 00001C5F		   *@C0252:
 00001C5F		   *@C024C:
 00001C5F		   *@C0246:
 00001C5F		   *@C0240:
 00001C5F		   *@C023A:
 00001C5F		   *@C0234:
 00001C5F		   *@C022E:
 00001C5F		   *@C0228:
 00001C5F		   *@C0222:
 00001C5F		   *@C021C:
 00001C5F		   *@C0216:
 00001C5F		   *@C0210:
 00001C5F  A2 00000000 R	mov straights[0], al

 00001C64  A0 0000012B R	mov al, cards2.value
				.if (al == 1||al==14||al==27||al==40)
 00001C69  3C 01	   *	    cmp    al, 001h
 00001C6B  74 0C	   *	    je	@C0259
 00001C6D  3C 0E	   *	    cmp    al, 00Eh
 00001C6F  74 08	   *	    je	@C0259
 00001C71  3C 1B	   *	    cmp    al, 01Bh
 00001C73  74 04	   *	    je	@C0259
 00001C75  3C 28	   *	    cmp    al, 028h
 00001C77  75 07	   *	    jne    @C0258
 00001C79		   *@C0259:
 00001C79  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001C7B  E9 000000FD	   *	    jmp    @C025D
 00001C80		   *@C0258:
 00001C80  3C 02	   *	    cmp    al, 002h
 00001C82  74 0C	   *	    je	@C025F
 00001C84  3C 0F	   *	    cmp    al, 00Fh
 00001C86  74 08	   *	    je	@C025F
 00001C88  3C 1C	   *	    cmp    al, 01Ch
 00001C8A  74 04	   *	    je	@C025F
 00001C8C  3C 29	   *	    cmp    al, 029h
 00001C8E  75 07	   *	    jne    @C025E
 00001C90		   *@C025F:
 00001C90  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001C92  E9 000000E6	   *	    jmp    @C0263
 00001C97		   *@C025E:
 00001C97  3C 03	   *	    cmp    al, 003h
 00001C99  74 0C	   *	    je	@C0265
 00001C9B  3C 10	   *	    cmp    al, 010h
 00001C9D  74 08	   *	    je	@C0265
 00001C9F  3C 1D	   *	    cmp    al, 01Dh
 00001CA1  74 04	   *	    je	@C0265
 00001CA3  3C 2A	   *	    cmp    al, 02Ah
 00001CA5  75 07	   *	    jne    @C0264
 00001CA7		   *@C0265:
 00001CA7  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001CA9  E9 000000CF	   *	    jmp    @C0269
 00001CAE		   *@C0264:
 00001CAE  3C 04	   *	    cmp    al, 004h
 00001CB0  74 0C	   *	    je	@C026B
 00001CB2  3C 11	   *	    cmp    al, 011h
 00001CB4  74 08	   *	    je	@C026B
 00001CB6  3C 1E	   *	    cmp    al, 01Eh
 00001CB8  74 04	   *	    je	@C026B
 00001CBA  3C 2B	   *	    cmp    al, 02Bh
 00001CBC  75 07	   *	    jne    @C026A
 00001CBE		   *@C026B:
 00001CBE  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001CC0  E9 000000B8	   *	    jmp    @C026F
 00001CC5		   *@C026A:
 00001CC5  3C 05	   *	    cmp    al, 005h
 00001CC7  74 0C	   *	    je	@C0271
 00001CC9  3C 12	   *	    cmp    al, 012h
 00001CCB  74 08	   *	    je	@C0271
 00001CCD  3C 1F	   *	    cmp    al, 01Fh
 00001CCF  74 04	   *	    je	@C0271
 00001CD1  3C 2C	   *	    cmp    al, 02Ch
 00001CD3  75 07	   *	    jne    @C0270
 00001CD5		   *@C0271:
 00001CD5  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001CD7  E9 000000A1	   *	    jmp    @C0275
 00001CDC		   *@C0270:
 00001CDC  3C 06	   *	    cmp    al, 006h
 00001CDE  74 0C	   *	    je	@C0277
 00001CE0  3C 13	   *	    cmp    al, 013h
 00001CE2  74 08	   *	    je	@C0277
 00001CE4  3C 20	   *	    cmp    al, 020h
 00001CE6  74 04	   *	    je	@C0277
 00001CE8  3C 2D	   *	    cmp    al, 02Dh
 00001CEA  75 07	   *	    jne    @C0276
 00001CEC		   *@C0277:
 00001CEC  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001CEE  E9 0000008A	   *	    jmp    @C027B
 00001CF3		   *@C0276:
 00001CF3  3C 07	   *	    cmp    al, 007h
 00001CF5  74 0C	   *	    je	@C027D
 00001CF7  3C 14	   *	    cmp    al, 014h
 00001CF9  74 08	   *	    je	@C027D
 00001CFB  3C 21	   *	    cmp    al, 021h
 00001CFD  74 04	   *	    je	@C027D
 00001CFF  3C 2E	   *	    cmp    al, 02Eh
 00001D01  75 04	   *	    jne    @C027C
 00001D03		   *@C027D:
 00001D03  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001D05  EB 76	   *	    jmp    @C0281
 00001D07		   *@C027C:
 00001D07  3C 08	   *	    cmp    al, 008h
 00001D09  74 0C	   *	    je	@C0283
 00001D0B  3C 15	   *	    cmp    al, 015h
 00001D0D  74 08	   *	    je	@C0283
 00001D0F  3C 22	   *	    cmp    al, 022h
 00001D11  74 04	   *	    je	@C0283
 00001D13  3C 2F	   *	    cmp    al, 02Fh
 00001D15  75 04	   *	    jne    @C0282
 00001D17		   *@C0283:
 00001D17  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001D19  EB 62	   *	    jmp    @C0287
 00001D1B		   *@C0282:
 00001D1B  3C 09	   *	    cmp    al, 009h
 00001D1D  74 0C	   *	    je	@C0289
 00001D1F  3C 16	   *	    cmp    al, 016h
 00001D21  74 08	   *	    je	@C0289
 00001D23  3C 23	   *	    cmp    al, 023h
 00001D25  74 04	   *	    je	@C0289
 00001D27  3C 30	   *	    cmp    al, 030h
 00001D29  75 04	   *	    jne    @C0288
 00001D2B		   *@C0289:
 00001D2B  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001D2D  EB 4E	   *	    jmp    @C028D
 00001D2F		   *@C0288:
 00001D2F  3C 0A	   *	    cmp    al, 00Ah
 00001D31  74 0C	   *	    je	@C028F
 00001D33  3C 17	   *	    cmp    al, 017h
 00001D35  74 08	   *	    je	@C028F
 00001D37  3C 24	   *	    cmp    al, 024h
 00001D39  74 04	   *	    je	@C028F
 00001D3B  3C 31	   *	    cmp    al, 031h
 00001D3D  75 04	   *	    jne    @C028E
 00001D3F		   *@C028F:
 00001D3F  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001D41  EB 3A	   *	    jmp    @C0293
 00001D43		   *@C028E:
 00001D43  3C 0B	   *	    cmp    al, 00Bh
 00001D45  74 0C	   *	    je	@C0295
 00001D47  3C 18	   *	    cmp    al, 018h
 00001D49  74 08	   *	    je	@C0295
 00001D4B  3C 25	   *	    cmp    al, 025h
 00001D4D  74 04	   *	    je	@C0295
 00001D4F  3C 32	   *	    cmp    al, 032h
 00001D51  75 04	   *	    jne    @C0294
 00001D53		   *@C0295:
 00001D53  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001D55  EB 26	   *	    jmp    @C0299
 00001D57		   *@C0294:
 00001D57  3C 0C	   *	    cmp    al, 00Ch
 00001D59  74 0C	   *	    je	@C029B
 00001D5B  3C 19	   *	    cmp    al, 019h
 00001D5D  74 08	   *	    je	@C029B
 00001D5F  3C 26	   *	    cmp    al, 026h
 00001D61  74 04	   *	    je	@C029B
 00001D63  3C 33	   *	    cmp    al, 033h
 00001D65  75 04	   *	    jne    @C029A
 00001D67		   *@C029B:
 00001D67  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001D69  EB 12	   *	    jmp    @C029F
 00001D6B		   *@C029A:
 00001D6B  3C 0D	   *	    cmp    al, 00Dh
 00001D6D  74 0C	   *	    je	@C02A1
 00001D6F  3C 1A	   *	    cmp    al, 01Ah
 00001D71  74 08	   *	    je	@C02A1
 00001D73  3C 27	   *	    cmp    al, 027h
 00001D75  74 04	   *	    je	@C02A1
 00001D77  3C 34	   *	    cmp    al, 034h
 00001D79  75 02	   *	    jne    @C02A0
 00001D7B		   *@C02A1:
 00001D7B  B0 0D			mov al,13
				.endif
 00001D7D		   *@C02A0:
 00001D7D		   *@C029F:
 00001D7D		   *@C0299:
 00001D7D		   *@C0293:
 00001D7D		   *@C028D:
 00001D7D		   *@C0287:
 00001D7D		   *@C0281:
 00001D7D		   *@C027B:
 00001D7D		   *@C0275:
 00001D7D		   *@C026F:
 00001D7D		   *@C0269:
 00001D7D		   *@C0263:
 00001D7D		   *@C025D:
 00001D7D  A2 00000001 R	mov straights[1], al

 00001D82  A0 0000012D R	mov al, cards3.value
				.if (al == 1||al==14||al==27||al==40)
 00001D87  3C 01	   *	    cmp    al, 001h
 00001D89  74 0C	   *	    je	@C02A6
 00001D8B  3C 0E	   *	    cmp    al, 00Eh
 00001D8D  74 08	   *	    je	@C02A6
 00001D8F  3C 1B	   *	    cmp    al, 01Bh
 00001D91  74 04	   *	    je	@C02A6
 00001D93  3C 28	   *	    cmp    al, 028h
 00001D95  75 07	   *	    jne    @C02A5
 00001D97		   *@C02A6:
 00001D97  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001D99  E9 000000FD	   *	    jmp    @C02AA
 00001D9E		   *@C02A5:
 00001D9E  3C 02	   *	    cmp    al, 002h
 00001DA0  74 0C	   *	    je	@C02AC
 00001DA2  3C 0F	   *	    cmp    al, 00Fh
 00001DA4  74 08	   *	    je	@C02AC
 00001DA6  3C 1C	   *	    cmp    al, 01Ch
 00001DA8  74 04	   *	    je	@C02AC
 00001DAA  3C 29	   *	    cmp    al, 029h
 00001DAC  75 07	   *	    jne    @C02AB
 00001DAE		   *@C02AC:
 00001DAE  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001DB0  E9 000000E6	   *	    jmp    @C02B0
 00001DB5		   *@C02AB:
 00001DB5  3C 03	   *	    cmp    al, 003h
 00001DB7  74 0C	   *	    je	@C02B2
 00001DB9  3C 10	   *	    cmp    al, 010h
 00001DBB  74 08	   *	    je	@C02B2
 00001DBD  3C 1D	   *	    cmp    al, 01Dh
 00001DBF  74 04	   *	    je	@C02B2
 00001DC1  3C 2A	   *	    cmp    al, 02Ah
 00001DC3  75 07	   *	    jne    @C02B1
 00001DC5		   *@C02B2:
 00001DC5  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001DC7  E9 000000CF	   *	    jmp    @C02B6
 00001DCC		   *@C02B1:
 00001DCC  3C 04	   *	    cmp    al, 004h
 00001DCE  74 0C	   *	    je	@C02B8
 00001DD0  3C 11	   *	    cmp    al, 011h
 00001DD2  74 08	   *	    je	@C02B8
 00001DD4  3C 1E	   *	    cmp    al, 01Eh
 00001DD6  74 04	   *	    je	@C02B8
 00001DD8  3C 2B	   *	    cmp    al, 02Bh
 00001DDA  75 07	   *	    jne    @C02B7
 00001DDC		   *@C02B8:
 00001DDC  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001DDE  E9 000000B8	   *	    jmp    @C02BC
 00001DE3		   *@C02B7:
 00001DE3  3C 05	   *	    cmp    al, 005h
 00001DE5  74 0C	   *	    je	@C02BE
 00001DE7  3C 12	   *	    cmp    al, 012h
 00001DE9  74 08	   *	    je	@C02BE
 00001DEB  3C 1F	   *	    cmp    al, 01Fh
 00001DED  74 04	   *	    je	@C02BE
 00001DEF  3C 2C	   *	    cmp    al, 02Ch
 00001DF1  75 07	   *	    jne    @C02BD
 00001DF3		   *@C02BE:
 00001DF3  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001DF5  E9 000000A1	   *	    jmp    @C02C2
 00001DFA		   *@C02BD:
 00001DFA  3C 06	   *	    cmp    al, 006h
 00001DFC  74 0C	   *	    je	@C02C4
 00001DFE  3C 13	   *	    cmp    al, 013h
 00001E00  74 08	   *	    je	@C02C4
 00001E02  3C 20	   *	    cmp    al, 020h
 00001E04  74 04	   *	    je	@C02C4
 00001E06  3C 2D	   *	    cmp    al, 02Dh
 00001E08  75 07	   *	    jne    @C02C3
 00001E0A		   *@C02C4:
 00001E0A  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001E0C  E9 0000008A	   *	    jmp    @C02C8
 00001E11		   *@C02C3:
 00001E11  3C 07	   *	    cmp    al, 007h
 00001E13  74 0C	   *	    je	@C02CA
 00001E15  3C 14	   *	    cmp    al, 014h
 00001E17  74 08	   *	    je	@C02CA
 00001E19  3C 21	   *	    cmp    al, 021h
 00001E1B  74 04	   *	    je	@C02CA
 00001E1D  3C 2E	   *	    cmp    al, 02Eh
 00001E1F  75 04	   *	    jne    @C02C9
 00001E21		   *@C02CA:
 00001E21  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001E23  EB 76	   *	    jmp    @C02CE
 00001E25		   *@C02C9:
 00001E25  3C 08	   *	    cmp    al, 008h
 00001E27  74 0C	   *	    je	@C02D0
 00001E29  3C 15	   *	    cmp    al, 015h
 00001E2B  74 08	   *	    je	@C02D0
 00001E2D  3C 22	   *	    cmp    al, 022h
 00001E2F  74 04	   *	    je	@C02D0
 00001E31  3C 2F	   *	    cmp    al, 02Fh
 00001E33  75 04	   *	    jne    @C02CF
 00001E35		   *@C02D0:
 00001E35  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001E37  EB 62	   *	    jmp    @C02D4
 00001E39		   *@C02CF:
 00001E39  3C 09	   *	    cmp    al, 009h
 00001E3B  74 0C	   *	    je	@C02D6
 00001E3D  3C 16	   *	    cmp    al, 016h
 00001E3F  74 08	   *	    je	@C02D6
 00001E41  3C 23	   *	    cmp    al, 023h
 00001E43  74 04	   *	    je	@C02D6
 00001E45  3C 30	   *	    cmp    al, 030h
 00001E47  75 04	   *	    jne    @C02D5
 00001E49		   *@C02D6:
 00001E49  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001E4B  EB 4E	   *	    jmp    @C02DA
 00001E4D		   *@C02D5:
 00001E4D  3C 0A	   *	    cmp    al, 00Ah
 00001E4F  74 0C	   *	    je	@C02DC
 00001E51  3C 17	   *	    cmp    al, 017h
 00001E53  74 08	   *	    je	@C02DC
 00001E55  3C 24	   *	    cmp    al, 024h
 00001E57  74 04	   *	    je	@C02DC
 00001E59  3C 31	   *	    cmp    al, 031h
 00001E5B  75 04	   *	    jne    @C02DB
 00001E5D		   *@C02DC:
 00001E5D  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001E5F  EB 3A	   *	    jmp    @C02E0
 00001E61		   *@C02DB:
 00001E61  3C 0B	   *	    cmp    al, 00Bh
 00001E63  74 0C	   *	    je	@C02E2
 00001E65  3C 18	   *	    cmp    al, 018h
 00001E67  74 08	   *	    je	@C02E2
 00001E69  3C 25	   *	    cmp    al, 025h
 00001E6B  74 04	   *	    je	@C02E2
 00001E6D  3C 32	   *	    cmp    al, 032h
 00001E6F  75 04	   *	    jne    @C02E1
 00001E71		   *@C02E2:
 00001E71  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001E73  EB 26	   *	    jmp    @C02E6
 00001E75		   *@C02E1:
 00001E75  3C 0C	   *	    cmp    al, 00Ch
 00001E77  74 0C	   *	    je	@C02E8
 00001E79  3C 19	   *	    cmp    al, 019h
 00001E7B  74 08	   *	    je	@C02E8
 00001E7D  3C 26	   *	    cmp    al, 026h
 00001E7F  74 04	   *	    je	@C02E8
 00001E81  3C 33	   *	    cmp    al, 033h
 00001E83  75 04	   *	    jne    @C02E7
 00001E85		   *@C02E8:
 00001E85  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001E87  EB 12	   *	    jmp    @C02EC
 00001E89		   *@C02E7:
 00001E89  3C 0D	   *	    cmp    al, 00Dh
 00001E8B  74 0C	   *	    je	@C02EE
 00001E8D  3C 1A	   *	    cmp    al, 01Ah
 00001E8F  74 08	   *	    je	@C02EE
 00001E91  3C 27	   *	    cmp    al, 027h
 00001E93  74 04	   *	    je	@C02EE
 00001E95  3C 34	   *	    cmp    al, 034h
 00001E97  75 02	   *	    jne    @C02ED
 00001E99		   *@C02EE:
 00001E99  B0 0D			mov al,13
				.endif
 00001E9B		   *@C02ED:
 00001E9B		   *@C02EC:
 00001E9B		   *@C02E6:
 00001E9B		   *@C02E0:
 00001E9B		   *@C02DA:
 00001E9B		   *@C02D4:
 00001E9B		   *@C02CE:
 00001E9B		   *@C02C8:
 00001E9B		   *@C02C2:
 00001E9B		   *@C02BC:
 00001E9B		   *@C02B6:
 00001E9B		   *@C02B0:
 00001E9B		   *@C02AA:
 00001E9B  A2 00000002 R	mov straights[2], al

 00001EA0  A0 0000012F R	mov al, cards4.value
				.if (al == 1||al==14||al==27||al==40)
 00001EA5  3C 01	   *	    cmp    al, 001h
 00001EA7  74 0C	   *	    je	@C02F3
 00001EA9  3C 0E	   *	    cmp    al, 00Eh
 00001EAB  74 08	   *	    je	@C02F3
 00001EAD  3C 1B	   *	    cmp    al, 01Bh
 00001EAF  74 04	   *	    je	@C02F3
 00001EB1  3C 28	   *	    cmp    al, 028h
 00001EB3  75 07	   *	    jne    @C02F2
 00001EB5		   *@C02F3:
 00001EB5  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001EB7  E9 000000FD	   *	    jmp    @C02F7
 00001EBC		   *@C02F2:
 00001EBC  3C 02	   *	    cmp    al, 002h
 00001EBE  74 0C	   *	    je	@C02F9
 00001EC0  3C 0F	   *	    cmp    al, 00Fh
 00001EC2  74 08	   *	    je	@C02F9
 00001EC4  3C 1C	   *	    cmp    al, 01Ch
 00001EC6  74 04	   *	    je	@C02F9
 00001EC8  3C 29	   *	    cmp    al, 029h
 00001ECA  75 07	   *	    jne    @C02F8
 00001ECC		   *@C02F9:
 00001ECC  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001ECE  E9 000000E6	   *	    jmp    @C02FD
 00001ED3		   *@C02F8:
 00001ED3  3C 03	   *	    cmp    al, 003h
 00001ED5  74 0C	   *	    je	@C02FF
 00001ED7  3C 10	   *	    cmp    al, 010h
 00001ED9  74 08	   *	    je	@C02FF
 00001EDB  3C 1D	   *	    cmp    al, 01Dh
 00001EDD  74 04	   *	    je	@C02FF
 00001EDF  3C 2A	   *	    cmp    al, 02Ah
 00001EE1  75 07	   *	    jne    @C02FE
 00001EE3		   *@C02FF:
 00001EE3  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00001EE5  E9 000000CF	   *	    jmp    @C0303
 00001EEA		   *@C02FE:
 00001EEA  3C 04	   *	    cmp    al, 004h
 00001EEC  74 0C	   *	    je	@C0305
 00001EEE  3C 11	   *	    cmp    al, 011h
 00001EF0  74 08	   *	    je	@C0305
 00001EF2  3C 1E	   *	    cmp    al, 01Eh
 00001EF4  74 04	   *	    je	@C0305
 00001EF6  3C 2B	   *	    cmp    al, 02Bh
 00001EF8  75 07	   *	    jne    @C0304
 00001EFA		   *@C0305:
 00001EFA  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00001EFC  E9 000000B8	   *	    jmp    @C0309
 00001F01		   *@C0304:
 00001F01  3C 05	   *	    cmp    al, 005h
 00001F03  74 0C	   *	    je	@C030B
 00001F05  3C 12	   *	    cmp    al, 012h
 00001F07  74 08	   *	    je	@C030B
 00001F09  3C 1F	   *	    cmp    al, 01Fh
 00001F0B  74 04	   *	    je	@C030B
 00001F0D  3C 2C	   *	    cmp    al, 02Ch
 00001F0F  75 07	   *	    jne    @C030A
 00001F11		   *@C030B:
 00001F11  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00001F13  E9 000000A1	   *	    jmp    @C030F
 00001F18		   *@C030A:
 00001F18  3C 06	   *	    cmp    al, 006h
 00001F1A  74 0C	   *	    je	@C0311
 00001F1C  3C 13	   *	    cmp    al, 013h
 00001F1E  74 08	   *	    je	@C0311
 00001F20  3C 20	   *	    cmp    al, 020h
 00001F22  74 04	   *	    je	@C0311
 00001F24  3C 2D	   *	    cmp    al, 02Dh
 00001F26  75 07	   *	    jne    @C0310
 00001F28		   *@C0311:
 00001F28  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00001F2A  E9 0000008A	   *	    jmp    @C0315
 00001F2F		   *@C0310:
 00001F2F  3C 07	   *	    cmp    al, 007h
 00001F31  74 0C	   *	    je	@C0317
 00001F33  3C 14	   *	    cmp    al, 014h
 00001F35  74 08	   *	    je	@C0317
 00001F37  3C 21	   *	    cmp    al, 021h
 00001F39  74 04	   *	    je	@C0317
 00001F3B  3C 2E	   *	    cmp    al, 02Eh
 00001F3D  75 04	   *	    jne    @C0316
 00001F3F		   *@C0317:
 00001F3F  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00001F41  EB 76	   *	    jmp    @C031B
 00001F43		   *@C0316:
 00001F43  3C 08	   *	    cmp    al, 008h
 00001F45  74 0C	   *	    je	@C031D
 00001F47  3C 15	   *	    cmp    al, 015h
 00001F49  74 08	   *	    je	@C031D
 00001F4B  3C 22	   *	    cmp    al, 022h
 00001F4D  74 04	   *	    je	@C031D
 00001F4F  3C 2F	   *	    cmp    al, 02Fh
 00001F51  75 04	   *	    jne    @C031C
 00001F53		   *@C031D:
 00001F53  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00001F55  EB 62	   *	    jmp    @C0321
 00001F57		   *@C031C:
 00001F57  3C 09	   *	    cmp    al, 009h
 00001F59  74 0C	   *	    je	@C0323
 00001F5B  3C 16	   *	    cmp    al, 016h
 00001F5D  74 08	   *	    je	@C0323
 00001F5F  3C 23	   *	    cmp    al, 023h
 00001F61  74 04	   *	    je	@C0323
 00001F63  3C 30	   *	    cmp    al, 030h
 00001F65  75 04	   *	    jne    @C0322
 00001F67		   *@C0323:
 00001F67  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00001F69  EB 4E	   *	    jmp    @C0327
 00001F6B		   *@C0322:
 00001F6B  3C 0A	   *	    cmp    al, 00Ah
 00001F6D  74 0C	   *	    je	@C0329
 00001F6F  3C 17	   *	    cmp    al, 017h
 00001F71  74 08	   *	    je	@C0329
 00001F73  3C 24	   *	    cmp    al, 024h
 00001F75  74 04	   *	    je	@C0329
 00001F77  3C 31	   *	    cmp    al, 031h
 00001F79  75 04	   *	    jne    @C0328
 00001F7B		   *@C0329:
 00001F7B  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00001F7D  EB 3A	   *	    jmp    @C032D
 00001F7F		   *@C0328:
 00001F7F  3C 0B	   *	    cmp    al, 00Bh
 00001F81  74 0C	   *	    je	@C032F
 00001F83  3C 18	   *	    cmp    al, 018h
 00001F85  74 08	   *	    je	@C032F
 00001F87  3C 25	   *	    cmp    al, 025h
 00001F89  74 04	   *	    je	@C032F
 00001F8B  3C 32	   *	    cmp    al, 032h
 00001F8D  75 04	   *	    jne    @C032E
 00001F8F		   *@C032F:
 00001F8F  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00001F91  EB 26	   *	    jmp    @C0333
 00001F93		   *@C032E:
 00001F93  3C 0C	   *	    cmp    al, 00Ch
 00001F95  74 0C	   *	    je	@C0335
 00001F97  3C 19	   *	    cmp    al, 019h
 00001F99  74 08	   *	    je	@C0335
 00001F9B  3C 26	   *	    cmp    al, 026h
 00001F9D  74 04	   *	    je	@C0335
 00001F9F  3C 33	   *	    cmp    al, 033h
 00001FA1  75 04	   *	    jne    @C0334
 00001FA3		   *@C0335:
 00001FA3  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00001FA5  EB 12	   *	    jmp    @C0339
 00001FA7		   *@C0334:
 00001FA7  3C 0D	   *	    cmp    al, 00Dh
 00001FA9  74 0C	   *	    je	@C033B
 00001FAB  3C 1A	   *	    cmp    al, 01Ah
 00001FAD  74 08	   *	    je	@C033B
 00001FAF  3C 27	   *	    cmp    al, 027h
 00001FB1  74 04	   *	    je	@C033B
 00001FB3  3C 34	   *	    cmp    al, 034h
 00001FB5  75 02	   *	    jne    @C033A
 00001FB7		   *@C033B:
 00001FB7  B0 0D			mov al,13
				.endif
 00001FB9		   *@C033A:
 00001FB9		   *@C0339:
 00001FB9		   *@C0333:
 00001FB9		   *@C032D:
 00001FB9		   *@C0327:
 00001FB9		   *@C0321:
 00001FB9		   *@C031B:
 00001FB9		   *@C0315:
 00001FB9		   *@C030F:
 00001FB9		   *@C0309:
 00001FB9		   *@C0303:
 00001FB9		   *@C02FD:
 00001FB9		   *@C02F7:
 00001FB9  A2 00000003 R	mov straights[3], al

 00001FBE  A0 00000131 R	mov al, cards5.value
				.if (al == 1||al==14||al==27||al==40)
 00001FC3  3C 01	   *	    cmp    al, 001h
 00001FC5  74 0C	   *	    je	@C0340
 00001FC7  3C 0E	   *	    cmp    al, 00Eh
 00001FC9  74 08	   *	    je	@C0340
 00001FCB  3C 1B	   *	    cmp    al, 01Bh
 00001FCD  74 04	   *	    je	@C0340
 00001FCF  3C 28	   *	    cmp    al, 028h
 00001FD1  75 07	   *	    jne    @C033F
 00001FD3		   *@C0340:
 00001FD3  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00001FD5  E9 000000FD	   *	    jmp    @C0344
 00001FDA		   *@C033F:
 00001FDA  3C 02	   *	    cmp    al, 002h
 00001FDC  74 0C	   *	    je	@C0346
 00001FDE  3C 0F	   *	    cmp    al, 00Fh
 00001FE0  74 08	   *	    je	@C0346
 00001FE2  3C 1C	   *	    cmp    al, 01Ch
 00001FE4  74 04	   *	    je	@C0346
 00001FE6  3C 29	   *	    cmp    al, 029h
 00001FE8  75 07	   *	    jne    @C0345
 00001FEA		   *@C0346:
 00001FEA  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00001FEC  E9 000000E6	   *	    jmp    @C034A
 00001FF1		   *@C0345:
 00001FF1  3C 03	   *	    cmp    al, 003h
 00001FF3  74 0C	   *	    je	@C034C
 00001FF5  3C 10	   *	    cmp    al, 010h
 00001FF7  74 08	   *	    je	@C034C
 00001FF9  3C 1D	   *	    cmp    al, 01Dh
 00001FFB  74 04	   *	    je	@C034C
 00001FFD  3C 2A	   *	    cmp    al, 02Ah
 00001FFF  75 07	   *	    jne    @C034B
 00002001		   *@C034C:
 00002001  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002003  E9 000000CF	   *	    jmp    @C0350
 00002008		   *@C034B:
 00002008  3C 04	   *	    cmp    al, 004h
 0000200A  74 0C	   *	    je	@C0352
 0000200C  3C 11	   *	    cmp    al, 011h
 0000200E  74 08	   *	    je	@C0352
 00002010  3C 1E	   *	    cmp    al, 01Eh
 00002012  74 04	   *	    je	@C0352
 00002014  3C 2B	   *	    cmp    al, 02Bh
 00002016  75 07	   *	    jne    @C0351
 00002018		   *@C0352:
 00002018  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 0000201A  E9 000000B8	   *	    jmp    @C0356
 0000201F		   *@C0351:
 0000201F  3C 05	   *	    cmp    al, 005h
 00002021  74 0C	   *	    je	@C0358
 00002023  3C 12	   *	    cmp    al, 012h
 00002025  74 08	   *	    je	@C0358
 00002027  3C 1F	   *	    cmp    al, 01Fh
 00002029  74 04	   *	    je	@C0358
 0000202B  3C 2C	   *	    cmp    al, 02Ch
 0000202D  75 07	   *	    jne    @C0357
 0000202F		   *@C0358:
 0000202F  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002031  E9 000000A1	   *	    jmp    @C035C
 00002036		   *@C0357:
 00002036  3C 06	   *	    cmp    al, 006h
 00002038  74 0C	   *	    je	@C035E
 0000203A  3C 13	   *	    cmp    al, 013h
 0000203C  74 08	   *	    je	@C035E
 0000203E  3C 20	   *	    cmp    al, 020h
 00002040  74 04	   *	    je	@C035E
 00002042  3C 2D	   *	    cmp    al, 02Dh
 00002044  75 07	   *	    jne    @C035D
 00002046		   *@C035E:
 00002046  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002048  E9 0000008A	   *	    jmp    @C0362
 0000204D		   *@C035D:
 0000204D  3C 07	   *	    cmp    al, 007h
 0000204F  74 0C	   *	    je	@C0364
 00002051  3C 14	   *	    cmp    al, 014h
 00002053  74 08	   *	    je	@C0364
 00002055  3C 21	   *	    cmp    al, 021h
 00002057  74 04	   *	    je	@C0364
 00002059  3C 2E	   *	    cmp    al, 02Eh
 0000205B  75 04	   *	    jne    @C0363
 0000205D		   *@C0364:
 0000205D  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000205F  EB 76	   *	    jmp    @C0368
 00002061		   *@C0363:
 00002061  3C 08	   *	    cmp    al, 008h
 00002063  74 0C	   *	    je	@C036A
 00002065  3C 15	   *	    cmp    al, 015h
 00002067  74 08	   *	    je	@C036A
 00002069  3C 22	   *	    cmp    al, 022h
 0000206B  74 04	   *	    je	@C036A
 0000206D  3C 2F	   *	    cmp    al, 02Fh
 0000206F  75 04	   *	    jne    @C0369
 00002071		   *@C036A:
 00002071  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002073  EB 62	   *	    jmp    @C036E
 00002075		   *@C0369:
 00002075  3C 09	   *	    cmp    al, 009h
 00002077  74 0C	   *	    je	@C0370
 00002079  3C 16	   *	    cmp    al, 016h
 0000207B  74 08	   *	    je	@C0370
 0000207D  3C 23	   *	    cmp    al, 023h
 0000207F  74 04	   *	    je	@C0370
 00002081  3C 30	   *	    cmp    al, 030h
 00002083  75 04	   *	    jne    @C036F
 00002085		   *@C0370:
 00002085  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002087  EB 4E	   *	    jmp    @C0374
 00002089		   *@C036F:
 00002089  3C 0A	   *	    cmp    al, 00Ah
 0000208B  74 0C	   *	    je	@C0376
 0000208D  3C 17	   *	    cmp    al, 017h
 0000208F  74 08	   *	    je	@C0376
 00002091  3C 24	   *	    cmp    al, 024h
 00002093  74 04	   *	    je	@C0376
 00002095  3C 31	   *	    cmp    al, 031h
 00002097  75 04	   *	    jne    @C0375
 00002099		   *@C0376:
 00002099  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 0000209B  EB 3A	   *	    jmp    @C037A
 0000209D		   *@C0375:
 0000209D  3C 0B	   *	    cmp    al, 00Bh
 0000209F  74 0C	   *	    je	@C037C
 000020A1  3C 18	   *	    cmp    al, 018h
 000020A3  74 08	   *	    je	@C037C
 000020A5  3C 25	   *	    cmp    al, 025h
 000020A7  74 04	   *	    je	@C037C
 000020A9  3C 32	   *	    cmp    al, 032h
 000020AB  75 04	   *	    jne    @C037B
 000020AD		   *@C037C:
 000020AD  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000020AF  EB 26	   *	    jmp    @C0380
 000020B1		   *@C037B:
 000020B1  3C 0C	   *	    cmp    al, 00Ch
 000020B3  74 0C	   *	    je	@C0382
 000020B5  3C 19	   *	    cmp    al, 019h
 000020B7  74 08	   *	    je	@C0382
 000020B9  3C 26	   *	    cmp    al, 026h
 000020BB  74 04	   *	    je	@C0382
 000020BD  3C 33	   *	    cmp    al, 033h
 000020BF  75 04	   *	    jne    @C0381
 000020C1		   *@C0382:
 000020C1  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000020C3  EB 12	   *	    jmp    @C0386
 000020C5		   *@C0381:
 000020C5  3C 0D	   *	    cmp    al, 00Dh
 000020C7  74 0C	   *	    je	@C0388
 000020C9  3C 1A	   *	    cmp    al, 01Ah
 000020CB  74 08	   *	    je	@C0388
 000020CD  3C 27	   *	    cmp    al, 027h
 000020CF  74 04	   *	    je	@C0388
 000020D1  3C 34	   *	    cmp    al, 034h
 000020D3  75 02	   *	    jne    @C0387
 000020D5		   *@C0388:
 000020D5  B0 0D			mov al,13
				.endif
 000020D7		   *@C0387:
 000020D7		   *@C0386:
 000020D7		   *@C0380:
 000020D7		   *@C037A:
 000020D7		   *@C0374:
 000020D7		   *@C036E:
 000020D7		   *@C0368:
 000020D7		   *@C0362:
 000020D7		   *@C035C:
 000020D7		   *@C0356:
 000020D7		   *@C0350:
 000020D7		   *@C034A:
 000020D7		   *@C0344:
 000020D7  A2 00000004 R	mov straights[4], al

 000020DC  A0 00000133 R	mov al, cards6.value
				.if (al == 1||al==14||al==27||al==40)
 000020E1  3C 01	   *	    cmp    al, 001h
 000020E3  74 0C	   *	    je	@C038D
 000020E5  3C 0E	   *	    cmp    al, 00Eh
 000020E7  74 08	   *	    je	@C038D
 000020E9  3C 1B	   *	    cmp    al, 01Bh
 000020EB  74 04	   *	    je	@C038D
 000020ED  3C 28	   *	    cmp    al, 028h
 000020EF  75 07	   *	    jne    @C038C
 000020F1		   *@C038D:
 000020F1  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000020F3  E9 000000FD	   *	    jmp    @C0391
 000020F8		   *@C038C:
 000020F8  3C 02	   *	    cmp    al, 002h
 000020FA  74 0C	   *	    je	@C0393
 000020FC  3C 0F	   *	    cmp    al, 00Fh
 000020FE  74 08	   *	    je	@C0393
 00002100  3C 1C	   *	    cmp    al, 01Ch
 00002102  74 04	   *	    je	@C0393
 00002104  3C 29	   *	    cmp    al, 029h
 00002106  75 07	   *	    jne    @C0392
 00002108		   *@C0393:
 00002108  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 0000210A  E9 000000E6	   *	    jmp    @C0397
 0000210F		   *@C0392:
 0000210F  3C 03	   *	    cmp    al, 003h
 00002111  74 0C	   *	    je	@C0399
 00002113  3C 10	   *	    cmp    al, 010h
 00002115  74 08	   *	    je	@C0399
 00002117  3C 1D	   *	    cmp    al, 01Dh
 00002119  74 04	   *	    je	@C0399
 0000211B  3C 2A	   *	    cmp    al, 02Ah
 0000211D  75 07	   *	    jne    @C0398
 0000211F		   *@C0399:
 0000211F  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002121  E9 000000CF	   *	    jmp    @C039D
 00002126		   *@C0398:
 00002126  3C 04	   *	    cmp    al, 004h
 00002128  74 0C	   *	    je	@C039F
 0000212A  3C 11	   *	    cmp    al, 011h
 0000212C  74 08	   *	    je	@C039F
 0000212E  3C 1E	   *	    cmp    al, 01Eh
 00002130  74 04	   *	    je	@C039F
 00002132  3C 2B	   *	    cmp    al, 02Bh
 00002134  75 07	   *	    jne    @C039E
 00002136		   *@C039F:
 00002136  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002138  E9 000000B8	   *	    jmp    @C03A3
 0000213D		   *@C039E:
 0000213D  3C 05	   *	    cmp    al, 005h
 0000213F  74 0C	   *	    je	@C03A5
 00002141  3C 12	   *	    cmp    al, 012h
 00002143  74 08	   *	    je	@C03A5
 00002145  3C 1F	   *	    cmp    al, 01Fh
 00002147  74 04	   *	    je	@C03A5
 00002149  3C 2C	   *	    cmp    al, 02Ch
 0000214B  75 07	   *	    jne    @C03A4
 0000214D		   *@C03A5:
 0000214D  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000214F  E9 000000A1	   *	    jmp    @C03A9
 00002154		   *@C03A4:
 00002154  3C 06	   *	    cmp    al, 006h
 00002156  74 0C	   *	    je	@C03AB
 00002158  3C 13	   *	    cmp    al, 013h
 0000215A  74 08	   *	    je	@C03AB
 0000215C  3C 20	   *	    cmp    al, 020h
 0000215E  74 04	   *	    je	@C03AB
 00002160  3C 2D	   *	    cmp    al, 02Dh
 00002162  75 07	   *	    jne    @C03AA
 00002164		   *@C03AB:
 00002164  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002166  E9 0000008A	   *	    jmp    @C03AF
 0000216B		   *@C03AA:
 0000216B  3C 07	   *	    cmp    al, 007h
 0000216D  74 0C	   *	    je	@C03B1
 0000216F  3C 14	   *	    cmp    al, 014h
 00002171  74 08	   *	    je	@C03B1
 00002173  3C 21	   *	    cmp    al, 021h
 00002175  74 04	   *	    je	@C03B1
 00002177  3C 2E	   *	    cmp    al, 02Eh
 00002179  75 04	   *	    jne    @C03B0
 0000217B		   *@C03B1:
 0000217B  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000217D  EB 76	   *	    jmp    @C03B5
 0000217F		   *@C03B0:
 0000217F  3C 08	   *	    cmp    al, 008h
 00002181  74 0C	   *	    je	@C03B7
 00002183  3C 15	   *	    cmp    al, 015h
 00002185  74 08	   *	    je	@C03B7
 00002187  3C 22	   *	    cmp    al, 022h
 00002189  74 04	   *	    je	@C03B7
 0000218B  3C 2F	   *	    cmp    al, 02Fh
 0000218D  75 04	   *	    jne    @C03B6
 0000218F		   *@C03B7:
 0000218F  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002191  EB 62	   *	    jmp    @C03BB
 00002193		   *@C03B6:
 00002193  3C 09	   *	    cmp    al, 009h
 00002195  74 0C	   *	    je	@C03BD
 00002197  3C 16	   *	    cmp    al, 016h
 00002199  74 08	   *	    je	@C03BD
 0000219B  3C 23	   *	    cmp    al, 023h
 0000219D  74 04	   *	    je	@C03BD
 0000219F  3C 30	   *	    cmp    al, 030h
 000021A1  75 04	   *	    jne    @C03BC
 000021A3		   *@C03BD:
 000021A3  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000021A5  EB 4E	   *	    jmp    @C03C1
 000021A7		   *@C03BC:
 000021A7  3C 0A	   *	    cmp    al, 00Ah
 000021A9  74 0C	   *	    je	@C03C3
 000021AB  3C 17	   *	    cmp    al, 017h
 000021AD  74 08	   *	    je	@C03C3
 000021AF  3C 24	   *	    cmp    al, 024h
 000021B1  74 04	   *	    je	@C03C3
 000021B3  3C 31	   *	    cmp    al, 031h
 000021B5  75 04	   *	    jne    @C03C2
 000021B7		   *@C03C3:
 000021B7  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000021B9  EB 3A	   *	    jmp    @C03C7
 000021BB		   *@C03C2:
 000021BB  3C 0B	   *	    cmp    al, 00Bh
 000021BD  74 0C	   *	    je	@C03C9
 000021BF  3C 18	   *	    cmp    al, 018h
 000021C1  74 08	   *	    je	@C03C9
 000021C3  3C 25	   *	    cmp    al, 025h
 000021C5  74 04	   *	    je	@C03C9
 000021C7  3C 32	   *	    cmp    al, 032h
 000021C9  75 04	   *	    jne    @C03C8
 000021CB		   *@C03C9:
 000021CB  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000021CD  EB 26	   *	    jmp    @C03CD
 000021CF		   *@C03C8:
 000021CF  3C 0C	   *	    cmp    al, 00Ch
 000021D1  74 0C	   *	    je	@C03CF
 000021D3  3C 19	   *	    cmp    al, 019h
 000021D5  74 08	   *	    je	@C03CF
 000021D7  3C 26	   *	    cmp    al, 026h
 000021D9  74 04	   *	    je	@C03CF
 000021DB  3C 33	   *	    cmp    al, 033h
 000021DD  75 04	   *	    jne    @C03CE
 000021DF		   *@C03CF:
 000021DF  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000021E1  EB 12	   *	    jmp    @C03D3
 000021E3		   *@C03CE:
 000021E3  3C 0D	   *	    cmp    al, 00Dh
 000021E5  74 0C	   *	    je	@C03D5
 000021E7  3C 1A	   *	    cmp    al, 01Ah
 000021E9  74 08	   *	    je	@C03D5
 000021EB  3C 27	   *	    cmp    al, 027h
 000021ED  74 04	   *	    je	@C03D5
 000021EF  3C 34	   *	    cmp    al, 034h
 000021F1  75 02	   *	    jne    @C03D4
 000021F3		   *@C03D5:
 000021F3  B0 0D			mov al,13
				.endif
 000021F5		   *@C03D4:
 000021F5		   *@C03D3:
 000021F5		   *@C03CD:
 000021F5		   *@C03C7:
 000021F5		   *@C03C1:
 000021F5		   *@C03BB:
 000021F5		   *@C03B5:
 000021F5		   *@C03AF:
 000021F5		   *@C03A9:
 000021F5		   *@C03A3:
 000021F5		   *@C039D:
 000021F5		   *@C0397:
 000021F5		   *@C0391:
 000021F5  A2 00000005 R	mov straights[5], al

 000021FA  A0 00000135 R	mov al, cards7.value
				.if (al == 1||al==14||al==27||al==40)
 000021FF  3C 01	   *	    cmp    al, 001h
 00002201  74 0C	   *	    je	@C03DA
 00002203  3C 0E	   *	    cmp    al, 00Eh
 00002205  74 08	   *	    je	@C03DA
 00002207  3C 1B	   *	    cmp    al, 01Bh
 00002209  74 04	   *	    je	@C03DA
 0000220B  3C 28	   *	    cmp    al, 028h
 0000220D  75 07	   *	    jne    @C03D9
 0000220F		   *@C03DA:
 0000220F  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002211  E9 000000FD	   *	    jmp    @C03DE
 00002216		   *@C03D9:
 00002216  3C 02	   *	    cmp    al, 002h
 00002218  74 0C	   *	    je	@C03E0
 0000221A  3C 0F	   *	    cmp    al, 00Fh
 0000221C  74 08	   *	    je	@C03E0
 0000221E  3C 1C	   *	    cmp    al, 01Ch
 00002220  74 04	   *	    je	@C03E0
 00002222  3C 29	   *	    cmp    al, 029h
 00002224  75 07	   *	    jne    @C03DF
 00002226		   *@C03E0:
 00002226  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002228  E9 000000E6	   *	    jmp    @C03E4
 0000222D		   *@C03DF:
 0000222D  3C 03	   *	    cmp    al, 003h
 0000222F  74 0C	   *	    je	@C03E6
 00002231  3C 10	   *	    cmp    al, 010h
 00002233  74 08	   *	    je	@C03E6
 00002235  3C 1D	   *	    cmp    al, 01Dh
 00002237  74 04	   *	    je	@C03E6
 00002239  3C 2A	   *	    cmp    al, 02Ah
 0000223B  75 07	   *	    jne    @C03E5
 0000223D		   *@C03E6:
 0000223D  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000223F  E9 000000CF	   *	    jmp    @C03EA
 00002244		   *@C03E5:
 00002244  3C 04	   *	    cmp    al, 004h
 00002246  74 0C	   *	    je	@C03EC
 00002248  3C 11	   *	    cmp    al, 011h
 0000224A  74 08	   *	    je	@C03EC
 0000224C  3C 1E	   *	    cmp    al, 01Eh
 0000224E  74 04	   *	    je	@C03EC
 00002250  3C 2B	   *	    cmp    al, 02Bh
 00002252  75 07	   *	    jne    @C03EB
 00002254		   *@C03EC:
 00002254  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002256  E9 000000B8	   *	    jmp    @C03F0
 0000225B		   *@C03EB:
 0000225B  3C 05	   *	    cmp    al, 005h
 0000225D  74 0C	   *	    je	@C03F2
 0000225F  3C 12	   *	    cmp    al, 012h
 00002261  74 08	   *	    je	@C03F2
 00002263  3C 1F	   *	    cmp    al, 01Fh
 00002265  74 04	   *	    je	@C03F2
 00002267  3C 2C	   *	    cmp    al, 02Ch
 00002269  75 07	   *	    jne    @C03F1
 0000226B		   *@C03F2:
 0000226B  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000226D  E9 000000A1	   *	    jmp    @C03F6
 00002272		   *@C03F1:
 00002272  3C 06	   *	    cmp    al, 006h
 00002274  74 0C	   *	    je	@C03F8
 00002276  3C 13	   *	    cmp    al, 013h
 00002278  74 08	   *	    je	@C03F8
 0000227A  3C 20	   *	    cmp    al, 020h
 0000227C  74 04	   *	    je	@C03F8
 0000227E  3C 2D	   *	    cmp    al, 02Dh
 00002280  75 07	   *	    jne    @C03F7
 00002282		   *@C03F8:
 00002282  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002284  E9 0000008A	   *	    jmp    @C03FC
 00002289		   *@C03F7:
 00002289  3C 07	   *	    cmp    al, 007h
 0000228B  74 0C	   *	    je	@C03FE
 0000228D  3C 14	   *	    cmp    al, 014h
 0000228F  74 08	   *	    je	@C03FE
 00002291  3C 21	   *	    cmp    al, 021h
 00002293  74 04	   *	    je	@C03FE
 00002295  3C 2E	   *	    cmp    al, 02Eh
 00002297  75 04	   *	    jne    @C03FD
 00002299		   *@C03FE:
 00002299  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000229B  EB 76	   *	    jmp    @C0402
 0000229D		   *@C03FD:
 0000229D  3C 08	   *	    cmp    al, 008h
 0000229F  74 0C	   *	    je	@C0404
 000022A1  3C 15	   *	    cmp    al, 015h
 000022A3  74 08	   *	    je	@C0404
 000022A5  3C 22	   *	    cmp    al, 022h
 000022A7  74 04	   *	    je	@C0404
 000022A9  3C 2F	   *	    cmp    al, 02Fh
 000022AB  75 04	   *	    jne    @C0403
 000022AD		   *@C0404:
 000022AD  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 000022AF  EB 62	   *	    jmp    @C0408
 000022B1		   *@C0403:
 000022B1  3C 09	   *	    cmp    al, 009h
 000022B3  74 0C	   *	    je	@C040A
 000022B5  3C 16	   *	    cmp    al, 016h
 000022B7  74 08	   *	    je	@C040A
 000022B9  3C 23	   *	    cmp    al, 023h
 000022BB  74 04	   *	    je	@C040A
 000022BD  3C 30	   *	    cmp    al, 030h
 000022BF  75 04	   *	    jne    @C0409
 000022C1		   *@C040A:
 000022C1  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000022C3  EB 4E	   *	    jmp    @C040E
 000022C5		   *@C0409:
 000022C5  3C 0A	   *	    cmp    al, 00Ah
 000022C7  74 0C	   *	    je	@C0410
 000022C9  3C 17	   *	    cmp    al, 017h
 000022CB  74 08	   *	    je	@C0410
 000022CD  3C 24	   *	    cmp    al, 024h
 000022CF  74 04	   *	    je	@C0410
 000022D1  3C 31	   *	    cmp    al, 031h
 000022D3  75 04	   *	    jne    @C040F
 000022D5		   *@C0410:
 000022D5  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000022D7  EB 3A	   *	    jmp    @C0414
 000022D9		   *@C040F:
 000022D9  3C 0B	   *	    cmp    al, 00Bh
 000022DB  74 0C	   *	    je	@C0416
 000022DD  3C 18	   *	    cmp    al, 018h
 000022DF  74 08	   *	    je	@C0416
 000022E1  3C 25	   *	    cmp    al, 025h
 000022E3  74 04	   *	    je	@C0416
 000022E5  3C 32	   *	    cmp    al, 032h
 000022E7  75 04	   *	    jne    @C0415
 000022E9		   *@C0416:
 000022E9  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000022EB  EB 26	   *	    jmp    @C041A
 000022ED		   *@C0415:
 000022ED  3C 0C	   *	    cmp    al, 00Ch
 000022EF  74 0C	   *	    je	@C041C
 000022F1  3C 19	   *	    cmp    al, 019h
 000022F3  74 08	   *	    je	@C041C
 000022F5  3C 26	   *	    cmp    al, 026h
 000022F7  74 04	   *	    je	@C041C
 000022F9  3C 33	   *	    cmp    al, 033h
 000022FB  75 04	   *	    jne    @C041B
 000022FD		   *@C041C:
 000022FD  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000022FF  EB 12	   *	    jmp    @C0420
 00002301		   *@C041B:
 00002301  3C 0D	   *	    cmp    al, 00Dh
 00002303  74 0C	   *	    je	@C0422
 00002305  3C 1A	   *	    cmp    al, 01Ah
 00002307  74 08	   *	    je	@C0422
 00002309  3C 27	   *	    cmp    al, 027h
 0000230B  74 04	   *	    je	@C0422
 0000230D  3C 34	   *	    cmp    al, 034h
 0000230F  75 02	   *	    jne    @C0421
 00002311		   *@C0422:
 00002311  B0 0D			mov al,13
				.endif
 00002313		   *@C0421:
 00002313		   *@C0420:
 00002313		   *@C041A:
 00002313		   *@C0414:
 00002313		   *@C040E:
 00002313		   *@C0408:
 00002313		   *@C0402:
 00002313		   *@C03FC:
 00002313		   *@C03F6:
 00002313		   *@C03F0:
 00002313		   *@C03EA:
 00002313		   *@C03E4:
 00002313		   *@C03DE:
 00002313  A2 00000006 R	mov straights[6], al

 00002318  B9 00000006		mov ecx,6 
 0000231D  BF 00000006		 mov edi,6 
 00002322  BE 00000000		 mov esi,0 
				 	 
 00002327			 	SS1: 
 00002327  8B D6		 		mov edx,esi 
 00002329  42			 		inc edx 
 0000232A  51			 		push ecx 
 0000232B  8B CF		 		mov ecx, edi 
 0000232D			 			SS2: 
 0000232D  8A 86 00000000 R	 				mov al, straights[esi] 
 00002333  8A 9A 00000000 R	 				mov bl, straights[edx] 
				 					.if (al < bl) 
 00002339  3A C3	   *	    cmp    al, bl
 0000233B  73 0E	   *	    jae    @C0426
 0000233D  86 C3		 						xchg al, bl 
 0000233F  88 86 00000000 R	 						mov straights[esi],al 
 00002345  88 9A 00000000 R	 						mov straights[edx],bl 
				 					.endif  
 0000234B		   *@C0426:
 0000234B  42			 				inc edx 
 0000234C  E2 DF		 			Loop SS2 
 0000234E  59			 		pop ecx 
 0000234F  46			 		inc esi		 
 00002350  4F			 		dec edi 
 00002351  E2 D4		 	Loop SS1 

 00002353  BE 00000000		mov esi,0
 00002358  BF 00000001		mov edi,1
 0000235D  8A 86 00000000 R		mov al, straights[esi]
 00002363  8A 9F 00000000 R		mov bl, straights[edi]
 00002369  89 35 00000121 R		mov var1, esi
 0000236F  89 3D 00000125 R		mov var2, edi
					.if(al==bl)
 00002375  3A C3	   *	    cmp    al, bl
 00002377  75 07	   *	    jne    @C0428
 00002379  47					inc edi
 0000237A  8A 9F 00000000 R			mov bl, straights[edi]
					.endif
 00002380		   *@C0428:
					.if(al==bl)
 00002380  3A C3	   *	    cmp    al, bl
 00002382  75 07	   *	    jne    @C042A
 00002384  47					inc edi
 00002385  8A 9F 00000000 R			mov bl, straights[edi]
					.endif
 0000238B		   *@C042A:
 0000238B  2A C3			sub al,bl
 0000238D  46				inc esi
 0000238E  47				inc edi
						.if(al==bl)
 0000238F  3A C3	   *	    cmp    al, bl
 00002391  0F 85 000000CB  *	    jne    @C042C
 00002397  8A 86 00000000 R				mov al, straights[esi]
 0000239D  8A 9F 00000000 R				mov bl, straights[edi]
							.if(al==bl)
 000023A3  3A C3	   *	    cmp    al, bl
 000023A5  75 07	   *	    jne    @C042E
 000023A7  47							inc edi
 000023A8  8A 9F 00000000 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 000023AE		   *@C042E:
 000023AE  3A C3	   *	    cmp    al, bl
 000023B0  75 07	   *	    jne    @C0430
 000023B2  47							inc edi
 000023B3  8A 9F 00000000 R					mov bl, straights[edi]
							.endif
 000023B9		   *@C0430:
 000023B9  2A C3					sub al,bl
 000023BB  46						inc esi
 000023BC  47						inc edi
								.if(al==bl)
 000023BD  3A C3	   *	    cmp    al, bl
 000023BF  0F 85 0000009D  *	    jne    @C0432
 000023C5  8A 86 00000000 R						mov al, straights[esi]
 000023CB  8A 9F 00000000 R						mov bl, straights[edi]
									.if(al==bl)
 000023D1  3A C3	   *	    cmp    al, bl
 000023D3  75 07	   *	    jne    @C0434
 000023D5  47									inc edi
 000023D6  8A 9F 00000000 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 000023DC		   *@C0434:
 000023DC  3A C3	   *	    cmp    al, bl
 000023DE  75 07	   *	    jne    @C0436
 000023E0  47									inc edi
 000023E1  8A 9F 00000000 R							mov bl, straights[edi]
									.endif
 000023E7		   *@C0436:
 000023E7  2A C3							sub al,bl
 000023E9  46								inc esi
 000023EA  47								inc edi
										.if(al==bl)
 000023EB  3A C3	   *	    cmp    al, bl
 000023ED  75 73	   *	    jne    @C0438
 000023EF  8A 86 00000000 R								mov al, straights[esi]
 000023F5  8A 9F 00000000 R									mov bl, straights[edi]
												.if(al==bl)
 000023FB  3A C3	   *	    cmp    al, bl
 000023FD  75 07	   *	    jne    @C043A
 000023FF  47												inc edi
 00002400  8A 9F 00000000 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 00002406		   *@C043A:
 00002406  3A C3	   *	    cmp    al, bl
 00002408  75 07	   *	    jne    @C043C
 0000240A  47												inc edi
 0000240B  8A 9F 00000000 R										mov bl, straights[edi]
												.endif
 00002411		   *@C043C:
 00002411  2A C3										sub al,bl
 00002413  46											inc esi
 00002414  47											inc edi
													.if(al==bl)
 00002415  3A C3	   *	    cmp    al, bl
 00002417  75 49	   *	    jne    @C043E
 00002419  8A 86 00000000 R											mov al, straights[esi]
 0000241F  8A 9F 00000000 R											mov bl, straights[edi]
														.if(al==bl)
 00002425  3A C3	   *	    cmp    al, bl
 00002427  75 07	   *	    jne    @C0440
 00002429  47														inc edi
 0000242A  8A 9F 00000000 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 00002430		   *@C0440:
 00002430  3A C3	   *	    cmp    al, bl
 00002432  75 07	   *	    jne    @C0442
 00002434  47														inc edi
 00002435  8A 9F 00000000 R												mov bl, straights[edi]
														.endif
 0000243B		   *@C0442:
 0000243B  2A C3												sub al,bl
 0000243D  46													inc esi
 0000243E  47													inc edi
															.if(al==bl)
 0000243F  3A C3	   *	    cmp    al, bl
 00002441  75 1F	   *	    jne    @C0444
 00002443  FF 05 00000036 R													inc isstraights
 00002449  8B 35 00000121 R													mov esi, var1
 0000244F  8A 86 00000000 R													mov al, straights[esi]
																	.if(HighSts < al)
 00002455  38 05 00000052 R *	    cmp    HighSts, al
 0000245B  73 05	   *	    jae    @C0446
 0000245D  A2 00000052 R															mov HighSts, al
																	.endif

													.endif
 00002462		   *@C0446:
											.endif
 00002462		   *@C0444:
									.endif
 00002462		   *@C043E:
							.endif
 00002462		   *@C0438:
					.endif
 00002462		   *@C0432:
 00002462		   *@C042C:
 00002462  8B 35 00000121 R	mov esi, var1
 00002468  8B 3D 00000125 R	mov edi, var2
 0000246E  46			inc esi
 0000246F  47			inc edi

 00002470  8A 86 00000000 R		mov al, straights[esi]
 00002476  8A 9F 00000000 R		mov bl, straights[edi]
 0000247C  8B 35 00000121 R		mov esi, var1
 00002482  8B 3D 00000125 R		mov edi, var2
					.if(al==bl)
 00002488  3A C3	   *	    cmp    al, bl
 0000248A  75 07	   *	    jne    @C0448
 0000248C  47					inc edi
 0000248D  8A 9F 00000000 R			mov bl, straights[edi]
					.endif
 00002493		   *@C0448:
					.if(al==bl)
 00002493  3A C3	   *	    cmp    al, bl
 00002495  75 07	   *	    jne    @C044A
 00002497  47					inc edi
 00002498  8A 9F 00000000 R			mov bl, straights[edi]
					.endif
 0000249E		   *@C044A:
 0000249E  2A C3			sub al,bl
 000024A0  46				inc esi
 000024A1  47				inc edi
						.if(al==bl)
 000024A2  3A C3	   *	    cmp    al, bl
 000024A4  0F 85 000000CB  *	    jne    @C044C
 000024AA  8A 86 00000000 R				mov al, straights[esi]
 000024B0  8A 9F 00000000 R				mov bl, straights[edi]
							.if(al==bl)
 000024B6  3A C3	   *	    cmp    al, bl
 000024B8  75 07	   *	    jne    @C044E
 000024BA  47							inc edi
 000024BB  8A 9F 00000000 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 000024C1		   *@C044E:
 000024C1  3A C3	   *	    cmp    al, bl
 000024C3  75 07	   *	    jne    @C0450
 000024C5  47							inc edi
 000024C6  8A 9F 00000000 R					mov bl, straights[edi]
							.endif
 000024CC		   *@C0450:
 000024CC  2A C3					sub al,bl
 000024CE  46						inc esi
 000024CF  47						inc edi
								.if(al==bl)
 000024D0  3A C3	   *	    cmp    al, bl
 000024D2  0F 85 0000009D  *	    jne    @C0452
 000024D8  8A 86 00000000 R						mov al, straights[esi]
 000024DE  8A 9F 00000000 R						mov bl, straights[edi]
									.if(al==bl)
 000024E4  3A C3	   *	    cmp    al, bl
 000024E6  75 07	   *	    jne    @C0454
 000024E8  47									inc edi
 000024E9  8A 9F 00000000 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 000024EF		   *@C0454:
 000024EF  3A C3	   *	    cmp    al, bl
 000024F1  75 07	   *	    jne    @C0456
 000024F3  47									inc edi
 000024F4  8A 9F 00000000 R							mov bl, straights[edi]
									.endif
 000024FA		   *@C0456:
 000024FA  2A C3							sub al,bl
 000024FC  46								inc esi
 000024FD  47								inc edi
										.if(al==bl)
 000024FE  3A C3	   *	    cmp    al, bl
 00002500  75 73	   *	    jne    @C0458
 00002502  8A 86 00000000 R								mov al, straights[esi]
 00002508  8A 9F 00000000 R									mov bl, straights[edi]
												.if(al==bl)
 0000250E  3A C3	   *	    cmp    al, bl
 00002510  75 07	   *	    jne    @C045A
 00002512  47												inc edi
 00002513  8A 9F 00000000 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 00002519		   *@C045A:
 00002519  3A C3	   *	    cmp    al, bl
 0000251B  75 07	   *	    jne    @C045C
 0000251D  47												inc edi
 0000251E  8A 9F 00000000 R										mov bl, straights[edi]
												.endif
 00002524		   *@C045C:
 00002524  2A C3										sub al,bl
 00002526  46											inc esi
 00002527  47											inc edi
													.if(al==bl)
 00002528  3A C3	   *	    cmp    al, bl
 0000252A  75 49	   *	    jne    @C045E
 0000252C  8A 86 00000000 R											mov al, straights[esi]
 00002532  8A 9F 00000000 R											mov bl, straights[edi]
														.if(al==bl)
 00002538  3A C3	   *	    cmp    al, bl
 0000253A  75 07	   *	    jne    @C0460
 0000253C  47														inc edi
 0000253D  8A 9F 00000000 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 00002543		   *@C0460:
 00002543  3A C3	   *	    cmp    al, bl
 00002545  75 07	   *	    jne    @C0462
 00002547  47														inc edi
 00002548  8A 9F 00000000 R												mov bl, straights[edi]
														.endif
 0000254E		   *@C0462:
 0000254E  2A C3												sub al,bl
 00002550  46													inc esi
 00002551  47													inc edi
															.if(al==bl)
 00002552  3A C3	   *	    cmp    al, bl
 00002554  75 1F	   *	    jne    @C0464
 00002556  FF 05 00000036 R													inc isstraights
 0000255C  8B 35 00000121 R													mov esi, var1
 00002562  8A 86 00000000 R													mov al, straights[esi]
																	.if(HighSts < al)
 00002568  38 05 00000052 R *	    cmp    HighSts, al
 0000256E  73 05	   *	    jae    @C0466
 00002570  A2 00000052 R															mov HighSts, al
																	.endif
													.endif
 00002575		   *@C0466:
											.endif
 00002575		   *@C0464:
									.endif
 00002575		   *@C045E:
							.endif
 00002575		   *@C0458:
					.endif
 00002575		   *@C0452:
 00002575		   *@C044C:
 00002575  8B 35 00000121 R	mov esi,var1
 0000257B  8B 3D 00000125 R	mov edi,var2
 00002581  46			inc esi
 00002582  47			inc edi

 00002583  8A 86 00000000 R		mov al, straights[esi]
 00002589  8A 9F 00000000 R		mov bl, straights[edi]
					.if(al==bl)
 0000258F  3A C3	   *	    cmp    al, bl
 00002591  75 07	   *	    jne    @C0468
 00002593  47					inc edi
 00002594  8A 9F 00000000 R			mov bl, straights[edi]
					.endif
 0000259A		   *@C0468:
					.if(al==bl)
 0000259A  3A C3	   *	    cmp    al, bl
 0000259C  75 07	   *	    jne    @C046A
 0000259E  47					inc edi
 0000259F  8A 9F 00000000 R			mov bl, straights[edi]
					.endif
 000025A5		   *@C046A:
 000025A5  2A C3			sub al,bl
 000025A7  46				inc esi
 000025A8  47				inc edi
						.if(al==bl)
 000025A9  3A C3	   *	    cmp    al, bl
 000025AB  0F 85 000000CB  *	    jne    @C046C
 000025B1  8A 86 00000000 R				mov al, straights[esi]
 000025B7  8A 9F 00000000 R				mov bl, straights[edi]
							.if(al==bl)
 000025BD  3A C3	   *	    cmp    al, bl
 000025BF  75 07	   *	    jne    @C046E
 000025C1  47							inc edi
 000025C2  8A 9F 00000000 R					mov bl, straights[edi]
							.endif
							.if(al==bl)
 000025C8		   *@C046E:
 000025C8  3A C3	   *	    cmp    al, bl
 000025CA  75 07	   *	    jne    @C0470
 000025CC  47							inc edi
 000025CD  8A 9F 00000000 R					mov bl, straights[edi]
							.endif
 000025D3		   *@C0470:
 000025D3  2A C3					sub al,bl
 000025D5  46						inc esi
 000025D6  47						inc edi
								.if(al==bl)
 000025D7  3A C3	   *	    cmp    al, bl
 000025D9  0F 85 0000009D  *	    jne    @C0472
 000025DF  8A 86 00000000 R						mov al, straights[esi]
 000025E5  8A 9F 00000000 R						mov bl, straights[edi]
									.if(al==bl)
 000025EB  3A C3	   *	    cmp    al, bl
 000025ED  75 07	   *	    jne    @C0474
 000025EF  47									inc edi
 000025F0  8A 9F 00000000 R							mov bl, straights[edi]
									.endif
									.if(al==bl)
 000025F6		   *@C0474:
 000025F6  3A C3	   *	    cmp    al, bl
 000025F8  75 07	   *	    jne    @C0476
 000025FA  47									inc edi
 000025FB  8A 9F 00000000 R							mov bl, straights[edi]
									.endif
 00002601		   *@C0476:
 00002601  2A C3							sub al,bl
 00002603  46								inc esi
 00002604  47								inc edi
										.if(al==bl)
 00002605  3A C3	   *	    cmp    al, bl
 00002607  75 73	   *	    jne    @C0478
 00002609  8A 86 00000000 R								mov al, straights[esi]
 0000260F  8A 9F 00000000 R									mov bl, straights[edi]
												.if(al==bl)
 00002615  3A C3	   *	    cmp    al, bl
 00002617  75 07	   *	    jne    @C047A
 00002619  47												inc edi
 0000261A  8A 9F 00000000 R										mov bl, straights[edi]
												.endif
												.if(al==bl)
 00002620		   *@C047A:
 00002620  3A C3	   *	    cmp    al, bl
 00002622  75 07	   *	    jne    @C047C
 00002624  47												inc edi
 00002625  8A 9F 00000000 R										mov bl, straights[edi]
												.endif
 0000262B		   *@C047C:
 0000262B  2A C3										sub al,bl
 0000262D  46											inc esi
 0000262E  47											inc edi
													.if(al==bl)
 0000262F  3A C3	   *	    cmp    al, bl
 00002631  75 49	   *	    jne    @C047E
 00002633  8A 86 00000000 R											mov al, straights[esi]
 00002639  8A 9F 00000000 R											mov bl, straights[edi]
														.if(al==bl)
 0000263F  3A C3	   *	    cmp    al, bl
 00002641  75 07	   *	    jne    @C0480
 00002643  47														inc edi
 00002644  8A 9F 00000000 R												mov bl, straights[edi]
														.endif
														.if(al==bl)
 0000264A		   *@C0480:
 0000264A  3A C3	   *	    cmp    al, bl
 0000264C  75 07	   *	    jne    @C0482
 0000264E  47														inc edi
 0000264F  8A 9F 00000000 R												mov bl, straights[edi]
														.endif
 00002655		   *@C0482:
 00002655  2A C3												sub al,bl
 00002657  46													inc esi
 00002658  47													inc edi
															.if(al==bl)
 00002659  3A C3	   *	    cmp    al, bl
 0000265B  75 1F	   *	    jne    @C0484
 0000265D  FF 05 00000036 R													inc isstraights
 00002663  8B 35 00000121 R													mov esi, var1
 00002669  8A 86 00000000 R													mov al, straights[esi]
																	.if(HighSts < al)
 0000266F  38 05 00000052 R *	    cmp    HighSts, al
 00002675  73 05	   *	    jae    @C0486
 00002677  A2 00000052 R															mov HighSts, al
																	.endif
													.endif
 0000267C		   *@C0486:
											.endif
 0000267C		   *@C0484:
									.endif
 0000267C		   *@C047E:
							.endif
 0000267C		   *@C0478:
					.endif
 0000267C		   *@C0472:
 0000267C		   *@C046C:

					.if(HighSts==13)
 0000267C  80 3D 00000052 R
	   0D		   *	    cmp    HighSts, 00Dh
 00002683  75 13	   *	    jne    @C0488
						.if(SpockFlush > 0)
 00002685  83 3D 000000A6 R
	   00		   *	    cmp    SpockFlush, 000h
 0000268C  76 0A	   *	    jbe    @C048A
 0000268E  C7 05 00000096 R				mov SpockRoyal, 1
	   00000001
						.endif
					.endif
 00002698		   *@C048A:
 00002698		   *@C0488:

					.if (HighStS > 0)
 00002698  80 3D 00000052 R
	   00		   *	    cmp    HighSts, 000h
 0000269F  76 0A	   *	    jbe    @C048C
 000026A1  C7 05 000000AA R			mov SpockStraight,1
	   00000001
					.endif
 000026AB		   *@C048C:

				;Player Straight
 000026AB  A0 00000137 R	mov al, cardp1.value
				.if (al == 1||al==14||al==27||al==40)
 000026B0  3C 01	   *	    cmp    al, 001h
 000026B2  74 0C	   *	    je	@C048F
 000026B4  3C 0E	   *	    cmp    al, 00Eh
 000026B6  74 08	   *	    je	@C048F
 000026B8  3C 1B	   *	    cmp    al, 01Bh
 000026BA  74 04	   *	    je	@C048F
 000026BC  3C 28	   *	    cmp    al, 028h
 000026BE  75 07	   *	    jne    @C048E
 000026C0		   *@C048F:
 000026C0  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000026C2  E9 000000FD	   *	    jmp    @C0493
 000026C7		   *@C048E:
 000026C7  3C 02	   *	    cmp    al, 002h
 000026C9  74 0C	   *	    je	@C0495
 000026CB  3C 0F	   *	    cmp    al, 00Fh
 000026CD  74 08	   *	    je	@C0495
 000026CF  3C 1C	   *	    cmp    al, 01Ch
 000026D1  74 04	   *	    je	@C0495
 000026D3  3C 29	   *	    cmp    al, 029h
 000026D5  75 07	   *	    jne    @C0494
 000026D7		   *@C0495:
 000026D7  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000026D9  E9 000000E6	   *	    jmp    @C0499
 000026DE		   *@C0494:
 000026DE  3C 03	   *	    cmp    al, 003h
 000026E0  74 0C	   *	    je	@C049B
 000026E2  3C 10	   *	    cmp    al, 010h
 000026E4  74 08	   *	    je	@C049B
 000026E6  3C 1D	   *	    cmp    al, 01Dh
 000026E8  74 04	   *	    je	@C049B
 000026EA  3C 2A	   *	    cmp    al, 02Ah
 000026EC  75 07	   *	    jne    @C049A
 000026EE		   *@C049B:
 000026EE  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 000026F0  E9 000000CF	   *	    jmp    @C049F
 000026F5		   *@C049A:
 000026F5  3C 04	   *	    cmp    al, 004h
 000026F7  74 0C	   *	    je	@C04A1
 000026F9  3C 11	   *	    cmp    al, 011h
 000026FB  74 08	   *	    je	@C04A1
 000026FD  3C 1E	   *	    cmp    al, 01Eh
 000026FF  74 04	   *	    je	@C04A1
 00002701  3C 2B	   *	    cmp    al, 02Bh
 00002703  75 07	   *	    jne    @C04A0
 00002705		   *@C04A1:
 00002705  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002707  E9 000000B8	   *	    jmp    @C04A5
 0000270C		   *@C04A0:
 0000270C  3C 05	   *	    cmp    al, 005h
 0000270E  74 0C	   *	    je	@C04A7
 00002710  3C 12	   *	    cmp    al, 012h
 00002712  74 08	   *	    je	@C04A7
 00002714  3C 1F	   *	    cmp    al, 01Fh
 00002716  74 04	   *	    je	@C04A7
 00002718  3C 2C	   *	    cmp    al, 02Ch
 0000271A  75 07	   *	    jne    @C04A6
 0000271C		   *@C04A7:
 0000271C  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000271E  E9 000000A1	   *	    jmp    @C04AB
 00002723		   *@C04A6:
 00002723  3C 06	   *	    cmp    al, 006h
 00002725  74 0C	   *	    je	@C04AD
 00002727  3C 13	   *	    cmp    al, 013h
 00002729  74 08	   *	    je	@C04AD
 0000272B  3C 20	   *	    cmp    al, 020h
 0000272D  74 04	   *	    je	@C04AD
 0000272F  3C 2D	   *	    cmp    al, 02Dh
 00002731  75 07	   *	    jne    @C04AC
 00002733		   *@C04AD:
 00002733  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002735  E9 0000008A	   *	    jmp    @C04B1
 0000273A		   *@C04AC:
 0000273A  3C 07	   *	    cmp    al, 007h
 0000273C  74 0C	   *	    je	@C04B3
 0000273E  3C 14	   *	    cmp    al, 014h
 00002740  74 08	   *	    je	@C04B3
 00002742  3C 21	   *	    cmp    al, 021h
 00002744  74 04	   *	    je	@C04B3
 00002746  3C 2E	   *	    cmp    al, 02Eh
 00002748  75 04	   *	    jne    @C04B2
 0000274A		   *@C04B3:
 0000274A  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000274C  EB 76	   *	    jmp    @C04B7
 0000274E		   *@C04B2:
 0000274E  3C 08	   *	    cmp    al, 008h
 00002750  74 0C	   *	    je	@C04B9
 00002752  3C 15	   *	    cmp    al, 015h
 00002754  74 08	   *	    je	@C04B9
 00002756  3C 22	   *	    cmp    al, 022h
 00002758  74 04	   *	    je	@C04B9
 0000275A  3C 2F	   *	    cmp    al, 02Fh
 0000275C  75 04	   *	    jne    @C04B8
 0000275E		   *@C04B9:
 0000275E  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002760  EB 62	   *	    jmp    @C04BD
 00002762		   *@C04B8:
 00002762  3C 09	   *	    cmp    al, 009h
 00002764  74 0C	   *	    je	@C04BF
 00002766  3C 16	   *	    cmp    al, 016h
 00002768  74 08	   *	    je	@C04BF
 0000276A  3C 23	   *	    cmp    al, 023h
 0000276C  74 04	   *	    je	@C04BF
 0000276E  3C 30	   *	    cmp    al, 030h
 00002770  75 04	   *	    jne    @C04BE
 00002772		   *@C04BF:
 00002772  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002774  EB 4E	   *	    jmp    @C04C3
 00002776		   *@C04BE:
 00002776  3C 0A	   *	    cmp    al, 00Ah
 00002778  74 0C	   *	    je	@C04C5
 0000277A  3C 17	   *	    cmp    al, 017h
 0000277C  74 08	   *	    je	@C04C5
 0000277E  3C 24	   *	    cmp    al, 024h
 00002780  74 04	   *	    je	@C04C5
 00002782  3C 31	   *	    cmp    al, 031h
 00002784  75 04	   *	    jne    @C04C4
 00002786		   *@C04C5:
 00002786  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002788  EB 3A	   *	    jmp    @C04C9
 0000278A		   *@C04C4:
 0000278A  3C 0B	   *	    cmp    al, 00Bh
 0000278C  74 0C	   *	    je	@C04CB
 0000278E  3C 18	   *	    cmp    al, 018h
 00002790  74 08	   *	    je	@C04CB
 00002792  3C 25	   *	    cmp    al, 025h
 00002794  74 04	   *	    je	@C04CB
 00002796  3C 32	   *	    cmp    al, 032h
 00002798  75 04	   *	    jne    @C04CA
 0000279A		   *@C04CB:
 0000279A  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 0000279C  EB 26	   *	    jmp    @C04CF
 0000279E		   *@C04CA:
 0000279E  3C 0C	   *	    cmp    al, 00Ch
 000027A0  74 0C	   *	    je	@C04D1
 000027A2  3C 19	   *	    cmp    al, 019h
 000027A4  74 08	   *	    je	@C04D1
 000027A6  3C 26	   *	    cmp    al, 026h
 000027A8  74 04	   *	    je	@C04D1
 000027AA  3C 33	   *	    cmp    al, 033h
 000027AC  75 04	   *	    jne    @C04D0
 000027AE		   *@C04D1:
 000027AE  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000027B0  EB 12	   *	    jmp    @C04D5
 000027B2		   *@C04D0:
 000027B2  3C 0D	   *	    cmp    al, 00Dh
 000027B4  74 0C	   *	    je	@C04D7
 000027B6  3C 1A	   *	    cmp    al, 01Ah
 000027B8  74 08	   *	    je	@C04D7
 000027BA  3C 27	   *	    cmp    al, 027h
 000027BC  74 04	   *	    je	@C04D7
 000027BE  3C 34	   *	    cmp    al, 034h
 000027C0  75 02	   *	    jne    @C04D6
 000027C2		   *@C04D7:
 000027C2  B0 0D			mov al,13
				.endif
 000027C4		   *@C04D6:
 000027C4		   *@C04D5:
 000027C4		   *@C04CF:
 000027C4		   *@C04C9:
 000027C4		   *@C04C3:
 000027C4		   *@C04BD:
 000027C4		   *@C04B7:
 000027C4		   *@C04B1:
 000027C4		   *@C04AB:
 000027C4		   *@C04A5:
 000027C4		   *@C049F:
 000027C4		   *@C0499:
 000027C4		   *@C0493:
 000027C4  A2 00000007 R	mov straightp[0], al


 000027C9  A0 00000139 R	mov al, cardp2.value
				.if (al == 1||al==14||al==27||al==40)
 000027CE  3C 01	   *	    cmp    al, 001h
 000027D0  74 0C	   *	    je	@C04DC
 000027D2  3C 0E	   *	    cmp    al, 00Eh
 000027D4  74 08	   *	    je	@C04DC
 000027D6  3C 1B	   *	    cmp    al, 01Bh
 000027D8  74 04	   *	    je	@C04DC
 000027DA  3C 28	   *	    cmp    al, 028h
 000027DC  75 07	   *	    jne    @C04DB
 000027DE		   *@C04DC:
 000027DE  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000027E0  E9 000000FD	   *	    jmp    @C04E0
 000027E5		   *@C04DB:
 000027E5  3C 02	   *	    cmp    al, 002h
 000027E7  74 0C	   *	    je	@C04E2
 000027E9  3C 0F	   *	    cmp    al, 00Fh
 000027EB  74 08	   *	    je	@C04E2
 000027ED  3C 1C	   *	    cmp    al, 01Ch
 000027EF  74 04	   *	    je	@C04E2
 000027F1  3C 29	   *	    cmp    al, 029h
 000027F3  75 07	   *	    jne    @C04E1
 000027F5		   *@C04E2:
 000027F5  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 000027F7  E9 000000E6	   *	    jmp    @C04E6
 000027FC		   *@C04E1:
 000027FC  3C 03	   *	    cmp    al, 003h
 000027FE  74 0C	   *	    je	@C04E8
 00002800  3C 10	   *	    cmp    al, 010h
 00002802  74 08	   *	    je	@C04E8
 00002804  3C 1D	   *	    cmp    al, 01Dh
 00002806  74 04	   *	    je	@C04E8
 00002808  3C 2A	   *	    cmp    al, 02Ah
 0000280A  75 07	   *	    jne    @C04E7
 0000280C		   *@C04E8:
 0000280C  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000280E  E9 000000CF	   *	    jmp    @C04EC
 00002813		   *@C04E7:
 00002813  3C 04	   *	    cmp    al, 004h
 00002815  74 0C	   *	    je	@C04EE
 00002817  3C 11	   *	    cmp    al, 011h
 00002819  74 08	   *	    je	@C04EE
 0000281B  3C 1E	   *	    cmp    al, 01Eh
 0000281D  74 04	   *	    je	@C04EE
 0000281F  3C 2B	   *	    cmp    al, 02Bh
 00002821  75 07	   *	    jne    @C04ED
 00002823		   *@C04EE:
 00002823  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002825  E9 000000B8	   *	    jmp    @C04F2
 0000282A		   *@C04ED:
 0000282A  3C 05	   *	    cmp    al, 005h
 0000282C  74 0C	   *	    je	@C04F4
 0000282E  3C 12	   *	    cmp    al, 012h
 00002830  74 08	   *	    je	@C04F4
 00002832  3C 1F	   *	    cmp    al, 01Fh
 00002834  74 04	   *	    je	@C04F4
 00002836  3C 2C	   *	    cmp    al, 02Ch
 00002838  75 07	   *	    jne    @C04F3
 0000283A		   *@C04F4:
 0000283A  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000283C  E9 000000A1	   *	    jmp    @C04F8
 00002841		   *@C04F3:
 00002841  3C 06	   *	    cmp    al, 006h
 00002843  74 0C	   *	    je	@C04FA
 00002845  3C 13	   *	    cmp    al, 013h
 00002847  74 08	   *	    je	@C04FA
 00002849  3C 20	   *	    cmp    al, 020h
 0000284B  74 04	   *	    je	@C04FA
 0000284D  3C 2D	   *	    cmp    al, 02Dh
 0000284F  75 07	   *	    jne    @C04F9
 00002851		   *@C04FA:
 00002851  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002853  E9 0000008A	   *	    jmp    @C04FE
 00002858		   *@C04F9:
 00002858  3C 07	   *	    cmp    al, 007h
 0000285A  74 0C	   *	    je	@C0500
 0000285C  3C 14	   *	    cmp    al, 014h
 0000285E  74 08	   *	    je	@C0500
 00002860  3C 21	   *	    cmp    al, 021h
 00002862  74 04	   *	    je	@C0500
 00002864  3C 2E	   *	    cmp    al, 02Eh
 00002866  75 04	   *	    jne    @C04FF
 00002868		   *@C0500:
 00002868  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 0000286A  EB 76	   *	    jmp    @C0504
 0000286C		   *@C04FF:
 0000286C  3C 08	   *	    cmp    al, 008h
 0000286E  74 0C	   *	    je	@C0506
 00002870  3C 15	   *	    cmp    al, 015h
 00002872  74 08	   *	    je	@C0506
 00002874  3C 22	   *	    cmp    al, 022h
 00002876  74 04	   *	    je	@C0506
 00002878  3C 2F	   *	    cmp    al, 02Fh
 0000287A  75 04	   *	    jne    @C0505
 0000287C		   *@C0506:
 0000287C  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000287E  EB 62	   *	    jmp    @C050A
 00002880		   *@C0505:
 00002880  3C 09	   *	    cmp    al, 009h
 00002882  74 0C	   *	    je	@C050C
 00002884  3C 16	   *	    cmp    al, 016h
 00002886  74 08	   *	    je	@C050C
 00002888  3C 23	   *	    cmp    al, 023h
 0000288A  74 04	   *	    je	@C050C
 0000288C  3C 30	   *	    cmp    al, 030h
 0000288E  75 04	   *	    jne    @C050B
 00002890		   *@C050C:
 00002890  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002892  EB 4E	   *	    jmp    @C0510
 00002894		   *@C050B:
 00002894  3C 0A	   *	    cmp    al, 00Ah
 00002896  74 0C	   *	    je	@C0512
 00002898  3C 17	   *	    cmp    al, 017h
 0000289A  74 08	   *	    je	@C0512
 0000289C  3C 24	   *	    cmp    al, 024h
 0000289E  74 04	   *	    je	@C0512
 000028A0  3C 31	   *	    cmp    al, 031h
 000028A2  75 04	   *	    jne    @C0511
 000028A4		   *@C0512:
 000028A4  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000028A6  EB 3A	   *	    jmp    @C0516
 000028A8		   *@C0511:
 000028A8  3C 0B	   *	    cmp    al, 00Bh
 000028AA  74 0C	   *	    je	@C0518
 000028AC  3C 18	   *	    cmp    al, 018h
 000028AE  74 08	   *	    je	@C0518
 000028B0  3C 25	   *	    cmp    al, 025h
 000028B2  74 04	   *	    je	@C0518
 000028B4  3C 32	   *	    cmp    al, 032h
 000028B6  75 04	   *	    jne    @C0517
 000028B8		   *@C0518:
 000028B8  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000028BA  EB 26	   *	    jmp    @C051C
 000028BC		   *@C0517:
 000028BC  3C 0C	   *	    cmp    al, 00Ch
 000028BE  74 0C	   *	    je	@C051E
 000028C0  3C 19	   *	    cmp    al, 019h
 000028C2  74 08	   *	    je	@C051E
 000028C4  3C 26	   *	    cmp    al, 026h
 000028C6  74 04	   *	    je	@C051E
 000028C8  3C 33	   *	    cmp    al, 033h
 000028CA  75 04	   *	    jne    @C051D
 000028CC		   *@C051E:
 000028CC  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000028CE  EB 12	   *	    jmp    @C0522
 000028D0		   *@C051D:
 000028D0  3C 0D	   *	    cmp    al, 00Dh
 000028D2  74 0C	   *	    je	@C0524
 000028D4  3C 1A	   *	    cmp    al, 01Ah
 000028D6  74 08	   *	    je	@C0524
 000028D8  3C 27	   *	    cmp    al, 027h
 000028DA  74 04	   *	    je	@C0524
 000028DC  3C 34	   *	    cmp    al, 034h
 000028DE  75 02	   *	    jne    @C0523
 000028E0		   *@C0524:
 000028E0  B0 0D			mov al,13
				.endif
 000028E2		   *@C0523:
 000028E2		   *@C0522:
 000028E2		   *@C051C:
 000028E2		   *@C0516:
 000028E2		   *@C0510:
 000028E2		   *@C050A:
 000028E2		   *@C0504:
 000028E2		   *@C04FE:
 000028E2		   *@C04F8:
 000028E2		   *@C04F2:
 000028E2		   *@C04EC:
 000028E2		   *@C04E6:
 000028E2		   *@C04E0:
 000028E2  A2 00000008 R	mov straightp[1], al


 000028E7  A0 0000013B R	mov al, cardp3.value
				.if (al == 1||al==14||al==27||al==40)
 000028EC  3C 01	   *	    cmp    al, 001h
 000028EE  74 0C	   *	    je	@C0529
 000028F0  3C 0E	   *	    cmp    al, 00Eh
 000028F2  74 08	   *	    je	@C0529
 000028F4  3C 1B	   *	    cmp    al, 01Bh
 000028F6  74 04	   *	    je	@C0529
 000028F8  3C 28	   *	    cmp    al, 028h
 000028FA  75 07	   *	    jne    @C0528
 000028FC		   *@C0529:
 000028FC  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 000028FE  E9 000000FD	   *	    jmp    @C052D
 00002903		   *@C0528:
 00002903  3C 02	   *	    cmp    al, 002h
 00002905  74 0C	   *	    je	@C052F
 00002907  3C 0F	   *	    cmp    al, 00Fh
 00002909  74 08	   *	    je	@C052F
 0000290B  3C 1C	   *	    cmp    al, 01Ch
 0000290D  74 04	   *	    je	@C052F
 0000290F  3C 29	   *	    cmp    al, 029h
 00002911  75 07	   *	    jne    @C052E
 00002913		   *@C052F:
 00002913  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002915  E9 000000E6	   *	    jmp    @C0533
 0000291A		   *@C052E:
 0000291A  3C 03	   *	    cmp    al, 003h
 0000291C  74 0C	   *	    je	@C0535
 0000291E  3C 10	   *	    cmp    al, 010h
 00002920  74 08	   *	    je	@C0535
 00002922  3C 1D	   *	    cmp    al, 01Dh
 00002924  74 04	   *	    je	@C0535
 00002926  3C 2A	   *	    cmp    al, 02Ah
 00002928  75 07	   *	    jne    @C0534
 0000292A		   *@C0535:
 0000292A  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 0000292C  E9 000000CF	   *	    jmp    @C0539
 00002931		   *@C0534:
 00002931  3C 04	   *	    cmp    al, 004h
 00002933  74 0C	   *	    je	@C053B
 00002935  3C 11	   *	    cmp    al, 011h
 00002937  74 08	   *	    je	@C053B
 00002939  3C 1E	   *	    cmp    al, 01Eh
 0000293B  74 04	   *	    je	@C053B
 0000293D  3C 2B	   *	    cmp    al, 02Bh
 0000293F  75 07	   *	    jne    @C053A
 00002941		   *@C053B:
 00002941  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002943  E9 000000B8	   *	    jmp    @C053F
 00002948		   *@C053A:
 00002948  3C 05	   *	    cmp    al, 005h
 0000294A  74 0C	   *	    je	@C0541
 0000294C  3C 12	   *	    cmp    al, 012h
 0000294E  74 08	   *	    je	@C0541
 00002950  3C 1F	   *	    cmp    al, 01Fh
 00002952  74 04	   *	    je	@C0541
 00002954  3C 2C	   *	    cmp    al, 02Ch
 00002956  75 07	   *	    jne    @C0540
 00002958		   *@C0541:
 00002958  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 0000295A  E9 000000A1	   *	    jmp    @C0545
 0000295F		   *@C0540:
 0000295F  3C 06	   *	    cmp    al, 006h
 00002961  74 0C	   *	    je	@C0547
 00002963  3C 13	   *	    cmp    al, 013h
 00002965  74 08	   *	    je	@C0547
 00002967  3C 20	   *	    cmp    al, 020h
 00002969  74 04	   *	    je	@C0547
 0000296B  3C 2D	   *	    cmp    al, 02Dh
 0000296D  75 07	   *	    jne    @C0546
 0000296F		   *@C0547:
 0000296F  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002971  E9 0000008A	   *	    jmp    @C054B
 00002976		   *@C0546:
 00002976  3C 07	   *	    cmp    al, 007h
 00002978  74 0C	   *	    je	@C054D
 0000297A  3C 14	   *	    cmp    al, 014h
 0000297C  74 08	   *	    je	@C054D
 0000297E  3C 21	   *	    cmp    al, 021h
 00002980  74 04	   *	    je	@C054D
 00002982  3C 2E	   *	    cmp    al, 02Eh
 00002984  75 04	   *	    jne    @C054C
 00002986		   *@C054D:
 00002986  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002988  EB 76	   *	    jmp    @C0551
 0000298A		   *@C054C:
 0000298A  3C 08	   *	    cmp    al, 008h
 0000298C  74 0C	   *	    je	@C0553
 0000298E  3C 15	   *	    cmp    al, 015h
 00002990  74 08	   *	    je	@C0553
 00002992  3C 22	   *	    cmp    al, 022h
 00002994  74 04	   *	    je	@C0553
 00002996  3C 2F	   *	    cmp    al, 02Fh
 00002998  75 04	   *	    jne    @C0552
 0000299A		   *@C0553:
 0000299A  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 0000299C  EB 62	   *	    jmp    @C0557
 0000299E		   *@C0552:
 0000299E  3C 09	   *	    cmp    al, 009h
 000029A0  74 0C	   *	    je	@C0559
 000029A2  3C 16	   *	    cmp    al, 016h
 000029A4  74 08	   *	    je	@C0559
 000029A6  3C 23	   *	    cmp    al, 023h
 000029A8  74 04	   *	    je	@C0559
 000029AA  3C 30	   *	    cmp    al, 030h
 000029AC  75 04	   *	    jne    @C0558
 000029AE		   *@C0559:
 000029AE  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 000029B0  EB 4E	   *	    jmp    @C055D
 000029B2		   *@C0558:
 000029B2  3C 0A	   *	    cmp    al, 00Ah
 000029B4  74 0C	   *	    je	@C055F
 000029B6  3C 17	   *	    cmp    al, 017h
 000029B8  74 08	   *	    je	@C055F
 000029BA  3C 24	   *	    cmp    al, 024h
 000029BC  74 04	   *	    je	@C055F
 000029BE  3C 31	   *	    cmp    al, 031h
 000029C0  75 04	   *	    jne    @C055E
 000029C2		   *@C055F:
 000029C2  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 000029C4  EB 3A	   *	    jmp    @C0563
 000029C6		   *@C055E:
 000029C6  3C 0B	   *	    cmp    al, 00Bh
 000029C8  74 0C	   *	    je	@C0565
 000029CA  3C 18	   *	    cmp    al, 018h
 000029CC  74 08	   *	    je	@C0565
 000029CE  3C 25	   *	    cmp    al, 025h
 000029D0  74 04	   *	    je	@C0565
 000029D2  3C 32	   *	    cmp    al, 032h
 000029D4  75 04	   *	    jne    @C0564
 000029D6		   *@C0565:
 000029D6  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 000029D8  EB 26	   *	    jmp    @C0569
 000029DA		   *@C0564:
 000029DA  3C 0C	   *	    cmp    al, 00Ch
 000029DC  74 0C	   *	    je	@C056B
 000029DE  3C 19	   *	    cmp    al, 019h
 000029E0  74 08	   *	    je	@C056B
 000029E2  3C 26	   *	    cmp    al, 026h
 000029E4  74 04	   *	    je	@C056B
 000029E6  3C 33	   *	    cmp    al, 033h
 000029E8  75 04	   *	    jne    @C056A
 000029EA		   *@C056B:
 000029EA  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 000029EC  EB 12	   *	    jmp    @C056F
 000029EE		   *@C056A:
 000029EE  3C 0D	   *	    cmp    al, 00Dh
 000029F0  74 0C	   *	    je	@C0571
 000029F2  3C 1A	   *	    cmp    al, 01Ah
 000029F4  74 08	   *	    je	@C0571
 000029F6  3C 27	   *	    cmp    al, 027h
 000029F8  74 04	   *	    je	@C0571
 000029FA  3C 34	   *	    cmp    al, 034h
 000029FC  75 02	   *	    jne    @C0570
 000029FE		   *@C0571:
 000029FE  B0 0D			mov al,13
				.endif
 00002A00		   *@C0570:
 00002A00		   *@C056F:
 00002A00		   *@C0569:
 00002A00		   *@C0563:
 00002A00		   *@C055D:
 00002A00		   *@C0557:
 00002A00		   *@C0551:
 00002A00		   *@C054B:
 00002A00		   *@C0545:
 00002A00		   *@C053F:
 00002A00		   *@C0539:
 00002A00		   *@C0533:
 00002A00		   *@C052D:
 00002A00  A2 00000009 R	mov straightp[2], al


 00002A05  A0 0000013D R	mov al, cardp4.value
				.if (al == 1||al==14||al==27||al==40)
 00002A0A  3C 01	   *	    cmp    al, 001h
 00002A0C  74 0C	   *	    je	@C0576
 00002A0E  3C 0E	   *	    cmp    al, 00Eh
 00002A10  74 08	   *	    je	@C0576
 00002A12  3C 1B	   *	    cmp    al, 01Bh
 00002A14  74 04	   *	    je	@C0576
 00002A16  3C 28	   *	    cmp    al, 028h
 00002A18  75 07	   *	    jne    @C0575
 00002A1A		   *@C0576:
 00002A1A  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002A1C  E9 000000FD	   *	    jmp    @C057A
 00002A21		   *@C0575:
 00002A21  3C 02	   *	    cmp    al, 002h
 00002A23  74 0C	   *	    je	@C057C
 00002A25  3C 0F	   *	    cmp    al, 00Fh
 00002A27  74 08	   *	    je	@C057C
 00002A29  3C 1C	   *	    cmp    al, 01Ch
 00002A2B  74 04	   *	    je	@C057C
 00002A2D  3C 29	   *	    cmp    al, 029h
 00002A2F  75 07	   *	    jne    @C057B
 00002A31		   *@C057C:
 00002A31  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002A33  E9 000000E6	   *	    jmp    @C0580
 00002A38		   *@C057B:
 00002A38  3C 03	   *	    cmp    al, 003h
 00002A3A  74 0C	   *	    je	@C0582
 00002A3C  3C 10	   *	    cmp    al, 010h
 00002A3E  74 08	   *	    je	@C0582
 00002A40  3C 1D	   *	    cmp    al, 01Dh
 00002A42  74 04	   *	    je	@C0582
 00002A44  3C 2A	   *	    cmp    al, 02Ah
 00002A46  75 07	   *	    jne    @C0581
 00002A48		   *@C0582:
 00002A48  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002A4A  E9 000000CF	   *	    jmp    @C0586
 00002A4F		   *@C0581:
 00002A4F  3C 04	   *	    cmp    al, 004h
 00002A51  74 0C	   *	    je	@C0588
 00002A53  3C 11	   *	    cmp    al, 011h
 00002A55  74 08	   *	    je	@C0588
 00002A57  3C 1E	   *	    cmp    al, 01Eh
 00002A59  74 04	   *	    je	@C0588
 00002A5B  3C 2B	   *	    cmp    al, 02Bh
 00002A5D  75 07	   *	    jne    @C0587
 00002A5F		   *@C0588:
 00002A5F  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002A61  E9 000000B8	   *	    jmp    @C058C
 00002A66		   *@C0587:
 00002A66  3C 05	   *	    cmp    al, 005h
 00002A68  74 0C	   *	    je	@C058E
 00002A6A  3C 12	   *	    cmp    al, 012h
 00002A6C  74 08	   *	    je	@C058E
 00002A6E  3C 1F	   *	    cmp    al, 01Fh
 00002A70  74 04	   *	    je	@C058E
 00002A72  3C 2C	   *	    cmp    al, 02Ch
 00002A74  75 07	   *	    jne    @C058D
 00002A76		   *@C058E:
 00002A76  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002A78  E9 000000A1	   *	    jmp    @C0592
 00002A7D		   *@C058D:
 00002A7D  3C 06	   *	    cmp    al, 006h
 00002A7F  74 0C	   *	    je	@C0594
 00002A81  3C 13	   *	    cmp    al, 013h
 00002A83  74 08	   *	    je	@C0594
 00002A85  3C 20	   *	    cmp    al, 020h
 00002A87  74 04	   *	    je	@C0594
 00002A89  3C 2D	   *	    cmp    al, 02Dh
 00002A8B  75 07	   *	    jne    @C0593
 00002A8D		   *@C0594:
 00002A8D  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002A8F  E9 0000008A	   *	    jmp    @C0598
 00002A94		   *@C0593:
 00002A94  3C 07	   *	    cmp    al, 007h
 00002A96  74 0C	   *	    je	@C059A
 00002A98  3C 14	   *	    cmp    al, 014h
 00002A9A  74 08	   *	    je	@C059A
 00002A9C  3C 21	   *	    cmp    al, 021h
 00002A9E  74 04	   *	    je	@C059A
 00002AA0  3C 2E	   *	    cmp    al, 02Eh
 00002AA2  75 04	   *	    jne    @C0599
 00002AA4		   *@C059A:
 00002AA4  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002AA6  EB 76	   *	    jmp    @C059E
 00002AA8		   *@C0599:
 00002AA8  3C 08	   *	    cmp    al, 008h
 00002AAA  74 0C	   *	    je	@C05A0
 00002AAC  3C 15	   *	    cmp    al, 015h
 00002AAE  74 08	   *	    je	@C05A0
 00002AB0  3C 22	   *	    cmp    al, 022h
 00002AB2  74 04	   *	    je	@C05A0
 00002AB4  3C 2F	   *	    cmp    al, 02Fh
 00002AB6  75 04	   *	    jne    @C059F
 00002AB8		   *@C05A0:
 00002AB8  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002ABA  EB 62	   *	    jmp    @C05A4
 00002ABC		   *@C059F:
 00002ABC  3C 09	   *	    cmp    al, 009h
 00002ABE  74 0C	   *	    je	@C05A6
 00002AC0  3C 16	   *	    cmp    al, 016h
 00002AC2  74 08	   *	    je	@C05A6
 00002AC4  3C 23	   *	    cmp    al, 023h
 00002AC6  74 04	   *	    je	@C05A6
 00002AC8  3C 30	   *	    cmp    al, 030h
 00002ACA  75 04	   *	    jne    @C05A5
 00002ACC		   *@C05A6:
 00002ACC  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002ACE  EB 4E	   *	    jmp    @C05AA
 00002AD0		   *@C05A5:
 00002AD0  3C 0A	   *	    cmp    al, 00Ah
 00002AD2  74 0C	   *	    je	@C05AC
 00002AD4  3C 17	   *	    cmp    al, 017h
 00002AD6  74 08	   *	    je	@C05AC
 00002AD8  3C 24	   *	    cmp    al, 024h
 00002ADA  74 04	   *	    je	@C05AC
 00002ADC  3C 31	   *	    cmp    al, 031h
 00002ADE  75 04	   *	    jne    @C05AB
 00002AE0		   *@C05AC:
 00002AE0  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002AE2  EB 3A	   *	    jmp    @C05B0
 00002AE4		   *@C05AB:
 00002AE4  3C 0B	   *	    cmp    al, 00Bh
 00002AE6  74 0C	   *	    je	@C05B2
 00002AE8  3C 18	   *	    cmp    al, 018h
 00002AEA  74 08	   *	    je	@C05B2
 00002AEC  3C 25	   *	    cmp    al, 025h
 00002AEE  74 04	   *	    je	@C05B2
 00002AF0  3C 32	   *	    cmp    al, 032h
 00002AF2  75 04	   *	    jne    @C05B1
 00002AF4		   *@C05B2:
 00002AF4  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002AF6  EB 26	   *	    jmp    @C05B6
 00002AF8		   *@C05B1:
 00002AF8  3C 0C	   *	    cmp    al, 00Ch
 00002AFA  74 0C	   *	    je	@C05B8
 00002AFC  3C 19	   *	    cmp    al, 019h
 00002AFE  74 08	   *	    je	@C05B8
 00002B00  3C 26	   *	    cmp    al, 026h
 00002B02  74 04	   *	    je	@C05B8
 00002B04  3C 33	   *	    cmp    al, 033h
 00002B06  75 04	   *	    jne    @C05B7
 00002B08		   *@C05B8:
 00002B08  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002B0A  EB 12	   *	    jmp    @C05BC
 00002B0C		   *@C05B7:
 00002B0C  3C 0D	   *	    cmp    al, 00Dh
 00002B0E  74 0C	   *	    je	@C05BE
 00002B10  3C 1A	   *	    cmp    al, 01Ah
 00002B12  74 08	   *	    je	@C05BE
 00002B14  3C 27	   *	    cmp    al, 027h
 00002B16  74 04	   *	    je	@C05BE
 00002B18  3C 34	   *	    cmp    al, 034h
 00002B1A  75 02	   *	    jne    @C05BD
 00002B1C		   *@C05BE:
 00002B1C  B0 0D			mov al,13
				.endif
 00002B1E		   *@C05BD:
 00002B1E		   *@C05BC:
 00002B1E		   *@C05B6:
 00002B1E		   *@C05B0:
 00002B1E		   *@C05AA:
 00002B1E		   *@C05A4:
 00002B1E		   *@C059E:
 00002B1E		   *@C0598:
 00002B1E		   *@C0592:
 00002B1E		   *@C058C:
 00002B1E		   *@C0586:
 00002B1E		   *@C0580:
 00002B1E		   *@C057A:
 00002B1E  A2 0000000A R	mov straightp[3], al


 00002B23  A0 0000013F R	mov al, cardp5.value
				.if (al == 1||al==14||al==27||al==40)
 00002B28  3C 01	   *	    cmp    al, 001h
 00002B2A  74 0C	   *	    je	@C05C3
 00002B2C  3C 0E	   *	    cmp    al, 00Eh
 00002B2E  74 08	   *	    je	@C05C3
 00002B30  3C 1B	   *	    cmp    al, 01Bh
 00002B32  74 04	   *	    je	@C05C3
 00002B34  3C 28	   *	    cmp    al, 028h
 00002B36  75 07	   *	    jne    @C05C2
 00002B38		   *@C05C3:
 00002B38  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002B3A  E9 000000FD	   *	    jmp    @C05C7
 00002B3F		   *@C05C2:
 00002B3F  3C 02	   *	    cmp    al, 002h
 00002B41  74 0C	   *	    je	@C05C9
 00002B43  3C 0F	   *	    cmp    al, 00Fh
 00002B45  74 08	   *	    je	@C05C9
 00002B47  3C 1C	   *	    cmp    al, 01Ch
 00002B49  74 04	   *	    je	@C05C9
 00002B4B  3C 29	   *	    cmp    al, 029h
 00002B4D  75 07	   *	    jne    @C05C8
 00002B4F		   *@C05C9:
 00002B4F  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002B51  E9 000000E6	   *	    jmp    @C05CD
 00002B56		   *@C05C8:
 00002B56  3C 03	   *	    cmp    al, 003h
 00002B58  74 0C	   *	    je	@C05CF
 00002B5A  3C 10	   *	    cmp    al, 010h
 00002B5C  74 08	   *	    je	@C05CF
 00002B5E  3C 1D	   *	    cmp    al, 01Dh
 00002B60  74 04	   *	    je	@C05CF
 00002B62  3C 2A	   *	    cmp    al, 02Ah
 00002B64  75 07	   *	    jne    @C05CE
 00002B66		   *@C05CF:
 00002B66  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002B68  E9 000000CF	   *	    jmp    @C05D3
 00002B6D		   *@C05CE:
 00002B6D  3C 04	   *	    cmp    al, 004h
 00002B6F  74 0C	   *	    je	@C05D5
 00002B71  3C 11	   *	    cmp    al, 011h
 00002B73  74 08	   *	    je	@C05D5
 00002B75  3C 1E	   *	    cmp    al, 01Eh
 00002B77  74 04	   *	    je	@C05D5
 00002B79  3C 2B	   *	    cmp    al, 02Bh
 00002B7B  75 07	   *	    jne    @C05D4
 00002B7D		   *@C05D5:
 00002B7D  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002B7F  E9 000000B8	   *	    jmp    @C05D9
 00002B84		   *@C05D4:
 00002B84  3C 05	   *	    cmp    al, 005h
 00002B86  74 0C	   *	    je	@C05DB
 00002B88  3C 12	   *	    cmp    al, 012h
 00002B8A  74 08	   *	    je	@C05DB
 00002B8C  3C 1F	   *	    cmp    al, 01Fh
 00002B8E  74 04	   *	    je	@C05DB
 00002B90  3C 2C	   *	    cmp    al, 02Ch
 00002B92  75 07	   *	    jne    @C05DA
 00002B94		   *@C05DB:
 00002B94  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002B96  E9 000000A1	   *	    jmp    @C05DF
 00002B9B		   *@C05DA:
 00002B9B  3C 06	   *	    cmp    al, 006h
 00002B9D  74 0C	   *	    je	@C05E1
 00002B9F  3C 13	   *	    cmp    al, 013h
 00002BA1  74 08	   *	    je	@C05E1
 00002BA3  3C 20	   *	    cmp    al, 020h
 00002BA5  74 04	   *	    je	@C05E1
 00002BA7  3C 2D	   *	    cmp    al, 02Dh
 00002BA9  75 07	   *	    jne    @C05E0
 00002BAB		   *@C05E1:
 00002BAB  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002BAD  E9 0000008A	   *	    jmp    @C05E5
 00002BB2		   *@C05E0:
 00002BB2  3C 07	   *	    cmp    al, 007h
 00002BB4  74 0C	   *	    je	@C05E7
 00002BB6  3C 14	   *	    cmp    al, 014h
 00002BB8  74 08	   *	    je	@C05E7
 00002BBA  3C 21	   *	    cmp    al, 021h
 00002BBC  74 04	   *	    je	@C05E7
 00002BBE  3C 2E	   *	    cmp    al, 02Eh
 00002BC0  75 04	   *	    jne    @C05E6
 00002BC2		   *@C05E7:
 00002BC2  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002BC4  EB 76	   *	    jmp    @C05EB
 00002BC6		   *@C05E6:
 00002BC6  3C 08	   *	    cmp    al, 008h
 00002BC8  74 0C	   *	    je	@C05ED
 00002BCA  3C 15	   *	    cmp    al, 015h
 00002BCC  74 08	   *	    je	@C05ED
 00002BCE  3C 22	   *	    cmp    al, 022h
 00002BD0  74 04	   *	    je	@C05ED
 00002BD2  3C 2F	   *	    cmp    al, 02Fh
 00002BD4  75 04	   *	    jne    @C05EC
 00002BD6		   *@C05ED:
 00002BD6  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002BD8  EB 62	   *	    jmp    @C05F1
 00002BDA		   *@C05EC:
 00002BDA  3C 09	   *	    cmp    al, 009h
 00002BDC  74 0C	   *	    je	@C05F3
 00002BDE  3C 16	   *	    cmp    al, 016h
 00002BE0  74 08	   *	    je	@C05F3
 00002BE2  3C 23	   *	    cmp    al, 023h
 00002BE4  74 04	   *	    je	@C05F3
 00002BE6  3C 30	   *	    cmp    al, 030h
 00002BE8  75 04	   *	    jne    @C05F2
 00002BEA		   *@C05F3:
 00002BEA  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002BEC  EB 4E	   *	    jmp    @C05F7
 00002BEE		   *@C05F2:
 00002BEE  3C 0A	   *	    cmp    al, 00Ah
 00002BF0  74 0C	   *	    je	@C05F9
 00002BF2  3C 17	   *	    cmp    al, 017h
 00002BF4  74 08	   *	    je	@C05F9
 00002BF6  3C 24	   *	    cmp    al, 024h
 00002BF8  74 04	   *	    je	@C05F9
 00002BFA  3C 31	   *	    cmp    al, 031h
 00002BFC  75 04	   *	    jne    @C05F8
 00002BFE		   *@C05F9:
 00002BFE  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002C00  EB 3A	   *	    jmp    @C05FD
 00002C02		   *@C05F8:
 00002C02  3C 0B	   *	    cmp    al, 00Bh
 00002C04  74 0C	   *	    je	@C05FF
 00002C06  3C 18	   *	    cmp    al, 018h
 00002C08  74 08	   *	    je	@C05FF
 00002C0A  3C 25	   *	    cmp    al, 025h
 00002C0C  74 04	   *	    je	@C05FF
 00002C0E  3C 32	   *	    cmp    al, 032h
 00002C10  75 04	   *	    jne    @C05FE
 00002C12		   *@C05FF:
 00002C12  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002C14  EB 26	   *	    jmp    @C0603
 00002C16		   *@C05FE:
 00002C16  3C 0C	   *	    cmp    al, 00Ch
 00002C18  74 0C	   *	    je	@C0605
 00002C1A  3C 19	   *	    cmp    al, 019h
 00002C1C  74 08	   *	    je	@C0605
 00002C1E  3C 26	   *	    cmp    al, 026h
 00002C20  74 04	   *	    je	@C0605
 00002C22  3C 33	   *	    cmp    al, 033h
 00002C24  75 04	   *	    jne    @C0604
 00002C26		   *@C0605:
 00002C26  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002C28  EB 12	   *	    jmp    @C0609
 00002C2A		   *@C0604:
 00002C2A  3C 0D	   *	    cmp    al, 00Dh
 00002C2C  74 0C	   *	    je	@C060B
 00002C2E  3C 1A	   *	    cmp    al, 01Ah
 00002C30  74 08	   *	    je	@C060B
 00002C32  3C 27	   *	    cmp    al, 027h
 00002C34  74 04	   *	    je	@C060B
 00002C36  3C 34	   *	    cmp    al, 034h
 00002C38  75 02	   *	    jne    @C060A
 00002C3A		   *@C060B:
 00002C3A  B0 0D			mov al,13
				.endif
 00002C3C		   *@C060A:
 00002C3C		   *@C0609:
 00002C3C		   *@C0603:
 00002C3C		   *@C05FD:
 00002C3C		   *@C05F7:
 00002C3C		   *@C05F1:
 00002C3C		   *@C05EB:
 00002C3C		   *@C05E5:
 00002C3C		   *@C05DF:
 00002C3C		   *@C05D9:
 00002C3C		   *@C05D3:
 00002C3C		   *@C05CD:
 00002C3C		   *@C05C7:
 00002C3C  A2 0000000B R	mov straightp[4], al


 00002C41  A0 00000141 R	mov al, cardp6.value
				.if (al == 1||al==14||al==27||al==40)
 00002C46  3C 01	   *	    cmp    al, 001h
 00002C48  74 0C	   *	    je	@C0610
 00002C4A  3C 0E	   *	    cmp    al, 00Eh
 00002C4C  74 08	   *	    je	@C0610
 00002C4E  3C 1B	   *	    cmp    al, 01Bh
 00002C50  74 04	   *	    je	@C0610
 00002C52  3C 28	   *	    cmp    al, 028h
 00002C54  75 07	   *	    jne    @C060F
 00002C56		   *@C0610:
 00002C56  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002C58  E9 000000FD	   *	    jmp    @C0614
 00002C5D		   *@C060F:
 00002C5D  3C 02	   *	    cmp    al, 002h
 00002C5F  74 0C	   *	    je	@C0616
 00002C61  3C 0F	   *	    cmp    al, 00Fh
 00002C63  74 08	   *	    je	@C0616
 00002C65  3C 1C	   *	    cmp    al, 01Ch
 00002C67  74 04	   *	    je	@C0616
 00002C69  3C 29	   *	    cmp    al, 029h
 00002C6B  75 07	   *	    jne    @C0615
 00002C6D		   *@C0616:
 00002C6D  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002C6F  E9 000000E6	   *	    jmp    @C061A
 00002C74		   *@C0615:
 00002C74  3C 03	   *	    cmp    al, 003h
 00002C76  74 0C	   *	    je	@C061C
 00002C78  3C 10	   *	    cmp    al, 010h
 00002C7A  74 08	   *	    je	@C061C
 00002C7C  3C 1D	   *	    cmp    al, 01Dh
 00002C7E  74 04	   *	    je	@C061C
 00002C80  3C 2A	   *	    cmp    al, 02Ah
 00002C82  75 07	   *	    jne    @C061B
 00002C84		   *@C061C:
 00002C84  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002C86  E9 000000CF	   *	    jmp    @C0620
 00002C8B		   *@C061B:
 00002C8B  3C 04	   *	    cmp    al, 004h
 00002C8D  74 0C	   *	    je	@C0622
 00002C8F  3C 11	   *	    cmp    al, 011h
 00002C91  74 08	   *	    je	@C0622
 00002C93  3C 1E	   *	    cmp    al, 01Eh
 00002C95  74 04	   *	    je	@C0622
 00002C97  3C 2B	   *	    cmp    al, 02Bh
 00002C99  75 07	   *	    jne    @C0621
 00002C9B		   *@C0622:
 00002C9B  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002C9D  E9 000000B8	   *	    jmp    @C0626
 00002CA2		   *@C0621:
 00002CA2  3C 05	   *	    cmp    al, 005h
 00002CA4  74 0C	   *	    je	@C0628
 00002CA6  3C 12	   *	    cmp    al, 012h
 00002CA8  74 08	   *	    je	@C0628
 00002CAA  3C 1F	   *	    cmp    al, 01Fh
 00002CAC  74 04	   *	    je	@C0628
 00002CAE  3C 2C	   *	    cmp    al, 02Ch
 00002CB0  75 07	   *	    jne    @C0627
 00002CB2		   *@C0628:
 00002CB2  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002CB4  E9 000000A1	   *	    jmp    @C062C
 00002CB9		   *@C0627:
 00002CB9  3C 06	   *	    cmp    al, 006h
 00002CBB  74 0C	   *	    je	@C062E
 00002CBD  3C 13	   *	    cmp    al, 013h
 00002CBF  74 08	   *	    je	@C062E
 00002CC1  3C 20	   *	    cmp    al, 020h
 00002CC3  74 04	   *	    je	@C062E
 00002CC5  3C 2D	   *	    cmp    al, 02Dh
 00002CC7  75 07	   *	    jne    @C062D
 00002CC9		   *@C062E:
 00002CC9  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002CCB  E9 0000008A	   *	    jmp    @C0632
 00002CD0		   *@C062D:
 00002CD0  3C 07	   *	    cmp    al, 007h
 00002CD2  74 0C	   *	    je	@C0634
 00002CD4  3C 14	   *	    cmp    al, 014h
 00002CD6  74 08	   *	    je	@C0634
 00002CD8  3C 21	   *	    cmp    al, 021h
 00002CDA  74 04	   *	    je	@C0634
 00002CDC  3C 2E	   *	    cmp    al, 02Eh
 00002CDE  75 04	   *	    jne    @C0633
 00002CE0		   *@C0634:
 00002CE0  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002CE2  EB 76	   *	    jmp    @C0638
 00002CE4		   *@C0633:
 00002CE4  3C 08	   *	    cmp    al, 008h
 00002CE6  74 0C	   *	    je	@C063A
 00002CE8  3C 15	   *	    cmp    al, 015h
 00002CEA  74 08	   *	    je	@C063A
 00002CEC  3C 22	   *	    cmp    al, 022h
 00002CEE  74 04	   *	    je	@C063A
 00002CF0  3C 2F	   *	    cmp    al, 02Fh
 00002CF2  75 04	   *	    jne    @C0639
 00002CF4		   *@C063A:
 00002CF4  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002CF6  EB 62	   *	    jmp    @C063E
 00002CF8		   *@C0639:
 00002CF8  3C 09	   *	    cmp    al, 009h
 00002CFA  74 0C	   *	    je	@C0640
 00002CFC  3C 16	   *	    cmp    al, 016h
 00002CFE  74 08	   *	    je	@C0640
 00002D00  3C 23	   *	    cmp    al, 023h
 00002D02  74 04	   *	    je	@C0640
 00002D04  3C 30	   *	    cmp    al, 030h
 00002D06  75 04	   *	    jne    @C063F
 00002D08		   *@C0640:
 00002D08  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002D0A  EB 4E	   *	    jmp    @C0644
 00002D0C		   *@C063F:
 00002D0C  3C 0A	   *	    cmp    al, 00Ah
 00002D0E  74 0C	   *	    je	@C0646
 00002D10  3C 17	   *	    cmp    al, 017h
 00002D12  74 08	   *	    je	@C0646
 00002D14  3C 24	   *	    cmp    al, 024h
 00002D16  74 04	   *	    je	@C0646
 00002D18  3C 31	   *	    cmp    al, 031h
 00002D1A  75 04	   *	    jne    @C0645
 00002D1C		   *@C0646:
 00002D1C  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002D1E  EB 3A	   *	    jmp    @C064A
 00002D20		   *@C0645:
 00002D20  3C 0B	   *	    cmp    al, 00Bh
 00002D22  74 0C	   *	    je	@C064C
 00002D24  3C 18	   *	    cmp    al, 018h
 00002D26  74 08	   *	    je	@C064C
 00002D28  3C 25	   *	    cmp    al, 025h
 00002D2A  74 04	   *	    je	@C064C
 00002D2C  3C 32	   *	    cmp    al, 032h
 00002D2E  75 04	   *	    jne    @C064B
 00002D30		   *@C064C:
 00002D30  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002D32  EB 26	   *	    jmp    @C0650
 00002D34		   *@C064B:
 00002D34  3C 0C	   *	    cmp    al, 00Ch
 00002D36  74 0C	   *	    je	@C0652
 00002D38  3C 19	   *	    cmp    al, 019h
 00002D3A  74 08	   *	    je	@C0652
 00002D3C  3C 26	   *	    cmp    al, 026h
 00002D3E  74 04	   *	    je	@C0652
 00002D40  3C 33	   *	    cmp    al, 033h
 00002D42  75 04	   *	    jne    @C0651
 00002D44		   *@C0652:
 00002D44  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002D46  EB 12	   *	    jmp    @C0656
 00002D48		   *@C0651:
 00002D48  3C 0D	   *	    cmp    al, 00Dh
 00002D4A  74 0C	   *	    je	@C0658
 00002D4C  3C 1A	   *	    cmp    al, 01Ah
 00002D4E  74 08	   *	    je	@C0658
 00002D50  3C 27	   *	    cmp    al, 027h
 00002D52  74 04	   *	    je	@C0658
 00002D54  3C 34	   *	    cmp    al, 034h
 00002D56  75 02	   *	    jne    @C0657
 00002D58		   *@C0658:
 00002D58  B0 0D			mov al,13
				.endif
 00002D5A		   *@C0657:
 00002D5A		   *@C0656:
 00002D5A		   *@C0650:
 00002D5A		   *@C064A:
 00002D5A		   *@C0644:
 00002D5A		   *@C063E:
 00002D5A		   *@C0638:
 00002D5A		   *@C0632:
 00002D5A		   *@C062C:
 00002D5A		   *@C0626:
 00002D5A		   *@C0620:
 00002D5A		   *@C061A:
 00002D5A		   *@C0614:
 00002D5A  A2 0000000C R	mov straightp[5], al


 00002D5F  A0 00000143 R	mov al, cardp7.value
				.if (al == 1||al==14||al==27||al==40)
 00002D64  3C 01	   *	    cmp    al, 001h
 00002D66  74 0C	   *	    je	@C065D
 00002D68  3C 0E	   *	    cmp    al, 00Eh
 00002D6A  74 08	   *	    je	@C065D
 00002D6C  3C 1B	   *	    cmp    al, 01Bh
 00002D6E  74 04	   *	    je	@C065D
 00002D70  3C 28	   *	    cmp    al, 028h
 00002D72  75 07	   *	    jne    @C065C
 00002D74		   *@C065D:
 00002D74  B0 01			mov al,1	
				.elseif (al ==2||al==15||al==28||al==41)
 00002D76  E9 000000FD	   *	    jmp    @C0661
 00002D7B		   *@C065C:
 00002D7B  3C 02	   *	    cmp    al, 002h
 00002D7D  74 0C	   *	    je	@C0663
 00002D7F  3C 0F	   *	    cmp    al, 00Fh
 00002D81  74 08	   *	    je	@C0663
 00002D83  3C 1C	   *	    cmp    al, 01Ch
 00002D85  74 04	   *	    je	@C0663
 00002D87  3C 29	   *	    cmp    al, 029h
 00002D89  75 07	   *	    jne    @C0662
 00002D8B		   *@C0663:
 00002D8B  B0 02			mov al,2
				.elseif (al ==3||al==16||al==29||al==42)
 00002D8D  E9 000000E6	   *	    jmp    @C0667
 00002D92		   *@C0662:
 00002D92  3C 03	   *	    cmp    al, 003h
 00002D94  74 0C	   *	    je	@C0669
 00002D96  3C 10	   *	    cmp    al, 010h
 00002D98  74 08	   *	    je	@C0669
 00002D9A  3C 1D	   *	    cmp    al, 01Dh
 00002D9C  74 04	   *	    je	@C0669
 00002D9E  3C 2A	   *	    cmp    al, 02Ah
 00002DA0  75 07	   *	    jne    @C0668
 00002DA2		   *@C0669:
 00002DA2  B0 03			mov al,3
				.elseif (al == 4||al==17||al==30||al==43)
 00002DA4  E9 000000CF	   *	    jmp    @C066D
 00002DA9		   *@C0668:
 00002DA9  3C 04	   *	    cmp    al, 004h
 00002DAB  74 0C	   *	    je	@C066F
 00002DAD  3C 11	   *	    cmp    al, 011h
 00002DAF  74 08	   *	    je	@C066F
 00002DB1  3C 1E	   *	    cmp    al, 01Eh
 00002DB3  74 04	   *	    je	@C066F
 00002DB5  3C 2B	   *	    cmp    al, 02Bh
 00002DB7  75 07	   *	    jne    @C066E
 00002DB9		   *@C066F:
 00002DB9  B0 04			mov al,4
				.elseif (al == 5||al==18||al==31||al==44)
 00002DBB  E9 000000B8	   *	    jmp    @C0673
 00002DC0		   *@C066E:
 00002DC0  3C 05	   *	    cmp    al, 005h
 00002DC2  74 0C	   *	    je	@C0675
 00002DC4  3C 12	   *	    cmp    al, 012h
 00002DC6  74 08	   *	    je	@C0675
 00002DC8  3C 1F	   *	    cmp    al, 01Fh
 00002DCA  74 04	   *	    je	@C0675
 00002DCC  3C 2C	   *	    cmp    al, 02Ch
 00002DCE  75 07	   *	    jne    @C0674
 00002DD0		   *@C0675:
 00002DD0  B0 05			mov al,5
				.elseif (al == 6||al==19||al==32||al==45)
 00002DD2  E9 000000A1	   *	    jmp    @C0679
 00002DD7		   *@C0674:
 00002DD7  3C 06	   *	    cmp    al, 006h
 00002DD9  74 0C	   *	    je	@C067B
 00002DDB  3C 13	   *	    cmp    al, 013h
 00002DDD  74 08	   *	    je	@C067B
 00002DDF  3C 20	   *	    cmp    al, 020h
 00002DE1  74 04	   *	    je	@C067B
 00002DE3  3C 2D	   *	    cmp    al, 02Dh
 00002DE5  75 07	   *	    jne    @C067A
 00002DE7		   *@C067B:
 00002DE7  B0 06			mov al,6
				.elseif (al==7||al==20||al==33||al==46)
 00002DE9  E9 0000008A	   *	    jmp    @C067F
 00002DEE		   *@C067A:
 00002DEE  3C 07	   *	    cmp    al, 007h
 00002DF0  74 0C	   *	    je	@C0681
 00002DF2  3C 14	   *	    cmp    al, 014h
 00002DF4  74 08	   *	    je	@C0681
 00002DF6  3C 21	   *	    cmp    al, 021h
 00002DF8  74 04	   *	    je	@C0681
 00002DFA  3C 2E	   *	    cmp    al, 02Eh
 00002DFC  75 04	   *	    jne    @C0680
 00002DFE		   *@C0681:
 00002DFE  B0 07			mov al,7
				.elseif (al == 8||al==21||al==34||al==47)
 00002E00  EB 76	   *	    jmp    @C0685
 00002E02		   *@C0680:
 00002E02  3C 08	   *	    cmp    al, 008h
 00002E04  74 0C	   *	    je	@C0687
 00002E06  3C 15	   *	    cmp    al, 015h
 00002E08  74 08	   *	    je	@C0687
 00002E0A  3C 22	   *	    cmp    al, 022h
 00002E0C  74 04	   *	    je	@C0687
 00002E0E  3C 2F	   *	    cmp    al, 02Fh
 00002E10  75 04	   *	    jne    @C0686
 00002E12		   *@C0687:
 00002E12  B0 08			mov al,8
				.elseif (al == 9||al==22||al==35||al==48)
 00002E14  EB 62	   *	    jmp    @C068B
 00002E16		   *@C0686:
 00002E16  3C 09	   *	    cmp    al, 009h
 00002E18  74 0C	   *	    je	@C068D
 00002E1A  3C 16	   *	    cmp    al, 016h
 00002E1C  74 08	   *	    je	@C068D
 00002E1E  3C 23	   *	    cmp    al, 023h
 00002E20  74 04	   *	    je	@C068D
 00002E22  3C 30	   *	    cmp    al, 030h
 00002E24  75 04	   *	    jne    @C068C
 00002E26		   *@C068D:
 00002E26  B0 09			mov al,9
				.elseif (al == 10||al==23||al==36||al==49)
 00002E28  EB 4E	   *	    jmp    @C0691
 00002E2A		   *@C068C:
 00002E2A  3C 0A	   *	    cmp    al, 00Ah
 00002E2C  74 0C	   *	    je	@C0693
 00002E2E  3C 17	   *	    cmp    al, 017h
 00002E30  74 08	   *	    je	@C0693
 00002E32  3C 24	   *	    cmp    al, 024h
 00002E34  74 04	   *	    je	@C0693
 00002E36  3C 31	   *	    cmp    al, 031h
 00002E38  75 04	   *	    jne    @C0692
 00002E3A		   *@C0693:
 00002E3A  B0 0A			mov al,10
				.elseif (al == 11||al==24||al==37||al==50)
 00002E3C  EB 3A	   *	    jmp    @C0697
 00002E3E		   *@C0692:
 00002E3E  3C 0B	   *	    cmp    al, 00Bh
 00002E40  74 0C	   *	    je	@C0699
 00002E42  3C 18	   *	    cmp    al, 018h
 00002E44  74 08	   *	    je	@C0699
 00002E46  3C 25	   *	    cmp    al, 025h
 00002E48  74 04	   *	    je	@C0699
 00002E4A  3C 32	   *	    cmp    al, 032h
 00002E4C  75 04	   *	    jne    @C0698
 00002E4E		   *@C0699:
 00002E4E  B0 0B			mov al,11
				.elseif (al == 12||al==25||al==38||al==51)
 00002E50  EB 26	   *	    jmp    @C069D
 00002E52		   *@C0698:
 00002E52  3C 0C	   *	    cmp    al, 00Ch
 00002E54  74 0C	   *	    je	@C069F
 00002E56  3C 19	   *	    cmp    al, 019h
 00002E58  74 08	   *	    je	@C069F
 00002E5A  3C 26	   *	    cmp    al, 026h
 00002E5C  74 04	   *	    je	@C069F
 00002E5E  3C 33	   *	    cmp    al, 033h
 00002E60  75 04	   *	    jne    @C069E
 00002E62		   *@C069F:
 00002E62  B0 0C			mov al,12
				.elseif (al == 13||al==26||al==39||al==52)
 00002E64  EB 12	   *	    jmp    @C06A3
 00002E66		   *@C069E:
 00002E66  3C 0D	   *	    cmp    al, 00Dh
 00002E68  74 0C	   *	    je	@C06A5
 00002E6A  3C 1A	   *	    cmp    al, 01Ah
 00002E6C  74 08	   *	    je	@C06A5
 00002E6E  3C 27	   *	    cmp    al, 027h
 00002E70  74 04	   *	    je	@C06A5
 00002E72  3C 34	   *	    cmp    al, 034h
 00002E74  75 02	   *	    jne    @C06A4
 00002E76		   *@C06A5:
 00002E76  B0 0D			mov al,13
				.endif
 00002E78		   *@C06A4:
 00002E78		   *@C06A3:
 00002E78		   *@C069D:
 00002E78		   *@C0697:
 00002E78		   *@C0691:
 00002E78		   *@C068B:
 00002E78		   *@C0685:
 00002E78		   *@C067F:
 00002E78		   *@C0679:
 00002E78		   *@C0673:
 00002E78		   *@C066D:
 00002E78		   *@C0667:
 00002E78		   *@C0661:
 00002E78  A2 0000000D R	mov straightp[6], al

 00002E7D  B9 00000006		mov ecx,6 
 00002E82  BF 00000006		 mov edi,6 
 00002E87  BE 00000000		 mov esi,0 
				 	 
 00002E8C			 	PS1: 
 00002E8C  8B D6		 		mov edx,esi 
 00002E8E  42			 		inc edx 
 00002E8F  51			 		push ecx 
 00002E90  8B CF		 		mov ecx, edi 
 00002E92			 			PS2: 
 00002E92  8A 86 00000007 R	 				mov al, straightp[esi] 
 00002E98  8A 9A 00000007 R	 				mov bl, straightp[edx] 
				 					.if (al < bl) 
 00002E9E  3A C3	   *	    cmp    al, bl
 00002EA0  73 0E	   *	    jae    @C06A9
 00002EA2  86 C3		 						xchg al, bl 
 00002EA4  88 86 00000007 R	 						mov straightp[esi],al 
 00002EAA  88 9A 00000007 R	 						mov straightp[edx],bl 
				 					.endif  
 00002EB0		   *@C06A9:
 00002EB0  42			 				inc edx 
 00002EB1  E2 DF		 			Loop PS2 
 00002EB3  59			 		pop ecx 
 00002EB4  46			 		inc esi		 
 00002EB5  4F			 		dec edi 
 00002EB6  E2 D4		 	Loop PS1 

					
 00002EB8  BE 00000000		mov esi,0
 00002EBD  BF 00000001		mov edi,1
 00002EC2  89 35 00000121 R		mov var1, esi
 00002EC8  89 3D 00000125 R		mov var2, edi
 00002ECE  8A 86 00000007 R		mov al, straightp[esi]
 00002ED4  8A 9F 00000007 R		mov bl, straightp[edi]
					.if(al==bl)
 00002EDA  3A C3	   *	    cmp    al, bl
 00002EDC  75 07	   *	    jne    @C06AB
 00002EDE  47					inc edi
 00002EDF  8A 9F 00000007 R			mov bl, straightp[edi]
					.endif
 00002EE5		   *@C06AB:
					.if(al==bl)
 00002EE5  3A C3	   *	    cmp    al, bl
 00002EE7  75 07	   *	    jne    @C06AD
 00002EE9  47					inc edi
 00002EEA  8A 9F 00000007 R			mov bl, straightp[edi]
					.endif
 00002EF0		   *@C06AD:
 00002EF0  2A C3			sub al,bl
 00002EF2  46				inc esi
 00002EF3  47				inc edi
						.if(al==bl)
 00002EF4  3A C3	   *	    cmp    al, bl
 00002EF6  0F 85 000000CB  *	    jne    @C06AF
 00002EFC  8A 86 00000007 R				mov al, straightp[esi]
 00002F02  8A 9F 00000007 R				mov bl, straightp[edi]
							.if(al==bl)
 00002F08  3A C3	   *	    cmp    al, bl
 00002F0A  75 07	   *	    jne    @C06B1
 00002F0C  47							inc edi
 00002F0D  8A 9F 00000007 R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00002F13		   *@C06B1:
 00002F13  3A C3	   *	    cmp    al, bl
 00002F15  75 07	   *	    jne    @C06B3
 00002F17  47							inc edi
 00002F18  8A 9F 00000007 R					mov bl, straightp[edi]
							.endif
 00002F1E		   *@C06B3:
 00002F1E  2A C3					sub al,bl
 00002F20  46						inc esi
 00002F21  47						inc edi
								.if(al==bl)
 00002F22  3A C3	   *	    cmp    al, bl
 00002F24  0F 85 0000009D  *	    jne    @C06B5
 00002F2A  8A 86 00000007 R						mov al, straightp[esi]
 00002F30  8A 9F 00000007 R						mov bl, straightp[edi]
									.if(al==bl)
 00002F36  3A C3	   *	    cmp    al, bl
 00002F38  75 07	   *	    jne    @C06B7
 00002F3A  47									inc edi
 00002F3B  8A 9F 00000007 R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00002F41		   *@C06B7:
 00002F41  3A C3	   *	    cmp    al, bl
 00002F43  75 07	   *	    jne    @C06B9
 00002F45  47									inc edi
 00002F46  8A 9F 00000007 R							mov bl, straightp[edi]
									.endif
 00002F4C		   *@C06B9:
 00002F4C  2A C3							sub al,bl
 00002F4E  46								inc esi
 00002F4F  47								inc edi
										.if(al==bl)
 00002F50  3A C3	   *	    cmp    al, bl
 00002F52  75 73	   *	    jne    @C06BB
 00002F54  8A 86 00000007 R								mov al, straightp[esi]
 00002F5A  8A 9F 00000007 R									mov bl, straightp[edi]
												.if(al==bl)
 00002F60  3A C3	   *	    cmp    al, bl
 00002F62  75 07	   *	    jne    @C06BD
 00002F64  47												inc edi
 00002F65  8A 9F 00000007 R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00002F6B		   *@C06BD:
 00002F6B  3A C3	   *	    cmp    al, bl
 00002F6D  75 07	   *	    jne    @C06BF
 00002F6F  47												inc edi
 00002F70  8A 9F 00000007 R										mov bl, straightp[edi]
												.endif
 00002F76		   *@C06BF:
 00002F76  2A C3										sub al,bl
 00002F78  46											inc esi
 00002F79  47											inc edi
													.if(al==bl)
 00002F7A  3A C3	   *	    cmp    al, bl
 00002F7C  75 49	   *	    jne    @C06C1
 00002F7E  8A 86 00000007 R											mov al, straightp[esi]
 00002F84  8A 9F 00000007 R											mov bl, straightp[edi]
														.if(al==bl)
 00002F8A  3A C3	   *	    cmp    al, bl
 00002F8C  75 07	   *	    jne    @C06C3
 00002F8E  47														inc edi
 00002F8F  8A 9F 00000007 R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 00002F95		   *@C06C3:
 00002F95  3A C3	   *	    cmp    al, bl
 00002F97  75 07	   *	    jne    @C06C5
 00002F99  47														inc edi
 00002F9A  8A 9F 00000007 R												mov bl, straightp[edi]
														.endif
 00002FA0		   *@C06C5:
 00002FA0  2A C3												sub al,bl
 00002FA2  46													inc esi
 00002FA3  47													inc edi
															.if(al==bl)
 00002FA4  3A C3	   *	    cmp    al, bl
 00002FA6  75 1F	   *	    jne    @C06C7
 00002FA8  FF 05 0000003A R													inc isstraightp
 00002FAE  8B 35 00000121 R													mov esi, var1
 00002FB4  8A 86 00000007 R													mov al, straightP[esi]
																	.if(HighStP < al)
 00002FBA  38 05 00000053 R *	    cmp    HighStp, al
 00002FC0  73 05	   *	    jae    @C06C9
 00002FC2  A2 00000053 R															mov HighStP, al
																	.endif
													.endif
 00002FC7		   *@C06C9:
											.endif
 00002FC7		   *@C06C7:
									.endif
 00002FC7		   *@C06C1:
							.endif
 00002FC7		   *@C06BB:
					.endif
 00002FC7		   *@C06B5:
 00002FC7		   *@C06AF:
 00002FC7  8B 35 00000121 R		mov esi, var1
 00002FCD  8B 3D 00000125 R		mov edi, var2
 00002FD3  46				inc esi
 00002FD4  47				inc edi

 00002FD5  89 35 00000121 R		mov var1, esi
 00002FDB  89 3D 00000125 R		mov var2, edi
 00002FE1  8A 86 00000007 R		mov al, straightp[esi]
 00002FE7  8A 9F 00000007 R		mov bl, straightp[edi]
					.if(al==bl)
 00002FED  3A C3	   *	    cmp    al, bl
 00002FEF  75 07	   *	    jne    @C06CB
 00002FF1  47					inc edi
 00002FF2  8A 9F 00000007 R			mov bl, straightp[edi]
					.endif
 00002FF8		   *@C06CB:
					.if(al==bl)
 00002FF8  3A C3	   *	    cmp    al, bl
 00002FFA  75 07	   *	    jne    @C06CD
 00002FFC  47					inc edi
 00002FFD  8A 9F 00000007 R			mov bl, straightp[edi]
					.endif
 00003003		   *@C06CD:
 00003003  2A C3			sub al,bl
 00003005  46				inc esi
 00003006  47				inc edi
						.if(al==bl)
 00003007  3A C3	   *	    cmp    al, bl
 00003009  0F 85 000000CB  *	    jne    @C06CF
 0000300F  8A 86 00000007 R				mov al, straightp[esi]
 00003015  8A 9F 00000007 R				mov bl, straightp[edi]
							.if(al==bl)
 0000301B  3A C3	   *	    cmp    al, bl
 0000301D  75 07	   *	    jne    @C06D1
 0000301F  47							inc edi
 00003020  8A 9F 00000007 R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00003026		   *@C06D1:
 00003026  3A C3	   *	    cmp    al, bl
 00003028  75 07	   *	    jne    @C06D3
 0000302A  47							inc edi
 0000302B  8A 9F 00000007 R					mov bl, straightp[edi]
							.endif
 00003031		   *@C06D3:
 00003031  2A C3					sub al,bl
 00003033  46						inc esi
 00003034  47						inc edi
								.if(al==bl)
 00003035  3A C3	   *	    cmp    al, bl
 00003037  0F 85 0000009D  *	    jne    @C06D5
 0000303D  8A 86 00000007 R						mov al, straightp[esi]
 00003043  8A 9F 00000007 R						mov bl, straightp[edi]
									.if(al==bl)
 00003049  3A C3	   *	    cmp    al, bl
 0000304B  75 07	   *	    jne    @C06D7
 0000304D  47									inc edi
 0000304E  8A 9F 00000007 R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00003054		   *@C06D7:
 00003054  3A C3	   *	    cmp    al, bl
 00003056  75 07	   *	    jne    @C06D9
 00003058  47									inc edi
 00003059  8A 9F 00000007 R							mov bl, straightp[edi]
									.endif
 0000305F		   *@C06D9:
 0000305F  2A C3							sub al,bl
 00003061  46								inc esi
 00003062  47								inc edi
										.if(al==bl)
 00003063  3A C3	   *	    cmp    al, bl
 00003065  75 73	   *	    jne    @C06DB
 00003067  8A 86 00000007 R								mov al, straightp[esi]
 0000306D  8A 9F 00000007 R									mov bl, straightp[edi]
												.if(al==bl)
 00003073  3A C3	   *	    cmp    al, bl
 00003075  75 07	   *	    jne    @C06DD
 00003077  47												inc edi
 00003078  8A 9F 00000007 R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 0000307E		   *@C06DD:
 0000307E  3A C3	   *	    cmp    al, bl
 00003080  75 07	   *	    jne    @C06DF
 00003082  47												inc edi
 00003083  8A 9F 00000007 R										mov bl, straightp[edi]
												.endif
 00003089		   *@C06DF:
 00003089  2A C3										sub al,bl
 0000308B  46											inc esi
 0000308C  47											inc edi
													.if(al==bl)
 0000308D  3A C3	   *	    cmp    al, bl
 0000308F  75 49	   *	    jne    @C06E1
 00003091  8A 86 00000007 R											mov al, straightp[esi]
 00003097  8A 9F 00000007 R											mov bl, straightp[edi]
														.if(al==bl)
 0000309D  3A C3	   *	    cmp    al, bl
 0000309F  75 07	   *	    jne    @C06E3
 000030A1  47														inc edi
 000030A2  8A 9F 00000007 R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 000030A8		   *@C06E3:
 000030A8  3A C3	   *	    cmp    al, bl
 000030AA  75 07	   *	    jne    @C06E5
 000030AC  47														inc edi
 000030AD  8A 9F 00000007 R												mov bl, straightp[edi]
														.endif
 000030B3		   *@C06E5:
 000030B3  2A C3												sub al,bl
 000030B5  46													inc esi
 000030B6  47													inc edi
															.if(al==bl)
 000030B7  3A C3	   *	    cmp    al, bl
 000030B9  75 1F	   *	    jne    @C06E7
 000030BB  FF 05 0000003A R													inc isstraightp
 000030C1  8B 35 00000121 R													mov esi, var1
 000030C7  8A 86 00000007 R													mov al, straightp[esi]
																	.if(HighStp < al)
 000030CD  38 05 00000053 R *	    cmp    HighStp, al
 000030D3  73 05	   *	    jae    @C06E9
 000030D5  A2 00000053 R															mov HighStp, al
																	.endif
													.endif
 000030DA		   *@C06E9:
											.endif
 000030DA		   *@C06E7:
									.endif
 000030DA		   *@C06E1:
							.endif
 000030DA		   *@C06DB:
					.endif
 000030DA		   *@C06D5:
 000030DA		   *@C06CF:
 000030DA  8B 35 00000121 R		mov esi, var1
 000030E0  8B 3D 00000125 R		mov edi,var2
 000030E6  46				inc esi
 000030E7  47				inc edi

 000030E8  89 35 00000121 R		mov var1,esi
 000030EE  89 3D 00000125 R		mov var2, edi
 000030F4  8A 86 00000007 R		mov al, straightp[esi]
 000030FA  8A 9F 00000007 R		mov bl, straightp[edi]
					.if(al==bl)
 00003100  3A C3	   *	    cmp    al, bl
 00003102  75 07	   *	    jne    @C06EB
 00003104  47					inc edi
 00003105  8A 9F 00000007 R			mov bl, straightp[edi]
					.endif
 0000310B		   *@C06EB:
					.if(al==bl)
 0000310B  3A C3	   *	    cmp    al, bl
 0000310D  75 07	   *	    jne    @C06ED
 0000310F  47					inc edi
 00003110  8A 9F 00000007 R			mov bl, straightp[edi]
					.endif
 00003116		   *@C06ED:
 00003116  2A C3			sub al,bl
 00003118  46				inc esi
 00003119  47				inc edi
						.if(al==bl)
 0000311A  3A C3	   *	    cmp    al, bl
 0000311C  0F 85 000000CB  *	    jne    @C06EF
 00003122  8A 86 00000007 R				mov al, straightp[esi]
 00003128  8A 9F 00000007 R				mov bl, straightp[edi]
							.if(al==bl)
 0000312E  3A C3	   *	    cmp    al, bl
 00003130  75 07	   *	    jne    @C06F1
 00003132  47							inc edi
 00003133  8A 9F 00000007 R					mov bl, straightp[edi]
							.endif
							.if(al==bl)
 00003139		   *@C06F1:
 00003139  3A C3	   *	    cmp    al, bl
 0000313B  75 07	   *	    jne    @C06F3
 0000313D  47							inc edi
 0000313E  8A 9F 00000007 R					mov bl, straightp[edi]
							.endif
 00003144		   *@C06F3:
 00003144  2A C3					sub al,bl
 00003146  46						inc esi
 00003147  47						inc edi
								.if(al==bl)
 00003148  3A C3	   *	    cmp    al, bl
 0000314A  0F 85 0000009D  *	    jne    @C06F5
 00003150  8A 86 00000007 R						mov al, straightp[esi]
 00003156  8A 9F 00000007 R						mov bl, straightp[edi]
									.if(al==bl)
 0000315C  3A C3	   *	    cmp    al, bl
 0000315E  75 07	   *	    jne    @C06F7
 00003160  47									inc edi
 00003161  8A 9F 00000007 R							mov bl, straightp[edi]
									.endif
									.if(al==bl)
 00003167		   *@C06F7:
 00003167  3A C3	   *	    cmp    al, bl
 00003169  75 07	   *	    jne    @C06F9
 0000316B  47									inc edi
 0000316C  8A 9F 00000007 R							mov bl, straightp[edi]
									.endif
 00003172		   *@C06F9:
 00003172  2A C3							sub al,bl
 00003174  46								inc esi
 00003175  47								inc edi
										.if(al==bl)
 00003176  3A C3	   *	    cmp    al, bl
 00003178  75 73	   *	    jne    @C06FB
 0000317A  8A 86 00000007 R								mov al, straightp[esi]
 00003180  8A 9F 00000007 R									mov bl, straightp[edi]
												.if(al==bl)
 00003186  3A C3	   *	    cmp    al, bl
 00003188  75 07	   *	    jne    @C06FD
 0000318A  47												inc edi
 0000318B  8A 9F 00000007 R										mov bl, straightp[edi]
												.endif
												.if(al==bl)
 00003191		   *@C06FD:
 00003191  3A C3	   *	    cmp    al, bl
 00003193  75 07	   *	    jne    @C06FF
 00003195  47												inc edi
 00003196  8A 9F 00000007 R										mov bl, straightp[edi]
												.endif
 0000319C		   *@C06FF:
 0000319C  2A C3										sub al,bl
 0000319E  46											inc esi
 0000319F  47											inc edi
													.if(al==bl)
 000031A0  3A C3	   *	    cmp    al, bl
 000031A2  75 49	   *	    jne    @C0701
 000031A4  8A 86 00000007 R											mov al, straightp[esi]
 000031AA  8A 9F 00000007 R											mov bl, straightp[edi]
														.if(al==bl)
 000031B0  3A C3	   *	    cmp    al, bl
 000031B2  75 07	   *	    jne    @C0703
 000031B4  47														inc edi
 000031B5  8A 9F 00000007 R												mov bl, straightp[edi]
														.endif
														.if(al==bl)
 000031BB		   *@C0703:
 000031BB  3A C3	   *	    cmp    al, bl
 000031BD  75 07	   *	    jne    @C0705
 000031BF  47														inc edi
 000031C0  8A 9F 00000007 R												mov bl, straightp[edi]
														.endif
 000031C6		   *@C0705:
 000031C6  2A C3												sub al,bl
 000031C8  46													inc esi
 000031C9  47													inc edi
															.if(al==bl)
 000031CA  3A C3	   *	    cmp    al, bl
 000031CC  75 1F	   *	    jne    @C0707
 000031CE  FF 05 0000003A R													inc isstraightp
 000031D4  8B 35 00000121 R													mov esi, var1
 000031DA  8A 86 00000007 R													mov al, straightp[esi]
																	.if(HighStp < al)
 000031E0  38 05 00000053 R *	    cmp    HighStp, al
 000031E6  73 05	   *	    jae    @C0709
 000031E8  A2 00000053 R															mov HighStp, al
																	.endif
													.endif
 000031ED		   *@C0709:
											.endif
 000031ED		   *@C0707:
									.endif
 000031ED		   *@C0701:
							.endif
 000031ED		   *@C06FB:
					.endif
 000031ED		   *@C06F5:
 000031ED		   *@C06EF:

					.if(HighStP==13)
 000031ED  80 3D 00000053 R
	   0D		   *	    cmp    HighStp, 00Dh
 000031F4  75 13	   *	    jne    @C070B
						.if(PlayerFlush > 0)
 000031F6  83 3D 00000066 R
	   00		   *	    cmp    PlayerFlush, 000h
 000031FD  76 0A	   *	    jbe    @C070D
 000031FF  C7 05 00000056 R				mov PlayerRoyal, 1
	   00000001
						.endif
					.endif
 00003209		   *@C070D:
 00003209		   *@C070B:
					.if (HighStP > 0)
 00003209  80 3D 00000053 R
	   00		   *	    cmp    HighStp, 000h
 00003210  76 0A	   *	    jbe    @C070F
 00003212  C7 05 0000006A R			mov PlayerStraight, 1
	   00000001
					.endif
 0000321C		   *@C070F:

 0000321C  C3			ret
 0000321D			IsAStraight ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000321D			 FourKind PROC
				; compute if person has four cards of same value if card a=b=c=d if not b=c=d=e if...
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000321D  B9 00000004		mov ecx, 4
 00003222  BE 00000000		mov esi,0
 00003227  BF 00000001		mov edi,1
 0000322C				FKs:
 0000322C  8A 86 00000000 R			mov al, straights[esi]
 00003232  8A 9F 00000000 R			mov bl, straights[edi]
 00003238  89 35 00000121 R			mov var1, esi
 0000323E  46					inc esi
 0000323F  89 3D 00000125 R			mov var2, edi
 00003245  47					inc edi
							.if(al==bl)
 00003246  3A C3	   *	    cmp    al, bl
 00003248  75 47	   *	    jne    @C0711
 0000324A  8A 86 00000000 R					mov al, straights[esi]
 00003250  8A 9F 00000000 R					mov bl, straights[edi]
 00003256  46							inc esi
 00003257  47							inc edi
									.if(al==bl)
 00003258  3A C3	   *	    cmp    al, bl
 0000325A  75 35	   *	    jne    @C0713
 0000325C  8A 86 00000000 R							mov al, straights[esi]
 00003262  8A 9F 00000000 R							mov bl, straights[edi]
 00003268  46									inc esi
 00003269  47									inc edi
											.if(al==bl)
 0000326A  3A C3	   *	    cmp    al, bl
 0000326C  75 23	   *	    jne    @C0715
 0000326E  C7 05 0000009E R									mov SpockFour,1
	   00000001
 00003278  8A 86 00000000 R									mov al, straights[esi]
 0000327E  A2 00000046 R									mov HighFourS, al
 00003283  8B 3D 00000125 R									mov edi,var2
 00003289  8B 35 00000121 R									mov esi,var1
 0000328F  46											inc esi
 00003290  47											inc edi
											.endif
									.endif
 00003291		   *@C0715:
							.endif
 00003291		   *@C0713:
 00003291		   *@C0711:
 00003291  E2 99			Loop FKS

				;Player

 00003293  B9 00000004			mov ecx, 4
 00003298  BE 00000000		mov esi,0
 0000329D  BF 00000001		mov edi,1
 000032A2				FKp:
 000032A2  8A 86 00000007 R			mov al, straightp[esi]
 000032A8  8A 9F 00000007 R			mov bl, straightp[edi]
 000032AE  89 35 00000121 R			mov var1, esi
 000032B4  46					inc esi
 000032B5  89 3D 00000125 R			mov var2, edi
 000032BB  47					inc edi
							.if(al==bl)
 000032BC  3A C3	   *	    cmp    al, bl
 000032BE  75 47	   *	    jne    @C0717
 000032C0  8A 86 00000007 R					mov al, straightp[esi]
 000032C6  8A 9F 00000007 R					mov bl, straightp[edi]
 000032CC  46							inc esi
 000032CD  47							inc edi
									.if(al==bl)
 000032CE  3A C3	   *	    cmp    al, bl
 000032D0  75 35	   *	    jne    @C0719
 000032D2  8A 86 00000007 R							mov al, straightp[esi]
 000032D8  8A 9F 00000007 R							mov bl, straightp[edi]
 000032DE  46									inc esi
 000032DF  47									inc edi
											.if(al==bl)
 000032E0  3A C3	   *	    cmp    al, bl
 000032E2  75 23	   *	    jne    @C071B
 000032E4  C7 05 0000005E R									mov PlayerFour,1
	   00000001
 000032EE  8A 86 00000007 R									mov al, straightp[esi]
 000032F4  A2 00000047 R									mov HighFourP, al
 000032F9  8B 3D 00000125 R									mov edi,var2
 000032FF  8B 35 00000121 R									mov esi,var1
 00003305  46											inc esi
 00003306  47											inc edi
											.endif
									.endif
 00003307		   *@C071B:
							.endif
 00003307		   *@C0719:
 00003307		   *@C0717:
 00003307  E2 99			Loop FKp
 00003309  C3			ret
 0000330A			FourKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000330A			FullHouse PROC
				;If 3 of a kind and pair then person has full house
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				.if(HighThrees > 0)
 0000330A  80 3D 00000048 R
	   00		   *	    cmp    HighThreeS, 000h
 00003311  76 13	   *	    jbe    @C071D
					.if(High2Pairs > 0)
 00003313  80 3D 0000004A R
	   00		   *	    cmp    High2PairS, 000h
 0000331A  76 0A	   *	    jbe    @C071F
 0000331C  C7 05 000000A2 R			mov SpockFull, 1
	   00000001
					.endif
				.endif
 00003326		   *@C071F:
 00003326		   *@C071D:

				.if(HighThreep > 0)
 00003326  80 3D 00000049 R
	   00		   *	    cmp    HighThreeP, 000h
 0000332D  76 13	   *	    jbe    @C0721
					.if(High2Pairp > 0)
 0000332F  80 3D 0000004B R
	   00		   *	    cmp    High2PairP, 000h
 00003336  76 0A	   *	    jbe    @C0723
 00003338  C7 05 00000062 R			mov PlayerFull, 1
	   00000001
					.endif
				.endif
 00003342		   *@C0723:
 00003342		   *@C0721:

 00003342  C3			ret
 00003343			FullHouse ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003343			ThreeKind PROC
				;compute if three of a kind
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00003343  B9 00000005		mov ecx,5
 00003348  BE 00000000		mov esi,0
 0000334D  BF 00000001		mov edi,1

 00003352				TKS:
 00003352  89 35 00000121 R			mov var1, esi
 00003358  89 3D 00000125 R			mov var2, edi
 0000335E  8A 86 00000000 R			mov al, straights[esi]
 00003364  8A 9F 00000000 R			mov bl, straights[edi]
							.if(al==bl)
 0000336A  3A C3	   *	    cmp    al, bl
 0000336C  75 2B	   *	    jne    @C0725
 0000336E  46							inc esi
 0000336F  47							inc edi
 00003370  8A 86 00000000 R					mov al, straights[esi]
 00003376  8A 9F 00000000 R					mov bl, straights[edi]
									.if(al==bl)
 0000337C  3A C3	   *	    cmp    al, bl
 0000337E  75 19	   *	    jne    @C0727
 00003380  8B 35 00000121 R									mov esi, var1
 00003386  8A 86 00000000 R									mov al, straights[esi]
													.if(HighThreeS < al)
 0000338C  38 05 00000048 R *	    cmp    HighThreeS, al
 00003392  73 05	   *	    jae    @C0729
 00003394  A2 00000048 R											mov HighThreeS,al
											.endif
									.endif
 00003399		   *@C0729:
							.endif
 00003399		   *@C0727:
 00003399		   *@C0725:
 00003399  8B 35 00000121 R			mov esi,var1
 0000339F  8B 3D 00000125 R			mov edi, var2
 000033A5  46					inc esi
 000033A6  47					inc edi
 000033A7  E2 A9			Loop TKS
					.if(HighThreeS > 0)
 000033A9  80 3D 00000048 R
	   00		   *	    cmp    HighThreeS, 000h
 000033B0  76 0A	   *	    jbe    @C072B
 000033B2  C7 05 000000AE R			mov SpockThree, 1
	   00000001
					.endif
 000033BC		   *@C072B:

				;player

 000033BC  B9 00000005		mov ecx,5
 000033C1  BE 00000000		mov esi,0
 000033C6  BF 00000001		mov edi,1

 000033CB				TKP:
 000033CB  89 35 00000121 R			mov var1, esi
 000033D1  89 3D 00000125 R			mov var2, edi
 000033D7  8A 86 00000007 R			mov al, straightP[esi]
 000033DD  8A 9F 00000007 R			mov bl, straightP[edi]
							.if(al==bl)
 000033E3  3A C3	   *	    cmp    al, bl
 000033E5  75 2B	   *	    jne    @C072D
 000033E7  46							inc esi
 000033E8  47							inc edi
 000033E9  8A 86 00000007 R					mov al, straightP[esi]
 000033EF  8A 9F 00000007 R					mov bl, straightP[edi]
											.if(al==bl)
 000033F5  3A C3	   *	    cmp    al, bl
 000033F7  75 19	   *	    jne    @C072F
 000033F9  8B 35 00000121 R									mov esi, var1
 000033FF  8A 86 00000007 R									mov al, straightP[esi]
													.if(HighThreeP < al)
 00003405  38 05 00000049 R *	    cmp    HighThreeP, al
 0000340B  73 05	   *	    jae    @C0731
 0000340D  A2 00000049 R											mov HighThreeP,al
											.endif
									.endif
 00003412		   *@C0731:
							.endif
 00003412		   *@C072F:
 00003412		   *@C072D:
 00003412  8B 35 00000121 R			mov esi,var1
 00003418  8B 3D 00000125 R			mov edi, var2
 0000341E  46					inc esi
 0000341F  47					inc edi
 00003420  E2 A9			Loop TKP
					.if(HighThreeP > 0)
 00003422  80 3D 00000049 R
	   00		   *	    cmp    HighThreeP, 000h
 00003429  76 0A	   *	    jbe    @C0733
 0000342B  C7 05 0000006E R			mov PlayerThree,1
	   00000001
					.endif
 00003435		   *@C0733:
 00003435  C3			ret
 00003436			ThreeKind ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003436			TwoPair PROC
				;Compute 2pair
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

 00003436  B9 00000006		mov ecx,6
 0000343B  BE 00000000		mov esi,0
 00003440  BF 00000001		mov edi,1
 00003445			TPS:
 00003445  8A 86 00000000 R		mov al, straights[esi]
 0000344B  8A 9F 00000000 R		mov bl, straights[edi]
						.if(al==bl)
 00003451  3A C3	   *	    cmp    al, bl
 00003453  75 2D	   *	    jne    @C0735
							.if(al > High2Pairs)
 00003455  3A 05 0000004A R *	    cmp    al, High2PairS
 0000345B  76 11	   *	    jbe    @C0737
 0000345D  A2 0000004A R					mov High2Pairs, al
 00003462  C7 05 000000B6 R					mov SpockOnePair,1
	   00000001
							.elseif (al > low2pairs)
 0000346C  EB 14	   *	    jmp    @C0739
 0000346E		   *@C0737:
 0000346E  3A 05 0000004C R *	    cmp    al, Low2PairS
 00003474  76 07	   *	    jbe    @C073A
 00003476  A2 0000004C R					mov Low2Pairs, al
							.else	
 0000347B  EB 05	   *	    jmp    @C073C
 0000347D		   *@C073A:
 0000347D  A2 0000004E R					mov Pairs, al
							.endif
						.endif
 00003482		   *@C073C:
 00003482		   *@C0739:
 00003482		   *@C0735:
 00003482  46				inc esi
 00003483  47				inc edi
 00003484  E2 BF		Loop TPS

					.if(High2pairs>0)
 00003486  80 3D 0000004A R
	   00		   *	    cmp    High2PairS, 000h
 0000348D  76 13	   *	    jbe    @C073D
						.if(Low2pairs>0)
 0000348F  80 3D 0000004C R
	   00		   *	    cmp    Low2PairS, 000h
 00003496  76 0A	   *	    jbe    @C073F
 00003498  C7 05 000000B2 R				mov SpockTwoPair, 1
	   00000001
						.endif
					.endif
 000034A2		   *@C073F:
 000034A2		   *@C073D:

				;player

 000034A2  B9 00000006		mov ecx,6
 000034A7  BE 00000000		mov esi,0
 000034AC  BF 00000001		mov edi,1
 000034B1			TPP:
 000034B1  8A 86 00000007 R		mov al, straightp[esi]
 000034B7  8A 9F 00000007 R		mov bl, straightp[edi]
						.if(al==bl)
 000034BD  3A C3	   *	    cmp    al, bl
 000034BF  75 2D	   *	    jne    @C0741
							.if(al > High2Pairp)
 000034C1  3A 05 0000004B R *	    cmp    al, High2PairP
 000034C7  76 11	   *	    jbe    @C0743
 000034C9  A2 0000004B R					mov High2Pairp, al
 000034CE  C7 05 00000076 R					mov PlayerOnePair,1
	   00000001
							.elseif (al > low2pairp)
 000034D8  EB 14	   *	    jmp    @C0745
 000034DA		   *@C0743:
 000034DA  3A 05 0000004D R *	    cmp    al, Low2PairP
 000034E0  76 07	   *	    jbe    @C0746
 000034E2  A2 0000004D R					mov Low2Pairp, al
							.else	
 000034E7  EB 05	   *	    jmp    @C0748
 000034E9		   *@C0746:
 000034E9  A2 0000004F R					mov Pairp, al
							.endif
						.endif
 000034EE		   *@C0748:
 000034EE		   *@C0745:
 000034EE		   *@C0741:
 000034EE  46				inc esi
 000034EF  47				inc edi
 000034F0  E2 BF		Loop TPP

					.if(High2pairp>0)
 000034F2  80 3D 0000004B R
	   00		   *	    cmp    High2PairP, 000h
 000034F9  76 13	   *	    jbe    @C0749
						.if(Low2pairp>0)
 000034FB  80 3D 0000004D R
	   00		   *	    cmp    Low2PairP, 000h
 00003502  76 0A	   *	    jbe    @C074B
 00003504  C7 05 00000072 R				mov PlayerTwoPair, 1
	   00000001
						.endif
					.endif
 0000350E		   *@C074B:
 0000350E		   *@C0749:

 0000350E  C3			ret
 0000350F			TwoPair ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;


				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000350F			HighCard PROC
				;Compute highes card from is hand organized by straight
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 0000350F  A0 00000000 R	mov al, straights[0]
 00003514  A2 00000054 R	mov HighCards,al

 00003519  A0 00000007 R	mov al, straightp[0]
 0000351E  A2 00000055 R	mov HighCardp, al
 00003523  C3			ret
 00003524			HighCard ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003524			Display PROC
				;Display Cards except for spock
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003524  C6 05 000003BB R		mov PromptSuit, "X"
	   58
 0000352B  E8 FFFFD200			Call HandSpock
 00003530  E8 FFFFD449			Call HandPlayer
 00003535  E8 00000000 E		call clrscr

				;Spock

 0000353A  BA 0000034D R		mov edx, OFFSET PromptShowSpock
 0000353F  E8 00000000 E		Call writestring
 00003544  E8 00000000 E		call crlf
 00003549  BA 00000390 R		mov edx, OFFSET PromptShowSpockChips
 0000354E  E8 00000000 E		call writestring
 00003553  A1 00000107 R		mov eax, ChipsSpock
 00003558  E8 00000000 E		call writeint
 0000355D  E8 00000000 E		call crlf
 00003562  E8 00000000 E		call crlf

				;Table

 00003567  BA 00000365 R		mov edx, OFFSET PromptShowTable1
 0000356C  E8 00000000 E		call writestring
 00003571  8A 1D 00000129 R		mov bl, cards1.value
					ConvertValue
 00003577  80 FB 34	   *	    cmp    bl, 034h
 0000357A  0F 87 000000A8  *	    ja	@C074D
 00003580  80 FB 01	   *	    cmp    bl, 001h
 00003583  0F 82 0000009F  *	    jb	@C074D
 00003589  80 FB 0E	   *	    cmp    bl, 00Eh
 0000358C  72 0A	   *	    jb	@C0750
 0000358E  80 FB 1A	   *	    cmp    bl, 01Ah
 00003591  77 05	   *	    ja	@C0750
 00003593  80 EB 0D	     1				sub bl, 13			
 00003596  EB 1C	   *	    jmp    @C0753
 00003598		   *@C0750:
 00003598  80 FB 1B	   *	    cmp    bl, 01Bh
 0000359B  72 0A	   *	    jb	@C0754
 0000359D  80 FB 27	   *	    cmp    bl, 027h
 000035A0  77 05	   *	    ja	@C0754
 000035A2  80 EB 1A	     1				sub bl, 26
 000035A5  EB 0D	   *	    jmp    @C0757
 000035A7		   *@C0754:
 000035A7  80 FB 28	   *	    cmp    bl, 028h
 000035AA  72 08	   *	    jb	@C0758
 000035AC  80 FB 34	   *	    cmp    bl, 034h
 000035AF  77 03	   *	    ja	@C0758
 000035B1  80 EB 27	     1				sub bl, 39
 000035B4		   *@C0758:
 000035B4		   *@C0757:
 000035B4		   *@C0753:
 000035B4  80 FB 00	   *	    cmp    bl, 000h
 000035B7  76 0F	   *	    jbe    @C075B
 000035B9  80 FB 0A	   *	    cmp    bl, 00Ah
 000035BC  73 0A	   *	    jae    @C075B
 000035BE  0F B6 C3	     1				movzx eax, bl
 000035C1  E8 00000000 E     1				call writeint
 000035C6  EB 6A	   *	    jmp    @C075E
 000035C8		   *@C075B:
 000035C8  80 FB 0A	   *	    cmp    bl, 10
 000035CB  75 13	   *	    jne    @C075F
 000035CD  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 000035D4  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000035D9  E8 00000000 E     1				Call WriteString
 000035DE  EB 52	   *	    jmp    @C0761
 000035E0		   *@C075F:
 000035E0  80 FB 0B	   *	    cmp    bl, 11
 000035E3  75 13	   *	    jne    @C0762
 000035E5  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 000035EC  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000035F1  E8 00000000 E     1				Call WriteString
 000035F6  EB 3A	   *	    jmp    @C0764
 000035F8		   *@C0762:
 000035F8  80 FB 0C	   *	    cmp    bl, 12
 000035FB  75 13	   *	    jne    @C0765
 000035FD  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00003604  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003609  E8 00000000 E     1				Call WriteString
 0000360E  EB 22	   *	    jmp    @C0767
 00003610		   *@C0765:
 00003610  80 FB 0D	   *	    cmp    bl, 13
 00003613  75 1D	   *	    jne    @C0768
 00003615  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 0000361C  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003621  E8 00000000 E     1				Call WriteString
					.else
 00003626  EB 0A	   *	    jmp    @C076A
 00003628		   *@C074D:
 00003628  BA 000003BB R			mov edx, OFFSET PromptSuit
 0000362D  E8 00000000 E			call writestring
					.endif
 00003632		   *@C076A:
 00003632		   *@C0768:
 00003632		   *@C0767:
 00003632		   *@C0764:
 00003632		   *@C0761:
 00003632		   *@C075E:
 00003632  8A 1D 0000012A R		mov bl, cards1.suit
					ConvertSuit
 00003638  80 FB 01	   *	    cmp    bl, 1
 0000363B  75 09	   *	    jne    @C076B
 0000363D  B0 06	     1			mov al, 06
 0000363F  A2 000003BB R     1			mov PromptSuit, al
 00003644  EB 31	   *	    jmp    @C076D
 00003646		   *@C076B:
 00003646  80 FB 02	   *	    cmp    bl, 2
 00003649  75 09	   *	    jne    @C076E
 0000364B  B0 03	     1			mov al, 03h
 0000364D  A2 000003BB R     1			mov PromptSuit, al
 00003652  EB 23	   *	    jmp    @C0770
 00003654		   *@C076E:
 00003654  80 FB 03	   *	    cmp    bl, 3
 00003657  75 09	   *	    jne    @C0771
 00003659  B0 05	     1			mov al, 05
 0000365B  A2 000003BB R     1			mov PromptSuit, al
 00003660  EB 15	   *	    jmp    @C0773
 00003662		   *@C0771:
 00003662  80 FB 04	   *	    cmp    bl, 4
 00003665  75 09	   *	    jne    @C0774
 00003667  B0 04	     1			mov al, 04
 00003669  A2 000003BB R     1			mov PromptSuit, al
 0000366E  EB 07	   *	    jmp    @C0776
 00003670		   *@C0774:
 00003670  B0 58	     1			mov al, "X"
 00003672  A2 000003BB R     1			mov PromptSuit, al
 00003677		   *@C0776:
 00003677		   *@C0773:
 00003677		   *@C0770:
 00003677		   *@C076D:
 00003677  A0 000003BB R		mov al,  PromptSuit
 0000367C  E8 00000000 E		call writechar

 00003681  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 00003686  E8 00000000 E		call writestring
 0000368B  8A 1D 0000012B R		mov bl, cards2.value
					ConvertValue
 00003691  80 FB 34	   *	    cmp    bl, 034h
 00003694  0F 87 000000A8  *	    ja	@C0777
 0000369A  80 FB 01	   *	    cmp    bl, 001h
 0000369D  0F 82 0000009F  *	    jb	@C0777
 000036A3  80 FB 0E	   *	    cmp    bl, 00Eh
 000036A6  72 0A	   *	    jb	@C077A
 000036A8  80 FB 1A	   *	    cmp    bl, 01Ah
 000036AB  77 05	   *	    ja	@C077A
 000036AD  80 EB 0D	     1				sub bl, 13			
 000036B0  EB 1C	   *	    jmp    @C077D
 000036B2		   *@C077A:
 000036B2  80 FB 1B	   *	    cmp    bl, 01Bh
 000036B5  72 0A	   *	    jb	@C077E
 000036B7  80 FB 27	   *	    cmp    bl, 027h
 000036BA  77 05	   *	    ja	@C077E
 000036BC  80 EB 1A	     1				sub bl, 26
 000036BF  EB 0D	   *	    jmp    @C0781
 000036C1		   *@C077E:
 000036C1  80 FB 28	   *	    cmp    bl, 028h
 000036C4  72 08	   *	    jb	@C0782
 000036C6  80 FB 34	   *	    cmp    bl, 034h
 000036C9  77 03	   *	    ja	@C0782
 000036CB  80 EB 27	     1				sub bl, 39
 000036CE		   *@C0782:
 000036CE		   *@C0781:
 000036CE		   *@C077D:
 000036CE  80 FB 00	   *	    cmp    bl, 000h
 000036D1  76 0F	   *	    jbe    @C0785
 000036D3  80 FB 0A	   *	    cmp    bl, 00Ah
 000036D6  73 0A	   *	    jae    @C0785
 000036D8  0F B6 C3	     1				movzx eax, bl
 000036DB  E8 00000000 E     1				call writeint
 000036E0  EB 71	   *	    jmp    @C0788
 000036E2		   *@C0785:
 000036E2  80 FB 0A	   *	    cmp    bl, 10
 000036E5  75 13	   *	    jne    @C0789
 000036E7  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 000036EE  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000036F3  E8 00000000 E     1				Call WriteString
 000036F8  EB 59	   *	    jmp    @C078B
 000036FA		   *@C0789:
 000036FA  80 FB 0B	   *	    cmp    bl, 11
 000036FD  75 13	   *	    jne    @C078C
 000036FF  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003706  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000370B  E8 00000000 E     1				Call WriteString
 00003710  EB 41	   *	    jmp    @C078E
 00003712		   *@C078C:
 00003712  80 FB 0C	   *	    cmp    bl, 12
 00003715  75 13	   *	    jne    @C078F
 00003717  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 0000371E  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003723  E8 00000000 E     1				Call WriteString
 00003728  EB 29	   *	    jmp    @C0791
 0000372A		   *@C078F:
 0000372A  80 FB 0D	   *	    cmp    bl, 13
 0000372D  75 24	   *	    jne    @C0792
 0000372F  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003736  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000373B  E8 00000000 E     1				Call WriteString
					.else
 00003740  EB 11	   *	    jmp    @C0794
 00003742		   *@C0777:
						BlankCard
 00003742  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 00003749  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 0000374E  E8 00000000 E     1		call writestring
					.endif
 00003753		   *@C0794:
 00003753		   *@C0792:
 00003753		   *@C0791:
 00003753		   *@C078E:
 00003753		   *@C078B:
 00003753		   *@C0788:
 00003753  8A 1D 0000012C R		mov bl, cards2.suit
					ConvertSuit
 00003759  80 FB 01	   *	    cmp    bl, 1
 0000375C  75 09	   *	    jne    @C0795
 0000375E  B0 06	     1			mov al, 06
 00003760  A2 000003BB R     1			mov PromptSuit, al
 00003765  EB 31	   *	    jmp    @C0797
 00003767		   *@C0795:
 00003767  80 FB 02	   *	    cmp    bl, 2
 0000376A  75 09	   *	    jne    @C0798
 0000376C  B0 03	     1			mov al, 03h
 0000376E  A2 000003BB R     1			mov PromptSuit, al
 00003773  EB 23	   *	    jmp    @C079A
 00003775		   *@C0798:
 00003775  80 FB 03	   *	    cmp    bl, 3
 00003778  75 09	   *	    jne    @C079B
 0000377A  B0 05	     1			mov al, 05
 0000377C  A2 000003BB R     1			mov PromptSuit, al
 00003781  EB 15	   *	    jmp    @C079D
 00003783		   *@C079B:
 00003783  80 FB 04	   *	    cmp    bl, 4
 00003786  75 09	   *	    jne    @C079E
 00003788  B0 04	     1			mov al, 04
 0000378A  A2 000003BB R     1			mov PromptSuit, al
 0000378F  EB 07	   *	    jmp    @C07A0
 00003791		   *@C079E:
 00003791  B0 58	     1			mov al, "X"
 00003793  A2 000003BB R     1			mov PromptSuit, al
 00003798		   *@C07A0:
 00003798		   *@C079D:
 00003798		   *@C079A:
 00003798		   *@C0797:
 00003798  A0 000003BB R		mov al,  PromptSuit
 0000379D  E8 00000000 E		call writechar

 000037A2  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 000037A7  E8 00000000 E		call writestring
 000037AC  8A 1D 0000012D R		mov bl, cards3.value
					ConvertValue
 000037B2  80 FB 34	   *	    cmp    bl, 034h
 000037B5  0F 87 000000A8  *	    ja	@C07A1
 000037BB  80 FB 01	   *	    cmp    bl, 001h
 000037BE  0F 82 0000009F  *	    jb	@C07A1
 000037C4  80 FB 0E	   *	    cmp    bl, 00Eh
 000037C7  72 0A	   *	    jb	@C07A4
 000037C9  80 FB 1A	   *	    cmp    bl, 01Ah
 000037CC  77 05	   *	    ja	@C07A4
 000037CE  80 EB 0D	     1				sub bl, 13			
 000037D1  EB 1C	   *	    jmp    @C07A7
 000037D3		   *@C07A4:
 000037D3  80 FB 1B	   *	    cmp    bl, 01Bh
 000037D6  72 0A	   *	    jb	@C07A8
 000037D8  80 FB 27	   *	    cmp    bl, 027h
 000037DB  77 05	   *	    ja	@C07A8
 000037DD  80 EB 1A	     1				sub bl, 26
 000037E0  EB 0D	   *	    jmp    @C07AB
 000037E2		   *@C07A8:
 000037E2  80 FB 28	   *	    cmp    bl, 028h
 000037E5  72 08	   *	    jb	@C07AC
 000037E7  80 FB 34	   *	    cmp    bl, 034h
 000037EA  77 03	   *	    ja	@C07AC
 000037EC  80 EB 27	     1				sub bl, 39
 000037EF		   *@C07AC:
 000037EF		   *@C07AB:
 000037EF		   *@C07A7:
 000037EF  80 FB 00	   *	    cmp    bl, 000h
 000037F2  76 0F	   *	    jbe    @C07AF
 000037F4  80 FB 0A	   *	    cmp    bl, 00Ah
 000037F7  73 0A	   *	    jae    @C07AF
 000037F9  0F B6 C3	     1				movzx eax, bl
 000037FC  E8 00000000 E     1				call writeint
 00003801  EB 71	   *	    jmp    @C07B2
 00003803		   *@C07AF:
 00003803  80 FB 0A	   *	    cmp    bl, 10
 00003806  75 13	   *	    jne    @C07B3
 00003808  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 0000380F  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003814  E8 00000000 E     1				Call WriteString
 00003819  EB 59	   *	    jmp    @C07B5
 0000381B		   *@C07B3:
 0000381B  80 FB 0B	   *	    cmp    bl, 11
 0000381E  75 13	   *	    jne    @C07B6
 00003820  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003827  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000382C  E8 00000000 E     1				Call WriteString
 00003831  EB 41	   *	    jmp    @C07B8
 00003833		   *@C07B6:
 00003833  80 FB 0C	   *	    cmp    bl, 12
 00003836  75 13	   *	    jne    @C07B9
 00003838  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 0000383F  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003844  E8 00000000 E     1				Call WriteString
 00003849  EB 29	   *	    jmp    @C07BB
 0000384B		   *@C07B9:
 0000384B  80 FB 0D	   *	    cmp    bl, 13
 0000384E  75 24	   *	    jne    @C07BC
 00003850  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003857  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000385C  E8 00000000 E     1				Call WriteString
					.else
 00003861  EB 11	   *	    jmp    @C07BE
 00003863		   *@C07A1:
						BlankCard
 00003863  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 0000386A  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 0000386F  E8 00000000 E     1		call writestring
					.endif
 00003874		   *@C07BE:
 00003874		   *@C07BC:
 00003874		   *@C07BB:
 00003874		   *@C07B8:
 00003874		   *@C07B5:
 00003874		   *@C07B2:
 00003874  8A 1D 0000012E R		mov bl, cards3.suit
					ConvertSuit
 0000387A  80 FB 01	   *	    cmp    bl, 1
 0000387D  75 09	   *	    jne    @C07BF
 0000387F  B0 06	     1			mov al, 06
 00003881  A2 000003BB R     1			mov PromptSuit, al
 00003886  EB 31	   *	    jmp    @C07C1
 00003888		   *@C07BF:
 00003888  80 FB 02	   *	    cmp    bl, 2
 0000388B  75 09	   *	    jne    @C07C2
 0000388D  B0 03	     1			mov al, 03h
 0000388F  A2 000003BB R     1			mov PromptSuit, al
 00003894  EB 23	   *	    jmp    @C07C4
 00003896		   *@C07C2:
 00003896  80 FB 03	   *	    cmp    bl, 3
 00003899  75 09	   *	    jne    @C07C5
 0000389B  B0 05	     1			mov al, 05
 0000389D  A2 000003BB R     1			mov PromptSuit, al
 000038A2  EB 15	   *	    jmp    @C07C7
 000038A4		   *@C07C5:
 000038A4  80 FB 04	   *	    cmp    bl, 4
 000038A7  75 09	   *	    jne    @C07C8
 000038A9  B0 04	     1			mov al, 04
 000038AB  A2 000003BB R     1			mov PromptSuit, al
 000038B0  EB 07	   *	    jmp    @C07CA
 000038B2		   *@C07C8:
 000038B2  B0 58	     1			mov al, "X"
 000038B4  A2 000003BB R     1			mov PromptSuit, al
 000038B9		   *@C07CA:
 000038B9		   *@C07C7:
 000038B9		   *@C07C4:
 000038B9		   *@C07C1:
 000038B9  A0 000003BB R		mov al, PromptSuit
 000038BE  E8 00000000 E		call writechar

 000038C3  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 000038C8  E8 00000000 E		call writestring
 000038CD  8A 1D 0000012F R		mov bl, cards4.value
					ConvertValue
 000038D3  80 FB 34	   *	    cmp    bl, 034h
 000038D6  0F 87 000000A8  *	    ja	@C07CB
 000038DC  80 FB 01	   *	    cmp    bl, 001h
 000038DF  0F 82 0000009F  *	    jb	@C07CB
 000038E5  80 FB 0E	   *	    cmp    bl, 00Eh
 000038E8  72 0A	   *	    jb	@C07CE
 000038EA  80 FB 1A	   *	    cmp    bl, 01Ah
 000038ED  77 05	   *	    ja	@C07CE
 000038EF  80 EB 0D	     1				sub bl, 13			
 000038F2  EB 1C	   *	    jmp    @C07D1
 000038F4		   *@C07CE:
 000038F4  80 FB 1B	   *	    cmp    bl, 01Bh
 000038F7  72 0A	   *	    jb	@C07D2
 000038F9  80 FB 27	   *	    cmp    bl, 027h
 000038FC  77 05	   *	    ja	@C07D2
 000038FE  80 EB 1A	     1				sub bl, 26
 00003901  EB 0D	   *	    jmp    @C07D5
 00003903		   *@C07D2:
 00003903  80 FB 28	   *	    cmp    bl, 028h
 00003906  72 08	   *	    jb	@C07D6
 00003908  80 FB 34	   *	    cmp    bl, 034h
 0000390B  77 03	   *	    ja	@C07D6
 0000390D  80 EB 27	     1				sub bl, 39
 00003910		   *@C07D6:
 00003910		   *@C07D5:
 00003910		   *@C07D1:
 00003910  80 FB 00	   *	    cmp    bl, 000h
 00003913  76 0F	   *	    jbe    @C07D9
 00003915  80 FB 0A	   *	    cmp    bl, 00Ah
 00003918  73 0A	   *	    jae    @C07D9
 0000391A  0F B6 C3	     1				movzx eax, bl
 0000391D  E8 00000000 E     1				call writeint
 00003922  EB 71	   *	    jmp    @C07DC
 00003924		   *@C07D9:
 00003924  80 FB 0A	   *	    cmp    bl, 10
 00003927  75 13	   *	    jne    @C07DD
 00003929  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00003930  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003935  E8 00000000 E     1				Call WriteString
 0000393A  EB 59	   *	    jmp    @C07DF
 0000393C		   *@C07DD:
 0000393C  80 FB 0B	   *	    cmp    bl, 11
 0000393F  75 13	   *	    jne    @C07E0
 00003941  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003948  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000394D  E8 00000000 E     1				Call WriteString
 00003952  EB 41	   *	    jmp    @C07E2
 00003954		   *@C07E0:
 00003954  80 FB 0C	   *	    cmp    bl, 12
 00003957  75 13	   *	    jne    @C07E3
 00003959  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00003960  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003965  E8 00000000 E     1				Call WriteString
 0000396A  EB 29	   *	    jmp    @C07E5
 0000396C		   *@C07E3:
 0000396C  80 FB 0D	   *	    cmp    bl, 13
 0000396F  75 24	   *	    jne    @C07E6
 00003971  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003978  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000397D  E8 00000000 E     1				Call WriteString
					.else
 00003982  EB 11	   *	    jmp    @C07E8
 00003984		   *@C07CB:
						BlankCard
 00003984  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 0000398B  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 00003990  E8 00000000 E     1		call writestring
					.endif
 00003995		   *@C07E8:
 00003995		   *@C07E6:
 00003995		   *@C07E5:
 00003995		   *@C07E2:
 00003995		   *@C07DF:
 00003995		   *@C07DC:
 00003995  8A 1D 00000130 R		mov bl, cards4.suit
					ConvertSuit
 0000399B  80 FB 01	   *	    cmp    bl, 1
 0000399E  75 09	   *	    jne    @C07E9
 000039A0  B0 06	     1			mov al, 06
 000039A2  A2 000003BB R     1			mov PromptSuit, al
 000039A7  EB 31	   *	    jmp    @C07EB
 000039A9		   *@C07E9:
 000039A9  80 FB 02	   *	    cmp    bl, 2
 000039AC  75 09	   *	    jne    @C07EC
 000039AE  B0 03	     1			mov al, 03h
 000039B0  A2 000003BB R     1			mov PromptSuit, al
 000039B5  EB 23	   *	    jmp    @C07EE
 000039B7		   *@C07EC:
 000039B7  80 FB 03	   *	    cmp    bl, 3
 000039BA  75 09	   *	    jne    @C07EF
 000039BC  B0 05	     1			mov al, 05
 000039BE  A2 000003BB R     1			mov PromptSuit, al
 000039C3  EB 15	   *	    jmp    @C07F1
 000039C5		   *@C07EF:
 000039C5  80 FB 04	   *	    cmp    bl, 4
 000039C8  75 09	   *	    jne    @C07F2
 000039CA  B0 04	     1			mov al, 04
 000039CC  A2 000003BB R     1			mov PromptSuit, al
 000039D1  EB 07	   *	    jmp    @C07F4
 000039D3		   *@C07F2:
 000039D3  B0 58	     1			mov al, "X"
 000039D5  A2 000003BB R     1			mov PromptSuit, al
 000039DA		   *@C07F4:
 000039DA		   *@C07F1:
 000039DA		   *@C07EE:
 000039DA		   *@C07EB:
 000039DA  A0 000003BB R		mov al, PromptSuit
 000039DF  E8 00000000 E		call writechar

 000039E4  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 000039E9  E8 00000000 E		call writestring
 000039EE  8A 1D 00000131 R		mov bl, cards5.value
					ConvertValue
 000039F4  80 FB 34	   *	    cmp    bl, 034h
 000039F7  0F 87 000000A8  *	    ja	@C07F5
 000039FD  80 FB 01	   *	    cmp    bl, 001h
 00003A00  0F 82 0000009F  *	    jb	@C07F5
 00003A06  80 FB 0E	   *	    cmp    bl, 00Eh
 00003A09  72 0A	   *	    jb	@C07F8
 00003A0B  80 FB 1A	   *	    cmp    bl, 01Ah
 00003A0E  77 05	   *	    ja	@C07F8
 00003A10  80 EB 0D	     1				sub bl, 13			
 00003A13  EB 1C	   *	    jmp    @C07FB
 00003A15		   *@C07F8:
 00003A15  80 FB 1B	   *	    cmp    bl, 01Bh
 00003A18  72 0A	   *	    jb	@C07FC
 00003A1A  80 FB 27	   *	    cmp    bl, 027h
 00003A1D  77 05	   *	    ja	@C07FC
 00003A1F  80 EB 1A	     1				sub bl, 26
 00003A22  EB 0D	   *	    jmp    @C07FF
 00003A24		   *@C07FC:
 00003A24  80 FB 28	   *	    cmp    bl, 028h
 00003A27  72 08	   *	    jb	@C0800
 00003A29  80 FB 34	   *	    cmp    bl, 034h
 00003A2C  77 03	   *	    ja	@C0800
 00003A2E  80 EB 27	     1				sub bl, 39
 00003A31		   *@C0800:
 00003A31		   *@C07FF:
 00003A31		   *@C07FB:
 00003A31  80 FB 00	   *	    cmp    bl, 000h
 00003A34  76 0F	   *	    jbe    @C0803
 00003A36  80 FB 0A	   *	    cmp    bl, 00Ah
 00003A39  73 0A	   *	    jae    @C0803
 00003A3B  0F B6 C3	     1				movzx eax, bl
 00003A3E  E8 00000000 E     1				call writeint
 00003A43  EB 71	   *	    jmp    @C0806
 00003A45		   *@C0803:
 00003A45  80 FB 0A	   *	    cmp    bl, 10
 00003A48  75 13	   *	    jne    @C0807
 00003A4A  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00003A51  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003A56  E8 00000000 E     1				Call WriteString
 00003A5B  EB 59	   *	    jmp    @C0809
 00003A5D		   *@C0807:
 00003A5D  80 FB 0B	   *	    cmp    bl, 11
 00003A60  75 13	   *	    jne    @C080A
 00003A62  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003A69  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003A6E  E8 00000000 E     1				Call WriteString
 00003A73  EB 41	   *	    jmp    @C080C
 00003A75		   *@C080A:
 00003A75  80 FB 0C	   *	    cmp    bl, 12
 00003A78  75 13	   *	    jne    @C080D
 00003A7A  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00003A81  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003A86  E8 00000000 E     1				Call WriteString
 00003A8B  EB 29	   *	    jmp    @C080F
 00003A8D		   *@C080D:
 00003A8D  80 FB 0D	   *	    cmp    bl, 13
 00003A90  75 24	   *	    jne    @C0810
 00003A92  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003A99  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003A9E  E8 00000000 E     1				Call WriteString
					.else
 00003AA3  EB 11	   *	    jmp    @C0812
 00003AA5		   *@C07F5:
						BlankCard
 00003AA5  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 00003AAC  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 00003AB1  E8 00000000 E     1		call writestring
					.endif
 00003AB6		   *@C0812:
 00003AB6		   *@C0810:
 00003AB6		   *@C080F:
 00003AB6		   *@C080C:
 00003AB6		   *@C0809:
 00003AB6		   *@C0806:
 00003AB6  8A 1D 00000132 R		mov bl, cards5.suit
					ConvertSuit
 00003ABC  80 FB 01	   *	    cmp    bl, 1
 00003ABF  75 09	   *	    jne    @C0813
 00003AC1  B0 06	     1			mov al, 06
 00003AC3  A2 000003BB R     1			mov PromptSuit, al
 00003AC8  EB 31	   *	    jmp    @C0815
 00003ACA		   *@C0813:
 00003ACA  80 FB 02	   *	    cmp    bl, 2
 00003ACD  75 09	   *	    jne    @C0816
 00003ACF  B0 03	     1			mov al, 03h
 00003AD1  A2 000003BB R     1			mov PromptSuit, al
 00003AD6  EB 23	   *	    jmp    @C0818
 00003AD8		   *@C0816:
 00003AD8  80 FB 03	   *	    cmp    bl, 3
 00003ADB  75 09	   *	    jne    @C0819
 00003ADD  B0 05	     1			mov al, 05
 00003ADF  A2 000003BB R     1			mov PromptSuit, al
 00003AE4  EB 15	   *	    jmp    @C081B
 00003AE6		   *@C0819:
 00003AE6  80 FB 04	   *	    cmp    bl, 4
 00003AE9  75 09	   *	    jne    @C081C
 00003AEB  B0 04	     1			mov al, 04
 00003AED  A2 000003BB R     1			mov PromptSuit, al
 00003AF2  EB 07	   *	    jmp    @C081E
 00003AF4		   *@C081C:
 00003AF4  B0 58	     1			mov al, "X"
 00003AF6  A2 000003BB R     1			mov PromptSuit, al
 00003AFB		   *@C081E:
 00003AFB		   *@C081B:
 00003AFB		   *@C0818:
 00003AFB		   *@C0815:
 00003AFB  A0 000003BB R		mov al, PromptSuit
 00003B00  E8 00000000 E		call writechar

 00003B05  BA 00000378 R		mov edx, OFFSET PromptShowTable3
 00003B0A  E8 00000000 E		call writestring
 00003B0F  E8 00000000 E		call crlf
 00003B14  BA 0000039E R		mov edx, OFFSET PromptShowTableChips
 00003B19  E8 00000000 E		call writestring
 00003B1E  A1 0000010B R		mov eax, ChipsTable
 00003B23  E8 00000000 E		call writeint
 00003B28  E8 00000000 E		call crlf
 00003B2D  E8 00000000 E		call crlf

				; Player

 00003B32  BA 0000037A R		mov edx, OFFSET PromptShowPlayer1
 00003B37  E8 00000000 E		call writestring
 00003B3C  8A 1D 00000141 R		mov bl, cardp6.value
					ConvertValue
 00003B42  80 FB 34	   *	    cmp    bl, 034h
 00003B45  0F 87 000000A8  *	    ja	@C081F
 00003B4B  80 FB 01	   *	    cmp    bl, 001h
 00003B4E  0F 82 0000009F  *	    jb	@C081F
 00003B54  80 FB 0E	   *	    cmp    bl, 00Eh
 00003B57  72 0A	   *	    jb	@C0822
 00003B59  80 FB 1A	   *	    cmp    bl, 01Ah
 00003B5C  77 05	   *	    ja	@C0822
 00003B5E  80 EB 0D	     1				sub bl, 13			
 00003B61  EB 1C	   *	    jmp    @C0825
 00003B63		   *@C0822:
 00003B63  80 FB 1B	   *	    cmp    bl, 01Bh
 00003B66  72 0A	   *	    jb	@C0826
 00003B68  80 FB 27	   *	    cmp    bl, 027h
 00003B6B  77 05	   *	    ja	@C0826
 00003B6D  80 EB 1A	     1				sub bl, 26
 00003B70  EB 0D	   *	    jmp    @C0829
 00003B72		   *@C0826:
 00003B72  80 FB 28	   *	    cmp    bl, 028h
 00003B75  72 08	   *	    jb	@C082A
 00003B77  80 FB 34	   *	    cmp    bl, 034h
 00003B7A  77 03	   *	    ja	@C082A
 00003B7C  80 EB 27	     1				sub bl, 39
 00003B7F		   *@C082A:
 00003B7F		   *@C0829:
 00003B7F		   *@C0825:
 00003B7F  80 FB 00	   *	    cmp    bl, 000h
 00003B82  76 0F	   *	    jbe    @C082D
 00003B84  80 FB 0A	   *	    cmp    bl, 00Ah
 00003B87  73 0A	   *	    jae    @C082D
 00003B89  0F B6 C3	     1				movzx eax, bl
 00003B8C  E8 00000000 E     1				call writeint
 00003B91  EB 71	   *	    jmp    @C0830
 00003B93		   *@C082D:
 00003B93  80 FB 0A	   *	    cmp    bl, 10
 00003B96  75 13	   *	    jne    @C0831
 00003B98  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00003B9F  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003BA4  E8 00000000 E     1				Call WriteString
 00003BA9  EB 59	   *	    jmp    @C0833
 00003BAB		   *@C0831:
 00003BAB  80 FB 0B	   *	    cmp    bl, 11
 00003BAE  75 13	   *	    jne    @C0834
 00003BB0  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003BB7  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003BBC  E8 00000000 E     1				Call WriteString
 00003BC1  EB 41	   *	    jmp    @C0836
 00003BC3		   *@C0834:
 00003BC3  80 FB 0C	   *	    cmp    bl, 12
 00003BC6  75 13	   *	    jne    @C0837
 00003BC8  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00003BCF  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003BD4  E8 00000000 E     1				Call WriteString
 00003BD9  EB 29	   *	    jmp    @C0839
 00003BDB		   *@C0837:
 00003BDB  80 FB 0D	   *	    cmp    bl, 13
 00003BDE  75 24	   *	    jne    @C083A
 00003BE0  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003BE7  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003BEC  E8 00000000 E     1				Call WriteString
					.else
 00003BF1  EB 11	   *	    jmp    @C083C
 00003BF3		   *@C081F:
						BlankCard
 00003BF3  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 00003BFA  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 00003BFF  E8 00000000 E     1		call writestring
					.endif
 00003C04		   *@C083C:
 00003C04		   *@C083A:
 00003C04		   *@C0839:
 00003C04		   *@C0836:
 00003C04		   *@C0833:
 00003C04		   *@C0830:
 00003C04  8A 1D 00000142 R		mov bl, cardp6.suit
					ConvertSuit
 00003C0A  80 FB 01	   *	    cmp    bl, 1
 00003C0D  75 09	   *	    jne    @C083D
 00003C0F  B0 06	     1			mov al, 06
 00003C11  A2 000003BB R     1			mov PromptSuit, al
 00003C16  EB 31	   *	    jmp    @C083F
 00003C18		   *@C083D:
 00003C18  80 FB 02	   *	    cmp    bl, 2
 00003C1B  75 09	   *	    jne    @C0840
 00003C1D  B0 03	     1			mov al, 03h
 00003C1F  A2 000003BB R     1			mov PromptSuit, al
 00003C24  EB 23	   *	    jmp    @C0842
 00003C26		   *@C0840:
 00003C26  80 FB 03	   *	    cmp    bl, 3
 00003C29  75 09	   *	    jne    @C0843
 00003C2B  B0 05	     1			mov al, 05
 00003C2D  A2 000003BB R     1			mov PromptSuit, al
 00003C32  EB 15	   *	    jmp    @C0845
 00003C34		   *@C0843:
 00003C34  80 FB 04	   *	    cmp    bl, 4
 00003C37  75 09	   *	    jne    @C0846
 00003C39  B0 04	     1			mov al, 04
 00003C3B  A2 000003BB R     1			mov PromptSuit, al
 00003C40  EB 07	   *	    jmp    @C0848
 00003C42		   *@C0846:
 00003C42  B0 58	     1			mov al, "X"
 00003C44  A2 000003BB R     1			mov PromptSuit, al
 00003C49		   *@C0848:
 00003C49		   *@C0845:
 00003C49		   *@C0842:
 00003C49		   *@C083F:
 00003C49  A0 000003BB R		mov al,  PromptSuit
 00003C4E  E8 00000000 E		call writechar

 00003C53  BA 0000038A R		mov edx, OFFSET PromptShowPlayer2
 00003C58  E8 00000000 E		call writestring
 00003C5D  8A 1D 00000143 R		mov bl, cardp7.value
					ConvertValue
 00003C63  80 FB 34	   *	    cmp    bl, 034h
 00003C66  0F 87 000000A8  *	    ja	@C0849
 00003C6C  80 FB 01	   *	    cmp    bl, 001h
 00003C6F  0F 82 0000009F  *	    jb	@C0849
 00003C75  80 FB 0E	   *	    cmp    bl, 00Eh
 00003C78  72 0A	   *	    jb	@C084C
 00003C7A  80 FB 1A	   *	    cmp    bl, 01Ah
 00003C7D  77 05	   *	    ja	@C084C
 00003C7F  80 EB 0D	     1				sub bl, 13			
 00003C82  EB 1C	   *	    jmp    @C084F
 00003C84		   *@C084C:
 00003C84  80 FB 1B	   *	    cmp    bl, 01Bh
 00003C87  72 0A	   *	    jb	@C0850
 00003C89  80 FB 27	   *	    cmp    bl, 027h
 00003C8C  77 05	   *	    ja	@C0850
 00003C8E  80 EB 1A	     1				sub bl, 26
 00003C91  EB 0D	   *	    jmp    @C0853
 00003C93		   *@C0850:
 00003C93  80 FB 28	   *	    cmp    bl, 028h
 00003C96  72 08	   *	    jb	@C0854
 00003C98  80 FB 34	   *	    cmp    bl, 034h
 00003C9B  77 03	   *	    ja	@C0854
 00003C9D  80 EB 27	     1				sub bl, 39
 00003CA0		   *@C0854:
 00003CA0		   *@C0853:
 00003CA0		   *@C084F:
 00003CA0  80 FB 00	   *	    cmp    bl, 000h
 00003CA3  76 0F	   *	    jbe    @C0857
 00003CA5  80 FB 0A	   *	    cmp    bl, 00Ah
 00003CA8  73 0A	   *	    jae    @C0857
 00003CAA  0F B6 C3	     1				movzx eax, bl
 00003CAD  E8 00000000 E     1				call writeint
 00003CB2  EB 71	   *	    jmp    @C085A
 00003CB4		   *@C0857:
 00003CB4  80 FB 0A	   *	    cmp    bl, 10
 00003CB7  75 13	   *	    jne    @C085B
 00003CB9  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00003CC0  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003CC5  E8 00000000 E     1				Call WriteString
 00003CCA  EB 59	   *	    jmp    @C085D
 00003CCC		   *@C085B:
 00003CCC  80 FB 0B	   *	    cmp    bl, 11
 00003CCF  75 13	   *	    jne    @C085E
 00003CD1  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003CD8  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003CDD  E8 00000000 E     1				Call WriteString
 00003CE2  EB 41	   *	    jmp    @C0860
 00003CE4		   *@C085E:
 00003CE4  80 FB 0C	   *	    cmp    bl, 12
 00003CE7  75 13	   *	    jne    @C0861
 00003CE9  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00003CF0  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003CF5  E8 00000000 E     1				Call WriteString
 00003CFA  EB 29	   *	    jmp    @C0863
 00003CFC		   *@C0861:
 00003CFC  80 FB 0D	   *	    cmp    bl, 13
 00003CFF  75 24	   *	    jne    @C0864
 00003D01  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003D08  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003D0D  E8 00000000 E     1				Call WriteString
					.else
 00003D12  EB 11	   *	    jmp    @C0866
 00003D14		   *@C0849:
						BlankCard
 00003D14  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 00003D1B  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 00003D20  E8 00000000 E     1		call writestring
					.endif
 00003D25		   *@C0866:
 00003D25		   *@C0864:
 00003D25		   *@C0863:
 00003D25		   *@C0860:
 00003D25		   *@C085D:
 00003D25		   *@C085A:
 00003D25  8A 1D 00000144 R		mov bl, cardp7.suit
					ConvertSuit
 00003D2B  80 FB 01	   *	    cmp    bl, 1
 00003D2E  75 09	   *	    jne    @C0867
 00003D30  B0 06	     1			mov al, 06
 00003D32  A2 000003BB R     1			mov PromptSuit, al
 00003D37  EB 31	   *	    jmp    @C0869
 00003D39		   *@C0867:
 00003D39  80 FB 02	   *	    cmp    bl, 2
 00003D3C  75 09	   *	    jne    @C086A
 00003D3E  B0 03	     1			mov al, 03h
 00003D40  A2 000003BB R     1			mov PromptSuit, al
 00003D45  EB 23	   *	    jmp    @C086C
 00003D47		   *@C086A:
 00003D47  80 FB 03	   *	    cmp    bl, 3
 00003D4A  75 09	   *	    jne    @C086D
 00003D4C  B0 05	     1			mov al, 05
 00003D4E  A2 000003BB R     1			mov PromptSuit, al
 00003D53  EB 15	   *	    jmp    @C086F
 00003D55		   *@C086D:
 00003D55  80 FB 04	   *	    cmp    bl, 4
 00003D58  75 09	   *	    jne    @C0870
 00003D5A  B0 04	     1			mov al, 04
 00003D5C  A2 000003BB R     1			mov PromptSuit, al
 00003D61  EB 07	   *	    jmp    @C0872
 00003D63		   *@C0870:
 00003D63  B0 58	     1			mov al, "X"
 00003D65  A2 000003BB R     1			mov PromptSuit, al
 00003D6A		   *@C0872:
 00003D6A		   *@C086F:
 00003D6A		   *@C086C:
 00003D6A		   *@C0869:
 00003D6A  A0 000003BB R		mov al,  PromptSuit
 00003D6F  E8 00000000 E		call writechar

 00003D74  BA 0000038E R		mov edx, OFFSET PromptShowPlayer3
 00003D79  E8 00000000 E		call writestring
 00003D7E  E8 00000000 E		call crlf
 00003D83  BA 000003AC R		mov edx, OFFSET PromptShowPlayerChips
 00003D88  E8 00000000 E		call writestring
 00003D8D  A1 00000103 R		mov eax, ChipsPlayer
 00003D92  E8 00000000 E		call writeint
 00003D97  E8 00000000 E		call crlf
 00003D9C  E8 00000000 E		call crlf
					

 00003DA1  C3			ret
 00003DA2			Display ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003DA2			DisplaySpock PROC
				;Display Spocks cards
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00003DA2  C6 05 000003BB R		mov PromptSuit, "X"
	   58
 00003DA9  E8 FFFFC982			Call HandSpock
 00003DAE  E8 FFFFCBCB			Call HandPlayer
 00003DB3  E8 00000000 E		call clrscr

				;Spock

 00003DB8  BA 000003BD R		mov EDX, OFFSET PromptShowSpock1
 00003DBD  E8 00000000 E		call writestring
 00003DC2  8A 1D 00000133 R		mov bl, cards6.value
					ConvertValue
 00003DC8  80 FB 34	   *	    cmp    bl, 034h
 00003DCB  0F 87 000000A8  *	    ja	@C0873
 00003DD1  80 FB 01	   *	    cmp    bl, 001h
 00003DD4  0F 82 0000009F  *	    jb	@C0873
 00003DDA  80 FB 0E	   *	    cmp    bl, 00Eh
 00003DDD  72 0A	   *	    jb	@C0876
 00003DDF  80 FB 1A	   *	    cmp    bl, 01Ah
 00003DE2  77 05	   *	    ja	@C0876
 00003DE4  80 EB 0D	     1				sub bl, 13			
 00003DE7  EB 1C	   *	    jmp    @C0879
 00003DE9		   *@C0876:
 00003DE9  80 FB 1B	   *	    cmp    bl, 01Bh
 00003DEC  72 0A	   *	    jb	@C087A
 00003DEE  80 FB 27	   *	    cmp    bl, 027h
 00003DF1  77 05	   *	    ja	@C087A
 00003DF3  80 EB 1A	     1				sub bl, 26
 00003DF6  EB 0D	   *	    jmp    @C087D
 00003DF8		   *@C087A:
 00003DF8  80 FB 28	   *	    cmp    bl, 028h
 00003DFB  72 08	   *	    jb	@C087E
 00003DFD  80 FB 34	   *	    cmp    bl, 034h
 00003E00  77 03	   *	    ja	@C087E
 00003E02  80 EB 27	     1				sub bl, 39
 00003E05		   *@C087E:
 00003E05		   *@C087D:
 00003E05		   *@C0879:
 00003E05  80 FB 00	   *	    cmp    bl, 000h
 00003E08  76 0F	   *	    jbe    @C0881
 00003E0A  80 FB 0A	   *	    cmp    bl, 00Ah
 00003E0D  73 0A	   *	    jae    @C0881
 00003E0F  0F B6 C3	     1				movzx eax, bl
 00003E12  E8 00000000 E     1				call writeint
 00003E17  EB 71	   *	    jmp    @C0884
 00003E19		   *@C0881:
 00003E19  80 FB 0A	   *	    cmp    bl, 10
 00003E1C  75 13	   *	    jne    @C0885
 00003E1E  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00003E25  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003E2A  E8 00000000 E     1				Call WriteString
 00003E2F  EB 59	   *	    jmp    @C0887
 00003E31		   *@C0885:
 00003E31  80 FB 0B	   *	    cmp    bl, 11
 00003E34  75 13	   *	    jne    @C0888
 00003E36  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003E3D  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003E42  E8 00000000 E     1				Call WriteString
 00003E47  EB 41	   *	    jmp    @C088A
 00003E49		   *@C0888:
 00003E49  80 FB 0C	   *	    cmp    bl, 12
 00003E4C  75 13	   *	    jne    @C088B
 00003E4E  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00003E55  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003E5A  E8 00000000 E     1				Call WriteString
 00003E5F  EB 29	   *	    jmp    @C088D
 00003E61		   *@C088B:
 00003E61  80 FB 0D	   *	    cmp    bl, 13
 00003E64  75 24	   *	    jne    @C088E
 00003E66  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003E6D  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003E72  E8 00000000 E     1				Call WriteString
					.else
 00003E77  EB 11	   *	    jmp    @C0890
 00003E79		   *@C0873:
						BlankCard
 00003E79  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 00003E80  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 00003E85  E8 00000000 E     1		call writestring
					.endif
 00003E8A		   *@C0890:
 00003E8A		   *@C088E:
 00003E8A		   *@C088D:
 00003E8A		   *@C088A:
 00003E8A		   *@C0887:
 00003E8A		   *@C0884:
 00003E8A  8A 1D 00000134 R		mov bl, cards6.suit
					ConvertSuit
 00003E90  80 FB 01	   *	    cmp    bl, 1
 00003E93  75 09	   *	    jne    @C0891
 00003E95  B0 06	     1			mov al, 06
 00003E97  A2 000003BB R     1			mov PromptSuit, al
 00003E9C  EB 31	   *	    jmp    @C0893
 00003E9E		   *@C0891:
 00003E9E  80 FB 02	   *	    cmp    bl, 2
 00003EA1  75 09	   *	    jne    @C0894
 00003EA3  B0 03	     1			mov al, 03h
 00003EA5  A2 000003BB R     1			mov PromptSuit, al
 00003EAA  EB 23	   *	    jmp    @C0896
 00003EAC		   *@C0894:
 00003EAC  80 FB 03	   *	    cmp    bl, 3
 00003EAF  75 09	   *	    jne    @C0897
 00003EB1  B0 05	     1			mov al, 05
 00003EB3  A2 000003BB R     1			mov PromptSuit, al
 00003EB8  EB 15	   *	    jmp    @C0899
 00003EBA		   *@C0897:
 00003EBA  80 FB 04	   *	    cmp    bl, 4
 00003EBD  75 09	   *	    jne    @C089A
 00003EBF  B0 04	     1			mov al, 04
 00003EC1  A2 000003BB R     1			mov PromptSuit, al
 00003EC6  EB 07	   *	    jmp    @C089C
 00003EC8		   *@C089A:
 00003EC8  B0 58	     1			mov al, "X"
 00003ECA  A2 000003BB R     1			mov PromptSuit, al
 00003ECF		   *@C089C:
 00003ECF		   *@C0899:
 00003ECF		   *@C0896:
 00003ECF		   *@C0893:
 00003ECF  A0 000003BB R		mov al,  PromptSuit
 00003ED4  E8 00000000 E		call writechar

 00003ED9  BA 0000038A R		mov edx, OFFSET PromptShowPlayer2
 00003EDE  E8 00000000 E		call writestring
 00003EE3  8A 1D 00000135 R		mov bl, cards7.value
					ConvertValue
 00003EE9  80 FB 34	   *	    cmp    bl, 034h
 00003EEC  0F 87 000000A8  *	    ja	@C089D
 00003EF2  80 FB 01	   *	    cmp    bl, 001h
 00003EF5  0F 82 0000009F  *	    jb	@C089D
 00003EFB  80 FB 0E	   *	    cmp    bl, 00Eh
 00003EFE  72 0A	   *	    jb	@C08A0
 00003F00  80 FB 1A	   *	    cmp    bl, 01Ah
 00003F03  77 05	   *	    ja	@C08A0
 00003F05  80 EB 0D	     1				sub bl, 13			
 00003F08  EB 1C	   *	    jmp    @C08A3
 00003F0A		   *@C08A0:
 00003F0A  80 FB 1B	   *	    cmp    bl, 01Bh
 00003F0D  72 0A	   *	    jb	@C08A4
 00003F0F  80 FB 27	   *	    cmp    bl, 027h
 00003F12  77 05	   *	    ja	@C08A4
 00003F14  80 EB 1A	     1				sub bl, 26
 00003F17  EB 0D	   *	    jmp    @C08A7
 00003F19		   *@C08A4:
 00003F19  80 FB 28	   *	    cmp    bl, 028h
 00003F1C  72 08	   *	    jb	@C08A8
 00003F1E  80 FB 34	   *	    cmp    bl, 034h
 00003F21  77 03	   *	    ja	@C08A8
 00003F23  80 EB 27	     1				sub bl, 39
 00003F26		   *@C08A8:
 00003F26		   *@C08A7:
 00003F26		   *@C08A3:
 00003F26  80 FB 00	   *	    cmp    bl, 000h
 00003F29  76 0F	   *	    jbe    @C08AB
 00003F2B  80 FB 0A	   *	    cmp    bl, 00Ah
 00003F2E  73 0A	   *	    jae    @C08AB
 00003F30  0F B6 C3	     1				movzx eax, bl
 00003F33  E8 00000000 E     1				call writeint
 00003F38  EB 71	   *	    jmp    @C08AE
 00003F3A		   *@C08AB:
 00003F3A  80 FB 0A	   *	    cmp    bl, 10
 00003F3D  75 13	   *	    jne    @C08AF
 00003F3F  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00003F46  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003F4B  E8 00000000 E     1				Call WriteString
 00003F50  EB 59	   *	    jmp    @C08B1
 00003F52		   *@C08AF:
 00003F52  80 FB 0B	   *	    cmp    bl, 11
 00003F55  75 13	   *	    jne    @C08B2
 00003F57  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00003F5E  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003F63  E8 00000000 E     1				Call WriteString
 00003F68  EB 41	   *	    jmp    @C08B4
 00003F6A		   *@C08B2:
 00003F6A  80 FB 0C	   *	    cmp    bl, 12
 00003F6D  75 13	   *	    jne    @C08B5
 00003F6F  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00003F76  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003F7B  E8 00000000 E     1				Call WriteString
 00003F80  EB 29	   *	    jmp    @C08B7
 00003F82		   *@C08B5:
 00003F82  80 FB 0D	   *	    cmp    bl, 13
 00003F85  75 24	   *	    jne    @C08B8
 00003F87  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00003F8E  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00003F93  E8 00000000 E     1				Call WriteString
					.else
 00003F98  EB 11	   *	    jmp    @C08BA
 00003F9A		   *@C089D:
						BlankCard
 00003F9A  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 00003FA1  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 00003FA6  E8 00000000 E     1		call writestring
					.endif
 00003FAB		   *@C08BA:
 00003FAB		   *@C08B8:
 00003FAB		   *@C08B7:
 00003FAB		   *@C08B4:
 00003FAB		   *@C08B1:
 00003FAB		   *@C08AE:
 00003FAB  8A 1D 00000136 R		mov bl, cards7.suit
					ConvertSuit
 00003FB1  80 FB 01	   *	    cmp    bl, 1
 00003FB4  75 09	   *	    jne    @C08BB
 00003FB6  B0 06	     1			mov al, 06
 00003FB8  A2 000003BB R     1			mov PromptSuit, al
 00003FBD  EB 31	   *	    jmp    @C08BD
 00003FBF		   *@C08BB:
 00003FBF  80 FB 02	   *	    cmp    bl, 2
 00003FC2  75 09	   *	    jne    @C08BE
 00003FC4  B0 03	     1			mov al, 03h
 00003FC6  A2 000003BB R     1			mov PromptSuit, al
 00003FCB  EB 23	   *	    jmp    @C08C0
 00003FCD		   *@C08BE:
 00003FCD  80 FB 03	   *	    cmp    bl, 3
 00003FD0  75 09	   *	    jne    @C08C1
 00003FD2  B0 05	     1			mov al, 05
 00003FD4  A2 000003BB R     1			mov PromptSuit, al
 00003FD9  EB 15	   *	    jmp    @C08C3
 00003FDB		   *@C08C1:
 00003FDB  80 FB 04	   *	    cmp    bl, 4
 00003FDE  75 09	   *	    jne    @C08C4
 00003FE0  B0 04	     1			mov al, 04
 00003FE2  A2 000003BB R     1			mov PromptSuit, al
 00003FE7  EB 07	   *	    jmp    @C08C6
 00003FE9		   *@C08C4:
 00003FE9  B0 58	     1			mov al, "X"
 00003FEB  A2 000003BB R     1			mov PromptSuit, al
 00003FF0		   *@C08C6:
 00003FF0		   *@C08C3:
 00003FF0		   *@C08C0:
 00003FF0		   *@C08BD:
 00003FF0  A0 000003BB R		mov al,  PromptSuit
 00003FF5  E8 00000000 E		call writechar

 00003FFA  BA 0000038E R		mov edx, OFFSET PromptShowPlayer3
 00003FFF  E8 00000000 E		call writestring
 00004004  E8 00000000 E		call crlf
 00004009  BA 00000390 R		mov edx, OFFSET PromptShowSpockChips
 0000400E  E8 00000000 E		call writestring
 00004013  A1 00000107 R		mov eax, ChipsSpock
 00004018  E8 00000000 E		call writeint
 0000401D  E8 00000000 E		call crlf
 00004022  E8 00000000 E		call crlf

				;Table

 00004027  BA 00000365 R		mov edx, OFFSET PromptShowTable1
 0000402C  E8 00000000 E		call writestring
 00004031  8A 1D 00000129 R		mov bl, cards1.value
					ConvertValue
 00004037  80 FB 34	   *	    cmp    bl, 034h
 0000403A  0F 87 000000A8  *	    ja	@C08C7
 00004040  80 FB 01	   *	    cmp    bl, 001h
 00004043  0F 82 0000009F  *	    jb	@C08C7
 00004049  80 FB 0E	   *	    cmp    bl, 00Eh
 0000404C  72 0A	   *	    jb	@C08CA
 0000404E  80 FB 1A	   *	    cmp    bl, 01Ah
 00004051  77 05	   *	    ja	@C08CA
 00004053  80 EB 0D	     1				sub bl, 13			
 00004056  EB 1C	   *	    jmp    @C08CD
 00004058		   *@C08CA:
 00004058  80 FB 1B	   *	    cmp    bl, 01Bh
 0000405B  72 0A	   *	    jb	@C08CE
 0000405D  80 FB 27	   *	    cmp    bl, 027h
 00004060  77 05	   *	    ja	@C08CE
 00004062  80 EB 1A	     1				sub bl, 26
 00004065  EB 0D	   *	    jmp    @C08D1
 00004067		   *@C08CE:
 00004067  80 FB 28	   *	    cmp    bl, 028h
 0000406A  72 08	   *	    jb	@C08D2
 0000406C  80 FB 34	   *	    cmp    bl, 034h
 0000406F  77 03	   *	    ja	@C08D2
 00004071  80 EB 27	     1				sub bl, 39
 00004074		   *@C08D2:
 00004074		   *@C08D1:
 00004074		   *@C08CD:
 00004074  80 FB 00	   *	    cmp    bl, 000h
 00004077  76 0F	   *	    jbe    @C08D5
 00004079  80 FB 0A	   *	    cmp    bl, 00Ah
 0000407C  73 0A	   *	    jae    @C08D5
 0000407E  0F B6 C3	     1				movzx eax, bl
 00004081  E8 00000000 E     1				call writeint
 00004086  EB 6A	   *	    jmp    @C08D8
 00004088		   *@C08D5:
 00004088  80 FB 0A	   *	    cmp    bl, 10
 0000408B  75 13	   *	    jne    @C08D9
 0000408D  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00004094  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004099  E8 00000000 E     1				Call WriteString
 0000409E  EB 52	   *	    jmp    @C08DB
 000040A0		   *@C08D9:
 000040A0  80 FB 0B	   *	    cmp    bl, 11
 000040A3  75 13	   *	    jne    @C08DC
 000040A5  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 000040AC  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000040B1  E8 00000000 E     1				Call WriteString
 000040B6  EB 3A	   *	    jmp    @C08DE
 000040B8		   *@C08DC:
 000040B8  80 FB 0C	   *	    cmp    bl, 12
 000040BB  75 13	   *	    jne    @C08DF
 000040BD  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 000040C4  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000040C9  E8 00000000 E     1				Call WriteString
 000040CE  EB 22	   *	    jmp    @C08E1
 000040D0		   *@C08DF:
 000040D0  80 FB 0D	   *	    cmp    bl, 13
 000040D3  75 1D	   *	    jne    @C08E2
 000040D5  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 000040DC  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000040E1  E8 00000000 E     1				Call WriteString
					.else
 000040E6  EB 0A	   *	    jmp    @C08E4
 000040E8		   *@C08C7:
 000040E8  BA 000003BB R			mov edx, OFFSET PromptSuit
 000040ED  E8 00000000 E			call writestring
					.endif
 000040F2		   *@C08E4:
 000040F2		   *@C08E2:
 000040F2		   *@C08E1:
 000040F2		   *@C08DE:
 000040F2		   *@C08DB:
 000040F2		   *@C08D8:
 000040F2  8A 1D 0000012A R		mov bl, cards1.suit
					ConvertSuit
 000040F8  80 FB 01	   *	    cmp    bl, 1
 000040FB  75 09	   *	    jne    @C08E5
 000040FD  B0 06	     1			mov al, 06
 000040FF  A2 000003BB R     1			mov PromptSuit, al
 00004104  EB 31	   *	    jmp    @C08E7
 00004106		   *@C08E5:
 00004106  80 FB 02	   *	    cmp    bl, 2
 00004109  75 09	   *	    jne    @C08E8
 0000410B  B0 03	     1			mov al, 03h
 0000410D  A2 000003BB R     1			mov PromptSuit, al
 00004112  EB 23	   *	    jmp    @C08EA
 00004114		   *@C08E8:
 00004114  80 FB 03	   *	    cmp    bl, 3
 00004117  75 09	   *	    jne    @C08EB
 00004119  B0 05	     1			mov al, 05
 0000411B  A2 000003BB R     1			mov PromptSuit, al
 00004120  EB 15	   *	    jmp    @C08ED
 00004122		   *@C08EB:
 00004122  80 FB 04	   *	    cmp    bl, 4
 00004125  75 09	   *	    jne    @C08EE
 00004127  B0 04	     1			mov al, 04
 00004129  A2 000003BB R     1			mov PromptSuit, al
 0000412E  EB 07	   *	    jmp    @C08F0
 00004130		   *@C08EE:
 00004130  B0 58	     1			mov al, "X"
 00004132  A2 000003BB R     1			mov PromptSuit, al
 00004137		   *@C08F0:
 00004137		   *@C08ED:
 00004137		   *@C08EA:
 00004137		   *@C08E7:
 00004137  A0 000003BB R		mov al,  PromptSuit
 0000413C  E8 00000000 E		call writechar

 00004141  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 00004146  E8 00000000 E		call writestring
 0000414B  8A 1D 0000012B R		mov bl, cards2.value
					ConvertValue
 00004151  80 FB 34	   *	    cmp    bl, 034h
 00004154  0F 87 000000A8  *	    ja	@C08F1
 0000415A  80 FB 01	   *	    cmp    bl, 001h
 0000415D  0F 82 0000009F  *	    jb	@C08F1
 00004163  80 FB 0E	   *	    cmp    bl, 00Eh
 00004166  72 0A	   *	    jb	@C08F4
 00004168  80 FB 1A	   *	    cmp    bl, 01Ah
 0000416B  77 05	   *	    ja	@C08F4
 0000416D  80 EB 0D	     1				sub bl, 13			
 00004170  EB 1C	   *	    jmp    @C08F7
 00004172		   *@C08F4:
 00004172  80 FB 1B	   *	    cmp    bl, 01Bh
 00004175  72 0A	   *	    jb	@C08F8
 00004177  80 FB 27	   *	    cmp    bl, 027h
 0000417A  77 05	   *	    ja	@C08F8
 0000417C  80 EB 1A	     1				sub bl, 26
 0000417F  EB 0D	   *	    jmp    @C08FB
 00004181		   *@C08F8:
 00004181  80 FB 28	   *	    cmp    bl, 028h
 00004184  72 08	   *	    jb	@C08FC
 00004186  80 FB 34	   *	    cmp    bl, 034h
 00004189  77 03	   *	    ja	@C08FC
 0000418B  80 EB 27	     1				sub bl, 39
 0000418E		   *@C08FC:
 0000418E		   *@C08FB:
 0000418E		   *@C08F7:
 0000418E  80 FB 00	   *	    cmp    bl, 000h
 00004191  76 0F	   *	    jbe    @C08FF
 00004193  80 FB 0A	   *	    cmp    bl, 00Ah
 00004196  73 0A	   *	    jae    @C08FF
 00004198  0F B6 C3	     1				movzx eax, bl
 0000419B  E8 00000000 E     1				call writeint
 000041A0  EB 71	   *	    jmp    @C0902
 000041A2		   *@C08FF:
 000041A2  80 FB 0A	   *	    cmp    bl, 10
 000041A5  75 13	   *	    jne    @C0903
 000041A7  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 000041AE  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000041B3  E8 00000000 E     1				Call WriteString
 000041B8  EB 59	   *	    jmp    @C0905
 000041BA		   *@C0903:
 000041BA  80 FB 0B	   *	    cmp    bl, 11
 000041BD  75 13	   *	    jne    @C0906
 000041BF  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 000041C6  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000041CB  E8 00000000 E     1				Call WriteString
 000041D0  EB 41	   *	    jmp    @C0908
 000041D2		   *@C0906:
 000041D2  80 FB 0C	   *	    cmp    bl, 12
 000041D5  75 13	   *	    jne    @C0909
 000041D7  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 000041DE  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000041E3  E8 00000000 E     1				Call WriteString
 000041E8  EB 29	   *	    jmp    @C090B
 000041EA		   *@C0909:
 000041EA  80 FB 0D	   *	    cmp    bl, 13
 000041ED  75 24	   *	    jne    @C090C
 000041EF  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 000041F6  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000041FB  E8 00000000 E     1				Call WriteString
					.else
 00004200  EB 11	   *	    jmp    @C090E
 00004202		   *@C08F1:
						BlankCard
 00004202  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 00004209  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 0000420E  E8 00000000 E     1		call writestring
					.endif
 00004213		   *@C090E:
 00004213		   *@C090C:
 00004213		   *@C090B:
 00004213		   *@C0908:
 00004213		   *@C0905:
 00004213		   *@C0902:
 00004213  8A 1D 0000012C R		mov bl, cards2.suit
					ConvertSuit
 00004219  80 FB 01	   *	    cmp    bl, 1
 0000421C  75 09	   *	    jne    @C090F
 0000421E  B0 06	     1			mov al, 06
 00004220  A2 000003BB R     1			mov PromptSuit, al
 00004225  EB 31	   *	    jmp    @C0911
 00004227		   *@C090F:
 00004227  80 FB 02	   *	    cmp    bl, 2
 0000422A  75 09	   *	    jne    @C0912
 0000422C  B0 03	     1			mov al, 03h
 0000422E  A2 000003BB R     1			mov PromptSuit, al
 00004233  EB 23	   *	    jmp    @C0914
 00004235		   *@C0912:
 00004235  80 FB 03	   *	    cmp    bl, 3
 00004238  75 09	   *	    jne    @C0915
 0000423A  B0 05	     1			mov al, 05
 0000423C  A2 000003BB R     1			mov PromptSuit, al
 00004241  EB 15	   *	    jmp    @C0917
 00004243		   *@C0915:
 00004243  80 FB 04	   *	    cmp    bl, 4
 00004246  75 09	   *	    jne    @C0918
 00004248  B0 04	     1			mov al, 04
 0000424A  A2 000003BB R     1			mov PromptSuit, al
 0000424F  EB 07	   *	    jmp    @C091A
 00004251		   *@C0918:
 00004251  B0 58	     1			mov al, "X"
 00004253  A2 000003BB R     1			mov PromptSuit, al
 00004258		   *@C091A:
 00004258		   *@C0917:
 00004258		   *@C0914:
 00004258		   *@C0911:
 00004258  A0 000003BB R		mov al,  PromptSuit
 0000425D  E8 00000000 E		call writechar

 00004262  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 00004267  E8 00000000 E		call writestring
 0000426C  8A 1D 0000012D R		mov bl, cards3.value
					ConvertValue
 00004272  80 FB 34	   *	    cmp    bl, 034h
 00004275  0F 87 000000A8  *	    ja	@C091B
 0000427B  80 FB 01	   *	    cmp    bl, 001h
 0000427E  0F 82 0000009F  *	    jb	@C091B
 00004284  80 FB 0E	   *	    cmp    bl, 00Eh
 00004287  72 0A	   *	    jb	@C091E
 00004289  80 FB 1A	   *	    cmp    bl, 01Ah
 0000428C  77 05	   *	    ja	@C091E
 0000428E  80 EB 0D	     1				sub bl, 13			
 00004291  EB 1C	   *	    jmp    @C0921
 00004293		   *@C091E:
 00004293  80 FB 1B	   *	    cmp    bl, 01Bh
 00004296  72 0A	   *	    jb	@C0922
 00004298  80 FB 27	   *	    cmp    bl, 027h
 0000429B  77 05	   *	    ja	@C0922
 0000429D  80 EB 1A	     1				sub bl, 26
 000042A0  EB 0D	   *	    jmp    @C0925
 000042A2		   *@C0922:
 000042A2  80 FB 28	   *	    cmp    bl, 028h
 000042A5  72 08	   *	    jb	@C0926
 000042A7  80 FB 34	   *	    cmp    bl, 034h
 000042AA  77 03	   *	    ja	@C0926
 000042AC  80 EB 27	     1				sub bl, 39
 000042AF		   *@C0926:
 000042AF		   *@C0925:
 000042AF		   *@C0921:
 000042AF  80 FB 00	   *	    cmp    bl, 000h
 000042B2  76 0F	   *	    jbe    @C0929
 000042B4  80 FB 0A	   *	    cmp    bl, 00Ah
 000042B7  73 0A	   *	    jae    @C0929
 000042B9  0F B6 C3	     1				movzx eax, bl
 000042BC  E8 00000000 E     1				call writeint
 000042C1  EB 71	   *	    jmp    @C092C
 000042C3		   *@C0929:
 000042C3  80 FB 0A	   *	    cmp    bl, 10
 000042C6  75 13	   *	    jne    @C092D
 000042C8  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 000042CF  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000042D4  E8 00000000 E     1				Call WriteString
 000042D9  EB 59	   *	    jmp    @C092F
 000042DB		   *@C092D:
 000042DB  80 FB 0B	   *	    cmp    bl, 11
 000042DE  75 13	   *	    jne    @C0930
 000042E0  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 000042E7  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000042EC  E8 00000000 E     1				Call WriteString
 000042F1  EB 41	   *	    jmp    @C0932
 000042F3		   *@C0930:
 000042F3  80 FB 0C	   *	    cmp    bl, 12
 000042F6  75 13	   *	    jne    @C0933
 000042F8  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 000042FF  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004304  E8 00000000 E     1				Call WriteString
 00004309  EB 29	   *	    jmp    @C0935
 0000430B		   *@C0933:
 0000430B  80 FB 0D	   *	    cmp    bl, 13
 0000430E  75 24	   *	    jne    @C0936
 00004310  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00004317  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000431C  E8 00000000 E     1				Call WriteString
					.else
 00004321  EB 11	   *	    jmp    @C0938
 00004323		   *@C091B:
						BlankCard
 00004323  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 0000432A  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 0000432F  E8 00000000 E     1		call writestring
					.endif
 00004334		   *@C0938:
 00004334		   *@C0936:
 00004334		   *@C0935:
 00004334		   *@C0932:
 00004334		   *@C092F:
 00004334		   *@C092C:
 00004334  8A 1D 0000012E R		mov bl, cards3.suit
					ConvertSuit
 0000433A  80 FB 01	   *	    cmp    bl, 1
 0000433D  75 09	   *	    jne    @C0939
 0000433F  B0 06	     1			mov al, 06
 00004341  A2 000003BB R     1			mov PromptSuit, al
 00004346  EB 31	   *	    jmp    @C093B
 00004348		   *@C0939:
 00004348  80 FB 02	   *	    cmp    bl, 2
 0000434B  75 09	   *	    jne    @C093C
 0000434D  B0 03	     1			mov al, 03h
 0000434F  A2 000003BB R     1			mov PromptSuit, al
 00004354  EB 23	   *	    jmp    @C093E
 00004356		   *@C093C:
 00004356  80 FB 03	   *	    cmp    bl, 3
 00004359  75 09	   *	    jne    @C093F
 0000435B  B0 05	     1			mov al, 05
 0000435D  A2 000003BB R     1			mov PromptSuit, al
 00004362  EB 15	   *	    jmp    @C0941
 00004364		   *@C093F:
 00004364  80 FB 04	   *	    cmp    bl, 4
 00004367  75 09	   *	    jne    @C0942
 00004369  B0 04	     1			mov al, 04
 0000436B  A2 000003BB R     1			mov PromptSuit, al
 00004370  EB 07	   *	    jmp    @C0944
 00004372		   *@C0942:
 00004372  B0 58	     1			mov al, "X"
 00004374  A2 000003BB R     1			mov PromptSuit, al
 00004379		   *@C0944:
 00004379		   *@C0941:
 00004379		   *@C093E:
 00004379		   *@C093B:
 00004379  A0 000003BB R		mov al,  PromptSuit
 0000437E  E8 00000000 E		call writechar

 00004383  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 00004388  E8 00000000 E		call writestring
 0000438D  A0 0000012F R		mov al, cards4.value
					ConvertValue
 00004392  80 FB 34	   *	    cmp    bl, 034h
 00004395  0F 87 000000A8  *	    ja	@C0945
 0000439B  80 FB 01	   *	    cmp    bl, 001h
 0000439E  0F 82 0000009F  *	    jb	@C0945
 000043A4  80 FB 0E	   *	    cmp    bl, 00Eh
 000043A7  72 0A	   *	    jb	@C0948
 000043A9  80 FB 1A	   *	    cmp    bl, 01Ah
 000043AC  77 05	   *	    ja	@C0948
 000043AE  80 EB 0D	     1				sub bl, 13			
 000043B1  EB 1C	   *	    jmp    @C094B
 000043B3		   *@C0948:
 000043B3  80 FB 1B	   *	    cmp    bl, 01Bh
 000043B6  72 0A	   *	    jb	@C094C
 000043B8  80 FB 27	   *	    cmp    bl, 027h
 000043BB  77 05	   *	    ja	@C094C
 000043BD  80 EB 1A	     1				sub bl, 26
 000043C0  EB 0D	   *	    jmp    @C094F
 000043C2		   *@C094C:
 000043C2  80 FB 28	   *	    cmp    bl, 028h
 000043C5  72 08	   *	    jb	@C0950
 000043C7  80 FB 34	   *	    cmp    bl, 034h
 000043CA  77 03	   *	    ja	@C0950
 000043CC  80 EB 27	     1				sub bl, 39
 000043CF		   *@C0950:
 000043CF		   *@C094F:
 000043CF		   *@C094B:
 000043CF  80 FB 00	   *	    cmp    bl, 000h
 000043D2  76 0F	   *	    jbe    @C0953
 000043D4  80 FB 0A	   *	    cmp    bl, 00Ah
 000043D7  73 0A	   *	    jae    @C0953
 000043D9  0F B6 C3	     1				movzx eax, bl
 000043DC  E8 00000000 E     1				call writeint
 000043E1  EB 71	   *	    jmp    @C0956
 000043E3		   *@C0953:
 000043E3  80 FB 0A	   *	    cmp    bl, 10
 000043E6  75 13	   *	    jne    @C0957
 000043E8  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 000043EF  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000043F4  E8 00000000 E     1				Call WriteString
 000043F9  EB 59	   *	    jmp    @C0959
 000043FB		   *@C0957:
 000043FB  80 FB 0B	   *	    cmp    bl, 11
 000043FE  75 13	   *	    jne    @C095A
 00004400  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00004407  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000440C  E8 00000000 E     1				Call WriteString
 00004411  EB 41	   *	    jmp    @C095C
 00004413		   *@C095A:
 00004413  80 FB 0C	   *	    cmp    bl, 12
 00004416  75 13	   *	    jne    @C095D
 00004418  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 0000441F  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004424  E8 00000000 E     1				Call WriteString
 00004429  EB 29	   *	    jmp    @C095F
 0000442B		   *@C095D:
 0000442B  80 FB 0D	   *	    cmp    bl, 13
 0000442E  75 24	   *	    jne    @C0960
 00004430  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00004437  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000443C  E8 00000000 E     1				Call WriteString
					.else
 00004441  EB 11	   *	    jmp    @C0962
 00004443		   *@C0945:
						BlankCard
 00004443  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 0000444A  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 0000444F  E8 00000000 E     1		call writestring
					.endif
 00004454		   *@C0962:
 00004454		   *@C0960:
 00004454		   *@C095F:
 00004454		   *@C095C:
 00004454		   *@C0959:
 00004454		   *@C0956:
 00004454  8A 1D 00000130 R		mov bl, cards4.suit
					ConvertSuit
 0000445A  80 FB 01	   *	    cmp    bl, 1
 0000445D  75 09	   *	    jne    @C0963
 0000445F  B0 06	     1			mov al, 06
 00004461  A2 000003BB R     1			mov PromptSuit, al
 00004466  EB 31	   *	    jmp    @C0965
 00004468		   *@C0963:
 00004468  80 FB 02	   *	    cmp    bl, 2
 0000446B  75 09	   *	    jne    @C0966
 0000446D  B0 03	     1			mov al, 03h
 0000446F  A2 000003BB R     1			mov PromptSuit, al
 00004474  EB 23	   *	    jmp    @C0968
 00004476		   *@C0966:
 00004476  80 FB 03	   *	    cmp    bl, 3
 00004479  75 09	   *	    jne    @C0969
 0000447B  B0 05	     1			mov al, 05
 0000447D  A2 000003BB R     1			mov PromptSuit, al
 00004482  EB 15	   *	    jmp    @C096B
 00004484		   *@C0969:
 00004484  80 FB 04	   *	    cmp    bl, 4
 00004487  75 09	   *	    jne    @C096C
 00004489  B0 04	     1			mov al, 04
 0000448B  A2 000003BB R     1			mov PromptSuit, al
 00004490  EB 07	   *	    jmp    @C096E
 00004492		   *@C096C:
 00004492  B0 58	     1			mov al, "X"
 00004494  A2 000003BB R     1			mov PromptSuit, al
 00004499		   *@C096E:
 00004499		   *@C096B:
 00004499		   *@C0968:
 00004499		   *@C0965:
 00004499  A0 000003BB R		mov al,  PromptSuit
 0000449E  E8 00000000 E		call writechar

 000044A3  BA 00000374 R		mov edx, OFFSET PromptShowTable2
 000044A8  E8 00000000 E		call writestring
 000044AD  8A 1D 00000131 R		mov bl, cards5.value
					ConvertValue
 000044B3  80 FB 34	   *	    cmp    bl, 034h
 000044B6  0F 87 000000A8  *	    ja	@C096F
 000044BC  80 FB 01	   *	    cmp    bl, 001h
 000044BF  0F 82 0000009F  *	    jb	@C096F
 000044C5  80 FB 0E	   *	    cmp    bl, 00Eh
 000044C8  72 0A	   *	    jb	@C0972
 000044CA  80 FB 1A	   *	    cmp    bl, 01Ah
 000044CD  77 05	   *	    ja	@C0972
 000044CF  80 EB 0D	     1				sub bl, 13			
 000044D2  EB 1C	   *	    jmp    @C0975
 000044D4		   *@C0972:
 000044D4  80 FB 1B	   *	    cmp    bl, 01Bh
 000044D7  72 0A	   *	    jb	@C0976
 000044D9  80 FB 27	   *	    cmp    bl, 027h
 000044DC  77 05	   *	    ja	@C0976
 000044DE  80 EB 1A	     1				sub bl, 26
 000044E1  EB 0D	   *	    jmp    @C0979
 000044E3		   *@C0976:
 000044E3  80 FB 28	   *	    cmp    bl, 028h
 000044E6  72 08	   *	    jb	@C097A
 000044E8  80 FB 34	   *	    cmp    bl, 034h
 000044EB  77 03	   *	    ja	@C097A
 000044ED  80 EB 27	     1				sub bl, 39
 000044F0		   *@C097A:
 000044F0		   *@C0979:
 000044F0		   *@C0975:
 000044F0  80 FB 00	   *	    cmp    bl, 000h
 000044F3  76 0F	   *	    jbe    @C097D
 000044F5  80 FB 0A	   *	    cmp    bl, 00Ah
 000044F8  73 0A	   *	    jae    @C097D
 000044FA  0F B6 C3	     1				movzx eax, bl
 000044FD  E8 00000000 E     1				call writeint
 00004502  EB 71	   *	    jmp    @C0980
 00004504		   *@C097D:
 00004504  80 FB 0A	   *	    cmp    bl, 10
 00004507  75 13	   *	    jne    @C0981
 00004509  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 00004510  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004515  E8 00000000 E     1				Call WriteString
 0000451A  EB 59	   *	    jmp    @C0983
 0000451C		   *@C0981:
 0000451C  80 FB 0B	   *	    cmp    bl, 11
 0000451F  75 13	   *	    jne    @C0984
 00004521  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00004528  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000452D  E8 00000000 E     1				Call WriteString
 00004532  EB 41	   *	    jmp    @C0986
 00004534		   *@C0984:
 00004534  80 FB 0C	   *	    cmp    bl, 12
 00004537  75 13	   *	    jne    @C0987
 00004539  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 00004540  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004545  E8 00000000 E     1				Call WriteString
 0000454A  EB 29	   *	    jmp    @C0989
 0000454C		   *@C0987:
 0000454C  80 FB 0D	   *	    cmp    bl, 13
 0000454F  75 24	   *	    jne    @C098A
 00004551  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 00004558  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000455D  E8 00000000 E     1				Call WriteString
					.else
 00004562  EB 11	   *	    jmp    @C098C
 00004564		   *@C096F:
						BlankCard
 00004564  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 0000456B  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 00004570  E8 00000000 E     1		call writestring
					.endif
 00004575		   *@C098C:
 00004575		   *@C098A:
 00004575		   *@C0989:
 00004575		   *@C0986:
 00004575		   *@C0983:
 00004575		   *@C0980:
 00004575  8A 1D 00000132 R		mov bl, cards5.suit
					ConvertSuit
 0000457B  80 FB 01	   *	    cmp    bl, 1
 0000457E  75 09	   *	    jne    @C098D
 00004580  B0 06	     1			mov al, 06
 00004582  A2 000003BB R     1			mov PromptSuit, al
 00004587  EB 31	   *	    jmp    @C098F
 00004589		   *@C098D:
 00004589  80 FB 02	   *	    cmp    bl, 2
 0000458C  75 09	   *	    jne    @C0990
 0000458E  B0 03	     1			mov al, 03h
 00004590  A2 000003BB R     1			mov PromptSuit, al
 00004595  EB 23	   *	    jmp    @C0992
 00004597		   *@C0990:
 00004597  80 FB 03	   *	    cmp    bl, 3
 0000459A  75 09	   *	    jne    @C0993
 0000459C  B0 05	     1			mov al, 05
 0000459E  A2 000003BB R     1			mov PromptSuit, al
 000045A3  EB 15	   *	    jmp    @C0995
 000045A5		   *@C0993:
 000045A5  80 FB 04	   *	    cmp    bl, 4
 000045A8  75 09	   *	    jne    @C0996
 000045AA  B0 04	     1			mov al, 04
 000045AC  A2 000003BB R     1			mov PromptSuit, al
 000045B1  EB 07	   *	    jmp    @C0998
 000045B3		   *@C0996:
 000045B3  B0 58	     1			mov al, "X"
 000045B5  A2 000003BB R     1			mov PromptSuit, al
 000045BA		   *@C0998:
 000045BA		   *@C0995:
 000045BA		   *@C0992:
 000045BA		   *@C098F:
 000045BA  A0 000003BB R		mov al,  PromptSuit
 000045BF  E8 00000000 E		call writechar

 000045C4  BA 00000378 R		mov edx, OFFSET PromptShowTable3
 000045C9  E8 00000000 E		call writestring
 000045CE  E8 00000000 E		call crlf
 000045D3  BA 0000039E R		mov edx, OFFSET PromptShowTableChips
 000045D8  E8 00000000 E		call writestring
 000045DD  A1 0000010B R		mov eax, ChipsTable
 000045E2  E8 00000000 E		call writeint
 000045E7  E8 00000000 E		call crlf
 000045EC  E8 00000000 E		call crlf

				; Player

 000045F1  BA 0000037A R		mov edx, OFFSET PromptShowPlayer1
 000045F6  E8 00000000 E		call writestring
 000045FB  8A 1D 00000141 R		mov bl, cardp6.value
					ConvertValue
 00004601  80 FB 34	   *	    cmp    bl, 034h
 00004604  0F 87 000000A8  *	    ja	@C0999
 0000460A  80 FB 01	   *	    cmp    bl, 001h
 0000460D  0F 82 0000009F  *	    jb	@C0999
 00004613  80 FB 0E	   *	    cmp    bl, 00Eh
 00004616  72 0A	   *	    jb	@C099C
 00004618  80 FB 1A	   *	    cmp    bl, 01Ah
 0000461B  77 05	   *	    ja	@C099C
 0000461D  80 EB 0D	     1				sub bl, 13			
 00004620  EB 1C	   *	    jmp    @C099F
 00004622		   *@C099C:
 00004622  80 FB 1B	   *	    cmp    bl, 01Bh
 00004625  72 0A	   *	    jb	@C09A0
 00004627  80 FB 27	   *	    cmp    bl, 027h
 0000462A  77 05	   *	    ja	@C09A0
 0000462C  80 EB 1A	     1				sub bl, 26
 0000462F  EB 0D	   *	    jmp    @C09A3
 00004631		   *@C09A0:
 00004631  80 FB 28	   *	    cmp    bl, 028h
 00004634  72 08	   *	    jb	@C09A4
 00004636  80 FB 34	   *	    cmp    bl, 034h
 00004639  77 03	   *	    ja	@C09A4
 0000463B  80 EB 27	     1				sub bl, 39
 0000463E		   *@C09A4:
 0000463E		   *@C09A3:
 0000463E		   *@C099F:
 0000463E  80 FB 00	   *	    cmp    bl, 000h
 00004641  76 0F	   *	    jbe    @C09A7
 00004643  80 FB 0A	   *	    cmp    bl, 00Ah
 00004646  73 0A	   *	    jae    @C09A7
 00004648  0F B6 C3	     1				movzx eax, bl
 0000464B  E8 00000000 E     1				call writeint
 00004650  EB 71	   *	    jmp    @C09AA
 00004652		   *@C09A7:
 00004652  80 FB 0A	   *	    cmp    bl, 10
 00004655  75 13	   *	    jne    @C09AB
 00004657  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 0000465E  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004663  E8 00000000 E     1				Call WriteString
 00004668  EB 59	   *	    jmp    @C09AD
 0000466A		   *@C09AB:
 0000466A  80 FB 0B	   *	    cmp    bl, 11
 0000466D  75 13	   *	    jne    @C09AE
 0000466F  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00004676  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000467B  E8 00000000 E     1				Call WriteString
 00004680  EB 41	   *	    jmp    @C09B0
 00004682		   *@C09AE:
 00004682  80 FB 0C	   *	    cmp    bl, 12
 00004685  75 13	   *	    jne    @C09B1
 00004687  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 0000468E  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004693  E8 00000000 E     1				Call WriteString
 00004698  EB 29	   *	    jmp    @C09B3
 0000469A		   *@C09B1:
 0000469A  80 FB 0D	   *	    cmp    bl, 13
 0000469D  75 24	   *	    jne    @C09B4
 0000469F  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 000046A6  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000046AB  E8 00000000 E     1				Call WriteString
					.else
 000046B0  EB 11	   *	    jmp    @C09B6
 000046B2		   *@C0999:
						BlankCard
 000046B2  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 000046B9  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 000046BE  E8 00000000 E     1		call writestring
					.endif
 000046C3		   *@C09B6:
 000046C3		   *@C09B4:
 000046C3		   *@C09B3:
 000046C3		   *@C09B0:
 000046C3		   *@C09AD:
 000046C3		   *@C09AA:
 000046C3  8A 1D 00000142 R		mov bl, cardp6.suit
					ConvertSuit
 000046C9  80 FB 01	   *	    cmp    bl, 1
 000046CC  75 09	   *	    jne    @C09B7
 000046CE  B0 06	     1			mov al, 06
 000046D0  A2 000003BB R     1			mov PromptSuit, al
 000046D5  EB 31	   *	    jmp    @C09B9
 000046D7		   *@C09B7:
 000046D7  80 FB 02	   *	    cmp    bl, 2
 000046DA  75 09	   *	    jne    @C09BA
 000046DC  B0 03	     1			mov al, 03h
 000046DE  A2 000003BB R     1			mov PromptSuit, al
 000046E3  EB 23	   *	    jmp    @C09BC
 000046E5		   *@C09BA:
 000046E5  80 FB 03	   *	    cmp    bl, 3
 000046E8  75 09	   *	    jne    @C09BD
 000046EA  B0 05	     1			mov al, 05
 000046EC  A2 000003BB R     1			mov PromptSuit, al
 000046F1  EB 15	   *	    jmp    @C09BF
 000046F3		   *@C09BD:
 000046F3  80 FB 04	   *	    cmp    bl, 4
 000046F6  75 09	   *	    jne    @C09C0
 000046F8  B0 04	     1			mov al, 04
 000046FA  A2 000003BB R     1			mov PromptSuit, al
 000046FF  EB 07	   *	    jmp    @C09C2
 00004701		   *@C09C0:
 00004701  B0 58	     1			mov al, "X"
 00004703  A2 000003BB R     1			mov PromptSuit, al
 00004708		   *@C09C2:
 00004708		   *@C09BF:
 00004708		   *@C09BC:
 00004708		   *@C09B9:
 00004708  A0 000003BB R		mov al,  PromptSuit
 0000470D  E8 00000000 E		call writechar

 00004712  BA 0000038A R		mov edx, OFFSET PromptShowPlayer2
 00004717  E8 00000000 E		call writestring
 0000471C  8A 1D 00000143 R		mov bl, cardp7.value
					ConvertValue
 00004722  80 FB 34	   *	    cmp    bl, 034h
 00004725  0F 87 000000A8  *	    ja	@C09C3
 0000472B  80 FB 01	   *	    cmp    bl, 001h
 0000472E  0F 82 0000009F  *	    jb	@C09C3
 00004734  80 FB 0E	   *	    cmp    bl, 00Eh
 00004737  72 0A	   *	    jb	@C09C6
 00004739  80 FB 1A	   *	    cmp    bl, 01Ah
 0000473C  77 05	   *	    ja	@C09C6
 0000473E  80 EB 0D	     1				sub bl, 13			
 00004741  EB 1C	   *	    jmp    @C09C9
 00004743		   *@C09C6:
 00004743  80 FB 1B	   *	    cmp    bl, 01Bh
 00004746  72 0A	   *	    jb	@C09CA
 00004748  80 FB 27	   *	    cmp    bl, 027h
 0000474B  77 05	   *	    ja	@C09CA
 0000474D  80 EB 1A	     1				sub bl, 26
 00004750  EB 0D	   *	    jmp    @C09CD
 00004752		   *@C09CA:
 00004752  80 FB 28	   *	    cmp    bl, 028h
 00004755  72 08	   *	    jb	@C09CE
 00004757  80 FB 34	   *	    cmp    bl, 034h
 0000475A  77 03	   *	    ja	@C09CE
 0000475C  80 EB 27	     1				sub bl, 39
 0000475F		   *@C09CE:
 0000475F		   *@C09CD:
 0000475F		   *@C09C9:
 0000475F  80 FB 00	   *	    cmp    bl, 000h
 00004762  76 0F	   *	    jbe    @C09D1
 00004764  80 FB 0A	   *	    cmp    bl, 00Ah
 00004767  73 0A	   *	    jae    @C09D1
 00004769  0F B6 C3	     1				movzx eax, bl
 0000476C  E8 00000000 E     1				call writeint
 00004771  EB 71	   *	    jmp    @C09D4
 00004773		   *@C09D1:
 00004773  80 FB 0A	   *	    cmp    bl, 10
 00004776  75 13	   *	    jne    @C09D5
 00004778  C6 05 000003BB R  1				mov PromptSuit, "J"
	   4A
 0000477F  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 00004784  E8 00000000 E     1				Call WriteString
 00004789  EB 59	   *	    jmp    @C09D7
 0000478B		   *@C09D5:
 0000478B  80 FB 0B	   *	    cmp    bl, 11
 0000478E  75 13	   *	    jne    @C09D8
 00004790  C6 05 000003BB R  1				mov PromptSuit, "Q"
	   51
 00004797  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 0000479C  E8 00000000 E     1				Call WriteString
 000047A1  EB 41	   *	    jmp    @C09DA
 000047A3		   *@C09D8:
 000047A3  80 FB 0C	   *	    cmp    bl, 12
 000047A6  75 13	   *	    jne    @C09DB
 000047A8  C6 05 000003BB R  1				mov PromptSuit, "K"
	   4B
 000047AF  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000047B4  E8 00000000 E     1				Call WriteString
 000047B9  EB 29	   *	    jmp    @C09DD
 000047BB		   *@C09DB:
 000047BB  80 FB 0D	   *	    cmp    bl, 13
 000047BE  75 24	   *	    jne    @C09DE
 000047C0  C6 05 000003BB R  1				mov PromptSuit, "A"
	   41
 000047C7  BA 000003BB R     1				mov EDX, OFFSET PromptSuit
 000047CC  E8 00000000 E     1				Call WriteString
					.else
 000047D1  EB 11	   *	    jmp    @C09E0
 000047D3		   *@C09C3:
						BlankCard
 000047D3  C6 05 000003BB R  1		mov PromptSuit, "X"
	   58
 000047DA  BA 000003BB R     1		mov edx, OFFSET PromptSuit
 000047DF  E8 00000000 E     1		call writestring
					.endif
 000047E4		   *@C09E0:
 000047E4		   *@C09DE:
 000047E4		   *@C09DD:
 000047E4		   *@C09DA:
 000047E4		   *@C09D7:
 000047E4		   *@C09D4:
 000047E4  8A 1D 00000144 R		mov bl, cardp7.suit
					ConvertSuit
 000047EA  80 FB 01	   *	    cmp    bl, 1
 000047ED  75 09	   *	    jne    @C09E1
 000047EF  B0 06	     1			mov al, 06
 000047F1  A2 000003BB R     1			mov PromptSuit, al
 000047F6  EB 31	   *	    jmp    @C09E3
 000047F8		   *@C09E1:
 000047F8  80 FB 02	   *	    cmp    bl, 2
 000047FB  75 09	   *	    jne    @C09E4
 000047FD  B0 03	     1			mov al, 03h
 000047FF  A2 000003BB R     1			mov PromptSuit, al
 00004804  EB 23	   *	    jmp    @C09E6
 00004806		   *@C09E4:
 00004806  80 FB 03	   *	    cmp    bl, 3
 00004809  75 09	   *	    jne    @C09E7
 0000480B  B0 05	     1			mov al, 05
 0000480D  A2 000003BB R     1			mov PromptSuit, al
 00004812  EB 15	   *	    jmp    @C09E9
 00004814		   *@C09E7:
 00004814  80 FB 04	   *	    cmp    bl, 4
 00004817  75 09	   *	    jne    @C09EA
 00004819  B0 04	     1			mov al, 04
 0000481B  A2 000003BB R     1			mov PromptSuit, al
 00004820  EB 07	   *	    jmp    @C09EC
 00004822		   *@C09EA:
 00004822  B0 58	     1			mov al, "X"
 00004824  A2 000003BB R     1			mov PromptSuit, al
 00004829		   *@C09EC:
 00004829		   *@C09E9:
 00004829		   *@C09E6:
 00004829		   *@C09E3:
 00004829  A0 000003BB R		mov al,  PromptSuit
 0000482E  E8 00000000 E		call writechar

 00004833  BA 0000038E R		mov edx, OFFSET PromptShowPlayer3
 00004838  E8 00000000 E		call writestring
 0000483D  E8 00000000 E		call crlf
 00004842  BA 000003AC R		mov edx, OFFSET PromptShowPlayerChips
 00004847  E8 00000000 E		call writestring
 0000484C  A1 00000103 R		mov eax, ChipsPlayer
 00004851  E8 00000000 E		call writeint
 00004856  E8 00000000 E		call crlf
 0000485B  E8 00000000 E		call crlf

 00004860  C3			ret
 00004861			DisplaySpock ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;

				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
 00004861			RoundWinner PROC
				;Display hand values and who wins
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
				;Spock
					.if(SpockHandValue == 9)
 00004861  83 3D 000000BA R
	   09		   *	    cmp    SpockHandValue, 009h
 00004868  75 19	   *	    jne    @C09ED
 0000486A  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 0000486F  E8 00000000 E			call WriteString
 00004874  BA 000003D8 R			mov EDX, OFFSET PromptRF
 00004879  E8 00000000 E			Call WriteString
					.elseif(SpockHandValue == 8)
 0000487E  E9 00000139	   *	    jmp    @C09EF
 00004883		   *@C09ED:
 00004883  83 3D 000000BA R
	   08		   *	    cmp    SpockHandValue, 008h
 0000488A  75 19	   *	    jne    @C09F0
 0000488C  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 00004891  E8 00000000 E			call WriteString
 00004896  BA 000003E4 R			mov EDX, OFFSET PromptSF
 0000489B  E8 00000000 E			Call WriteString
					.elseif(SpockHandValue == 7)
 000048A0  E9 00000117	   *	    jmp    @C09F2
 000048A5		   *@C09F0:
 000048A5  83 3D 000000BA R
	   07		   *	    cmp    SpockHandValue, 007h
 000048AC  75 23	   *	    jne    @C09F3
 000048AE  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 000048B3  E8 00000000 E			call WriteString
 000048B8  BA 000003F3 R			mov EDX, OFFSET PromptFK
 000048BD  E8 00000000 E			Call WriteString
 000048C2  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 000048C7  E8 00000000 E			call writestring
					.elseif(SpockHandValue == 6)
 000048CC  E9 000000EB	   *	    jmp    @C09F5
 000048D1		   *@C09F3:
 000048D1  83 3D 000000BA R
	   06		   *	    cmp    SpockHandValue, 006h
 000048D8  75 19	   *	    jne    @C09F6
 000048DA  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 000048DF  E8 00000000 E			call WriteString
 000048E4  BA 00000402 R			mov EDX, OFFSET PromptFH
 000048E9  E8 00000000 E			Call WriteString
					.elseif(SpockHandValue == 5)
 000048EE  E9 000000C9	   *	    jmp    @C09F8
 000048F3		   *@C09F6:
 000048F3  83 3D 000000BA R
	   05		   *	    cmp    SpockHandValue, 005h
 000048FA  75 19	   *	    jne    @C09F9
 000048FC  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 00004901  E8 00000000 E			call WriteString
 00004906  BA 0000040D R			mov EDX, OFFSET PromptFL
 0000490B  E8 00000000 E			Call WriteString
					.elseif(SpockHandValue == 4)
 00004910  E9 000000A7	   *	    jmp    @C09FB
 00004915		   *@C09F9:
 00004915  83 3D 000000BA R
	   04		   *	    cmp    SpockHandValue, 004h
 0000491C  75 19	   *	    jne    @C09FC
 0000491E  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 00004923  E8 00000000 E			call WriteString
 00004928  BA 00000413 R			mov EDX, OFFSET PromptST
 0000492D  E8 00000000 E			Call WriteString
					.elseif(SpockHandValue == 3)
 00004932  E9 00000085	   *	    jmp    @C09FE
 00004937		   *@C09FC:
 00004937  83 3D 000000BA R
	   03		   *	    cmp    SpockHandValue, 003h
 0000493E  75 20	   *	    jne    @C09FF
 00004940  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 00004945  E8 00000000 E			call WriteString
 0000494A  BA 0000041C R			mov EDX, OFFSET PromptTK
 0000494F  E8 00000000 E			Call WriteString
 00004954  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 00004959  E8 00000000 E			call writestring
					.elseif(SpockHandValue == 2)
 0000495E  EB 5C	   *	    jmp    @C0A01
 00004960		   *@C09FF:
 00004960  83 3D 000000BA R
	   02		   *	    cmp    SpockHandValue, 002h
 00004967  75 20	   *	    jne    @C0A02
 00004969  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 0000496E  E8 00000000 E			call WriteString
 00004973  BA 0000042C R			mov EDX, OFFSET PromptTP
 00004978  E8 00000000 E			Call WriteString
 0000497D  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 00004982  E8 00000000 E			call writestring
					.elseif(SpockHandValue == 1)
 00004987  EB 33	   *	    jmp    @C0A04
 00004989		   *@C0A02:
 00004989  83 3D 000000BA R
	   01		   *	    cmp    SpockHandValue, 001h
 00004990  75 16	   *	    jne    @C0A05
 00004992  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 00004997  E8 00000000 E			call WriteString
 0000499C  BA 00000435 R			mov EDX, OFFSET PromptOP
 000049A1  E8 00000000 E			Call WriteString
					.else
 000049A6  EB 14	   *	    jmp    @C0A07
 000049A8		   *@C0A05:
 000049A8  BA 000003CC R			mov EDX, OFFSET PromptHandVS1
 000049AD  E8 00000000 E			call WriteString 
 000049B2  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 000049B7  E8 00000000 E			call writestring
					.endif
 000049BC		   *@C0A07:
 000049BC		   *@C0A04:
 000049BC		   *@C0A01:
 000049BC		   *@C09FE:
 000049BC		   *@C09FB:
 000049BC		   *@C09F8:
 000049BC		   *@C09F5:
 000049BC		   *@C09F2:
 000049BC		   *@C09EF:
 000049BC  E8 00000000 E		call CRLF

				;player
					.if(PlayerHandValue == 9)
 000049C1  83 3D 0000007A R
	   09		   *	    cmp    PlayerHandValue, 009h
 000049C8  75 19	   *	    jne    @C0A08
 000049CA  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 000049CF  E8 00000000 E			call WriteString
 000049D4  BA 000003D8 R			mov EDX, OFFSET PromptRF
 000049D9  E8 00000000 E			Call WriteString
					.elseif(PlayerHandValue == 8)
 000049DE  E9 00000139	   *	    jmp    @C0A0A
 000049E3		   *@C0A08:
 000049E3  83 3D 0000007A R
	   08		   *	    cmp    PlayerHandValue, 008h
 000049EA  75 19	   *	    jne    @C0A0B
 000049EC  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 000049F1  E8 00000000 E			call WriteString
 000049F6  BA 000003E4 R			mov EDX, OFFSET PromptSF
 000049FB  E8 00000000 E			Call WriteString
					.elseif(PlayerHandValue == 7)
 00004A00  E9 00000117	   *	    jmp    @C0A0D
 00004A05		   *@C0A0B:
 00004A05  83 3D 0000007A R
	   07		   *	    cmp    PlayerHandValue, 007h
 00004A0C  75 23	   *	    jne    @C0A0E
 00004A0E  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004A13  E8 00000000 E			call WriteString
 00004A18  BA 000003F3 R			mov EDX, OFFSET PromptFK
 00004A1D  E8 00000000 E			Call WriteString
 00004A22  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 00004A27  E8 00000000 E			call writestring
					.elseif(PlayerHandValue == 6)
 00004A2C  E9 000000EB	   *	    jmp    @C0A10
 00004A31		   *@C0A0E:
 00004A31  83 3D 0000007A R
	   06		   *	    cmp    PlayerHandValue, 006h
 00004A38  75 19	   *	    jne    @C0A11
 00004A3A  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004A3F  E8 00000000 E			call WriteString
 00004A44  BA 00000402 R			mov EDX, OFFSET PromptFH
 00004A49  E8 00000000 E			Call WriteString
					.elseif(PlayerHandValue == 5)
 00004A4E  E9 000000C9	   *	    jmp    @C0A13
 00004A53		   *@C0A11:
 00004A53  83 3D 0000007A R
	   05		   *	    cmp    PlayerHandValue, 005h
 00004A5A  75 19	   *	    jne    @C0A14
 00004A5C  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004A61  E8 00000000 E			call WriteString
 00004A66  BA 0000040D R			mov EDX, OFFSET PromptFL
 00004A6B  E8 00000000 E			Call WriteString
					.elseif(PlayerHandValue == 4)
 00004A70  E9 000000A7	   *	    jmp    @C0A16
 00004A75		   *@C0A14:
 00004A75  83 3D 0000007A R
	   04		   *	    cmp    PlayerHandValue, 004h
 00004A7C  75 19	   *	    jne    @C0A17
 00004A7E  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004A83  E8 00000000 E			call WriteString
 00004A88  BA 00000413 R			mov EDX, OFFSET PromptST
 00004A8D  E8 00000000 E			Call WriteString
					.elseif(PlayerHandValue == 3)
 00004A92  E9 00000085	   *	    jmp    @C0A19
 00004A97		   *@C0A17:
 00004A97  83 3D 0000007A R
	   03		   *	    cmp    PlayerHandValue, 003h
 00004A9E  75 20	   *	    jne    @C0A1A
 00004AA0  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004AA5  E8 00000000 E			call WriteString
 00004AAA  BA 0000041C R			mov EDX, OFFSET PromptTK
 00004AAF  E8 00000000 E			Call WriteString
 00004AB4  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 00004AB9  E8 00000000 E			call writestring
					.elseif(PlayerHandValue == 2)
 00004ABE  EB 5C	   *	    jmp    @C0A1C
 00004AC0		   *@C0A1A:
 00004AC0  83 3D 0000007A R
	   02		   *	    cmp    PlayerHandValue, 002h
 00004AC7  75 20	   *	    jne    @C0A1D
 00004AC9  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004ACE  E8 00000000 E			call WriteString
 00004AD3  BA 0000042C R			mov EDX, OFFSET PromptTP
 00004AD8  E8 00000000 E			Call WriteString
 00004ADD  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 00004AE2  E8 00000000 E			call writestring
					.elseif(SpockHandValue == 1)
 00004AE7  EB 33	   *	    jmp    @C0A1F
 00004AE9		   *@C0A1D:
 00004AE9  83 3D 000000BA R
	   01		   *	    cmp    SpockHandValue, 001h
 00004AF0  75 16	   *	    jne    @C0A20
 00004AF2  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004AF7  E8 00000000 E			call WriteString
 00004AFC  BA 00000435 R			mov EDX, OFFSET PromptOP
 00004B01  E8 00000000 E			Call WriteString
					.else
 00004B06  EB 14	   *	    jmp    @C0A22
 00004B08		   *@C0A20:
 00004B08  BA 0000043A R			mov EDX, OFFSET PromptHandVP1
 00004B0D  E8 00000000 E			call WriteString 
 00004B12  BA 00000447 R			mov EDX, OFFSET PromptHandVP2
 00004B17  E8 00000000 E			call WriteString
					.endif
 00004B1C		   *@C0A22:
 00004B1C		   *@C0A1F:
 00004B1C		   *@C0A1C:
 00004B1C		   *@C0A19:
 00004B1C		   *@C0A16:
 00004B1C		   *@C0A13:
 00004B1C		   *@C0A10:
 00004B1C		   *@C0A0D:
 00004B1C		   *@C0A0A:
 00004B1C  E8 00000000 E		call CRLF
 00004B21  BA 0000047A R		mov EDX, OFFSET PromptPressEnter
 00004B26  E8 00000000 E		Call writeString
 00004B2B  E8 00000000 E		call readint
 00004B30  C3				ret
 00004B31			RoundWinner ENDP
				;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------;
				END main
Microsoft (R) Macro Assembler Version 12.00.30501.0	    12/10/14 19:34:34
Texas Hold 'e						     Symbols 2 - 1




Macros:

                N a m e                 Type

BlankCard  . . . . . . . . . . .	Proc
ConvertSuit  . . . . . . . . . .	Proc
ConvertValue . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
Card . . . . . . . . . . . . . .	 00000002
  value  . . . . . . . . . . . .	 00000000	 Byte
  Suit . . . . . . . . . . . . .	 00000001	 Byte
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000F54 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00004B31 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Ante . . . . . . . . . . . . . .	P Near	 0000032A _TEXT	Length= 000000A4 Public STDCALL
Bid  . . . . . . . . . . . . . .	P Near	 00000BCE _TEXT	Length= 00000667 Public STDCALL
  BadInput1  . . . . . . . . . .	L Near	 00000E12 _TEXT	
  BadInput . . . . . . . . . . .	L Near	 00000F2B _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CompareHand  . . . . . . . . . .	P Near	 000015BD _TEXT	Length= 00000182 Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DealFlop . . . . . . . . . . . .	P Near	 000002AF _TEXT	Length= 00000031 Public STDCALL
  T1 . . . . . . . . . . . . . .	L Near	 000002BF _TEXT	
DealHand . . . . . . . . . . . .	P Near	 00000276 _TEXT	Length= 00000039 Public STDCALL
  H1 . . . . . . . . . . . . . .	L Near	 00000285 _TEXT	
DealRiver  . . . . . . . . . . .	P Near	 0000030E _TEXT	Length= 0000001C Public STDCALL
DealTurn . . . . . . . . . . . .	P Near	 000002E0 _TEXT	Length= 0000002E Public STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplaySpock . . . . . . . . . .	P Near	 00003DA2 _TEXT	Length= 00000ABF Public STDCALL
Display  . . . . . . . . . . . .	P Near	 00003524 _TEXT	Length= 0000087E Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FourKind . . . . . . . . . . . .	P Near	 0000321D _TEXT	Length= 000000ED Public STDCALL
  FKs  . . . . . . . . . . . . .	L Near	 0000322C _TEXT	
  FKp  . . . . . . . . . . . . .	L Near	 000032A2 _TEXT	
FullHouse  . . . . . . . . . . .	P Near	 0000330A _TEXT	Length= 00000039 Public STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HandPlayer . . . . . . . . . . .	P Near	 0000097E _TEXT	Length= 00000250 Public STDCALL
  FPH1 . . . . . . . . . . . . .	L Near	 00000988 _TEXT	
  FPH2 . . . . . . . . . . . . .	L Near	 000009A3 _TEXT	
HandSpock  . . . . . . . . . . .	P Near	 00000730 _TEXT	Length= 0000024E Public STDCALL
  FSH1 . . . . . . . . . . . . .	L Near	 0000073A _TEXT	
  FSH2 . . . . . . . . . . . . .	L Near	 00000755 _TEXT	
HandValue  . . . . . . . . . . .	P Near	 00001235 _TEXT	Length= 00000388 Public STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HighCard . . . . . . . . . . . .	P Near	 0000350F _TEXT	Length= 00000015 Public STDCALL
IsAFlush . . . . . . . . . . . .	P Near	 0000173F _TEXT	Length= 00000407 Public STDCALL
IsAStraight  . . . . . . . . . .	P Near	 00001B46 _TEXT	Length= 000016D7 Public STDCALL
  SS1  . . . . . . . . . . . . .	L Near	 00002327 _TEXT	
  SS2  . . . . . . . . . . . . .	L Near	 0000232D _TEXT	
  PS1  . . . . . . . . . . . . .	L Near	 00002E8C _TEXT	
  PS2  . . . . . . . . . . . . .	L Near	 00002E92 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Lose . . . . . . . . . . . . . .	P Near	 00000563 _TEXT	Length= 0000019A Public STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlayAgain  . . . . . . . . . . .	P Near	 000006FD _TEXT	Length= 00000033 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RoundWinner  . . . . . . . . . .	P Near	 00004861 _TEXT	Length= 000002D0 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Shuffel  . . . . . . . . . . . .	P Near	 000001F9 _TEXT	Length= 0000007D Public STDCALL
  EmptyHands . . . . . . . . . .	L Near	 00000205 _TEXT	
  EmptyTable . . . . . . . . . .	L Near	 00000222 _TEXT	
  L0 . . . . . . . . . . . . . .	L Near	 0000023B _TEXT	
  S1 . . . . . . . . . . . . . .	L Near	 0000024F _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ThreeKind  . . . . . . . . . . .	P Near	 00003343 _TEXT	Length= 000000F3 Public STDCALL
  TKS  . . . . . . . . . . . . .	L Near	 00003352 _TEXT	
  TKP  . . . . . . . . . . . . .	L Near	 000033CB _TEXT	
TwoPair  . . . . . . . . . . . .	P Near	 00003436 _TEXT	Length= 000000D9 Public STDCALL
  TPS  . . . . . . . . . . . . .	L Near	 00003445 _TEXT	
  TPP  . . . . . . . . . . . . .	L Near	 000034B1 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Welcome  . . . . . . . . . . . .	P Near	 0000006D _TEXT	Length= 0000018C Public STDCALL
Win  . . . . . . . . . . . . . .	P Near	 000003CE _TEXT	Length= 00000195 Public STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000006D Public STDCALL
  G1 . . . . . . . . . . . . . .	L Near	 00000019 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BigBlind . . . . . . . . . . . .	DWord	 0000010F _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ChipsCall  . . . . . . . . . . .	DWord	 0000007E _DATA	
ChipsPlayer  . . . . . . . . . .	DWord	 00000103 _DATA	
ChipsRaise . . . . . . . . . . .	DWord	 00000082 _DATA	
ChipsSpock . . . . . . . . . . .	DWord	 00000107 _DATA	
ChipsTable . . . . . . . . . . .	DWord	 0000010B _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
DeckMark . . . . . . . . . . . .	DWord	 000000FB _DATA	
Deck . . . . . . . . . . . . . .	Byte	 000000BE _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Em1  . . . . . . . . . . . . . .	Byte	 00000D8F _DATA	
Em2  . . . . . . . . . . . . . .	Byte	 00000DBD _DATA	
Em3  . . . . . . . . . . . . . .	Byte	 00000DF0 _DATA	
Em4  . . . . . . . . . . . . . .	Byte	 00000E23 _DATA	
Em5  . . . . . . . . . . . . . .	Byte	 00000E66 _DATA	
Em6  . . . . . . . . . . . . . .	Byte	 00000EA9 _DATA	
Em7  . . . . . . . . . . . . . .	Byte	 00000EEB _DATA	
Em8  . . . . . . . . . . . . . .	Byte	 00000F2D _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FoldP  . . . . . . . . . . . . .	DWord	 00000092 _DATA	
FoldS  . . . . . . . . . . . . .	DWord	 0000008E _DATA	
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
FullHandPlayer . . . . . . . . .	Byte	 0000011A _DATA	
FullHandSpock  . . . . . . . . .	Byte	 00000113 _DATA	
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
High2PairP . . . . . . . . . . .	Byte	 0000004B _DATA	
High2PairS . . . . . . . . . . .	Byte	 0000004A _DATA	
HighCardp  . . . . . . . . . . .	Byte	 00000055 _DATA	
HighCards  . . . . . . . . . . .	Byte	 00000054 _DATA	
HighFourP  . . . . . . . . . . .	Byte	 00000047 _DATA	
HighFourS  . . . . . . . . . . .	Byte	 00000046 _DATA	
HighPairP  . . . . . . . . . . .	Byte	 00000051 _DATA	
HighPairS  . . . . . . . . . . .	Byte	 00000050 _DATA	
HighStp  . . . . . . . . . . . .	Byte	 00000053 _DATA	
HighSts  . . . . . . . . . . . .	Byte	 00000052 _DATA	
HighThreeP . . . . . . . . . . .	Byte	 00000049 _DATA	
HighThreeS . . . . . . . . . . .	Byte	 00000048 _DATA	
Hold1  . . . . . . . . . . . . .	Byte	 00000B75 _DATA	
Hold2  . . . . . . . . . . . . .	Byte	 00000BB8 _DATA	
Hold3  . . . . . . . . . . . . .	Byte	 00000BFB _DATA	
Hold4  . . . . . . . . . . . . .	Byte	 00000C3E _DATA	
Hold5  . . . . . . . . . . . . .	Byte	 00000C81 _DATA	
Hold6  . . . . . . . . . . . . .	Byte	 00000CC4 _DATA	
Hold7  . . . . . . . . . . . . .	Byte	 00000D07 _DATA	
Hold8  . . . . . . . . . . . . .	Byte	 00000D4A _DATA	
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
Low2PairP  . . . . . . . . . . .	Byte	 0000004D _DATA	
Low2PairS  . . . . . . . . . . .	Byte	 0000004C _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PairP  . . . . . . . . . . . . .	Byte	 0000004F _DATA	
PairS  . . . . . . . . . . . . .	Byte	 0000004E _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PlayerBet  . . . . . . . . . . .	DWord	 0000008A _DATA	
PlayerFlush  . . . . . . . . . .	DWord	 00000066 _DATA	
PlayerFour . . . . . . . . . . .	DWord	 0000005E _DATA	
PlayerFull . . . . . . . . . . .	DWord	 00000062 _DATA	
PlayerHandValue  . . . . . . . .	DWord	 0000007A _DATA	
PlayerHand . . . . . . . . . . .	Byte	 000000F2 _DATA	
PlayerOnePair  . . . . . . . . .	DWord	 00000076 _DATA	
PlayerRoyal  . . . . . . . . . .	DWord	 00000056 _DATA	
PlayerStraightFlush  . . . . . .	DWord	 0000005A _DATA	
PlayerStraight . . . . . . . . .	DWord	 0000006A _DATA	
PlayerThree  . . . . . . . . . .	DWord	 0000006E _DATA	
PlayerTwoPair  . . . . . . . . .	DWord	 00000072 _DATA	
PromptBadInput . . . . . . . . .	Byte	 000001E1 _DATA	
PromptCardUnknown  . . . . . . .	Byte	 0000034A _DATA	
PromptChipsPlayer  . . . . . . .	Byte	 000001DD _DATA	
PromptChipsSpock . . . . . . . .	Byte	 000001DF _DATA	
PromptFH . . . . . . . . . . . .	Byte	 00000402 _DATA	
PromptFK . . . . . . . . . . . .	Byte	 000003F3 _DATA	
PromptFL . . . . . . . . . . . .	Byte	 0000040D _DATA	
PromptHandVP1  . . . . . . . . .	Byte	 0000043A _DATA	
PromptHandVP2  . . . . . . . . .	Byte	 00000447 _DATA	
PromptHandVS1  . . . . . . . . .	Byte	 000003CC _DATA	
PromptHandWinP . . . . . . . . .	Byte	 0000044D _DATA	
PromptHandWinS . . . . . . . . .	Byte	 00000462 _DATA	
PromptHandWinT . . . . . . . . .	Byte	 00000476 _DATA	
PromptLine . . . . . . . . . . .	Byte	 00000306 _DATA	
PromptLoseImage  . . . . . . . .	Byte	 000001DB _DATA	
PromptOP . . . . . . . . . . . .	Byte	 00000435 _DATA	
PromptPlayAgain  . . . . . . . .	Byte	 000001A3 _DATA	
PromptPlayerBet  . . . . . . . .	Byte	 00000255 _DATA	
PromptPlayerCall . . . . . . . .	Byte	 000002D6 _DATA	
PromptPlayerFold . . . . . . . .	Byte	 000002DB _DATA	
PromptPlayerNotEnoughChips . . .	Byte	 000002E0 _DATA	
PromptPlayerRaise  . . . . . . .	Byte	 000002C3 _DATA	
PromptPlayerSecond . . . . . . .	Byte	 00000283 _DATA	
PromptPlayerTurn . . . . . . . .	Byte	 000002B3 _DATA	
PromptPressEnter . . . . . . . .	Byte	 0000047A _DATA	
PromptRF . . . . . . . . . . . .	Byte	 000003D8 _DATA	
PromptSF . . . . . . . . . . . .	Byte	 000003E4 _DATA	
PromptST . . . . . . . . . . . .	Byte	 00000413 _DATA	
PromptShowPlayer1  . . . . . . .	Byte	 0000037A _DATA	
PromptShowPlayer2  . . . . . . .	Byte	 0000038A _DATA	
PromptShowPlayer3  . . . . . . .	Byte	 0000038E _DATA	
PromptShowPlayerChips  . . . . .	Byte	 000003AC _DATA	
PromptShowSpock1 . . . . . . . .	Byte	 000003BD _DATA	
PromptShowSpockChips . . . . . .	Byte	 00000390 _DATA	
PromptShowSpock  . . . . . . . .	Byte	 0000034D _DATA	
PromptShowTable1 . . . . . . . .	Byte	 00000365 _DATA	
PromptShowTable2 . . . . . . . .	Byte	 00000374 _DATA	
PromptShowTable3 . . . . . . . .	Byte	 00000378 _DATA	
PromptShowTableChips . . . . . .	Byte	 0000039E _DATA	
PromptSpockBet . . . . . . . . .	Byte	 00000221 _DATA	
PromptSpockCall  . . . . . . . .	Byte	 0000023D _DATA	
PromptSpockFold  . . . . . . . .	Byte	 00000249 _DATA	
PromptSpockRaise . . . . . . . .	Byte	 0000022E _DATA	
PromptSpockTurn  . . . . . . . .	Byte	 0000020E _DATA	
PromptSuit . . . . . . . . . . .	Byte	 000003BB _DATA	
PromptTK . . . . . . . . . . . .	Byte	 0000041C _DATA	
PromptTP . . . . . . . . . . . .	Byte	 0000042C _DATA	
PromptWinImage . . . . . . . . .	Byte	 000001D9 _DATA	
PromptYouLose  . . . . . . . . .	Byte	 0000016F _DATA	
PromptYouWin . . . . . . . . . .	Byte	 00000145 _DATA	
RFp  . . . . . . . . . . . . . .	DWord	 0000003E _DATA	
RFs  . . . . . . . . . . . . . .	DWord	 00000042 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Spock10  . . . . . . . . . . . .	Byte	 0000065D _DATA	
Spock11  . . . . . . . . . . . .	Byte	 00000693 _DATA	
Spock12  . . . . . . . . . . . .	Byte	 000006C9 _DATA	
Spock13  . . . . . . . . . . . .	Byte	 000006FF _DATA	
Spock14  . . . . . . . . . . . .	Byte	 00000735 _DATA	
Spock15  . . . . . . . . . . . .	Byte	 0000076B _DATA	
Spock16  . . . . . . . . . . . .	Byte	 000007A1 _DATA	
Spock17  . . . . . . . . . . . .	Byte	 000007D7 _DATA	
Spock18  . . . . . . . . . . . .	Byte	 0000080D _DATA	
Spock19  . . . . . . . . . . . .	Byte	 00000843 _DATA	
Spock20  . . . . . . . . . . . .	Byte	 00000879 _DATA	
Spock21  . . . . . . . . . . . .	Byte	 000008AF _DATA	
Spock22  . . . . . . . . . . . .	Byte	 000008E5 _DATA	
Spock23  . . . . . . . . . . . .	Byte	 0000091B _DATA	
Spock24  . . . . . . . . . . . .	Byte	 00000951 _DATA	
Spock25  . . . . . . . . . . . .	Byte	 00000987 _DATA	
Spock2 . . . . . . . . . . . . .	Byte	 000004AD _DATA	
Spock3 . . . . . . . . . . . . .	Byte	 000004E3 _DATA	
Spock4 . . . . . . . . . . . . .	Byte	 00000519 _DATA	
Spock5 . . . . . . . . . . . . .	Byte	 0000054F _DATA	
Spock6 . . . . . . . . . . . . .	Byte	 00000585 _DATA	
Spock7 . . . . . . . . . . . . .	Byte	 000005BB _DATA	
Spock8 . . . . . . . . . . . . .	Byte	 000005F1 _DATA	
Spock9 . . . . . . . . . . . . .	Byte	 00000627 _DATA	
SpockBet . . . . . . . . . . . .	DWord	 00000086 _DATA	
SpockFlush . . . . . . . . . . .	DWord	 000000A6 _DATA	
SpockFour  . . . . . . . . . . .	DWord	 0000009E _DATA	
SpockFull  . . . . . . . . . . .	DWord	 000000A2 _DATA	
SpockHandValue . . . . . . . . .	DWord	 000000BA _DATA	
SpockHand  . . . . . . . . . . .	Byte	 000000F4 _DATA	
SpockOnePair . . . . . . . . . .	DWord	 000000B6 _DATA	
SpockRoyal . . . . . . . . . . .	DWord	 00000096 _DATA	
SpockStraightFlush . . . . . . .	DWord	 0000009A _DATA	
SpockStraight  . . . . . . . . .	DWord	 000000AA _DATA	
SpockThree . . . . . . . . . . .	DWord	 000000AE _DATA	
SpockTwoPair . . . . . . . . . .	DWord	 000000B2 _DATA	
StraightP  . . . . . . . . . . .	Byte	 00000007 _DATA	
StraightS  . . . . . . . . . . .	Byte	 00000000 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TableMark  . . . . . . . . . . .	DWord	 000000FF _DATA	
Table  . . . . . . . . . . . . .	Byte	 000000F6 _DATA	
Texas1 . . . . . . . . . . . . .	Byte	 000009BD _DATA	
Texas2 . . . . . . . . . . . . .	Byte	 000009E9 _DATA	
Texas3 . . . . . . . . . . . . .	Byte	 000009F6 _DATA	
Texas4 . . . . . . . . . . . . .	Byte	 00000A03 _DATA	
Texas5 . . . . . . . . . . . . .	Byte	 00000A4D _DATA	
Texas6 . . . . . . . . . . . . .	Byte	 00000A97 _DATA	
Texas7 . . . . . . . . . . . . .	Byte	 00000AE1 _DATA	
Texas8 . . . . . . . . . . . . .	Byte	 00000B2B _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cardp1 . . . . . . . . . . . . .	Card	 00000137 _DATA	
cardp2 . . . . . . . . . . . . .	Card	 00000139 _DATA	
cardp3 . . . . . . . . . . . . .	Card	 0000013B _DATA	
cardp4 . . . . . . . . . . . . .	Card	 0000013D _DATA	
cardp5 . . . . . . . . . . . . .	Card	 0000013F _DATA	
cardp6 . . . . . . . . . . . . .	Card	 00000141 _DATA	
cardp7 . . . . . . . . . . . . .	Card	 00000143 _DATA	
cards1 . . . . . . . . . . . . .	Card	 00000129 _DATA	
cards2 . . . . . . . . . . . . .	Card	 0000012B _DATA	
cards3 . . . . . . . . . . . . .	Card	 0000012D _DATA	
cards4 . . . . . . . . . . . . .	Card	 0000012F _DATA	
cards5 . . . . . . . . . . . . .	Card	 00000131 _DATA	
cards6 . . . . . . . . . . . . .	Card	 00000133 _DATA	
cards7 . . . . . . . . . . . . .	Card	 00000135 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isClubP  . . . . . . . . . . . .	DWord	 00000016 _DATA	
isClubS  . . . . . . . . . . . .	DWord	 0000002A _DATA	
isDimondP  . . . . . . . . . . .	DWord	 0000001A _DATA	
isDimondS  . . . . . . . . . . .	DWord	 0000002E _DATA	
isFlushP . . . . . . . . . . . .	DWord	 0000001E _DATA	
isFlushS . . . . . . . . . . . .	DWord	 00000032 _DATA	
isHeartP . . . . . . . . . . . .	DWord	 00000012 _DATA	
isHeartS . . . . . . . . . . . .	DWord	 00000026 _DATA	
isSpadeP . . . . . . . . . . . .	DWord	 0000000E _DATA	
isSpadeS . . . . . . . . . . . .	DWord	 00000022 _DATA	
isStraightP  . . . . . . . . . .	DWord	 0000003A _DATA	
isStraightS  . . . . . . . . . .	DWord	 00000036 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
pfold  . . . . . . . . . . . . .	Byte	 00000492 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sfold  . . . . . . . . . . . . .	Byte	 000004A0 _DATA	
var1 . . . . . . . . . . . . . .	DWord	 00000121 _DATA	
var2 . . . . . . . . . . . . . .	DWord	 00000125 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
